"use client"

import { useState, useRef } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  Mail, 
  Smartphone, 
  QrCode, 
  Link as LinkIcon, 
  Copy, 
  Share2, 
  ArrowLeft,
  CheckCircle2,
  Send,
  Download,
  Printer,
  Instagram,
  Facebook,
  Twitter,
  Linkedin,
  X
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import { useRouter } from "next/navigation"
import { useAuth } from "@/contexts/auth-context"
import Image from "next/image"

export default function InviteCustomersPage() {
  const router = useRouter()
  const { user } = useAuth()
  const { toast } = useToast()
  const [inviteMethod, setInviteMethod] = useState<string>("qr")
  const [email, setEmail] = useState<string>("")
  const [phone, setPhone] = useState<string>("")
  const [emails, setEmails] = useState<string[]>([])
  const [phones, setPhones] = useState<string[]>([])
  const [isCopied, setIsCopied] = useState<boolean>(false)
  
  // Generate a unique invite link for this merchant
  const inviteLink = `https://tap.app/join/${user?.uid || 'demo'}`
  
  // For demo purposes, we'll use a placeholder QR code image
  const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(inviteLink)}`
  
  const handleCopyLink = () => {
    navigator.clipboard.writeText(inviteLink)
    setIsCopied(true)
    toast({
      title: "Link copied!",
      description: "The invite link has been copied to your clipboard.",
    })
    setTimeout(() => setIsCopied(false), 2000)
  }
  
  const handleAddEmail = () => {
    if (email && !emails.includes(email)) {
      setEmails([...emails, email])
      setEmail("")
    }
  }
  
  const handleAddPhone = () => {
    if (phone && !phones.includes(phone)) {
      setPhones([...phones, phone])
      setPhone("")
    }
  }
  
  const handleRemoveEmail = (emailToRemove: string) => {
    setEmails(emails.filter(e => e !== emailToRemove))
  }
  
  const handleRemovePhone = (phoneToRemove: string) => {
    setPhones(phones.filter(p => p !== phoneToRemove))
  }
  
  const handleSendInvites = () => {
    // In a real app, this would send the invites via email/SMS
    toast({
      title: "Invites sent!",
      description: `Sent ${emails.length} email invites and ${phones.length} SMS invites.`,
    })
    setEmails([])
    setPhones([])
  }
  
  const handleDownloadQR = () => {
    // Create a temporary link to download the QR code
    const link = document.createElement('a')
    link.href = qrCodeUrl
    link.download = 'loyalty-qr-code.png'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    toast({
      title: "QR Code downloaded!",
      description: "You can now print or share this QR code with your customers.",
    })
  }
  
  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold tracking-tight">Invite Customers</h1>
            <p className="text-sm text-muted-foreground mt-1">
              Grow your loyalty program by inviting customers to join
            </p>
          </div>
          
          <Button 
            variant="ghost" 
            className="h-9 gap-2 rounded-md"
            onClick={() => router.back()}
          >
            <ArrowLeft className="h-4 w-4" />
            Back to Customers
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <Card className="rounded-lg overflow-hidden">
            <CardHeader className="py-4">
              <CardTitle>Invite Methods</CardTitle>
              <CardDescription>
                Choose how you want to invite customers to your loyalty program
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              <Tabs defaultValue="qr" onValueChange={setInviteMethod}>
                <TabsList className="grid grid-cols-4 h-auto p-1 mb-6">
                  <TabsTrigger value="qr" className="flex flex-col items-center gap-1 py-3 px-4">
                    <QrCode className="h-5 w-5" />
                    <span className="text-xs">QR Code</span>
                  </TabsTrigger>
                  <TabsTrigger value="link" className="flex flex-col items-center gap-1 py-3 px-4">
                    <LinkIcon className="h-5 w-5" />
                    <span className="text-xs">Share Link</span>
                  </TabsTrigger>
                  <TabsTrigger value="email" className="flex flex-col items-center gap-1 py-3 px-4">
                    <Mail className="h-5 w-5" />
                    <span className="text-xs">Email</span>
                  </TabsTrigger>
                  <TabsTrigger value="sms" className="flex flex-col items-center gap-1 py-3 px-4">
                    <Smartphone className="h-5 w-5" />
                    <span className="text-xs">SMS</span>
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="qr" className="mt-0">
                  <div className="flex flex-col items-center">
                    <div className="bg-white p-6 rounded-lg shadow-sm border">
                      <img 
                        src={qrCodeUrl}
                        alt="QR Code for loyalty program"
                        width={200}
                        height={200}
                      />
                    </div>
                    <p className="text-sm text-center mt-4 mb-6 text-muted-foreground max-w-md">
                      Display this QR code in your store. Customers can scan it with their phone camera to join your loyalty program.
                    </p>
                    <div className="flex gap-3">
                      <Button 
                        variant="outline" 
                        className="h-9 gap-2 rounded-md"
                        onClick={handleDownloadQR}
                      >
                        <Download className="h-4 w-4" />
                        Download
                      </Button>
                      <Button 
                        variant="outline" 
                        className="h-9 gap-2 rounded-md"
                        onClick={() => window.print()}
                      >
                        <Printer className="h-4 w-4" />
                        Print
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="link" className="mt-0">
                  <div className="flex flex-col">
                    <p className="text-sm mb-4 text-muted-foreground">
                      Share this link with your customers via social media, your website, or in person.
                    </p>
                    <div className="flex items-center gap-2 mb-6">
                      <Input 
                        value={inviteLink}
                        readOnly
                        className="h-10 font-mono text-sm"
                      />
                      <Button 
                        variant="outline" 
                        className="h-10 gap-2 rounded-md flex-shrink-0"
                        onClick={handleCopyLink}
                      >
                        {isCopied ? (
                          <>
                            <CheckCircle2 className="h-4 w-4 text-green-600" />
                            Copied
                          </>
                        ) : (
                          <>
                            <Copy className="h-4 w-4" />
                            Copy
                          </>
                        )}
                      </Button>
                    </div>
                    
                    <div className="mt-4">
                      <h3 className="text-sm font-medium mb-3">Share on social media</h3>
                      <div className="flex gap-3">
                        <Button variant="outline" size="icon" className="h-10 w-10 rounded-full bg-[#1877F2]/10 text-[#1877F2] hover:bg-[#1877F2]/20 border-[#1877F2]/20">
                          <Facebook className="h-5 w-5" />
                        </Button>
                        <Button variant="outline" size="icon" className="h-10 w-10 rounded-full bg-[#1DA1F2]/10 text-[#1DA1F2] hover:bg-[#1DA1F2]/20 border-[#1DA1F2]/20">
                          <Twitter className="h-5 w-5" />
                        </Button>
                        <Button variant="outline" size="icon" className="h-10 w-10 rounded-full bg-[#E4405F]/10 text-[#E4405F] hover:bg-[#E4405F]/20 border-[#E4405F]/20">
                          <Instagram className="h-5 w-5" />
                        </Button>
                        <Button variant="outline" size="icon" className="h-10 w-10 rounded-full bg-[#0A66C2]/10 text-[#0A66C2] hover:bg-[#0A66C2]/20 border-[#0A66C2]/20">
                          <Linkedin className="h-5 w-5" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="email" className="mt-0">
                  <div className="flex flex-col">
                    <p className="text-sm mb-4 text-muted-foreground">
                      Send email invitations to your customers to join your loyalty program.
                    </p>
                    
                    <div className="flex items-center gap-2 mb-4">
                      <Input 
                        type="email"
                        placeholder="customer@example.com"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="h-10"
                      />
                      <Button 
                        variant="outline" 
                        className="h-10 gap-2 rounded-md flex-shrink-0"
                        onClick={handleAddEmail}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {emails.length > 0 && (
                      <div className="border rounded-md p-3 mb-4">
                        <h3 className="text-sm font-medium mb-2">Recipients ({emails.length})</h3>
                        <div className="flex flex-wrap gap-2">
                          {emails.map((e) => (
                            <div key={e} className="flex items-center gap-1 bg-muted px-2 py-1 rounded-md text-xs">
                              <span>{e}</span>
                              <button 
                                onClick={() => handleRemoveEmail(e)}
                                className="text-muted-foreground hover:text-foreground"
                              >
                                <X className="h-3 w-3" />
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    <Button 
                      className="h-9 gap-2 rounded-md mt-2 self-end"
                      disabled={emails.length === 0}
                      onClick={handleSendInvites}
                    >
                      <Send className="h-4 w-4" />
                      Send Invites
                    </Button>
                  </div>
                </TabsContent>
                
                <TabsContent value="sms" className="mt-0">
                  <div className="flex flex-col">
                    <p className="text-sm mb-4 text-muted-foreground">
                      Send SMS invitations to your customers to join your loyalty program.
                    </p>
                    
                    <div className="flex items-center gap-2 mb-4">
                      <Input 
                        type="tel"
                        placeholder="(555) 123-4567"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                        className="h-10"
                      />
                      <Button 
                        variant="outline" 
                        className="h-10 gap-2 rounded-md flex-shrink-0"
                        onClick={handleAddPhone}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {phones.length > 0 && (
                      <div className="border rounded-md p-3 mb-4">
                        <h3 className="text-sm font-medium mb-2">Recipients ({phones.length})</h3>
                        <div className="flex flex-wrap gap-2">
                          {phones.map((p) => (
                            <div key={p} className="flex items-center gap-1 bg-muted px-2 py-1 rounded-md text-xs">
                              <span>{p}</span>
                              <button 
                                onClick={() => handleRemovePhone(p)}
                                className="text-muted-foreground hover:text-foreground"
                              >
                                <X className="h-3 w-3" />
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    <Button 
                      className="h-9 gap-2 rounded-md mt-2 self-end"
                      disabled={phones.length === 0}
                      onClick={handleSendInvites}
                    >
                      <Send className="h-4 w-4" />
                      Send Invites
                    </Button>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>
        
        <div>
          <Card className="rounded-lg overflow-hidden">
            <CardHeader className="py-4">
              <CardTitle>Tips for Success</CardTitle>
              <CardDescription>
                Best practices for growing your loyalty program
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              <ul className="space-y-4">
                <li className="flex gap-3">
                  <div className="flex-shrink-0 h-6 w-6 rounded-full bg-green-100 flex items-center justify-center text-green-600">
                    <CheckCircle2 className="h-4 w-4" />
                  </div>
                  <div>
                    <h3 className="text-sm font-medium">Place QR codes at checkout</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Make it easy for customers to join while they're making a purchase.
                    </p>
                  </div>
                </li>
                <li className="flex gap-3">
                  <div className="flex-shrink-0 h-6 w-6 rounded-full bg-green-100 flex items-center justify-center text-green-600">
                    <CheckCircle2 className="h-4 w-4" />
                  </div>
                  <div>
                    <h3 className="text-sm font-medium">Offer a welcome bonus</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Give new members points or a discount on their first purchase.
                    </p>
                  </div>
                </li>
                <li className="flex gap-3">
                  <div className="flex-shrink-0 h-6 w-6 rounded-full bg-green-100 flex items-center justify-center text-green-600">
                    <CheckCircle2 className="h-4 w-4" />
                  </div>
                  <div>
                    <h3 className="text-sm font-medium">Train your staff</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Ensure your team can explain the benefits of joining your loyalty program.
                    </p>
                  </div>
                </li>
                <li className="flex gap-3">
                  <div className="flex-shrink-0 h-6 w-6 rounded-full bg-green-100 flex items-center justify-center text-green-600">
                    <CheckCircle2 className="h-4 w-4" />
                  </div>
                  <div>
                    <h3 className="text-sm font-medium">Promote on social media</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Share your loyalty program on your social channels to reach more customers.
                    </p>
                  </div>
                </li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
} "use client"

import { useEffect, useState } from "react"
import { useSearchParams } from "next/navigation"
import { doc, getDoc, collection, getDocs, query, orderBy, where } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { useAuth } from "@/contexts/auth-context"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  User, 
  Gift, 
  Receipt, 
  Clock, 
  CreditCard, 
  ArrowLeft, 
  Calendar, 
  ShoppingCart, 
  DollarSign, 
  Award,
  TrendingUp
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { formatDistanceToNow, format } from "date-fns"
import Link from "next/link"
import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { useRouter } from "next/navigation"

interface Transaction {
  actualcreatedAt: any
  amount: number
  appliedRule: string
  createdAt: any
  customerId: string
  day: string
  firstPurchase: boolean
  merchantId: string
  merchantName: string
  pointsBalance: number
  pointsEarned: number
  pointsmultiplier: number
  status: 'completed' | 'pending' | 'cancelled'
  type: 'purchase' | 'refund' | 'adjustment'
}

interface Redemption {
  customerId: string
  merchantId: string
  pointsUsed: number
  redemptionDate: any
  redemptionId: string
  rewardId: string
  rewardName: string
  status: 'successful' | 'pending' | 'failed'
}

const formatFirestoreDate = (timestamp: any) => {
  if (!timestamp) return 'N/A'
  
  try {
    // Handle Firestore Timestamp
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
    return formatDistanceToNow(date, { addSuffix: true })
  } catch (error) {
    console.error('Error formatting date:', error)
    return 'Invalid date'
  }
}

const formatDateTime = (timestamp: any) => {
  if (!timestamp) return 'N/A'
  
  try {
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
    return format(date, 'MMM d, yyyy h:mm a')
  } catch (error) {
    console.error('Error formatting date:', error)
    return 'Invalid date'
  }
}

export default function CustomerDetailPage() {
  const searchParams = useSearchParams()
  const customerId = searchParams.get('customerId')
  const { user } = useAuth()
  const [customer, setCustomer] = useState<any>(null)
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [redemptions, setRedemptions] = useState<Redemption[]>([])
  const [loading, setLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    async function fetchCustomerData() {
      if (!user?.uid || !customerId) return

      try {
        // Fetch customer data
        const customerRef = doc(db, `merchants/${user.uid}/customers/${customerId}`)
        const customerSnap = await getDoc(customerRef)
        
        if (customerSnap.exists()) {
          // Fetch profile data
          const profileRef = doc(db, 'customers', customerId as string)
          const profileSnap = await getDoc(profileRef)
          
          setCustomer({
            ...customerSnap.data(),
            customerId: customerSnap.id,
            profileData: profileSnap.exists() ? profileSnap.data() : undefined
          })

          // Fetch transactions from customer's collection and filter by merchantId
          const transactionsRef = collection(db, `customers/${customerId}/transactions`)
          const transactionsQuery = query(
            transactionsRef, 
            where('merchantId', '==', user.uid),
            orderBy('actualcreatedAt', 'desc')
          )
          const transactionsSnap = await getDocs(transactionsQuery)
          
          setTransactions(transactionsSnap.docs.map(doc => ({
            transactionId: doc.id,
            ...doc.data()
          })) as Transaction[])

          // Fetch redemptions from customer's collection and filter by merchantId
          const redemptionsRef = collection(db, `customers/${customerId}/redemptions`)
          const redemptionsQuery = query(
            redemptionsRef,
            where('merchantId', '==', user.uid),
            orderBy('redemptionDate', 'desc')
          )
          const redemptionsSnap = await getDocs(redemptionsQuery)
          
          setRedemptions(redemptionsSnap.docs.map(doc => ({
            redemptionId: doc.id,
            ...doc.data()
          })) as Redemption[])
        }
      } catch (error) {
        console.error('Error fetching customer data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchCustomerData()
  }, [user?.uid, customerId])

  if (loading) {
    return (
      <div className="p-8 flex justify-center items-center">
        <div className="flex flex-col items-center gap-2">
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
          <p className="text-sm text-muted-foreground">Loading customer details...</p>
        </div>
      </div>
    )
  }

  if (!customer) {
    return (
      <div className="p-8">
        <Card className="rounded-lg">
          <CardContent className="pt-6">
            <div className="text-center">
              <h3 className="text-lg font-medium">Customer not found</h3>
              <p className="text-sm text-muted-foreground mt-2">
                The customer you're looking for doesn't exist or you don't have permission to view it.
              </p>
              <Button asChild className="mt-4 rounded-md">
                <Link href="/customers">Back to Customers</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="p-6">
      <div className="max-w-[1200px] mx-auto space-y-6">
        <div className="flex items-center gap-2">
          <Link href="/customers">
            <Button variant="ghost" size="icon" className="h-9 w-9 rounded-md">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h1 className="text-2xl font-semibold tracking-tight">Customer Details</h1>
          <div className="ml-auto">
            <Button 
              className="rounded-md flex items-center gap-2 bg-[#007AFF] hover:bg-[#0062CC]"
              onClick={() => router.push(`/rewards/create?customerId=${customerId}&customerName=${encodeURIComponent(customer.fullName)}`)}
            >
              <Gift className="h-4 w-4" />
              Create Reward for {customer.fullName.split(' ')[0]}
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <Card className="lg:col-span-1 rounded-lg">
            <CardHeader className="pb-2">
              <CardTitle>Profile</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col items-center">
                <div className="h-24 w-24 rounded-full bg-[#007AFF]/10 flex items-center justify-center overflow-hidden mb-4">
                  {customer.profileData?.shareProfileWithMerchants && customer.profileData?.profilePictureUrl ? (
                    <img 
                      src={customer.profileData.profilePictureUrl} 
                      alt={customer.fullName}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <User className="h-12 w-12 text-[#007AFF]" />
                  )}
                </div>
                
                <h2 className="text-xl font-semibold">{customer.fullName}</h2>
                
                {customer.membershipTier && (
                  <Badge className="mt-1 rounded-md bg-[#007AFF]/10 text-[#007AFF] border-0">
                    {customer.membershipTier}
                  </Badge>
                )}
              </div>
              
              <div className="mt-6 pt-6 border-t space-y-4">
                <div className="flex items-center gap-3">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="text-sm font-medium">First Purchase</p>
                    <p className="text-sm text-muted-foreground">{formatDateTime(customer.firstTransactionDate)}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="text-sm font-medium">Last Visit</p>
                    <p className="text-sm text-muted-foreground">{formatDateTime(customer.lastTransactionDate)}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="text-sm font-medium">Customer Age</p>
                    <p className="text-sm text-muted-foreground">{customer.daysSinceFirstPurchase} days</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="lg:col-span-3 space-y-6">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Card className="rounded-lg">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center text-center">
                    <div className="h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center mb-2">
                      <Award className="h-6 w-6 text-blue-600" />
                    </div>
                    <p className="text-2xl font-bold">{customer.pointsBalance.toLocaleString()}</p>
                    <p className="text-sm text-muted-foreground">Points Balance</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="rounded-lg">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center text-center">
                    <div className="h-12 w-12 rounded-full bg-green-100 flex items-center justify-center mb-2">
                      <DollarSign className="h-6 w-6 text-green-600" />
                    </div>
                    <p className="text-2xl font-bold">${customer.totalLifetimeSpend}</p>
                    <p className="text-sm text-muted-foreground">Lifetime Spend</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="rounded-lg">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center text-center">
                    <div className="h-12 w-12 rounded-full bg-purple-100 flex items-center justify-center mb-2">
                      <ShoppingCart className="h-6 w-6 text-purple-600" />
                    </div>
                    <p className="text-2xl font-bold">{customer.lifetimeTransactionCount}</p>
                    <p className="text-sm text-muted-foreground">Total Visits</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="rounded-lg">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center text-center">
                    <div className="h-12 w-12 rounded-full bg-amber-100 flex items-center justify-center mb-2">
                      <Gift className="h-6 w-6 text-amber-600" />
                    </div>
                    <p className="text-2xl font-bold">{customer.redemptionCount || 0}</p>
                    <p className="text-sm text-muted-foreground">Rewards Redeemed</p>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <Card className="rounded-lg">
              <CardHeader className="pb-2">
                <CardTitle>Customer Insights</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                  <div>
                    <p className="text-sm text-muted-foreground">Days Since Last Visit</p>
                    <p className="text-lg font-medium">{customer.daysSinceLastVisit}</p>
                    <p className="text-xs text-muted-foreground mt-1">
                      {customer.daysSinceLastVisit <= 30 
                        ? "Active customer" 
                        : customer.daysSinceLastVisit <= 90 
                          ? "Engaged customer" 
                          : "At risk of churning"}
                    </p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-muted-foreground">Highest Transaction</p>
                    <p className="text-lg font-medium">${customer.highestTransactionAmount}</p>
                    <p className="text-xs text-muted-foreground mt-1">
                      {formatDateTime(customer.lastTransactionDate)}
                    </p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-muted-foreground">Average Order Value</p>
                    <p className="text-lg font-medium">
                      ${(customer.totalLifetimeSpend / Math.max(1, customer.lifetimeTransactionCount)).toFixed(2)}
                    </p>
                    <p className="text-xs text-muted-foreground mt-1">
                      Based on {customer.lifetimeTransactionCount} transactions
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <Card className="rounded-lg">
          <Tabs defaultValue="transactions" className="w-full">
            <TabsList className="w-full justify-start border-b rounded-none h-12 p-0 px-6">
              <TabsTrigger 
                value="transactions" 
                className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-[#007AFF] rounded-none h-12 flex items-center gap-2"
              >
                <ShoppingCart className="h-4 w-4" />
                Transactions
              </TabsTrigger>
              <TabsTrigger 
                value="redemptions"
                className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-[#007AFF] rounded-none h-12 flex items-center gap-2"
              >
                <Gift className="h-4 w-4" />
                Redemptions
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="transactions" className="p-6">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Date</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Points Earned</TableHead>
                    <TableHead>Points Balance</TableHead>
                    <TableHead>Rule</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {transactions.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center text-muted-foreground py-8">
                        No transactions found
                      </TableCell>
                    </TableRow>
                  ) : (
                    transactions.map((transaction) => (
                      <TableRow key={transaction.transactionId}>
                        <TableCell>
                          {formatDateTime(transaction.actualcreatedAt)}
                        </TableCell>
                        <TableCell>
                          <span className={cn(
                            "inline-block text-xs font-medium px-2 py-0.5 rounded-full",
                            transaction.type === 'purchase' && "bg-green-100 text-green-700",
                            transaction.type === 'refund' && "bg-red-100 text-red-700",
                            transaction.type === 'adjustment' && "bg-yellow-100 text-yellow-700"
                          )}>
                            {transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}
                          </span>
                        </TableCell>
                        <TableCell>${transaction.amount}</TableCell>
                        <TableCell>
                          <span className="text-green-600">+{transaction.pointsEarned}</span>
                        </TableCell>
                        <TableCell>{transaction.pointsBalance}</TableCell>
                        <TableCell>
                          <span className="text-xs text-muted-foreground">
                            {transaction.appliedRule}
                            {transaction.pointsmultiplier > 1 && ` (${transaction.pointsmultiplier}x)`}
                          </span>
                        </TableCell>
                        <TableCell>
                          <span className={cn(
                            "inline-block text-xs font-medium px-2 py-0.5 rounded-full",
                            transaction.status === 'completed' && "bg-green-100 text-green-700",
                            transaction.status === 'pending' && "bg-yellow-100 text-yellow-700",
                            transaction.status === 'cancelled' && "bg-red-100 text-red-700"
                          )}>
                            {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
                          </span>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TabsContent>

            <TabsContent value="redemptions" className="p-6">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Date</TableHead>
                    <TableHead>Reward</TableHead>
                    <TableHead>Points Used</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Reward ID</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {redemptions.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={5} className="text-center text-muted-foreground py-8">
                        No redemptions found
                      </TableCell>
                    </TableRow>
                  ) : (
                    redemptions.map((redemption) => (
                      <TableRow key={redemption.redemptionId}>
                        <TableCell>
                          {formatDateTime(redemption.redemptionDate)}
                        </TableCell>
                        <TableCell>{redemption.rewardName}</TableCell>
                        <TableCell>
                          <span className="text-red-600">-{redemption.pointsUsed}</span>
                        </TableCell>
                        <TableCell>
                          <span className={cn(
                            "inline-block text-xs font-medium px-2 py-0.5 rounded-full",
                            redemption.status === 'successful' && "bg-green-100 text-green-700",
                            redemption.status === 'pending' && "bg-yellow-100 text-yellow-700",
                            redemption.status === 'failed' && "bg-red-100 text-red-700"
                          )}>
                            {redemption.status.charAt(0).toUpperCase() + redemption.status.slice(1)}
                          </span>
                        </TableCell>
                        <TableCell>
                          <span className="text-xs font-mono text-muted-foreground">
                            {redemption.rewardId}
                          </span>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TabsContent>
          </Tabs>
        </Card>
      </div>
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { useParams } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  ArrowLeft, 
  User, 
  Mail, 
  Phone, 
  Calendar, 
  Award, 
  ShoppingCart, 
  Clock, 
  DollarSign,
  Gift,
  Zap,
  MoreVertical,
  Edit,
  Trash,
  Plus,
  Send
} from "lucide-react"
import { useCustomer } from "@/hooks/use-customer"
import { formatDistanceToNow, format } from 'date-fns'
import Link from "next/link"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"
import { cn } from "@/lib/utils"

export default function CustomerDetailsPage() {
  const { id } = useParams()
  const { customer, loading, error } = useCustomer(id as string)
  const [activeTab, setActiveTab] = useState("overview")

  if (loading) {
    return (
      <div className="p-8 flex justify-center items-center">
        <div className="flex flex-col items-center gap-2">
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
          <p className="text-sm text-muted-foreground">Loading customer details...</p>
        </div>
      </div>
    )
  }

  if (error || !customer) {
    return (
      <div className="p-8">
        <Card className="rounded-lg">
          <CardContent className="pt-6">
            <div className="text-center">
              <h3 className="text-lg font-medium">Customer not found</h3>
              <p className="text-sm text-muted-foreground mt-2">
                The customer you're looking for doesn't exist or you don't have permission to view it.
              </p>
              <Button asChild className="mt-4 rounded-md">
                <Link href="/customers">Back to Customers</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  const formatDate = (timestamp: any) => {
    if (!timestamp) return 'N/A'
    
    try {
      // Handle Firestore Timestamp
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
      return format(date, 'MMM d, yyyy')
    } catch (error) {
      console.error('Error formatting date:', error)
      return 'Invalid date'
    }
  }

  const formatTimeAgo = (timestamp: any) => {
    if (!timestamp) return 'N/A'
    
    try {
      // Handle Firestore Timestamp
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
      return formatDistanceToNow(date, { addSuffix: true })
    } catch (error) {
      console.error('Error formatting date:', error)
      return 'Invalid date'
    }
  }

  return (
    <div className="p-4">
      <div className="max-w-[1200px] mx-auto space-y-6">
        <div className="flex items-center gap-2">
          <Button 
            variant="ghost" 
            size="icon" 
            asChild
            className="rounded-md"
          >
            <Link href="/customers">
              <ArrowLeft className="h-4 w-4" />
            </Link>
          </Button>
          <h1 className="text-2xl font-semibold tracking-tight">Customer Details</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Customer Profile Card */}
          <Card className="lg:col-span-1 rounded-lg">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-start">
                <CardTitle>Profile</CardTitle>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="ghost" 
                      size="icon"
                      className="h-8 w-8 rounded-md"
                    >
                      <MoreVertical className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="rounded-md">
                    <DropdownMenuItem className="flex items-center">
                      <Edit className="mr-2 h-4 w-4" />
                      Edit Customer
                    </DropdownMenuItem>
                    <DropdownMenuItem className="flex items-center">
                      <Plus className="mr-2 h-4 w-4" />
                      Add Points
                    </DropdownMenuItem>
                    <DropdownMenuItem className="flex items-center">
                      <Send className="mr-2 h-4 w-4" />
                      Send Message
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem className="text-red-600 flex items-center">
                      <Trash className="mr-2 h-4 w-4" />
                      Delete Customer
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col items-center">
                <div className="h-24 w-24 rounded-md bg-[#007AFF]/10 flex items-center justify-center overflow-hidden mb-4">
                  {customer.profileData?.shareProfileWithMerchants && customer.profileData?.profilePictureUrl ? (
                    <img 
                      src={customer.profileData.profilePictureUrl} 
                      alt={customer.fullName}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <User className="h-12 w-12 text-[#007AFF]" />
                  )}
                </div>
                
                <h2 className="text-xl font-semibold">{customer.fullName}</h2>
                
                {customer.membershipTier && (
                  <Badge className="mt-1 rounded-md bg-[#007AFF]/10 text-[#007AFF] border-0">
                    {customer.membershipTier}
                  </Badge>
                )}
                
                <div className="w-full mt-6 space-y-4">
                  <div className="flex items-center gap-3">
                    <Mail className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{customer.email || 'No email provided'}</span>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <Phone className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{customer.phone || 'No phone provided'}</span>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <Calendar className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">
                      Joined {formatDate(customer.createdAt)}
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="mt-6 pt-6 border-t grid grid-cols-2 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-semibold">{customer.pointsBalance.toLocaleString()}</div>
                  <div className="text-xs text-muted-foreground mt-1">Points Balance</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-semibold">{customer.lifetimeTransactionCount}</div>
                  <div className="text-xs text-muted-foreground mt-1">Total Visits</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-semibold">${customer.totalLifetimeSpend}</div>
                  <div className="text-xs text-muted-foreground mt-1">Lifetime Spend</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-semibold">{customer.redemptionCount || 0}</div>
                  <div className="text-xs text-muted-foreground mt-1">Rewards Redeemed</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Customer Activity Tabs */}
          <Card className="lg:col-span-2 rounded-lg">
            <CardHeader className="pb-0">
              <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-4 h-10 rounded-md">
                  <TabsTrigger value="overview" className="rounded-md flex items-center gap-1.5">
                    <Zap className="h-4 w-4" />
                    Overview
                  </TabsTrigger>
                  <TabsTrigger value="transactions" className="rounded-md flex items-center gap-1.5">
                    <ShoppingCart className="h-4 w-4" />
                    Transactions
                  </TabsTrigger>
                  <TabsTrigger value="rewards" className="rounded-md flex items-center gap-1.5">
                    <Gift className="h-4 w-4" />
                    Rewards
                  </TabsTrigger>
                  <TabsTrigger value="notes" className="rounded-md flex items-center gap-1.5">
                    <Edit className="h-4 w-4" />
                    Notes
                  </TabsTrigger>
                </TabsList>

                <CardContent className="pt-6">
                  <TabsContent value="overview" className="mt-0 space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Card className="rounded-lg">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium">Recent Activity</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-4">
                            {customer.recentTransactions && customer.recentTransactions.length > 0 ? (
                              customer.recentTransactions.slice(0, 3).map((transaction, index) => (
                                <div key={index} className="flex items-start gap-3">
                                  <div className="h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0">
                                    <ShoppingCart className="h-4 w-4 text-primary" />
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <p className="text-sm font-medium">{transaction.type || 'Purchase'}</p>
                                    <p className="text-xs text-muted-foreground">
                                      {formatTimeAgo(transaction.timestamp)} • ${transaction.amount}
                                    </p>
                                  </div>
                                </div>
                              ))
                            ) : (
                              <p className="text-sm text-muted-foreground">No recent transactions</p>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                      
                      <Card className="rounded-lg">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium">Recent Rewards</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-4">
                            {customer.recentRedemptions && customer.recentRedemptions.length > 0 ? (
                              customer.recentRedemptions.slice(0, 3).map((redemption, index) => (
                                <div key={index} className="flex items-start gap-3">
                                  <div className="h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0">
                                    <Gift className="h-4 w-4 text-primary" />
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <p className="text-sm font-medium">{redemption.rewardName || 'Reward Redeemed'}</p>
                                    <p className="text-xs text-muted-foreground">
                                      {formatTimeAgo(redemption.timestamp)} • {redemption.pointsCost || 0} points
                                    </p>
                                  </div>
                                </div>
                              ))
                            ) : (
                              <p className="text-sm text-muted-foreground">No recent redemptions</p>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                    
                    <Card className="rounded-lg">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium">Customer Stats</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          <div className="space-y-1">
                            <p className="text-xs text-muted-foreground">Average Order Value</p>
                            <p className="text-lg font-medium">
                              ${customer.averageOrderValue?.toFixed(2) || '0.00'}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-xs text-muted-foreground">Purchase Frequency</p>
                            <p className="text-lg font-medium">
                              {customer.purchaseFrequencyDays ? 
                                `Every ${customer.purchaseFrequencyDays} days` : 
                                'N/A'}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-xs text-muted-foreground">Days Since Last Visit</p>
                            <p className="text-lg font-medium">
                              {customer.daysSinceLastVisit || 'N/A'}
                            </p>
                          </div>
                          
                          <div className="space-y-1">
                            <p className="text-xs text-muted-foreground">Favorite Product</p>
                            <p className="text-lg font-medium">
                              {customer.favoriteProduct || 'None'}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="transactions" className="mt-0">
                    <div className="space-y-4">
                      {customer.transactions && customer.transactions.length > 0 ? (
                        customer.transactions.map((transaction, index) => (
                          <div key={index} className="flex items-start gap-4 p-4 border rounded-md">
                            <div className="h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0">
                              <ShoppingCart className="h-5 w-5 text-primary" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex justify-between items-start">
                                <div>
                                  <p className="font-medium">{transaction.type || 'Purchase'}</p>
                                  <p className="text-sm text-muted-foreground">
                                    {formatDate(transaction.timestamp)} at {transaction.location || 'Unknown location'}
                                  </p>
                                </div>
                                <div className="text-right">
                                  <p className="font-medium">${transaction.amount}</p>
                                  <p className="text-sm text-muted-foreground">
                                    {transaction.pointsEarned ? `+${transaction.pointsEarned} points` : ''}
                                  </p>
                                </div>
                              </div>
                              {transaction.items && (
                                <div className="mt-2 pt-2 border-t">
                                  <p className="text-sm font-medium mb-1">Items:</p>
                                  <div className="space-y-1">
                                    {transaction.items.map((item, idx) => (
                                      <div key={idx} className="text-sm flex justify-between">
                                        <span>{item.quantity}x {item.name}</span>
                                        <span>${item.price}</span>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8">
                          <ShoppingCart className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                          <h3 className="text-lg font-medium">No transactions yet</h3>
                          <p className="text-sm text-muted-foreground mt-1">
                            This customer hasn't made any purchases yet.
                          </p>
                        </div>
                      )}
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="rewards" className="mt-0">
                    <div className="space-y-4">
                      {customer.redemptions && customer.redemptions.length > 0 ? (
                        customer.redemptions.map((redemption, index) => (
                          <div key={index} className="flex items-start gap-4 p-4 border rounded-md">
                            <div className="h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0">
                              <Gift className="h-5 w-5 text-primary" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex justify-between items-start">
                                <div>
                                  <p className="font-medium">{redemption.rewardName || 'Reward Redeemed'}</p>
                                  <p className="text-sm text-muted-foreground">
                                    {formatDate(redemption.timestamp)} at {redemption.location || 'Unknown location'}
                                  </p>
                                </div>
                                <div className="text-right">
                                  <p className="font-medium">{redemption.pointsCost || 0} points</p>
                                  <Badge variant="outline" className="rounded-md">
                                    {redemption.status || 'Redeemed'}
                                  </Badge>
                                </div>
                              </div>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8">
                          <Gift className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                          <h3 className="text-lg font-medium">No rewards redeemed</h3>
                          <p className="text-sm text-muted-foreground mt-1">
                            This customer hasn't redeemed any rewards yet.
                          </p>
                        </div>
                      )}
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="notes" className="mt-0">
                    <div className="space-y-4">
                      {customer.notes && customer.notes.length > 0 ? (
                        customer.notes.map((note, index) => (
                          <div key={index} className="p-4 border rounded-md">
                            <div className="flex justify-between items-start mb-2">
                              <p className="font-medium">{note.title || 'Note'}</p>
                              <p className="text-xs text-muted-foreground">
                                {formatDate(note.timestamp)}
                              </p>
                            </div>
                            <p className="text-sm">{note.content}</p>
                            {note.author && (
                              <p className="text-xs text-muted-foreground mt-2">
                                Added by {note.author}
                              </p>
                            )}
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8">
                          <div className="h-12 w-12 text-muted-foreground mx-auto mb-4">📝</div>
                          <h3 className="text-lg font-medium">No notes yet</h3>
                          <p className="text-sm text-muted-foreground mt-1">
                            Add notes about this customer to keep track of important information.
                          </p>
                          <Button className="mt-4 rounded-md">
                            <Plus className="h-4 w-4 mr-2" />
                            Add Note
                          </Button>
                        </div>
                      )}
                    </div>
                  </TabsContent>
                </CardContent>
              </Tabs>
            </CardHeader>
          </Card>
        </div>
      </div>
    </div>
  )
} "use client"

import { useState, useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
} from "@/components/ui/dropdown-menu"
import { 
  Search, 
  Filter, 
  MoreHorizontal, 
  User, 
  ChevronUp, 
  ChevronDown,
  ArrowUpDown,
  AlignStartHorizontal,
  AlignEndHorizontal,
  Clock,
  DollarSign,
  ShoppingCart,
  Award,
  Users,
  UserCheck,
  UserMinus,
  UserX,
  UserPlus,
  BadgeCheck,
  Crown,
  X,
  Plus,
  Eye,
  Edit,
  Trash
} from "lucide-react"
import { useCustomers } from "@/hooks/use-customers"
import { formatDistanceToNow } from 'date-fns'
import { cn } from "@/lib/utils"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { SortField, SortDirection, CustomerCohort } from "@/lib/types"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"

export default function CustomersPage() {
  const router = useRouter()
  const { customers, loading } = useCustomers()
  const [search, setSearch] = useState("")
  const [sortField, setSortField] = useState<SortField>('lastTransactionDate')
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc')
  const [cohort, setCohort] = useState<CustomerCohort>('all')

  // Filter and sort customers
  const filteredCustomers = useMemo(() => {
    let result = [...customers]

    // Search filter
    if (search) {
      const searchLower = search.toLowerCase()
      result = result.filter(customer => 
        customer.fullName.toLowerCase().includes(searchLower)
      )
    }

    // Cohort filter
    switch (cohort) {
      case 'active':
        result = result.filter(c => c.daysSinceLastVisit <= 30)
        break
      case 'engaged':
        result = result.filter(c => c.daysSinceLastVisit <= 90)
        break
      case 'at-risk':
        result = result.filter(c => 
          c.daysSinceLastVisit > 90 && c.daysSinceLastVisit <= 180
        )
        break
      case 'dormant':
        result = result.filter(c => c.daysSinceLastVisit > 180)
        break
      case 'new':
        result = result.filter(c => c.daysSinceFirstPurchase <= 30)
        break
      case 'loyal':
        result = result.filter(c => c.lifetimeTransactionCount >= 10)
        break
      case 'vip':
        // Get top 10% by spend
        const sortedBySpend = [...customers].sort((a, b) => 
          b.totalLifetimeSpend - a.totalLifetimeSpend
        )
        const topCount = Math.max(1, Math.ceil(customers.length * 0.1))
        const threshold = sortedBySpend[topCount - 1]?.totalLifetimeSpend
        result = result.filter(c => c.totalLifetimeSpend >= threshold)
        break
    }

    // Sort
    result.sort((a, b) => {
      let comparison = 0
      switch (sortField) {
        case 'fullName':
          comparison = a.fullName.localeCompare(b.fullName)
          break
        case 'lastTransactionDate':
          comparison = b.lastTransactionDate - a.lastTransactionDate
          break
        case 'totalLifetimeSpend':
          comparison = b.totalLifetimeSpend - a.totalLifetimeSpend
          break
        case 'redemptionCount':
          comparison = (b.redemptionCount || 0) - (a.redemptionCount || 0)
          break
        case 'pointsBalance':
          comparison = b.pointsBalance - a.pointsBalance
          break
        case 'lifetimeTransactionCount':
          comparison = b.lifetimeTransactionCount - a.lifetimeTransactionCount
          break
      }
      return sortDirection === 'desc' ? comparison : -comparison
    })

    return result
  }, [customers, search, sortField, sortDirection, cohort])

  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('desc')
    }
  }

  const SortButton = ({ field, children }: { field: SortField, children: React.ReactNode }) => (
    <button
      onClick={() => handleSort(field)}
      className="flex items-center gap-1 hover:text-foreground"
    >
      {children}
      {sortField === field && (
        sortDirection === 'desc' ? 
          <ChevronDown className="h-4 w-4" /> : 
          <ChevronUp className="h-4 w-4" />
      )}
    </button>
  )

  const formatDate = (timestamp: any) => {
    if (!timestamp) return 'N/A'
    
    try {
      // Handle Firestore Timestamp
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
      return formatDistanceToNow(date, { addSuffix: true })
    } catch (error) {
      console.error('Error formatting date:', error)
      return 'Invalid date'
    }
  }

  // First, add a function to check if any filters are active
  const hasActiveFilters = () => {
    return sortField !== 'lastTransactionDate' || 
           sortDirection !== 'desc' || 
           cohort !== 'all' ||
           search.length > 0
  }

  // Get cohort badge color
  const getCohortBadge = (customer: any) => {
    if (customer.daysSinceLastVisit <= 30) {
      return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 rounded-md">Active</Badge>
    } else if (customer.daysSinceLastVisit <= 90) {
      return <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200 rounded-md">Engaged</Badge>
    } else if (customer.daysSinceLastVisit <= 180) {
      return <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200 rounded-md">At Risk</Badge>
    } else {
      return <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200 rounded-md">Dormant</Badge>
    }
  }

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <div>
          <PageHeader 
            title="Customers" 
          >
            <Button 
              className="h-8 gap-2 rounded-md"
              onClick={() => router.push('/customers/invite')}
            >
              <Users className="h-4 w-4" />
              Invite Customers
            </Button>
          </PageHeader>
          
          <Tabs defaultValue="all" onValueChange={(value) => setCohort(value as CustomerCohort)}>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
              <TabsList className="h-9 rounded-md">
                <TabsTrigger value="all" className="flex items-center gap-1.5">
                  <Users className="h-4 w-4" />
                  All Customers
                </TabsTrigger>
                <TabsTrigger value="active" className="flex items-center gap-1.5">
                  <UserCheck className="h-4 w-4" />
                  Active
                </TabsTrigger>
                <TabsTrigger value="at-risk" className="flex items-center gap-1.5">
                  <UserMinus className="h-4 w-4" />
                  At Risk
                </TabsTrigger>
                <TabsTrigger value="dormant" className="flex items-center gap-1.5">
                  <UserX className="h-4 w-4" />
                  Dormant
                </TabsTrigger>
              </TabsList>
              
              <div className="flex items-center gap-2">
                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input 
                    type="search" 
                    placeholder="Search customers..." 
                    className="pl-9 h-9 w-[250px] rounded-md"
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                  />
                </div>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="h-9 gap-2 rounded-md">
                      <ArrowUpDown className="h-4 w-4" />
                      Sort
                      {sortField !== 'lastTransactionDate' && (
                        <span className="ml-2 text-xs text-muted-foreground">
                          ({sortField.replace(/([A-Z])/g, ' $1').toLowerCase()})
                        </span>
                      )}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56 rounded-md">
                    <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuRadioGroup 
                      value={`${sortField}-${sortDirection}`}
                      onValueChange={(value) => {
                        const [field, direction] = value.split('-')
                        setSortField(field as SortField)
                        setSortDirection(direction as SortDirection)
                      }}
                    >
                      <DropdownMenuRadioItem value="fullName-asc" className="flex items-center">
                        <AlignStartHorizontal className="mr-2 h-4 w-4" />
                        Name (A to Z)
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="fullName-desc" className="flex items-center">
                        <AlignEndHorizontal className="mr-2 h-4 w-4" />
                        Name (Z to A)
                      </DropdownMenuRadioItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuRadioItem value="lastTransactionDate-desc" className="flex items-center">
                        <Clock className="mr-2 h-4 w-4" />
                        Most Recent Visit
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="lastTransactionDate-asc" className="flex items-center">
                        <Clock className="mr-2 h-4 w-4" />
                        Oldest Visit
                      </DropdownMenuRadioItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuRadioItem value="totalLifetimeSpend-desc" className="flex items-center">
                        <DollarSign className="mr-2 h-4 w-4" />
                        Highest Spend
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="totalLifetimeSpend-asc" className="flex items-center">
                        <DollarSign className="mr-2 h-4 w-4" />
                        Lowest Spend
                      </DropdownMenuRadioItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuRadioItem value="lifetimeTransactionCount-desc" className="flex items-center">
                        <ShoppingCart className="mr-2 h-4 w-4" />
                        Most Transactions
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="lifetimeTransactionCount-asc" className="flex items-center">
                        <ShoppingCart className="mr-2 h-4 w-4" />
                        Least Transactions
                      </DropdownMenuRadioItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuRadioItem value="pointsBalance-desc" className="flex items-center">
                        <Award className="mr-2 h-4 w-4" />
                        Highest Points
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="pointsBalance-asc" className="flex items-center">
                        <Award className="mr-2 h-4 w-4" />
                        Lowest Points
                      </DropdownMenuRadioItem>
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="h-9 gap-2 rounded-md">
                      <Filter className="h-4 w-4" />
                      Filter
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56 rounded-md">
                    <DropdownMenuLabel>Customer Cohorts</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuRadioGroup value={cohort} onValueChange={(v) => setCohort(v as CustomerCohort)}>
                      <DropdownMenuRadioItem value="all" className="flex items-center">
                        <Users className="mr-2 h-4 w-4" />
                        All Customers
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="active" className="flex items-center">
                        <UserCheck className="mr-2 h-4 w-4" />
                        Active (30d)
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="engaged" className="flex items-center">
                        <BadgeCheck className="mr-2 h-4 w-4" />
                        Engaged (90d)
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="at-risk" className="flex items-center">
                        <UserMinus className="mr-2 h-4 w-4" />
                        At Risk (90-180d)
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="dormant" className="flex items-center">
                        <UserX className="mr-2 h-4 w-4" />
                        Dormant (180d+)
                      </DropdownMenuRadioItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuRadioItem value="new" className="flex items-center">
                        <UserPlus className="mr-2 h-4 w-4" />
                        New Customers
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="loyal" className="flex items-center">
                        <Award className="mr-2 h-4 w-4" />
                        Loyal (10+ visits)
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="vip" className="flex items-center">
                        <Crown className="mr-2 h-4 w-4" />
                        VIP (Top 10%)
                      </DropdownMenuRadioItem>
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
                
                {hasActiveFilters() && (
                  <Button 
                    variant="ghost" 
                    className="h-9 gap-2 rounded-md px-3 text-muted-foreground hover:text-foreground"
                    onClick={() => {
                      setSortField('lastTransactionDate')
                      setSortDirection('desc')
                      setCohort('all')
                      setSearch('')
                    }}
                  >
                    <X className="h-4 w-4" />
                    Clear
                  </Button>
                )}
              </div>
            </div>
            
            {["all", "active", "at-risk", "dormant", "new", "loyal", "vip"].map((category) => (
              <TabsContent key={category} value={category} className="mt-0">
                <Card className="rounded-lg overflow-hidden">
                  <CardHeader className="py-4">
                    <CardTitle>
                      {category === "all" ? "All Customers" : 
                       category === "active" ? "Active Customers" : 
                       category === "at-risk" ? "At-Risk Customers" :
                       category === "dormant" ? "Dormant Customers" :
                       category === "new" ? "New Customers" :
                       category === "loyal" ? "Loyal Customers" :
                       "VIP Customers"}
                    </CardTitle>
                    <CardDescription>
                      {category === "all" ? "View and manage all your customers" : 
                       category === "active" ? "Customers who visited in the last 30 days" : 
                       category === "at-risk" ? "Customers who haven't visited in 90-180 days" :
                       category === "dormant" ? "Customers who haven't visited in over 180 days" :
                       category === "new" ? "Customers who joined in the last 30 days" :
                       category === "loyal" ? "Customers with 10+ transactions" :
                       "Your top 10% of customers by spend"}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>
                            <SortButton field="fullName">Customer</SortButton>
                          </TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>
                            <SortButton field="pointsBalance">Points</SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="lifetimeTransactionCount">Transactions</SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="totalLifetimeSpend">Lifetime Spend</SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="lastTransactionDate">Last Visit</SortButton>
                          </TableHead>
                          <TableHead></TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {loading ? (
                          <TableRow>
                            <TableCell colSpan={7} className="h-24 text-center">
                              <div className="flex justify-center">
                                <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                              </div>
                            </TableCell>
                          </TableRow>
                        ) : filteredCustomers.length === 0 ? (
                          <TableRow>
                            <TableCell colSpan={7} className="h-24 text-center">
                              <div className="flex flex-col items-center justify-center">
                                <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                                  <Users className="h-6 w-6 text-muted-foreground" />
                                </div>
                                <h3 className="mt-4 text-lg font-medium">
                                  No customers found
                                </h3>
                                <p className="text-sm text-muted-foreground mt-1">
                                  {search ? "Try adjusting your search query" : 
                                   `No ${category === "all" ? "" : category + " "}customers available`}
                                </p>
                                {!search && (
                                  <Button 
                                    className="mt-4 h-9 gap-2 rounded-md"
                                    onClick={() => router.push('/customers/invite')}
                                  >
                                    <Users className="h-4 w-4" />
                                    Invite Customers
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                          </TableRow>
                        ) : (
                          filteredCustomers.map((customer) => (
                            <TableRow 
                              key={customer.customerId} 
                              className="hover:bg-muted/50 cursor-pointer"
                              onClick={() => router.push(`/customers/id?customerId=${customer.customerId}`)}
                            >
                              <TableCell>
                                <div className="flex items-center gap-3">
                                  <div className="h-10 w-10 rounded-md bg-[#007AFF]/10 flex items-center justify-center flex-shrink-0 overflow-hidden">
                                    {customer.profileData?.shareProfileWithMerchants && customer.profileData?.profilePictureUrl ? (
                                      <img 
                                        src={customer.profileData.profilePictureUrl} 
                                        alt={customer.fullName}
                                        className="w-full h-full object-cover"
                                      />
                                    ) : (
                                      <User className="h-5 w-5 text-[#007AFF]" />
                                    )}
                                  </div>
                                  <div>
                                    <div className="font-medium">{customer.fullName}</div>
                                    {customer.membershipTier && (
                                      <div className="text-xs text-muted-foreground">
                                        {customer.membershipTier}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </TableCell>
                              <TableCell>
                                {getCohortBadge(customer)}
                              </TableCell>
                              <TableCell>
                                <div className="flex items-center gap-1">
                                  <Award className="h-4 w-4 text-blue-600" />
                                  <span>{customer.pointsBalance.toLocaleString()}</span>
                                </div>
                              </TableCell>
                              <TableCell>
                                <div className="flex items-center gap-1">
                                  <ShoppingCart className="h-4 w-4 text-muted-foreground" />
                                  <span>{customer.lifetimeTransactionCount}</span>
                                </div>
                              </TableCell>
                              <TableCell>
                                <div className="flex items-center gap-1">
                                  <DollarSign className="h-4 w-4 text-green-600" />
                                  <span>${customer.totalLifetimeSpend}</span>
                                </div>
                              </TableCell>
                              <TableCell className="text-muted-foreground">
                                {formatDate(customer.lastTransactionDate)}
                              </TableCell>
                              <TableCell>
                                <div className="flex justify-end">
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" className="h-8 w-8 p-0 rounded-md">
                                        <MoreHorizontal className="h-4 w-4" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end" className="rounded-md">
                                      <DropdownMenuItem onClick={(e) => {
                                        e.stopPropagation();
                                        router.push(`/customers/id?customerId=${customer.customerId}`);
                                      }}>
                                        <Eye className="h-4 w-4 mr-2" />
                                        View Details
                                      </DropdownMenuItem>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem 
                                        className="text-red-600"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          // Handle delete
                                        }}
                                      >
                                        <Trash className="h-4 w-4 mr-2" />
                                        Delete Customer
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </div>
                              </TableCell>
                            </TableRow>
                          ))
                        )}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </TabsContent>
            ))}
          </Tabs>
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardFooter, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import Link from "next/link"
import { useState, useEffect, useRef } from "react"
import { 
  Sparkles, 
  ArrowRight, 
  CheckCircle, 
  Building2, 
  Target, 
  LineChart, 
  Zap, 
  Users, 
  MessageSquare, 
  BarChart4, 
  Brain,
  AlertCircle,
  Play,
  ChevronRight,
  Settings,
  FilePlus,
  FileCheck,
  Rocket,
  Check,
  UserCheck,
  ShoppingBag,
  TrendingUp,
  Award,
  Calendar,
  Gift,
  Clock,
  PowerOff
} from "lucide-react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, getDoc, deleteDoc } from "firebase/firestore"

// Add the gradient and animation styles
const pageStyles = `
  .gradient-text {
    background: linear-gradient(90deg, #3D8BFF 0%, #FF8A00 100%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-weight: 700;
  }
  
  .gradient-bg {
    background: linear-gradient(135deg, #3D8BFF 0%, #FF8A00 100%);
  }
  
  .feature-card {
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 122, 255, 0.1);
    background-color: #f8f9fa;
  }
  
  .feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 20px rgba(0, 122, 255, 0.1);
    border-color: rgba(0, 122, 255, 0.3);
  }
  
  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(0, 122, 255, 0.4); }
    70% { box-shadow: 0 0 0 10px rgba(0, 122, 255, 0); }
    100% { box-shadow: 0 0 0 0 rgba(0, 122, 255, 0); }
  }
  
  .pulse-button {
    animation: pulse 2s infinite;
    border-radius: 0.75rem;
  }
  
  .step-card {
    transition: all 0.3s ease;
  }
  
  .step-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  .card-hover-effect:hover .icon-container {
    background-color: #007AFF;
    color: white;
  }
  
  /* Workflow animation styles */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  .workflow-step {
    opacity: 0;
    transition: all 0.5s ease-in-out;
  }
  
  .workflow-step.active {
    opacity: 1;
  }
  
  .workflow-step.complete .step-circle {
    background-color: #3D8BFF;
  }
  
  .workflow-step.processing .step-circle {
    background-color: #3D8BFF;
  }
  
  .workflow-step.complete .step-line,
  .workflow-step.processing .step-line {
    background-color: #3D8BFF;
  }
  
  .workflow-step.complete .step-box,
  .workflow-step.processing .step-box {
    background-color: rgba(61, 139, 255, 0.1);
    border-color: rgba(61, 139, 255, 0.3);
  }
  
  .workflow-spinner {
    animation: spin 1s linear infinite;
  }
  
  .workflow-container {
    position: relative;
    overflow: hidden;
    border-radius: 1rem;
    transition: all 0.3s ease;
  }
  
  .workflow-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
  }
  
  .glow-effect {
    position: absolute;
    border-radius: 30%;
    filter: blur(20px);
    opacity: 0.4;
    z-index: 0;
  }
  
  .blue-glow {
    background: rgba(61, 139, 255, 0.4);
    width: 150px;
    height: 150px;
    top: -50px;
    left: -50px;
  }
  
  .orange-glow {
    background: rgba(255, 138, 0, 0.4);
    width: 150px;
    height: 150px;
    bottom: -50px;
    right: -50px;
  }
  
  /* Intersection Observer Helper */
  .fade-in-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
  
  .fade-in-section.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
`

// Inline style for gradient text as a fallback
const gradientTextStyle = {
  background: "linear-gradient(90deg, #3D8BFF 0%, #FF8A00 100%)",
  WebkitBackgroundClip: "text",
  backgroundClip: "text",
  color: "transparent",
  fontWeight: 700,
};

// Feature data for the cards
const features = [
  {
    title: "Brand Analysis",
    description: "Analyzes your colors, tone of voice, and brand identity to create perfectly on-brand campaigns.",
    icon: Building2,
    color: "bg-blue-50"
  },
  {
    title: "Strategic Objectives",
    description: "Aligns reward strategies with your business goals—whether boosting AOV or increasing loyalty.",
    icon: Target,
    color: "bg-orange-50"
  },
  {
    title: "Smart Pricing",
    description: "Creates margin-friendly offers by analyzing your product catalog and pricing structure.",
    icon: LineChart,
    color: "bg-green-50"
  },
  {
    title: "Financial Protection",
    description: "Sets guardrails to keep promotions profitable while maximizing customer engagement.",
    icon: Zap,
    color: "bg-purple-50"
  },
  {
    title: "Customer Insights",
    description: "Segments your audience into cohorts so every customer receives the most relevant reward.",
    icon: Users,
    color: "bg-red-50"
  },
  {
    title: "Intelligent Messaging",
    description: "Generates messages that match your brand voice and resonate with each customer segment.",
    icon: MessageSquare,
    color: "bg-teal-50"
  },
  {
    title: "Automated Optimization",
    description: "Continuously learns from redemption data to refine rewards for maximum ROI.",
    icon: BarChart4,
    color: "bg-indigo-50"
  },
  {
    title: "AI-Powered Insights",
    description: "Leverages machine learning to uncover patterns and suggest new loyalty strategies.",
    icon: Brain,
    color: "bg-amber-50"
  }
]

// Steps for setup
const setupSteps = [
  {
    title: "Brand Identity Setup",
    description: "Configure your business colors, tone of voice, and operating hours so Tap Agent can create perfectly on-brand rewards.",
    icon: FilePlus,
    time: "2-3 minutes"
  },
  {
    title: "Objectives & Goals",
    description: "Define your business and customer objectives to ensure every reward aligns with your strategic goals.",
    icon: Target,
    time: "3-4 minutes"
  },
  {
    title: "Product & Pricing Data",
    description: "Connect your products and pricing data to create offers that protect your margins while maximizing appeal.",
    icon: LineChart,
    time: "2-3 minutes"
  },
  {
    title: "Customer Segments",
    description: "Set up customer cohorts to ensure each segment receives the most relevant and effective rewards.",
    icon: Users,
    time: "2-3 minutes"
  },
  {
    title: "Activate Your Agent",
    description: "Review and activate your Tap Agent to start creating personalized rewards automatically.",
    icon: Rocket,
    time: "1 minute"
  }
]

// Workflow steps for animation
const workflowSteps = [
  {
    title: "Tap Agent Thinking",
    description: "AI analysis begins by processing your business data and customer behavior",
    delay: 0
  },
  {
    title: "Identify Customer Segments",
    description: "Groups customers into cohorts based on purchase history and preferences",
    delay: 2000
  },
  {
    title: "Generate Reward Options",
    description: "Creates personalized reward recommendations for each customer segment",
    delay: 4000
  },
  {
    title: "Design Custom Messaging",
    description: "Crafts on-brand communications that resonate with each segment",
    delay: 6000
  },
  {
    title: "Optimize & Deploy",
    description: "Finalizes rewards and schedules them for delivery to customers",
    delay: 8000
  }
]

// Add custom styles for reduced border radius
const customStyles = `
  ${pageStyles}
  
  .reduced-radius {
    border-radius: 0.375rem !important;
  }
  
  .reduced-radius-sm {
    border-radius: 0.25rem !important;
  }
`

export default function TapAgentIntroPage() {
  const { user } = useAuth()
  const [hoveredFeature, setHoveredFeature] = useState<number | null>(null);
  const [activeTab, setActiveTab] = useState("overview");
  const [activeWorkflowStep, setActiveWorkflowStep] = useState(0);
  const [completedWorkflowSteps, setCompletedWorkflowSteps] = useState<number[]>([]);
  const [processingStep, setProcessingStep] = useState<number | null>(null);
  const [isWorkflowVisible, setIsWorkflowVisible] = useState(false);
  const workflowRef = useRef<HTMLDivElement>(null);
  const animationStartedRef = useRef<boolean>(false);
  const [agentConfigured, setAgentConfigured] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(true);
  const [disabling, setDisabling] = useState<boolean>(false);
  const [lastActiveDate, setLastActiveDate] = useState<string>("Today, 08:45 AM");
  const [customerStats, setCustomerStats] = useState({
    activeCustomers: 0,
    newCustomers: 0,
    totalRedemptions: 0,
    engagementRate: 0
  });
  
  useEffect(() => {
    async function checkAgentConfiguration() {
      if (!user?.uid) {
        setLoading(false);
        return;
      }
      
      try {
        const agentDocRef = doc(db, 'agents', user.uid);
        const agentDoc = await getDoc(agentDocRef);
        
        if (agentDoc.exists()) {
          setAgentConfigured(true);
          
          // Get last active timestamp from the document or generate a random recent time
          const data = agentDoc.data();
          if (data.lastActive) {
            // Format the timestamp if it exists
            const lastActive = new Date(data.lastActive.toDate());
            setLastActiveDate(formatLastActive(lastActive));
          } else {
            // Generate a random recent time
            const randomHours = Math.floor(Math.random() * 24);
            const randomMinutes = Math.floor(Math.random() * 60);
            const lastActive = new Date();
            lastActive.setHours(lastActive.getHours() - randomHours);
            lastActive.setMinutes(lastActive.getMinutes() - randomMinutes);
            setLastActiveDate(formatLastActive(lastActive));
          }
          
          // Fetch some basic stats for the dashboard
          // In a real implementation, you would fetch actual data
          setCustomerStats({
            activeCustomers: Math.floor(Math.random() * 500) + 100,
            newCustomers: Math.floor(Math.random() * 50) + 10,
            totalRedemptions: Math.floor(Math.random() * 1000) + 200,
            engagementRate: Math.floor(Math.random() * 30) + 40
          });
        } else {
          setAgentConfigured(false);
        }
      } catch (error) {
        console.error("Error checking agent configuration:", error);
        setAgentConfigured(false);
      } finally {
        setLoading(false);
      }
    }
    
    checkAgentConfiguration();
  }, [user]);
  
  // Format the last active date in a human-readable way
  const formatLastActive = (date: Date): string => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      // Today
      return `Today, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    } else if (diffDays === 1) {
      // Yesterday
      return `Yesterday, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    } else if (diffDays < 7) {
      // Within a week
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      return `${days[date.getDay()]}, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    } else {
      // More than a week ago
      return date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + 
             `, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
  };
  
  // Handle disabling the agent
  const handleDisableAgent = async () => {
    if (!user?.uid || !window.confirm("Are you sure you want to disable your Tap Agent? This will delete your agent configuration.")) {
      return;
    }
    
    setDisabling(true);
    
    try {
      const agentDocRef = doc(db, 'agents', user.uid);
      await deleteDoc(agentDocRef);
      setAgentConfigured(false);
    } catch (error) {
      console.error("Error disabling agent:", error);
      alert("Failed to disable agent. Please try again.");
    } finally {
      setDisabling(false);
    }
  };
  
  // Set up intersection observer to detect when workflow is visible
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const [entry] = entries;
        setIsWorkflowVisible(entry.isIntersecting);
      },
      {
        root: null,
        rootMargin: '0px',
        threshold: 0.3, // When 30% of the element is visible
      }
    );
    
    if (workflowRef.current) {
      observer.observe(workflowRef.current);
    }
    
    return () => {
      if (workflowRef.current) {
        observer.unobserve(workflowRef.current);
      }
    };
  }, []);
  
  // Animate the workflow steps when it becomes visible
  useEffect(() => {
    // Only start animation if component is visible and animation hasn't started yet
    if (isWorkflowVisible && !animationStartedRef.current) {
      animationStartedRef.current = true;
      
      // Reset animation state
      setActiveWorkflowStep(0);
      setCompletedWorkflowSteps([]);
      setProcessingStep(1);
      
      // Set up the animation sequence
      const timers: NodeJS.Timeout[] = [];
      
      workflowSteps.forEach((step, index) => {
        if (index === 0) return; // Skip the first step, it's already active
        
        // Timer to start processing the step
        const processingTimer = setTimeout(() => {
          setProcessingStep(index);
        }, step.delay);
        timers.push(processingTimer);
        
        // Timer to complete the step and move to the next one
        const completionTimer = setTimeout(() => {
          setCompletedWorkflowSteps(prev => [...prev, index - 1]);
          setActiveWorkflowStep(index);
          setProcessingStep(index < workflowSteps.length - 1 ? index + 1 : null);
        }, step.delay + 1000);
        timers.push(completionTimer);
      });
      
      // Final step completion
      const finalTimer = setTimeout(() => {
        setCompletedWorkflowSteps(prev => [...prev, workflowSteps.length - 1]);
        setProcessingStep(null);
      }, workflowSteps[workflowSteps.length - 1].delay + 2000);
      timers.push(finalTimer);
      
      // Cleanup timers on component unmount or when element becomes invisible
      return () => {
        timers.forEach(timer => clearTimeout(timer));
      };
    }
  }, [isWorkflowVisible]);
  
  // Reset animation if component goes out of view
  useEffect(() => {
    if (!isWorkflowVisible) {
      animationStartedRef.current = false;
    }
  }, [isWorkflowVisible]);
  
  const isStepActive = (index: number) => activeWorkflowStep >= index;
  const isStepCompleted = (index: number) => completedWorkflowSteps.includes(index);
  const isStepProcessing = (index: number) => processingStep === index;
  
  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0D6EFD]"></div>
      </div>
    );
  }
  
  return (
    <PageTransition>
      {/* Add both style methods for fallback */}
      <style jsx global>{customStyles}</style>
      <style global jsx>{`
        .gradient-text {
          background: linear-gradient(90deg, #3D8BFF 0%, #FF8A00 100%);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
          font-weight: 700;
        }
      `}</style>
      
      {/* Conditional rendering based on agent configuration status */}
      {agentConfigured ? (
        // Agent Dashboard for configured users
        <div className="p-6 py-4">
          <PageHeader
            title={<><span className="gradient-text" style={gradientTextStyle}>Tap Agent</span> Dashboard</>}
          >
            <div className="flex items-center gap-2">
              <Button 
                variant="outline" 
                size="sm"
                className="h-8 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md"
                asChild
              >
                <Link href="/tap-agent/setup">
                  <Settings className="h-4 w-4" />
                  Agent Settings
                </Link>
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                className="h-8 gap-2 border-0 ring-1 ring-gray-200 bg-white text-red-500 hover:bg-red-50 shadow-sm rounded-md"
                onClick={handleDisableAgent}
                disabled={disabling}
              >
                <PowerOff className="h-4 w-4" />
                {disabling ? "Disabling..." : "Disable Agent"}
              </Button>
            </div>
          </PageHeader>
              
          <div className="w-full mb-8">
            <p className="text-gray-600 mb-6">
              Your Tap Agent is actively working to engage your customers with personalized rewards and offers.
              Here's an overview of your current customer engagement metrics.
            </p>
                
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <Card className="border-gray-200 reduced-radius shadow-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm font-medium text-gray-500">Active Customers</CardTitle>
                    <UserCheck className="h-4 w-4 text-gray-400" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{customerStats.activeCustomers}</div>
                </CardContent>
              </Card>
                  
              <Card className="border-gray-200 reduced-radius shadow-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm font-medium text-gray-500">New Customers</CardTitle>
                    <Users className="h-4 w-4 text-gray-400" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{customerStats.newCustomers}</div>
                </CardContent>
              </Card>
                  
              <Card className="border-gray-200 reduced-radius shadow-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm font-medium text-gray-500">Total Redemptions</CardTitle>
                    <ShoppingBag className="h-4 w-4 text-gray-400" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{customerStats.totalRedemptions}</div>
                </CardContent>
              </Card>
                  
              <Card className="border-gray-200 reduced-radius shadow-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm font-medium text-gray-500">Engagement Rate</CardTitle>
                    <Award className="h-4 w-4 text-gray-400" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{customerStats.engagementRate}%</div>
                </CardContent>
              </Card>
            </div>
                
            {/* Recent Activity */}
            <Card className="border-gray-200 reduced-radius shadow-sm">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg font-medium">Recent Activity</CardTitle>
                  <Button variant="ghost" size="sm" className="gap-1 text-xs">
                    View All
                    <ChevronRight className="h-3 w-3" />
                  </Button>
                </div>
                <CardDescription>Latest actions taken by your Tap Agent</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-start gap-3">
                    <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0">
                      <Gift className="h-4 w-4 text-blue-700" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">New reward campaign created</p>
                      <p className="text-xs text-gray-500">15% discount for returning customers</p>
                      <p className="text-xs text-gray-400 mt-1 flex items-center">
                        <Calendar className="h-3 w-3 mr-1" />
                        Today, 10:23 AM
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0">
                      <Users className="h-4 w-4 text-green-700" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Customer segment updated</p>
                      <p className="text-xs text-gray-500">VIP customers refined based on recent purchases</p>
                      <p className="text-xs text-gray-400 mt-1 flex items-center">
                        <Calendar className="h-3 w-3 mr-1" />
                        Yesterday, 2:45 PM
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="h-8 w-8 rounded-full bg-orange-100 flex items-center justify-center flex-shrink-0">
                      <MessageSquare className="h-4 w-4 text-orange-700" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Re-engagement messages sent</p>
                      <p className="text-xs text-gray-500">32 dormant customers received personalized offers</p>
                      <p className="text-xs text-gray-400 mt-1 flex items-center">
                        <Calendar className="h-3 w-3 mr-1" />
                        2 days ago, 11:30 AM
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      ) : (
        // Original welcome section for users who haven't configured their agent yet
        <div className="p-6">
          <PageHeader
            title={<>Welcome to <span className="gradient-text" style={gradientTextStyle}>Tap Agent</span></>}
          >
          </PageHeader>
              
          <div className="flex flex-col md:flex-row gap-8 w-full">
            <div className="md:w-2/3">
              <p className="text-gray-600 mb-6">
                Tap Agent is your AI-powered loyalty assistant that helps you create personalized 
                rewards for your customers based on your business data and customer behavior. 
                Set up once and let the agent continuously optimize your loyalty program.
              </p>
                  
              <div className="bg-blue-50 border border-blue-100 rounded-lg p-4 mb-6">
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-sm font-medium text-blue-800">Quick Setup Required</p>
                    <p className="text-sm text-blue-700 mt-1">
                      Tap Agent needs some information about your business to create effective rewards.
                      The setup process takes about 10-15 minutes and only needs to be done once.
                    </p>
                  </div>
                </div>
              </div>
                  
              <div className="flex flex-col sm:flex-row gap-4">
                <Link href="/tap-agent/setup" passHref>
                  <Button 
                    size="sm"
                    className="h-9 gap-2 bg-[#007AFF] hover:bg-[#0066CC] text-white pulse-button"
                  >
                    Configure Tap Agent
                    <ArrowRight className="h-4 w-4" />
                  </Button>
                </Link>
                <Button 
                  variant="outline" 
                  size="sm"
                  className="h-9 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md"
                  asChild
                >
                  <Link href="#" className="flex items-center">
                    <Play className="h-4 w-4" />
                    Watch Tutorial (2 min)
                  </Link>
                </Button>
              </div>
            </div>
                
            <div className="md:w-1/3">
              <Card className="h-full">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium">Setup Progress</CardTitle>
                  <CardDescription>Complete these steps to activate your agent</CardDescription>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="space-y-3">
                    {setupSteps.map((step, index) => (
                      <div key={index} className="flex items-start gap-3">
                        <div className="h-6 w-6 rounded-full bg-gray-100 flex items-center justify-center text-gray-500 text-xs mt-0.5">
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <p className="text-sm font-medium">{step.title}</p>
                          <p className="text-xs text-gray-500">{step.time}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
                <CardFooter className="bg-blue-50 py-2 px-4 border-t">
                  <div className="w-full flex items-center justify-between">
                    <span className="text-xs text-blue-700">Estimated total: 10-15 minutes</span>
                    <span className="text-xs text-blue-800 font-medium">0% Complete</span>
                  </div>
                </CardFooter>
              </Card>
            </div>
          </div>
        </div>
      )}
      
      {/* How Tap Agent Works Section with Interactive Workflow */}
      <div className="bg-gray-50 py-16 px-6">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold">
              How <span className="gradient-text" style={gradientTextStyle}>Tap Agent</span> Works
            </h2>
            <p className="mt-4 text-gray-600 max-w-3xl mx-auto">
              Tap Agent continuously analyzes customer interactions and engagement patterns to 
              identify the perfect incentives that resonate with each person.
            </p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
            <div className="order-2 lg:order-1">
              <div className="prose prose-lg max-w-none">
                <h3 className="text-2xl font-bold mb-6">
                  Personalized Rewards Every Week
                </h3>
                <p className="text-gray-600 mb-6">
                  Tap Agent is a cutting-edge AI system that creates truly personalized rewards for each customer every week. 
                  By understanding individual preferences, behaviors, and engagement patterns, it crafts unique reward 
                  experiences tailored specifically to your customers.
                </p>
                <p className="text-gray-600 mb-6">
                  The system ensures every customer receives rewards they'll genuinely value and want to redeem, 
                  including personalized banners and messaging that speak directly to their interests and preferences.
                </p>
                <div className="flex items-center space-x-2 text-blue-600 font-medium mb-8">
                  <Check className="h-5 w-5 text-blue-600" />
                  <span>We never use your financial data, respecting your privacy completely</span>
                </div>
                
                <h4 className="text-xl font-bold mb-4">
                  The Power of Personalization
                </h4>
                <p className="text-gray-600">
                  Personalization is the future of customer loyalty. Tap Agent's advanced technology is constantly learning, 
                  adapting, and evolving to create meaningful reward experiences that drive engagement and satisfaction. 
                  Weekly refreshed rewards with custom visuals and messaging ensure customers always have something 
                  new and exciting to look forward to.
                </p>
              </div>
            </div>
            
            <div 
              ref={workflowRef}
              className={`order-1 lg:order-2 workflow-container bg-white rounded-xl border border-gray-200 p-6 shadow-sm fade-in-section ${isWorkflowVisible ? 'is-visible' : ''}`}
            >
              <div className="relative">
                {/* Gradient effects */}
                <div className="glow-effect blue-glow"></div>
                <div className="glow-effect orange-glow"></div>
                
                <div className="relative z-10">
                  <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                    <Sparkles className="h-6 w-6 text-blue-600" />
                  </div>
                  
                  <h3 className="text-xl font-bold text-gray-900 mb-6">
                    Tap Agent Workflow
                  </h3>
                  
                  {/* Animated Workflow Steps */}
                  <div className="space-y-5">
                    {workflowSteps.map((step, index) => (
                      <div 
                        key={index}
                        className={`flex items-center workflow-step ${isStepActive(index) ? 'active' : ''} ${isStepCompleted(index) ? 'complete' : ''} ${isStepProcessing(index) ? 'processing' : ''}`}
                      >
                        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center step-circle ${isStepActive(index) ? 'bg-blue-500' : 'bg-blue-200'}`}>
                          {isStepCompleted(index) ? (
                            <Check className="h-4 w-4 text-white" />
                          ) : (
                            <span className="text-sm font-bold text-white">{index + 1}</span>
                          )}
                          {isStepProcessing(index) && (
                            <svg className="animate-spin h-8 w-8 absolute text-blue-500 opacity-20" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                          )}
                        </div>
                        <div className={`h-px w-4 step-line ${isStepActive(index) ? 'bg-blue-500' : 'bg-blue-200'}`}></div>
                        <div className={`flex-grow p-3 rounded-md step-box ${isStepActive(index) ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50 border border-gray-200'}`}>
                          <p className={`font-medium text-sm ${isStepActive(index) ? 'text-gray-900' : 'text-gray-400'}`}>
                            {step.title}
                          </p>
                          <p className={`text-xs ${isStepActive(index) ? 'text-gray-600' : 'text-gray-400'}`}>
                            {step.description}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <div className="mt-8 pt-3 border-t border-gray-200">
                    <div className="flex items-center space-x-2 text-blue-600">
                      <Check className="h-5 w-5" />
                      <span className="text-sm font-medium">Always respects customer privacy</span>
                    </div>
                  </div>
                  
                  {/* Add a "Restart Animation" button for testing */}
                  <div className="mt-4 text-center">
                    <button 
                      onClick={() => {
                        animationStartedRef.current = false;
                        setIsWorkflowVisible(true);
                      }}
                      className="text-xs text-blue-600 hover:text-blue-800 underline"
                    >
                      Replay Animation
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Features Section - MOVED ABOVE SETUP SECTION */}
      <div className="bg-white py-16 px-6">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold" style={gradientTextStyle}>How Tap Agent Transforms Your Loyalty Strategy</h2>
            <p className="mt-4 text-gray-600 max-w-3xl mx-auto mb-8">
              Tap Agent integrates with your business data to create, manage, and optimize
              personalized rewards that drive customer engagement and increase revenue.
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {features.map((feature, index) => (
              <div
                key={index}
                className="feature-card rounded-xl overflow-hidden card-hover-effect bg-gray-100 shadow-sm border border-gray-200 relative"
                onMouseEnter={() => setHoveredFeature(index)}
                onMouseLeave={() => setHoveredFeature(null)}
              >
                <div className="absolute top-0 left-0 right-0 h-1.5 bg-blue-500 opacity-70"></div>
                <div className="p-6">
                  <div className={`icon-container ${feature.color} w-12 h-12 rounded-full flex items-center justify-center mb-4 transition-colors shadow-sm`}>
                    <feature.icon className="h-6 w-6 text-blue-600" />
                  </div>
                  <h3 className="text-lg font-semibold mb-2">{feature.title}</h3>
                  <p className="text-gray-600 text-sm">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Setup Steps Section */}
      <div className="bg-gray-50 py-16 px-6">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-10">
            <h2 className="text-2xl font-bold mb-4">How Tap Agent Setup Works</h2>
            <p className="text-gray-600 max-w-2xl mx-auto mb-8">
              Complete these five steps to configure your Tap Agent. Each step helps the AI understand
              your business and create more effective rewards.
            </p>
          </div>
          
          <div className="space-y-6 max-w-4xl mx-auto">
            {setupSteps.map((step, index) => (
              <Card key={index} className="step-card overflow-hidden border-gray-200 hover:border-blue-300">
                <div className="flex flex-col md:flex-row">
                  {/* Left side with step number and icon */}
                  <div className="bg-blue-50 p-6 flex flex-col items-center justify-center md:w-1/4">
                    <div className="h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center mb-3">
                      <step.icon className="h-8 w-8 text-blue-700" />
                    </div>
                    <div className="inline-flex items-center justify-center h-8 w-8 rounded-full bg-blue-600 text-white font-medium mb-2">
                      {index + 1}
                    </div>
                    <div className="text-sm font-medium text-blue-800 text-center">{step.time}</div>
                  </div>
                  
                  {/* Right side with content */}
                  <div className="p-6 md:w-3/4">
                    <h3 className="text-xl font-medium mb-3">{step.title}</h3>
                    <p className="text-gray-600">{step.description}</p>
                    
                    {/* Add extra info or actions specific to each step */}
                    {index === 0 && (
                      <div className="mt-4 flex flex-wrap gap-3">
                        <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">Logo</Badge>
                        <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">Brand Colors</Badge>
                        <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">Brand Voice</Badge>
                        <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">Store Hours</Badge>
                      </div>
                    )}
                    
                    {index === 1 && (
                      <div className="mt-4 flex flex-wrap gap-3">
                        <Badge className="bg-orange-100 text-orange-800 hover:bg-orange-200">Increase AOV</Badge>
                        <Badge className="bg-orange-100 text-orange-800 hover:bg-orange-200">Boost Retention</Badge>
                        <Badge className="bg-orange-100 text-orange-800 hover:bg-orange-200">Customer Satisfaction</Badge>
                      </div>
                    )}
                    
                    {index === 2 && (
                      <div className="mt-4 flex flex-wrap gap-3">
                        <Badge className="bg-green-100 text-green-800 hover:bg-green-200">Product Catalog</Badge>
                        <Badge className="bg-green-100 text-green-800 hover:bg-green-200">Pricing Structure</Badge>
                        <Badge className="bg-green-100 text-green-800 hover:bg-green-200">Profit Margins</Badge>
                      </div>
                    )}
                    
                    {index === 3 && (
                      <div className="mt-4 flex flex-wrap gap-3">
                        <Badge className="bg-red-100 text-red-800 hover:bg-red-200">VIP Customers</Badge>
                        <Badge className="bg-red-100 text-red-800 hover:bg-red-200">New Customers</Badge>
                        <Badge className="bg-red-100 text-red-800 hover:bg-red-200">At-Risk Customers</Badge>
                        <Badge className="bg-red-100 text-red-800 hover:bg-red-200">Custom Segments</Badge>
                      </div>
                    )}
                    
                    {index === 4 && (
                      <div className="mt-4 flex items-center text-green-600">
                        <Check className="h-5 w-5 mr-2" />
                        <span className="text-sm">Once activated, Tap Agent works automatically</span>
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>
          
          <div className="text-center mt-10">
            <Link href="/tap-agent/setup" passHref>
              <Button 
                size="sm"
                className="h-9 gap-2 bg-[#007AFF] hover:bg-[#0066CC] text-white"
              >
                Start Setup Process
                <ArrowRight className="h-4 w-4" />
              </Button>
            </Link>
          </div>
        </div>
      </div>
      
      {/* FAQ Section */}
      <div className="bg-white py-12 px-6">
        <div className="max-w-3xl mx-auto">
          <div className="text-center mb-10">
            <h2 className="text-2xl font-bold mb-2">Frequently Asked Questions</h2>
            <p className="text-gray-600">Quick answers to common questions about Tap Agent</p>
          </div>
          
          <div className="space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base font-medium">How does Tap Agent create rewards?</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-sm">
                  Tap Agent uses AI to analyze your business data, customer segments, and brand identity to create personalized 
                  rewards that align with your business goals. It continuously learns from redemption patterns to improve future rewards.
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base font-medium">Can I edit the rewards Tap Agent creates?</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-sm">
                  Yes! While Tap Agent automates the reward creation process, you maintain full control. You can review, edit, 
                  or reject any rewards before they're published to your customers.
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base font-medium">How often does Tap Agent create new rewards?</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-sm">
                  By default, Tap Agent creates new reward recommendations weekly, but you can adjust this frequency in the settings. 
                  You can also manually trigger the creation of new rewards at any time.
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base font-medium">Do I need to complete the setup all at once?</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-sm">
                  No, you can save your progress at any point and return later to complete the setup. However, Tap Agent needs 
                  all setup steps to be completed before it can start creating personalized rewards.
                </p>
              </CardContent>
            </Card>
          </div>
          
          <div className="mt-8 text-center">
            <p className="text-sm text-gray-600 mb-4">Ready to get started with Tap Agent?</p>
            <Link href="/tap-agent/setup" passHref>
              <Button 
                size="sm"
                className="h-9 gap-2 bg-[#007AFF] hover:bg-[#0066CC] text-white"
              >
                Configure Tap Agent
                <ArrowRight className="h-4 w-4" />
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, getDoc, setDoc, serverTimestamp } from "firebase/firestore"
import { AgentConfig } from "@/types/agent-config"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { toast } from "@/components/ui/use-toast"
import { ScrollArea } from "@/components/ui/scroll-area"
import { BusinessBrandForm } from "./components/business-brand-form"
import { AgentTasksForm } from "./components/agent-tasks-form"
import { BusinessHoursForm } from "./components/business-hours-form"
import { ObjectivesForm } from "./components/objectives-form"
import { ProductPricingForm } from "./components/product-pricing-form"
import { FinancialGuardrailsForm } from "./components/financial-guardrails-form"
import { CustomerSegmentsForm } from "./components/customer-segments-form"
import { CustomerCohortsForm } from "./components/customer-cohorts-form"
import { RewardConstraintsForm } from "./components/reward-constraints-form"
import { MessagingConstraintsForm } from "./components/messaging-constraints-form"
import { EmailSetupForm } from "./components/email-setup-form"
import { CustomersList } from "./components/customers-view"
import { PageHeader } from "@/components/page-header"
import { 
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
  SheetClose
} from "@/components/ui/sheet"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { 
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { 
  Bot, 
  Award, 
  Check, 
  ChevronRight, 
  Loader2, 
  Wrench,
  MessageSquare,
  Layers,
  Mail,
  Mic,
  BookOpen,
  PlusCircle,
  ArrowLeft,
  BookText,
  Target,
  Calendar,
  Clock,
  Store,
  DollarSign,
  Users,
  UserCircle,
  Gift,
  Send,
  Info,
  Sparkles,
  Zap,
  BarChart,
  Heart,
  Gauge,
  ShieldCheck,
  Megaphone,
  Star,
  Hourglass,
  CircleDollarSign,
  Wallet,
  Building2,
  CheckCircle,
  TagsIcon,
  LineChart,
  UsersRound,
  X,
  Maximize2,
  Minimize2,
  Clock as Clock3,
  RefreshCcw
} from "lucide-react"

// Define the structure for the business knowledge data
interface BusinessKnowledge {
  generalInfo: string;
  manualEntries: Array<{
    id: string;
    content: string;
    timestamp: number;
    source: 'manual' | 'voice';
  }>;
  lastUpdated: number;
  publicHolidays?: string;
  returnPolicy?: string;
}

// Default agent configuration
const defaultAgentConfig: AgentConfig = {
  businessBrand: {
    businessName: "",
    businessContext: "",
    primaryColor: "#007AFF",
    secondaryColor: "#FFFFFF",
    brandVoice: []
  },
  agentTasks: {
    rewardsGeneration: false,
    reEngagement: false,
    bannerCreation: false,
    emailMarketing: false,
    customerMessaging: false,
    performanceAnalysis: false
  },
  businessHours: {
    monday: { open: true, start: "09:00", end: "17:00" },
    tuesday: { open: true, start: "09:00", end: "17:00" },
    wednesday: { open: true, start: "09:00", end: "17:00" },
    thursday: { open: true, start: "09:00", end: "17:00" },
    friday: { open: true, start: "09:00", end: "17:00" },
    saturday: { open: true, start: "09:00", end: "17:00" },
    sunday: { open: false, start: "09:00", end: "17:00" }
  },
  objectives: {
    businessObjectives: [
      { id: "increase_revenue", label: "Increase overall revenue", priority: 10 }
    ],
    customerValuePriorities: {
      personalization: 5,
      valueForMoney: 5,
      convenience: 5,
      quality: 5,
      exclusivity: 5,
      novelty: 5
    },
    seasonalCampaigns: []
  },
  productPricing: {
    averageBasketSize: 0,
    products: [],
    heroProducts: [],
    lowVelocityProducts: []
  },
  financialGuardrails: {
    rewardBudgetType: "fixed",
    monthlyBudget: 1000,
    targetGrossMargin: 30,
    maxCostPerAcquisition: 25,
    minRewardValue: 5,
    maxRewardValue: 50
  },
  customerSegments: {
    loyaltyTiers: [
      {
        name: "Bronze",
        lifetimeTransactions: 0,
        lifetimeSpend: 0,
        redemptions: 0
      }
    ],
    visitSpendingThresholds: {
      frequentVisitor: { visits: 4, perDays: 30 },
      highSpender: { amount: 100, perDays: 30 }
    }
  },
  customerCohorts: {
    new: {
      firstVisitWithinDays: 30,
      maxLifetimeVisits: 2
    },
    active: {
      lastVisitWithinDays: 30
    },
    dormant: {
      lastVisitBetween: [30, 90]
    },
    churned: {
      lastVisitMoreThanDays: 180
    },
    resurrected: {
      wasDormantOrChurned: true,
      recentVisitWithinDays: 60
    }
  },
  rewardConstraints: {
    allowedTypes: {
      freeItem: true,
      percentageDiscount: true,
      fixedAmount: true,
      buyXGetY: true,
      mysteryGift: false
    },
    concurrencyCeiling: 4
  },
  messagingConstraints: {
    restrictedKeywords: []
  },
  emailSettings: {
    isConnected: false,
    connectedEmail: "",
    automaticResponses: false,
    analyzeEmailTone: false,
    emailTone: "professional",
    customTone: [],
    excludedEmails: [],
    notifyBeforeSend: true,
    customSignature: ""
  },
  businessKnowledge: {
    generalInfo: "",
    manualEntries: [],
    lastUpdated: Date.now(),
    publicHolidays: "",
    returnPolicy: ""
  }
}

export default function AgentSetup() {
  const { user } = useAuth()
  const [agentConfig, setAgentConfig] = useState<AgentConfig>({
    ...defaultAgentConfig,
    // Ensure emailSettings is properly initialized
    emailSettings: {
      ...defaultAgentConfig.emailSettings
    },
    // Ensure businessKnowledge is properly initialized
    businessKnowledge: {
      ...defaultAgentConfig.businessKnowledge
    }
  })
  const [rewardActiveTab, setRewardActiveTab] = useState("brand")
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [mainTab, setMainTab] = useState("setup")
  const [isExpanded, setIsExpanded] = useState(false)
  const [agentType, setAgentType] = useState("reward")
  const [customerServiceSheetOpen, setCustomerServiceSheetOpen] = useState(false)
  const [showBusinessContext, setShowBusinessContext] = useState(false)
  const [customerServiceActiveTab, setCustomerServiceActiveTab] = useState("settings")
  const [businessInsights, setBusinessInsights] = useState<{
    businessName: string;
    businessHours: Record<string, any>;
    products: any[];
    objectives: string[];
    customerSegments: any[];
    brandVoice: string[];
  }>({
    businessName: "",
    businessHours: {},
    products: [],
    objectives: [],
    customerSegments: [],
    brandVoice: []
  })
  const [isRecording, setIsRecording] = useState(false)
  const [showManualInput, setShowManualInput] = useState(false)
  const [manualInput, setManualInput] = useState("")

  useEffect(() => {
    async function fetchAgentConfig() {
      if (!user?.uid) {
        setLoading(false)
        return
      }
      
      try {
        // Fetch agent config from the agents collection
        const agentDocRef = doc(db, 'agents', user.uid)
        const agentDoc = await getDoc(agentDocRef)
        
        // Also fetch business knowledge from the new collection path
        const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions')
        const instructionsDoc = await getDoc(instructionsDocRef)
        
        // Initialize with default business knowledge
        let businessKnowledgeData = {
          ...defaultAgentConfig.businessKnowledge
        }
        
        // Initialize email settings data and business brand data
        let emailSettingsData = null
        let businessBrandData = null
        
        // If instructions document exists, use its business knowledge data
        if (instructionsDoc.exists()) {
          const instructionsData = instructionsDoc.data()
          if (instructionsData.businessKnowledge) {
            businessKnowledgeData = instructionsData.businessKnowledge
          }
          
          // Also get email settings if they exist in the instructions document
          if (instructionsData.emailSettings) {
            emailSettingsData = {
              ...defaultAgentConfig.emailSettings,
              ...instructionsData.emailSettings
            }
          }
          
          // Get business brand data if it exists in the instructions document
          if (instructionsData.businessBrand) {
            businessBrandData = {
              ...defaultAgentConfig.businessBrand,
              ...instructionsData.businessBrand
            }
          }
        }
        
        if (agentDoc.exists()) {
          const data = agentDoc.data() as Partial<AgentConfig>
          
          // Create a merged config ensuring all properties exist
          const mergedConfig: AgentConfig = {
            ...defaultAgentConfig,
            ...data,
            // Explicitly handle nested objects that might be missing
            emailSettings: {
              ...defaultAgentConfig.emailSettings,
              ...(data.emailSettings || {}),
              // Prioritize email settings from instructions document if they exist
              ...(emailSettingsData || {})
            },
            businessBrand: {
              ...defaultAgentConfig.businessBrand,
              ...(data.businessBrand || {}),
              // Prioritize business brand from instructions document if it exists
              ...(businessBrandData || {})
            },
            // Use business knowledge from the instructions document
            businessKnowledge: businessKnowledgeData,
            agentTasks: {
              ...defaultAgentConfig.agentTasks,
              ...(data.agentTasks || {})
            },
            businessHours: {
              ...defaultAgentConfig.businessHours,
              ...(data.businessHours || {})
            },
            objectives: {
              ...defaultAgentConfig.objectives,
              ...(data.objectives || {})
            },
            productPricing: {
              ...defaultAgentConfig.productPricing,
              ...(data.productPricing || {})
            },
            financialGuardrails: {
              ...defaultAgentConfig.financialGuardrails,
              ...(data.financialGuardrails || {})
            },
            customerSegments: {
              ...defaultAgentConfig.customerSegments,
              ...(data.customerSegments || {})
            },
            customerCohorts: {
              ...defaultAgentConfig.customerCohorts,
              ...(data.customerCohorts || {})
            },
            rewardConstraints: {
              ...defaultAgentConfig.rewardConstraints,
              ...(data.rewardConstraints || {})
            },
            messagingConstraints: {
              ...defaultAgentConfig.messagingConstraints,
              ...(data.messagingConstraints || {})
            }
          }
          
          setAgentConfig(mergedConfig)
        } else {
          // If no agent config exists, still use any business knowledge that might exist
          setAgentConfig(prev => ({
            ...prev,
            businessKnowledge: businessKnowledgeData
          }))
          console.log("No agent configuration found, using defaults")
        }
      } catch (error) {
        console.error("Error fetching agent configuration:", error)
        toast({
          title: "Error",
          description: "Failed to load your agent configuration.",
          variant: "destructive"
        })
      } finally {
        setLoading(false)
      }
    }
    
    fetchAgentConfig()
  }, [user])

  const saveAgentConfig = async (config?: AgentConfig) => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to save your agent configuration.",
        variant: "destructive",
      })
      return
    }

    setSaving(true)
    const configToSave = config || agentConfig

    try {
      // Extract business knowledge to save separately
      const { businessKnowledge, ...agentConfigWithoutBusinessKnowledge } = configToSave

      // Save agent config to agents collection
      await setDoc(doc(db, 'agents', user.uid), {
        ...agentConfigWithoutBusinessKnowledge,
        updatedAt: serverTimestamp(),
      }, { merge: true })

      // Save business knowledge, email settings, and business brand to the instructions document
      await setDoc(doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions'), {
        businessKnowledge,
        emailSettings: configToSave.emailSettings,
        businessBrand: configToSave.businessBrand,
        updatedAt: serverTimestamp(),
      }, { merge: true })

      toast({
        title: "Success",
        description: "Your agent configuration has been saved.",
      })
    } catch (error) {
      console.error("Error saving agent configuration:", error)
      toast({
        title: "Error",
        description: "Failed to save your agent configuration.",
        variant: "destructive",
      })
    } finally {
      setSaving(false)
    }
  }

  const handleRewardTabChange = (tab: string) => {
    setRewardActiveTab(tab)
  }
  
  const handleMainTabChange = (tab: string) => {
    setMainTab(tab)
  }

  const handleAgentTypeChange = (type: string) => {
    setAgentType(type);
    
    // Extract business insights when switching to customer service tab
    if (type === "customer-service") {
      extractBusinessInsights();
    }
  }

  const updateSection = <K extends keyof AgentConfig>(
    section: K, 
    data: AgentConfig[K]
  ) => {
    setAgentConfig(prev => ({
      ...prev,
      [section]: data
    }))
  }

  const toggleExpand = () => {
    setIsExpanded(!isExpanded)
  }

  const addManualContextEntry = async (content: string) => {
    if (!content.trim()) return;
    
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "Your context was added but not saved to the server.",
        variant: "destructive"
      });
      return;
    }
    
    // Update local state
    const newEntry = {
      id: crypto.randomUUID(),
      content,
      timestamp: Date.now(),
      source: 'manual' as const
    };
    
    const updatedBusinessKnowledge = {
      ...agentConfig.businessKnowledge,
      manualEntries: [
        ...agentConfig.businessKnowledge.manualEntries,
        newEntry
      ],
      lastUpdated: Date.now()
    };
    
    // Update state first for immediate UI feedback
    updateSection('businessKnowledge', updatedBusinessKnowledge);
    
    // Save to Firestore in the new collection path
    try {
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        businessBrand: agentConfig.businessBrand,
        updatedAt: serverTimestamp()
      }, { merge: true });
      
      toast({
        title: "Success",
        description: "Your business context was added and saved.",
      });
    } catch (error) {
      console.error("Error saving business context:", error);
      toast({
        title: "Error",
        description: "Your context was added but could not be saved to the server.",
        variant: "destructive"
      });
    }
    
    setShowManualInput(false);
    setManualInput('');
  };
  
  const addVoiceContextEntry = async (content: string) => {
    if (!content.trim()) return;
    
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "Your voice input was added but not saved to the server.",
        variant: "destructive"
      });
      return;
    }
    
    // Update local state
    const newEntry = {
      id: crypto.randomUUID(),
      content,
      timestamp: Date.now(),
      source: 'voice' as const
    };
    
    const updatedBusinessKnowledge = {
      ...agentConfig.businessKnowledge,
      manualEntries: [
        ...agentConfig.businessKnowledge.manualEntries,
        newEntry
      ],
      lastUpdated: Date.now()
    };
    
    // Update state first for immediate UI feedback
    updateSection('businessKnowledge', updatedBusinessKnowledge);
    
    // Save to Firestore in the new collection path
    try {
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        businessBrand: agentConfig.businessBrand,
        updatedAt: serverTimestamp()
      }, { merge: true });
      
      toast({
        title: "Success",
        description: "Your voice input was added and saved.",
      });
    } catch (error) {
      console.error("Error saving voice input:", error);
      toast({
        title: "Error",
        description: "Your voice input was added but could not be saved to the server.",
        variant: "destructive"
      });
    }
  };

  // Function to extract business insights from agent config
  const extractBusinessInsights = () => {
    const insights = {
      businessName: agentConfig.businessBrand.businessName || "Your Business",
      businessHours: agentConfig.businessHours || {},
      products: agentConfig.productPricing.products || [],
      objectives: agentConfig.objectives.businessObjectives.map(obj => obj.label) || [],
      customerSegments: agentConfig.customerSegments.loyaltyTiers || [],
      brandVoice: agentConfig.businessBrand.brandVoice || []
    }
    
    setBusinessInsights(insights)
  }

  // Call extractBusinessInsights when agentConfig changes
  useEffect(() => {
    if (!loading) {
      extractBusinessInsights();
    }
  }, [agentConfig.businessBrand, agentConfig.businessHours, agentConfig.productPricing, agentConfig.objectives, agentConfig.customerSegments, loading]);

  // Handle simulated voice recording for demo
  const handleVoiceRecord = () => {
    if (isRecording) {
      // Stop "recording"
      setIsRecording(false);
      // Simulate a transcription result
      const transcriptions = [
        "We offer 30-day returns on all products purchased online or in-store with a valid receipt.",
        "Our business hours are Monday to Friday from 9 AM to 6 PM, and Saturday from 10 AM to 4 PM. We're closed on Sundays.",
        "Our customer service team can be reached at support@example.com or by phone at (555) 123-4567.",
        "We offer free shipping on all orders over $75 within Australia. International shipping rates vary by location.",
        "All our products come with a 12-month manufacturer warranty that covers defects in materials and workmanship.",
      ];
      const randomTranscription = transcriptions[Math.floor(Math.random() * transcriptions.length)];
      
      // Small delay to simulate processing
      setTimeout(() => {
        addVoiceContextEntry(randomTranscription);
      }, 1000);
      
      toast({
        title: "Voice processed",
        description: "Your voice input has been transcribed and is being added.",
      });
    } else {
      // Start "recording"
      setIsRecording(true);
      
      // Simulate automatic stop after 5 seconds
      setTimeout(() => {
        if (isRecording) {
          handleVoiceRecord();
        }
      }, 5000);
      
      toast({
        title: "Recording started",
        description: "Recording your voice input (simulated)...",
      });
    }
  };

  // Reset agent config to default values
  const resetToDefault = async () => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to reset your agent configuration.",
        variant: "destructive",
      })
      return
    }

    try {
      // Update email settings and business brand in the main agent config
      const resetConfig = {
        ...agentConfig,
        emailSettings: { ...defaultAgentConfig.emailSettings },
        businessBrand: { ...defaultAgentConfig.businessBrand }
      }
      setAgentConfig(resetConfig)

      // Reset business knowledge separately
      const resetBusinessKnowledge = { ...defaultAgentConfig.businessKnowledge }
      updateSection('businessKnowledge', resetBusinessKnowledge)

      // Save the email settings and business brand to the agents collection
      await setDoc(doc(db, 'agents', user.uid), {
        emailSettings: { ...defaultAgentConfig.emailSettings },
        businessBrand: { ...defaultAgentConfig.businessBrand },
        updatedAt: serverTimestamp(),
      }, { merge: true })

      // Reset the business knowledge and business brand in the instructions collection
      await setDoc(doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions'), {
        businessKnowledge: resetBusinessKnowledge,
        businessBrand: { ...defaultAgentConfig.businessBrand },
        emailSettings: { ...defaultAgentConfig.emailSettings },
        updatedAt: serverTimestamp(),
      }, { merge: true })

      toast({
        title: "Reset complete",
        description: "Your agent configuration has been reset to default values.",
      })
    } catch (error) {
      console.error("Error resetting configuration:", error)
      toast({
        title: "Error",
        description: "Failed to reset your agent configuration.",
        variant: "destructive",
      })
    }
  }

  const deleteContextEntry = async (id: string) => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to delete a context entry.",
        variant: "destructive"
      });
      return;
    }

    try {
      // Update local state
      const updatedBusinessKnowledge = {
        ...agentConfig.businessKnowledge,
        manualEntries: agentConfig.businessKnowledge.manualEntries.filter((entry) => entry.id !== id)
      };
      updateSection('businessKnowledge', updatedBusinessKnowledge);

      // Save to Firestore
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        businessBrand: agentConfig.businessBrand,
        updatedAt: serverTimestamp()
      }, { merge: true });

      toast({
        title: "Success",
        description: "The context entry has been deleted.",
      });
    } catch (error) {
      console.error("Error deleting context entry:", error);
      toast({
        title: "Error",
        description: "Failed to delete the context entry.",
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0D6EFD]"></div>
      </div>
    )
  }

  // Render the business context page
  const renderBusinessContextPage = () => {
    return (
      <>
        <div className="flex items-center mb-6">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => setShowBusinessContext(false)}
            className="gap-1 mr-2 p-2"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h2 className="text-xl font-medium">Business Knowledge Base</h2>
            <p className="text-sm text-muted-foreground">
              Information the agent will use when responding to customer inquiries
            </p>
          </div>
        </div>
        
        <div className="space-y-6 mb-6">
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium">Business Context</h3>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleVoiceRecord}
                  className={`gap-2 rounded-md ${isRecording ? 'bg-red-50 text-red-600 border-red-200' : ''}`}
                >
                  <Mic className={`h-4 w-4 ${isRecording ? 'text-red-600 animate-pulse' : ''}`} />
                  {isRecording ? 'Recording...' : 'Add voice input'}
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setShowManualInput(!showManualInput)}
                  className="gap-2 rounded-md"
                >
                  <PlusCircle className="h-4 w-4" />
                  Add manual context
                </Button>
              </div>
            </div>
            
            {showManualInput && (
              <div className="mb-6 border p-4 rounded-md bg-gray-50 space-y-3">
                <Textarea
                  placeholder="Describe your business, products, services, policies, or any other relevant information..."
                  value={manualInput}
                  onChange={(e) => setManualInput(e.target.value)}
                  className="min-h-[100px] rounded-md"
                />
                <div className="flex justify-end gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      setManualInput("");
                      setShowManualInput(false);
                    }}
                    className="rounded-md"
                  >
                    Cancel
                  </Button>
                  <Button 
                    size="sm"
                    onClick={() => addManualContextEntry(manualInput)}
                    disabled={!manualInput.trim()}
                    className="rounded-md"
                  >
                    Save Context
                  </Button>
                </div>
              </div>
            )}
          </div>
          
          <Card className="border shadow-sm rounded-md">
            <CardHeader className="pb-2">
              <CardTitle className="text-md flex items-center gap-2">
                <Store className="h-4 w-4 text-blue-600" />
                Business Information
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-sm space-y-4">
                <div>
                  <Label htmlFor="businessName">Business Name</Label>
                  <Input 
                    id="businessName"
                    value={agentConfig.businessBrand.businessName}
                    onChange={(e) => updateSection("businessBrand", {
                      ...agentConfig.businessBrand,
                      businessName: e.target.value
                    })}
                    className="mt-1 rounded-md"
                    placeholder="Enter your business name"
                  />
                </div>
                
                <div>
                  <Label htmlFor="businessContext">Business Description</Label>
                  <Textarea
                    id="businessContext"
                    value={agentConfig.businessBrand.businessContext}
                    onChange={(e) => updateSection("businessBrand", {
                      ...agentConfig.businessBrand,
                      businessContext: e.target.value
                    })}
                    className="mt-1 min-h-[100px] rounded-md"
                    placeholder="Describe what your business does, your products/services, and your value proposition"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="border shadow-sm rounded-md">
              <CardHeader className="pb-2">
                <CardTitle className="text-md flex items-center gap-2">
                  <Clock3 className="h-4 w-4 text-blue-600" />
                  Business Hours
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-sm space-y-3">
                  {Object.entries(agentConfig.businessHours).map(([day, hours]: [string, any]) => (
                    <div key={day} className="flex items-center gap-3">
                      <div className="w-24">
                        <span className="capitalize">{day}</span>
                      </div>
                      <Switch
                        checked={hours.open}
                        onCheckedChange={(checked) => {
                          const updatedHours = {
                            ...agentConfig.businessHours,
                            [day]: {
                              ...hours,
                              open: checked
                            }
                          };
                          updateSection("businessHours", updatedHours);
                        }}
                      />
                      {hours.open && (
                        <div className="flex-1 flex items-center gap-2">
                          <Input
                            type="time"
                            value={hours.start}
                            onChange={(e) => {
                              const updatedHours = {
                                ...agentConfig.businessHours,
                                [day]: {
                                  ...hours,
                                  start: e.target.value
                                }
                              };
                              updateSection("businessHours", updatedHours);
                            }}
                            className="w-28 rounded-md"
                          />
                          <span>to</span>
                          <Input
                            type="time"
                            value={hours.end}
                            onChange={(e) => {
                              const updatedHours = {
                                ...agentConfig.businessHours,
                                [day]: {
                                  ...hours,
                                  end: e.target.value
                                }
                              };
                              updateSection("businessHours", updatedHours);
                            }}
                            className="w-28 rounded-md"
                          />
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
            
            <Card className="border shadow-sm rounded-md">
              <CardHeader className="pb-2">
                <CardTitle className="text-md flex items-center gap-2">
                  <Layers className="h-4 w-4 text-blue-600" />
                  Brand Voice
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-sm">
                  <Label htmlFor="emailTone" className="mb-2 block">Communication Style</Label>
                  <Select 
                    value={agentConfig.emailSettings.emailTone}
                    onValueChange={(value) => {
                      updateSection("emailSettings", {
                        ...agentConfig.emailSettings,
                        emailTone: value
                      })
                    }}
                  >
                    <SelectTrigger id="emailTone" className="rounded-md">
                      <SelectValue placeholder="Select a tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="friendly">Friendly</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="formal">Formal</SelectItem>
                      <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                      <SelectItem value="empathetic">Empathetic</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <div className="mt-4">
                    <div className="flex flex-wrap gap-1">
                      {businessInsights.brandVoice.map((trait, index) => (
                        <Badge key={index} variant="outline" className="bg-gray-50 rounded-md">
                          {trait}
                        </Badge>
                      ))}
                    </div>
                    {businessInsights.brandVoice.length === 0 && (
                      <p className="text-muted-foreground mt-1">Adjust your brand voice in the Business Brand tab.</p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Display manual and voice entries at the bottom */}
          <Card className="border shadow-sm rounded-md mt-8">
            <CardHeader className="pb-2">
              <CardTitle className="text-md flex items-center gap-2">
                <BookText className="h-4 w-4 text-blue-600" />
                Additional Business Context
              </CardTitle>
              <CardDescription>
                Additional context information that will be used by the customer service agent
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0">
              {agentConfig.businessKnowledge?.manualEntries && 
               agentConfig.businessKnowledge.manualEntries.length > 0 ? (
                <div className="space-y-4">
                  {agentConfig.businessKnowledge.manualEntries.map((entry) => (
                    <div key={entry.id} className="p-3 bg-gray-50 rounded-md">
                      <div className="flex items-center justify-between mb-2">
                        <Badge variant={entry.source === 'voice' ? 'secondary' : 'outline'} className="rounded-md">
                          {entry.source === 'voice' ? 'Voice Input' : 'Manual Entry'}
                        </Badge>
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-muted-foreground">
                            {new Date(entry.timestamp).toLocaleString()}
                          </span>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => deleteContextEntry(entry.id)}
                            className="h-6 w-6 rounded-md hover:bg-red-50 hover:text-red-600"
                            title="Delete entry"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      <p className="text-sm">{entry.content}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6 text-muted-foreground">
                  <BookText className="h-12 w-12 mx-auto mb-2 opacity-20" />
                  <p>No business context entries yet.</p>
                  <p className="text-sm">Add context using the buttons above.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </>
    )
  }

  return (
    <div className={`transition-all duration-300 ease-in-out ${isExpanded ? 'fixed inset-0 z-50 bg-white overflow-auto' : 'w-full bg-white'}`}>
      <div className="p-6 py-4">
        <PageHeader
          title={<><span className="bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent">Tap Agent</span> Setup</>}
          subtitle="Your marketing, rewards, and customer engagement - on autopilot."
        >
          <div className="flex items-center gap-2">
            <Tabs 
              defaultValue="setup" 
              value={mainTab} 
              onValueChange={handleMainTabChange} 
              className="mr-2"
            >
              <TabsList className="hidden">
                <TabsTrigger value="setup">Setup</TabsTrigger>
                <TabsTrigger value="customers">Customers</TabsTrigger>
              </TabsList>
              
              <div className="flex gap-3">
                <Button
                  onClick={() => handleMainTabChange("setup")}
                  className={`flex items-center justify-center gap-2 px-5 py-3 text-sm transition-all border shadow-sm hover:bg-gray-50 rounded-md font-medium ${
                    mainTab === "setup" 
                      ? "bg-blue-50 border-blue-200" 
                      : "bg-white text-gray-700"
                  }`}
                >
                  <div className={`${
                    mainTab === "setup" 
                      ? "bg-blue-100 p-1.5 rounded-full" 
                      : "text-gray-500"
                  }`}>
                    <Wrench className={`h-5 w-5 ${mainTab === "setup" ? "text-blue-600" : ""}`} />
                  </div>
                  <span className={mainTab === "setup" ? "bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent" : ""}>Setup</span>
                </Button>
                <Button
                  onClick={() => handleMainTabChange("customers")}
                  className={`flex items-center justify-center gap-2 px-5 py-3 text-sm transition-all border shadow-sm hover:bg-gray-50 rounded-md font-medium ${
                    mainTab === "customers" 
                      ? "bg-blue-50 border-blue-200" 
                      : "bg-white text-gray-700"
                  }`}
                >
                  <div className={`${
                    mainTab === "customers" 
                      ? "bg-blue-100 p-1.5 rounded-full" 
                      : "text-gray-500"
                  }`}>
                    <Users className={`h-5 w-5 ${mainTab === "customers" ? "text-blue-600" : ""}`} />
                  </div>
                  <span className={mainTab === "customers" ? "bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent" : ""}>Customers</span>
                </Button>
              </div>
            </Tabs>
            <Button 
              variant="outline" 
              size="sm" 
              asChild 
              className="h-9 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md"
            >
              <Link href="/tap-agent/intro">Learn More</Link>
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={toggleExpand}
              className="h-9 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md flex items-center"
            >
              {isExpanded ? (
                <>
                  <Minimize2 className="h-4 w-4" />
                  <span>Minimize</span>
                </>
              ) : (
                <>
                  <Maximize2 className="h-4 w-4" />
                  <span>Expand</span>
                </>
              )}
            </Button>
          </div>
        </PageHeader>
        
        <Tabs defaultValue="setup" value={mainTab} onValueChange={handleMainTabChange} className="w-full">
          <TabsContent value="setup">
            {/* Agent Type Selection */}
            <Tabs 
              defaultValue="reward" 
              value={agentType} 
              onValueChange={handleAgentTypeChange}
              className="w-full mb-5"
            >
              {agentType !== "customer-service-setup" && (
                <div className="flex justify-start mb-4">
                  <TabsList className="hidden">
                    <TabsTrigger value="reward">Reward Agent</TabsTrigger>
                    <TabsTrigger value="customer-service">Customer Service</TabsTrigger>
                  </TabsList>
                  
                  <div className="flex gap-3">
                    <Button
                      onClick={() => handleAgentTypeChange("reward")}
                      className={`flex items-center justify-center gap-2 px-5 py-3 text-sm transition-all border shadow-sm hover:bg-gray-50 rounded-md font-medium ${
                        agentType === "reward" 
                          ? "bg-blue-50 border-blue-200" 
                          : "bg-white text-gray-700"
                      }`}
                    >
                      <div className={`${
                        agentType === "reward" 
                          ? "bg-blue-100 p-1.5 rounded-full" 
                          : "text-gray-500"
                      }`}>
                        <Award className={`h-5 w-5 ${agentType === "reward" ? "text-blue-600" : ""}`} />
                      </div>
                      <span className={agentType === "reward" ? "bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent" : ""}>Reward Agent</span>
                    </Button>
                    <Button
                      onClick={() => handleAgentTypeChange("customer-service")}
                      className={`flex items-center justify-center gap-2 px-5 py-3 text-sm transition-all border shadow-sm hover:bg-gray-50 rounded-md font-medium ${
                        agentType === "customer-service" 
                          ? "bg-blue-50 border-blue-200" 
                          : "bg-white text-gray-700"
                      }`}
                    >
                      <div className={`${
                        agentType === "customer-service" 
                          ? "bg-blue-100 p-1.5 rounded-full" 
                          : "text-gray-500"
                      }`}>
                        <Bot className={`h-5 w-5 ${agentType === "customer-service" ? "text-blue-600" : ""}`} />
                      </div>
                      <span className={agentType === "customer-service" ? "bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent" : ""}>Customer Service Agent</span>
                    </Button>
                  </div>
                </div>
              )}
              
              <TabsContent value="reward">
                <div className="flex flex-col gap-4">
                  <div className="w-full bg-white rounded-md border shadow-sm">
                    <div className="flex items-center justify-between border-b px-6 py-4">
                      <div className="flex items-center">
                        <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                          <Award className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h2 className="text-xl font-medium">Reward Agent</h2>
                          <p className="text-sm text-muted-foreground mt-1">
                            AI assistant configured to create personalized rewards for your customers
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        className={`rounded-md border shadow-sm ${agentConfig.agentTasks.rewardsGeneration ? 'bg-green-50 text-green-700 border-green-200' : 'bg-gray-50'}`}
                      >
                        <div className={`h-2 w-2 rounded-full mr-2 ${agentConfig.agentTasks.rewardsGeneration ? 'bg-green-500' : 'bg-gray-400'}`} />
                        {agentConfig.agentTasks.rewardsGeneration ? 'Active' : 'Inactive'}
                      </Button>
                    </div>
                    
                <Tabs 
                  defaultValue="brand" 
                  value={rewardActiveTab} 
                  onValueChange={handleRewardTabChange}
                  className="w-full"
                >
                      <div className="border-b px-6 py-2 bg-gray-50 overflow-x-auto">
                        <div className="flex gap-1 min-w-max">
                          <TabsList className="hidden">
                            <TabsTrigger value="brand">Brand</TabsTrigger>
                            <TabsTrigger value="tasks">Tasks</TabsTrigger>
                            <TabsTrigger value="hours">Hours</TabsTrigger>
                            <TabsTrigger value="objectives">Objectives</TabsTrigger>
                            <TabsTrigger value="pricing">Pricing</TabsTrigger>
                            <TabsTrigger value="financials">Financials</TabsTrigger>
                            <TabsTrigger value="cohorts">Cohorts</TabsTrigger>
                            <TabsTrigger value="rewards">Rewards</TabsTrigger>
                            <TabsTrigger value="messaging">Messages</TabsTrigger>
                          </TabsList>
                          
                          <Button 
                            onClick={() => handleRewardTabChange("brand")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "brand" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <Building2 className="h-4 w-4" />
                            <span>Brand</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("tasks")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "tasks" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <CheckCircle className="h-4 w-4" />
                            <span>Tasks</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("hours")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "hours" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <Clock3 className="h-4 w-4" />
                            <span>Hours</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("objectives")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "objectives" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <Target className="h-4 w-4" />
                            <span>Objectives</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("pricing")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "pricing" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <TagsIcon className="h-4 w-4" />
                            <span>Pricing</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("financials")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "financials" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <LineChart className="h-4 w-4" />
                            <span>Financials</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("cohorts")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "cohorts" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <UsersRound className="h-4 w-4" />
                            <span>Cohorts</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("rewards")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "rewards" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <Gift className="h-4 w-4" />
                            <span>Rewards</span>
                          </Button>
                          <Button 
                            onClick={() => handleRewardTabChange("messaging")}
                            className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${rewardActiveTab === "messaging" ? "bg-white text-blue-600 shadow-sm" : "bg-transparent text-gray-700 hover:bg-gray-50"}`}
                          >
                            <MessageSquare className="h-4 w-4" />
                            <span>Messages</span>
                          </Button>
                      </div>
                    </div>
                    
                      <div className="p-6">
                        <ScrollArea className={`${isExpanded ? 'max-h-[calc(100vh-300px)]' : 'max-h-[600px]'} scrollable pr-4`}>
                          <TabsContent value="brand" className="pt-0 mt-0 data-[state=active]:block">
                            <div className="space-y-6">
                              {/* Business Information and Brand Voice side by side */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Business Information */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Store className="h-4 w-4 text-blue-600 mr-2" />
                                    Business Information
                                  </h3>
                                  
                                  <div className="space-y-4">
                                    <div>
                                      <Label htmlFor="businessName">Business Name</Label>
                                      <Input 
                                        id="businessName"
                                        value={agentConfig.businessBrand.businessName}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          businessName: e.target.value
                                        })}
                                        className="mt-1 rounded-md"
                                        placeholder="Enter your business name"
                                      />
                                    </div>
                                    
                                    <div>
                                      <Label htmlFor="businessContext">Business Description</Label>
                                      <Textarea
                                        id="businessContext"
                                        value={agentConfig.businessBrand.businessContext}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          businessContext: e.target.value
                                        })}
                                        className="mt-1 min-h-[100px] rounded-md"
                                        placeholder="Describe what your business does, your products/services, and your value proposition"
                                      />
                                    </div>
                                  </div>
                                </div>
                                
                                {/* Brand Voice */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Layers className="h-4 w-4 text-blue-600 mr-2" />
                                    Brand Voice
                                  </h3>
                                  
                                  <div className="space-y-4">
                                    <p className="text-sm text-muted-foreground">
                                      Select the tone and style that best represents your brand's personality
                                    </p>
                                    
                                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                                      {["friendly", "professional", "casual", "formal", "playful", "serious"].map(voice => (
                                        <Button
                                          key={voice}
                                          onClick={() => {
                                            const updatedVoice = agentConfig.businessBrand.brandVoice.includes(voice)
                                              ? agentConfig.businessBrand.brandVoice.filter(v => v !== voice)
                                              : [...agentConfig.businessBrand.brandVoice, voice];
                                            
                                            updateSection("businessBrand", {
                                              ...agentConfig.businessBrand,
                                              brandVoice: updatedVoice
                                            });
                                          }}
                                          variant="outline"
                                          className={`h-10 capitalize rounded-md ${
                                            agentConfig.businessBrand.brandVoice.includes(voice)
                                              ? "bg-blue-50 text-blue-700 border-blue-200"
                                              : ""
                                          }`}
                                        >
                                          {voice}
                                        </Button>
                                      ))}
                                    </div>
                                    
                                    <div className="flex gap-2">
                                      <div className="flex-1">
                                        <Input
                                          id="customVoice"
                                          placeholder="Add custom tone"
                                          className="rounded-md"
                                          onKeyDown={(e) => {
                                            if (e.key === "Enter" && e.currentTarget.value.trim()) {
                                              e.preventDefault();
                                              const newVoice = e.currentTarget.value.trim();
                                              if (!agentConfig.businessBrand.brandVoice.includes(newVoice)) {
                                                updateSection("businessBrand", {
                                                  ...agentConfig.businessBrand,
                                                  brandVoice: [...agentConfig.businessBrand.brandVoice, newVoice]
                                                });
                                                e.currentTarget.value = "";
                                              }
                                            }
                                          }}
                                        />
                                      </div>
                                      <Button 
                                        onClick={() => {
                                          const input = document.getElementById('customVoice') as HTMLInputElement;
                                          if (input && input.value.trim()) {
                                            const newVoice = input.value.trim();
                                            if (!agentConfig.businessBrand.brandVoice.includes(newVoice)) {
                                              updateSection("businessBrand", {
                                                ...agentConfig.businessBrand,
                                                brandVoice: [...agentConfig.businessBrand.brandVoice, newVoice]
                                              });
                                              input.value = "";
                                            }
                                          }
                                        }}
                                        className="rounded-md"
                                      >
                                        Add
                                      </Button>
                                    </div>
                                    
                                    {agentConfig.businessBrand.brandVoice.length > 0 && (
                                      <div className="mt-2">
                                        <Label className="mb-2 block">Selected Brand Voice</Label>
                                        <div className="flex flex-wrap gap-2">
                                          {agentConfig.businessBrand.brandVoice.map(voice => (
                                            <Badge 
                                              key={voice}
                                              variant="outline"
                                              className="px-2 py-1 rounded-md bg-blue-50 border-blue-200 text-blue-700 flex items-center gap-1"
                                            >
                                              {voice}
                                              <Button
                                                type="button"
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => updateSection("businessBrand", {
                                                  ...agentConfig.businessBrand,
                                                  brandVoice: agentConfig.businessBrand.brandVoice.filter(v => v !== voice)
                                                })}
                                                className="h-4 w-4 rounded-full p-0 hover:bg-blue-100"
                                              >
                                                <X className="h-3 w-3" />
                                              </Button>
                                            </Badge>
                                          ))}
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                              
                              {/* Brand Colors */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <div className="h-4 w-4 bg-gradient-to-r from-blue-500 to-orange-500 rounded-full mr-2"></div>
                                    Primary Color
                                  </h3>
                                  
                                  <div className="flex gap-3 items-center">
                                    <Input
                                      id="primaryColor"
                                      type="color"
                                      value={agentConfig.businessBrand.primaryColor}
                                      onChange={(e) => updateSection("businessBrand", {
                                        ...agentConfig.businessBrand,
                                        primaryColor: e.target.value
                                      })}
                                      className="w-16 h-16 p-1 cursor-pointer rounded-md"
                                    />
                                    <div className="flex-1">
                                      <Input
                                        type="text"
                                        value={agentConfig.businessBrand.primaryColor}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          primaryColor: e.target.value
                                        })}
                                        placeholder="#007AFF"
                                        className="rounded-md"
                                      />
                                      <p className="text-xs text-muted-foreground mt-1">
                                        This color will be used for primary elements in customer communications
                                      </p>
                                    </div>
                                  </div>
                                </div>
                                
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <div className="h-4 w-4 bg-white border border-gray-200 rounded-full mr-2"></div>
                                    Secondary Color
                                  </h3>
                                  
                                  <div className="flex gap-3 items-center">
                                    <Input
                                      id="secondaryColor"
                                      type="color"
                                      value={agentConfig.businessBrand.secondaryColor}
                                      onChange={(e) => updateSection("businessBrand", {
                                        ...agentConfig.businessBrand,
                                        secondaryColor: e.target.value
                                      })}
                                      className="w-16 h-16 p-1 cursor-pointer rounded-md"
                                    />
                                    <div className="flex-1">
                                      <Input
                                        type="text"
                                        value={agentConfig.businessBrand.secondaryColor}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          secondaryColor: e.target.value
                                        })}
                                        placeholder="#FFFFFF"
                                        className="rounded-md"
                                      />
                                      <p className="text-xs text-muted-foreground mt-1">
                                        This color will be used for secondary elements and backgrounds
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TabsContent>
                          
                          <TabsContent value="tasks" className="pt-0 mt-0 data-[state=active]:block">
                            <AgentTasksForm 
                              data={agentConfig.agentTasks} 
                              onChange={(data) => updateSection("agentTasks", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="hours" className="pt-0 mt-0 data-[state=active]:block">
                            <div className="space-y-6">
                              <div className="border rounded-md p-5 space-y-5">
                                <h3 className="font-medium flex items-center">
                                  <Clock3 className="h-4 w-4 text-blue-600 mr-2" />
                                  Business Hours
                                </h3>
                                
                                <p className="text-sm text-muted-foreground">
                                  Configure your operating hours for each day of the week. These hours will be used to determine when rewards can be offered.
                                </p>
                                
                                <div className="space-y-5">
                                  {/* Weekday Group */}
                                  <div className="border rounded-md p-4 bg-gray-50">
                                    <h4 className="text-sm font-medium mb-3 flex items-center">
                                      <Calendar className="h-4 w-4 text-blue-600 mr-2" />
                                      Weekdays
                                    </h4>
                                    
                                    {['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].map((day) => (
                                      <div key={day} className="mb-3 last:mb-0">
                                        <div className="flex items-center justify-between">
                                          <Label htmlFor={`${day}-switch`} className="font-medium capitalize">
                                            {day}
                                          </Label>
                                          <Switch
                                            id={`${day}-switch`}
                                            checked={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open}
                                            onCheckedChange={() => {
                                              const updatedHours = {
                                                ...agentConfig.businessHours,
                                                [day]: {
                                                  ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                  open: !agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open
                                                }
                                              };
                                              updateSection("businessHours", updatedHours);
                                            }}
                                          />
                                        </div>
                                        
                                        {agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open && (
                                          <div className="grid grid-cols-2 gap-4 mt-2">
                                            <div>
                                              <Label htmlFor={`${day}-start`} className="text-xs text-muted-foreground">
                                                Open
                                              </Label>
                                              <Input
                                                id={`${day}-start`}
                                                type="time"
                                                value={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].start}
                                                onChange={(e) => {
                                                  const updatedHours = {
                                                    ...agentConfig.businessHours,
                                                    [day]: {
                                                      ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                      start: e.target.value
                                                    }
                                                  };
                                                  updateSection("businessHours", updatedHours);
                                                }}
                                                className="mt-1 rounded-md"
                                              />
                                            </div>
                                            <div>
                                              <Label htmlFor={`${day}-end`} className="text-xs text-muted-foreground">
                                                Close
                                              </Label>
                                              <Input
                                                id={`${day}-end`}
                                                type="time"
                                                value={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].end}
                                                onChange={(e) => {
                                                  const updatedHours = {
                                                    ...agentConfig.businessHours,
                                                    [day]: {
                                                      ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                      end: e.target.value
                                                    }
                                                  };
                                                  updateSection("businessHours", updatedHours);
                                                }}
                                                className="mt-1 rounded-md"
                                              />
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                  
                                  {/* Weekend Group */}
                                  <div className="border rounded-md p-4 bg-gray-50">
                                    <h4 className="text-sm font-medium mb-3 flex items-center">
                                      <Calendar className="h-4 w-4 text-blue-600 mr-2" />
                                      Weekend
                                    </h4>
                                    
                                    {['saturday', 'sunday'].map((day) => (
                                      <div key={day} className="mb-3 last:mb-0">
                                        <div className="flex items-center justify-between">
                                          <Label htmlFor={`${day}-switch`} className="font-medium capitalize">
                                            {day}
                                          </Label>
                                          <Switch
                                            id={`${day}-switch`}
                                            checked={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open}
                                            onCheckedChange={() => {
                                              const updatedHours = {
                                                ...agentConfig.businessHours,
                                                [day]: {
                                                  ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                  open: !agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open
                                                }
                                              };
                                              updateSection("businessHours", updatedHours);
                                            }}
                                          />
                                        </div>
                                        
                                        {agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].open && (
                                          <div className="grid grid-cols-2 gap-4 mt-2">
                                            <div>
                                              <Label htmlFor={`${day}-start`} className="text-xs text-muted-foreground">
                                                Open
                                              </Label>
                                              <Input
                                                id={`${day}-start`}
                                                type="time"
                                                value={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].start}
                                                onChange={(e) => {
                                                  const updatedHours = {
                                                    ...agentConfig.businessHours,
                                                    [day]: {
                                                      ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                      start: e.target.value
                                                    }
                                                  };
                                                  updateSection("businessHours", updatedHours);
                                                }}
                                                className="mt-1 rounded-md"
                                              />
                                            </div>
                                            <div>
                                              <Label htmlFor={`${day}-end`} className="text-xs text-muted-foreground">
                                                Close
                                              </Label>
                                              <Input
                                                id={`${day}-end`}
                                                type="time"
                                                value={agentConfig.businessHours[day as keyof typeof agentConfig.businessHours].end}
                                                onChange={(e) => {
                                                  const updatedHours = {
                                                    ...agentConfig.businessHours,
                                                    [day]: {
                                                      ...agentConfig.businessHours[day as keyof typeof agentConfig.businessHours],
                                                      end: e.target.value
                                                    }
                                                  };
                                                  updateSection("businessHours", updatedHours);
                                                }}
                                                className="mt-1 rounded-md"
                                              />
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                  
                                  {/* Public Holidays */}
                                  <div className="border rounded-md p-4">
                                    <h4 className="text-sm font-medium mb-3 flex items-center">
                                      <Calendar className="h-4 w-4 text-blue-600 mr-2" />
                                      Public Holidays
                                    </h4>
                                    
                                    <div className="space-y-4">
                                      <div>
                                        <Label htmlFor="publicHolidays">Holiday Schedule</Label>
                                        <Textarea
                                          id="publicHolidays"
                                          value={agentConfig.businessKnowledge?.publicHolidays || ""}
                                          onChange={(e) => {
                                            const updatedKnowledge = {
                                              ...agentConfig.businessKnowledge,
                                              publicHolidays: e.target.value,
                                              lastUpdated: Date.now()
                                            };
                                            updateSection("businessKnowledge", updatedKnowledge);
                                          }}
                                          className="mt-1 min-h-[100px] rounded-md"
                                          placeholder="List your public holidays and special opening hours:&#10;&#10;New Year's Day (Jan 1) - Closed&#10;Australia Day (Jan 26) - 10am to 4pm&#10;Good Friday - Closed"
                                        />
                                        <p className="text-xs text-muted-foreground mt-2">
                                          Enter one holiday per line with dates and opening hours
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* Quick Actions */}
                                  <div className="flex flex-wrap gap-2">
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      onClick={() => {
                                        const standardHours = {
                                          monday: { open: true, start: "09:00", end: "17:00" },
                                          tuesday: { open: true, start: "09:00", end: "17:00" },
                                          wednesday: { open: true, start: "09:00", end: "17:00" },
                                          thursday: { open: true, start: "09:00", end: "17:00" },
                                          friday: { open: true, start: "09:00", end: "17:00" },
                                          saturday: { open: false, start: "10:00", end: "16:00" },
                                          sunday: { open: false, start: "10:00", end: "16:00" }
                                        };
                                        updateSection("businessHours", standardHours);
                                      }}
                                      className="rounded-md"
                                    >
                                      Set Standard Hours (9-5)
                                    </Button>
                                    
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      onClick={() => {
                                        const allOpen = {
                                          monday: { ...agentConfig.businessHours.monday, open: true },
                                          tuesday: { ...agentConfig.businessHours.tuesday, open: true },
                                          wednesday: { ...agentConfig.businessHours.wednesday, open: true },
                                          thursday: { ...agentConfig.businessHours.thursday, open: true },
                                          friday: { ...agentConfig.businessHours.friday, open: true },
                                          saturday: { ...agentConfig.businessHours.saturday, open: true },
                                          sunday: { ...agentConfig.businessHours.sunday, open: true }
                                        };
                                        updateSection("businessHours", allOpen);
                                      }}
                                      className="rounded-md"
                                    >
                                      Open All Days
                                    </Button>
                                    
                                    <Button 
                                      variant="outline" 
                                      size="sm"
                                      onClick={() => {
                                        const allClosed = {
                                          monday: { ...agentConfig.businessHours.monday, open: false },
                                          tuesday: { ...agentConfig.businessHours.tuesday, open: false },
                                          wednesday: { ...agentConfig.businessHours.wednesday, open: false },
                                          thursday: { ...agentConfig.businessHours.thursday, open: false },
                                          friday: { ...agentConfig.businessHours.friday, open: false },
                                          saturday: { ...agentConfig.businessHours.saturday, open: false },
                                          sunday: { ...agentConfig.businessHours.sunday, open: false }
                                        };
                                        updateSection("businessHours", allClosed);
                                      }}
                                      className="rounded-md"
                                    >
                                      Close All Days
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TabsContent>
                          
                          <TabsContent value="objectives" className="pt-0 mt-0 data-[state=active]:block">
                            <ObjectivesForm 
                              data={agentConfig.objectives} 
                              onChange={(data) => updateSection("objectives", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="pricing" className="pt-0 mt-0 data-[state=active]:block">
                            <ProductPricingForm 
                              data={agentConfig.productPricing} 
                              onChange={(data) => updateSection("productPricing", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="financials" className="pt-0 mt-0 data-[state=active]:block">
                            <FinancialGuardrailsForm 
                              data={agentConfig.financialGuardrails} 
                              onChange={(data) => updateSection("financialGuardrails", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="cohorts" className="pt-0 mt-0 data-[state=active]:block">
                            <CustomerCohortsForm 
                              data={agentConfig.customerCohorts} 
                              onChange={(data) => updateSection("customerCohorts", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="rewards" className="pt-0 mt-0 data-[state=active]:block">
                            <RewardConstraintsForm 
                              data={agentConfig.rewardConstraints} 
                              onChange={(data) => updateSection("rewardConstraints", data)} 
                            />
                          </TabsContent>
                          
                          <TabsContent value="messaging" className="pt-0 mt-0 data-[state=active]:block">
                            <MessagingConstraintsForm 
                              data={agentConfig.messagingConstraints} 
                              onChange={(data) => updateSection("messagingConstraints", data)} 
                            />
                          </TabsContent>
                      </ScrollArea>
                      
                      <div className="flex justify-between mt-6 pt-4 border-t border-[#E2E4E8]">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => {
                            // Reset section to default
                            const sectionKey = rewardActiveTab === "brand" ? "businessBrand" :
                                            rewardActiveTab === "tasks" ? "agentTasks" :
                                            rewardActiveTab === "hours" ? "businessHours" :
                                            rewardActiveTab === "objectives" ? "objectives" :
                                            rewardActiveTab === "pricing" ? "productPricing" :
                                            rewardActiveTab === "financials" ? "financialGuardrails" :
                                            rewardActiveTab === "cohorts" ? "customerCohorts" :
                                            rewardActiveTab === "rewards" ? "rewardConstraints" :
                                            "messagingConstraints";
                          
                            setAgentConfig(prev => ({
                              ...prev,
                              [sectionKey]: defaultAgentConfig[sectionKey as keyof AgentConfig]
                            }));
                          
                            toast({
                              title: "Reset",
                              description: "This section has been reset to default values.",
                            })
                          }}
                          className="h-9 gap-2 border-0 ring-1 ring-gray-200 text-gray-700 hover:bg-gray-50 shadow-sm rounded-md"
                        >
                          Reset Section
                        </Button>
                        
                        <Button 
                          onClick={() => saveAgentConfig()}
                          disabled={saving}
                          size="sm"
                            className="rounded-md"
                          >
                            {saving ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Saving...
                              </>
                            ) : (
                              <>
                                <Check className="h-4 w-4 mr-2" />
                                Save Changes
                              </>
                            )}
                        </Button>
                    </div>
                  </div>
                </Tabs>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="customer-service">
                <div className="flex flex-col gap-4">
                  <div className="w-full bg-white rounded-md border shadow-sm">
                    {agentConfig.businessKnowledge.manualEntries.length > 0 || 
                     agentConfig.businessBrand.businessName || 
                     agentConfig.businessBrand.businessContext ? (
                      <div>
                        <div className="flex items-center justify-between border-b px-6 py-4">
                          <div className="flex items-center">
                          <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                            <Bot className="h-6 w-6 text-blue-600" />
                          </div>
                          <div>
                            <h2 className="text-xl font-medium">Customer Service Agent</h2>
                              <p className="text-sm text-muted-foreground mt-1">
                                AI assistant configured to help customers based on your business rules
                            </p>
                            </div>
                          </div>
                          <Button 
                            variant="outline"
                            size="sm"
                            className={`rounded-md border shadow-sm ${agentConfig.emailSettings.automaticResponses ? 'bg-green-50 text-green-700 border-green-200' : 'bg-gray-50'}`}
                          >
                            <div className={`h-2 w-2 rounded-full mr-2 ${agentConfig.emailSettings.automaticResponses ? 'bg-green-500' : 'bg-gray-400'}`} />
                            {agentConfig.emailSettings.automaticResponses ? 'Active' : 'Inactive'}
                          </Button>
                        </div>
                        
                        <Tabs defaultValue="settings" value={customerServiceActiveTab} onValueChange={setCustomerServiceActiveTab} className="w-full">
                          <div className="border-b px-6 py-2 bg-gray-50">
                            <TabsList className="hidden">
                              <TabsTrigger value="settings">Settings</TabsTrigger>
                              <TabsTrigger value="business-context">Business Context</TabsTrigger>
                            </TabsList>
                            
                            <div className="flex gap-3">
                              <Button
                                onClick={() => setCustomerServiceActiveTab("settings")}
                                className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${
                                  customerServiceActiveTab === "settings" ? 
                                  "bg-white text-blue-600 shadow-sm" : 
                                  "bg-transparent text-gray-700 hover:bg-gray-50"
                                }`}
                              >
                                <Wrench className="h-4 w-4" />
                                <span>Settings</span>
                              </Button>
                              <Button
                                onClick={() => setCustomerServiceActiveTab("business-context")}
                                className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm transition-all ${
                                  customerServiceActiveTab === "business-context" ? 
                                  "bg-white text-blue-600 shadow-sm" : 
                                  "bg-transparent text-gray-700 hover:bg-gray-50"
                                }`}
                              >
                                <BookText className="h-4 w-4" />
                                <span>Business Context</span>
                              </Button>
                            </div>
                          </div>
                          
                          <TabsContent value="settings" className="p-6">
                            <div className="space-y-6">
                              {/* Agent Settings */}
                              <div>
                                <h3 className="font-medium mb-4 flex items-center">
                                  <Bot className="h-4 w-4 text-blue-600 mr-2" />
                                  <span>Agent Configuration</span>
                                </h3>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                  <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-md border">
                                    <div className={`h-10 w-10 rounded-full flex items-center justify-center ${agentConfig.emailSettings.automaticResponses ? 'bg-green-100' : 'bg-gray-200'}`}>
                                      <MessageSquare className={`h-5 w-5 ${agentConfig.emailSettings.automaticResponses ? 'text-green-600' : 'text-gray-500'}`} />
                                    </div>
                                    <div>
                                      <div className="font-medium text-sm">Automatic Responses</div>
                                      <div className="text-xs text-muted-foreground mt-1">
                                        Agent will automatically respond to customer inquiries
                                      </div>
                                    </div>
                                    <Switch 
                                      checked={agentConfig.emailSettings.automaticResponses}
                                      onCheckedChange={(checked) => {
                                        updateSection("emailSettings", {
                                          ...agentConfig.emailSettings,
                                          automaticResponses: checked
                                        })
                                      }}
                                      className="ml-auto"
                                    />
                                  </div>
                                  <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-md border">
                                    <div className={`h-10 w-10 rounded-full flex items-center justify-center ${agentConfig.emailSettings.notifyBeforeSend ? 'bg-blue-100' : 'bg-gray-200'}`}>
                                      <Check className={`h-5 w-5 ${agentConfig.emailSettings.notifyBeforeSend ? 'text-blue-600' : 'text-gray-500'}`} />
                                    </div>
                                    <div>
                                      <div className="font-medium text-sm">Human Review</div>
                                      <div className="text-xs text-muted-foreground mt-1">
                                        You'll review all responses before they're sent to customers
                                      </div>
                                    </div>
                                    <Switch 
                                      checked={agentConfig.emailSettings.notifyBeforeSend}
                                      onCheckedChange={(checked) => {
                                        updateSection("emailSettings", {
                                          ...agentConfig.emailSettings,
                                          notifyBeforeSend: checked
                                        })
                                      }}
                                      className="ml-auto"
                                    />
                                  </div>
                                </div>
                              </div>
                              
                              {/* Communication Style and Email Sign-off in a grid */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Communication Style */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Layers className="h-4 w-4 text-blue-600 mr-2" />
                                    Communication Style
                                  </h3>
                                  
                                  <div>
                                    <Label htmlFor="emailTone" className="mb-2 block">Agent Communication Style</Label>
                                    <Select 
                                      value={agentConfig.emailSettings.emailTone}
                                      onValueChange={(value) => {
                                        updateSection("emailSettings", {
                                          ...agentConfig.emailSettings,
                                          emailTone: value
                                        })
                                      }}
                                    >
                                      <SelectTrigger id="emailTone" className="rounded-md">
                                        <SelectValue placeholder="Select a tone" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="professional">Professional</SelectItem>
                                        <SelectItem value="friendly">Friendly</SelectItem>
                                        <SelectItem value="casual">Casual</SelectItem>
                                        <SelectItem value="formal">Formal</SelectItem>
                                        <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                                        <SelectItem value="empathetic">Empathetic</SelectItem>
                                      </SelectContent>
                                    </Select>
                                    <p className="text-xs text-muted-foreground mt-2">
                                      This sets the overall tone for all customer communications
                                    </p>
                                  </div>
                                </div>
                                
                                {/* Email Sign-off */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Mail className="h-4 w-4 text-blue-600 mr-2" />
                                    Email Sign-off
                                  </h3>
                                  
                                  <div>
                                    <Label htmlFor="emailSignature" className="mb-2 block">Custom Email Signature</Label>
                                    <Textarea
                                      id="emailSignature"
                                      value={agentConfig.emailSettings.customSignature || ""}
                                      onChange={(e) => updateSection("emailSettings", {
                                        ...agentConfig.emailSettings,
                                        customSignature: e.target.value
                                      })}
                                      className="mt-1 min-h-[100px] rounded-md"
                                      placeholder="Kind regards,&#10;The [Business Name] Team"
                                    />
                                    <p className="text-xs text-muted-foreground mt-2">
                                      This will appear at the end of all customer emails
                                    </p>
                                  </div>
                                </div>
                              </div>
                              
                              {/* Signature Templates */}
                              <div className="border rounded-md p-5 space-y-4">
                                <h3 className="font-medium flex items-center">
                                  <BookText className="h-4 w-4 text-blue-600 mr-2" />
                                  Signature Templates
                                </h3>
                                
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                  <Button
                                    variant="outline"
                            size="sm"
                                    onClick={() => updateSection("emailSettings", {
                                      ...agentConfig.emailSettings,
                                      customSignature: `Kind regards,\nThe ${agentConfig.businessBrand.businessName || "[Business Name]"} Team`
                                    })}
                                    className="h-auto py-2 px-3 text-left justify-start rounded-md"
                                  >
                                    <div>
                                      <p className="font-medium text-sm">Professional</p>
                                      <p className="text-xs text-muted-foreground mt-1">
                                        Kind regards,<br />
                                        The {agentConfig.businessBrand.businessName || "[Business Name]"} Team
                                      </p>
                                    </div>
                                  </Button>
                                  
                                  <Button
                            variant="outline"
                                    size="sm"
                                    onClick={() => updateSection("emailSettings", {
                                      ...agentConfig.emailSettings,
                                      customSignature: `Thanks,\nCustomer Support\n${agentConfig.businessBrand.businessName || "[Business Name]"}`
                                    })}
                                    className="h-auto py-2 px-3 text-left justify-start rounded-md"
                          >
                                    <div>
                                      <p className="font-medium text-sm">Casual</p>
                                      <p className="text-xs text-muted-foreground mt-1">
                                        Thanks,<br />
                                        Customer Support<br />
                                        {agentConfig.businessBrand.businessName || "[Business Name]"}
                                      </p>
                                    </div>
                          </Button>
                                  
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => updateSection("emailSettings", {
                                      ...agentConfig.emailSettings,
                                      customSignature: `Best wishes,\n${agentConfig.businessBrand.businessName || "[Business Name]"} Support Team\nPhone: [Your Phone]\nEmail: [Your Email]`
                                    })}
                                    className="h-auto py-2 px-3 text-left justify-start rounded-md"
                                  >
                                    <div>
                                      <p className="font-medium text-sm">Detailed</p>
                                      <p className="text-xs text-muted-foreground mt-1">
                                        Best wishes,<br />
                                        {agentConfig.businessBrand.businessName || "[Business Name]"} Support Team<br />
                                        Phone: [Your Phone]<br />
                                        Email: [Your Email]
                                      </p>
                        </div>
                                  </Button>
                                  
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => updateSection("emailSettings", {
                                      ...agentConfig.emailSettings,
                                      customSignature: `Cheers,\nThe team at ${agentConfig.businessBrand.businessName || "[Business Name]"}`
                                    })}
                                    className="h-auto py-2 px-3 text-left justify-start rounded-md"
                                  >
                                    <div>
                                      <p className="font-medium text-sm">Friendly</p>
                                      <p className="text-xs text-muted-foreground mt-1">
                                        Cheers,<br />
                                        The team at {agentConfig.businessBrand.businessName || "[Business Name]"}
                                      </p>
                                    </div>
                                  </Button>
                                </div>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                          {/* Business Information Summary */}
                                <div className="bg-blue-50 p-5 rounded-md border border-blue-100 h-full">
                                  <h3 className="font-medium mb-3 flex items-center text-blue-800">
                              <Store className="h-4 w-4 text-blue-600 mr-2" />
                              Business Information
                            </h3>
                            {agentConfig.businessBrand.businessName && (
                                    <p className="text-sm font-medium mb-2">{agentConfig.businessBrand.businessName}</p>
                            )}
                            {agentConfig.businessBrand.businessContext ? (
                              <p className="text-sm text-muted-foreground">
                                {agentConfig.businessBrand.businessContext}
                              </p>
                            ) : (
                              <p className="text-sm text-muted-foreground italic">
                                No business description provided
                              </p>
                            )}
                          </div>
                          
                                {/* Hours & Contact */}
                                <div className="bg-gray-50 p-5 rounded-md border h-full">
                                  <h3 className="font-medium mb-3 flex items-center">
                                <Clock3 className="h-4 w-4 text-blue-600 mr-2" />
                                Business Hours
                              </h3>
                                  <div className="space-y-1">
                                {Object.entries(agentConfig.businessHours)
                                  .filter(([_, hours]) => hours.open)
                                  .map(([day, hours]) => (
                                        <div key={day} className="flex justify-between text-sm">
                                          <span className="capitalize font-medium">{day}</span>
                                          <span className="text-gray-600">{hours.start} - {hours.end}</span>
                                        </div>
                                  ))}
                              {Object.values(agentConfig.businessHours).every(h => !h.open) && (
                                <p className="text-sm text-muted-foreground italic">No business hours set</p>
                              )}
                                  </div>
                            </div>
                            
                                {/* Communication Style */}
                                <div className="bg-gray-50 p-5 rounded-md border h-full">
                                  <h3 className="font-medium mb-3 flex items-center">
                                <Layers className="h-4 w-4 text-blue-600 mr-2" />
                                Communication Style
                              </h3>
                                  <div className="space-y-3">
                                    <Badge className="rounded-md bg-blue-100 text-blue-800 hover:bg-blue-100 border-blue-200">
                                  {agentConfig.emailSettings.emailTone.charAt(0).toUpperCase() + 
                                   agentConfig.emailSettings.emailTone.slice(1)}
                                </Badge>
                                {businessInsights.brandVoice.length > 0 && (
                                      <div>
                                        <p className="text-xs font-medium mb-2">Brand Voice Traits:</p>
                                    <div className="flex flex-wrap gap-1">
                                      {businessInsights.brandVoice.map((trait, index) => (
                                        <Badge key={index} variant="outline" className="text-xs bg-white rounded-md">
                                          {trait}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>
                                )}
                                  </div>
                              </div>
                            </div>
                              
                              <div className="flex justify-end mt-6 pt-4 border-t">
                                <Button 
                                  onClick={() => saveAgentConfig()}
                                  disabled={saving}
                                  className="rounded-md"
                                >
                                  {saving ? (
                                    <>
                                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                      Saving...
                                    </>
                                  ) : (
                                    <>
                                      <Check className="h-4 w-4 mr-2" />
                                      Save Changes
                                    </>
                                  )}
                                </Button>
                              </div>
                            
                              <div className="flex justify-end mt-4">
                                <Button 
                                  onClick={() => {
                                    extractBusinessInsights();
                                    setCustomerServiceSheetOpen(true);
                                  }}
                                  size="sm"
                                  className="rounded-md"
                                >
                                  <Wrench className="h-4 w-4 mr-2" />
                                  Edit Settings
                                </Button>
                              </div>
                            </div>
                          </TabsContent>
                          
                          <TabsContent value="business-context" className="p-6">
                            <div className="space-y-6">
                              <div className="flex justify-between items-center">
                                <h3 className="font-medium flex items-center">
                                  <BookText className="h-4 w-4 text-blue-600 mr-2" />
                                  Business Knowledge Base
                              </h3>
                                <Button 
                                  variant="outline" 
                                  size="sm" 
                                  onClick={() => {
                                    extractBusinessInsights();
                                    setShowBusinessContext(true);
                                    setCustomerServiceSheetOpen(true);
                                  }}
                                  className="rounded-md"
                                >
                                  <PlusCircle className="h-4 w-4 mr-1" />
                                  Add Context
                                </Button>
                                </div>
                              
                              {/* First Row: Business Information and Business Hours */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Business Information */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Store className="h-4 w-4 text-blue-600 mr-2" />
                                    Business Information
                                  </h3>
                                  
                                  <div className="space-y-4">
                                    <div>
                                      <Label htmlFor="businessName">Business Name</Label>
                                      <Input 
                                        id="businessName"
                                        value={agentConfig.businessBrand.businessName}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          businessName: e.target.value
                                        })}
                                        className="mt-1 rounded-md"
                                        placeholder="Enter your business name"
                                      />
                                </div>
                                    
                                    <div>
                                      <Label htmlFor="businessContext">Business Description</Label>
                                      <Textarea
                                        id="businessContext"
                                        value={agentConfig.businessBrand.businessContext}
                                        onChange={(e) => updateSection("businessBrand", {
                                          ...agentConfig.businessBrand,
                                          businessContext: e.target.value
                                        })}
                                        className="mt-1 min-h-[100px] rounded-md"
                                        placeholder="Describe what your business does, your products/services, and your value proposition"
                                      />
                              </div>
                            </div>
                          </div>
                          
                                {/* Business Hours */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Clock3 className="h-4 w-4 text-blue-600 mr-2" />
                                    Business Hours
                                  </h3>
                                  
                                  <div className="space-y-3">
                                    {Object.entries(agentConfig.businessHours).map(([day, hours]: [string, any]) => (
                                      <div key={day} className="flex items-center gap-3">
                                        <div className="w-24">
                                          <span className="capitalize">{day}</span>
                                        </div>
                                        <Switch
                                          checked={hours.open}
                                          onCheckedChange={(checked) => {
                                            const updatedHours = {
                                              ...agentConfig.businessHours,
                                              [day]: {
                                                ...hours,
                                                open: checked
                                              }
                                            };
                                            updateSection("businessHours", updatedHours);
                                          }}
                                        />
                                        {hours.open && (
                                          <div className="flex-1 flex items-center gap-2">
                                            <Input
                                              type="time"
                                              value={hours.start}
                                              onChange={(e) => {
                                                const updatedHours = {
                                                  ...agentConfig.businessHours,
                                                  [day]: {
                                                    ...hours,
                                                    start: e.target.value
                                                  }
                                                };
                                                updateSection("businessHours", updatedHours);
                                              }}
                                              className="w-28 rounded-md"
                                            />
                                            <span>to</span>
                                            <Input
                                              type="time"
                                              value={hours.end}
                                              onChange={(e) => {
                                                const updatedHours = {
                                                  ...agentConfig.businessHours,
                                                  [day]: {
                                                    ...hours,
                                                    end: e.target.value
                                                  }
                                                };
                                                updateSection("businessHours", updatedHours);
                                              }}
                                              className="w-28 rounded-md"
                                            />
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              </div>
                              
                              {/* Second Row: Public Holidays and Return Policy */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Public Holidays */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <Calendar className="h-4 w-4 text-blue-600 mr-2" />
                                    Public Holidays
                                  </h3>
                                  
                                  <div className="space-y-4">
                            <div>
                                      <Label htmlFor="publicHolidays">Holiday Schedule</Label>
                                      <Textarea
                                        id="publicHolidays"
                                        value={agentConfig.businessKnowledge?.publicHolidays || ""}
                                        onChange={(e) => {
                                          const updatedKnowledge = {
                                            ...agentConfig.businessKnowledge,
                                            publicHolidays: e.target.value,
                                            lastUpdated: Date.now()
                                          };
                                          updateSection("businessKnowledge", updatedKnowledge);
                                        }}
                                        className="mt-1 min-h-[150px] rounded-md"
                                        placeholder="List your public holidays and special opening hours:&#10;&#10;New Year's Day (Jan 1) - Closed&#10;Australia Day (Jan 26) - 10am to 4pm&#10;Good Friday - Closed"
                                      />
                                      <p className="text-xs text-muted-foreground mt-2">
                                        Enter one holiday per line with dates and opening hours
                                      </p>
                                    </div>
                                  </div>
                                </div>
                                
                                {/* Return Policy */}
                                <div className="border rounded-md p-5 space-y-4">
                                  <h3 className="font-medium flex items-center">
                                    <RefreshCcw className="h-4 w-4 text-blue-600 mr-2" />
                                    Return Policy
                                  </h3>
                                  
                                  <div className="space-y-4">
                                    <div>
                                      <Label htmlFor="returnPolicy">Return & Refund Policy</Label>
                                      <Textarea
                                        id="returnPolicy"
                                        value={agentConfig.businessKnowledge?.returnPolicy || ""}
                                        onChange={(e) => {
                                          const updatedKnowledge = {
                                            ...agentConfig.businessKnowledge,
                                            returnPolicy: e.target.value,
                                            lastUpdated: Date.now()
                                          };
                                          updateSection("businessKnowledge", updatedKnowledge);
                                        }}
                                        className="mt-1 min-h-[150px] rounded-md"
                                        placeholder="Describe your return and refund policy in detail:&#10;&#10;- Return period (e.g., 30 days)&#10;- Condition requirements&#10;- Refund process&#10;- Exceptions"
                                      />
                                      <p className="text-xs text-muted-foreground mt-2">
                                        Provide clear details about your return and refund policies
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              
                              {/* Business Context Entries */}
                              <div className="border rounded-md p-5 space-y-4">
                                <h3 className="font-medium flex items-center">
                                <BookText className="h-4 w-4 text-blue-600 mr-2" />
                                  Additional Business Context
                                  {agentConfig.businessKnowledge.manualEntries.length > 0 && (
                                    <Badge variant="outline" className="ml-2 rounded-md">
                                      {agentConfig.businessKnowledge.manualEntries.length} {agentConfig.businessKnowledge.manualEntries.length === 1 ? 'entry' : 'entries'}
                                    </Badge>
                                  )}
                              </h3>
                                
                                <div className="flex gap-2">
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={handleVoiceRecord}
                                    className={`gap-2 rounded-md ${isRecording ? 'bg-red-50 text-red-600 border-red-200' : ''}`}
                                  >
                                    <Mic className={`h-4 w-4 ${isRecording ? 'text-red-600 animate-pulse' : ''}`} />
                                    {isRecording ? 'Recording...' : 'Add voice input'}
                                  </Button>
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => setShowManualInput(!showManualInput)}
                                    className="gap-2 rounded-md"
                                  >
                                    <PlusCircle className="h-4 w-4" />
                                    Add manual context
                                  </Button>
                                </div>
                                
                                {showManualInput && (
                                  <div className="border p-4 rounded-md bg-gray-50 space-y-3">
                                    <Textarea
                                      placeholder="Describe your business, products, services, policies, or any other relevant information..."
                                      value={manualInput}
                                      onChange={(e) => setManualInput(e.target.value)}
                                      className="min-h-[100px] rounded-md"
                                    />
                                    <div className="flex justify-end gap-2">
                                      <Button 
                                        variant="outline" 
                                        size="sm"
                                        onClick={() => {
                                          setManualInput("");
                                          setShowManualInput(false);
                                        }}
                                        className="rounded-md"
                                      >
                                        Cancel
                                      </Button>
                                      <Button 
                                        size="sm"
                                        onClick={() => addManualContextEntry(manualInput)}
                                        disabled={!manualInput.trim()}
                                        className="rounded-md"
                                      >
                                        Save Context
                                      </Button>
                                    </div>
                                  </div>
                                )}
                                
                                {agentConfig.businessKnowledge.manualEntries.length > 0 ? (
                                  <div className="space-y-3 max-h-[300px] overflow-y-auto pr-1">
                                  {agentConfig.businessKnowledge.manualEntries.map((entry) => (
                                      <div key={entry.id} className="p-3 bg-gray-50 rounded-md border">
                                        <div className="flex items-center justify-between mb-2">
                                          <Badge variant={entry.source === 'voice' ? 'secondary' : 'outline'} className="rounded-md">
                                            {entry.source === 'voice' ? 'Voice Input' : 'Manual Entry'}
                                        </Badge>
                                          <div className="flex items-center gap-2">
                                        <span className="text-xs text-muted-foreground">
                                              {new Date(entry.timestamp).toLocaleString()}
                                        </span>
                                            <Button
                                              variant="ghost"
                                              size="icon"
                                              onClick={() => deleteContextEntry(entry.id)}
                                              className="h-6 w-6 rounded-md hover:bg-red-50 hover:text-red-600"
                                              title="Delete entry"
                                            >
                                              <X className="h-4 w-4" />
                                            </Button>
                                          </div>
                                      </div>
                                      <p className="text-sm">{entry.content}</p>
                                    </div>
                                  ))}
                                </div>
                                ) : (
                                  <div className="text-center py-6 text-muted-foreground">
                                    <BookText className="h-12 w-12 mx-auto mb-2 opacity-20" />
                                    <p>No business context entries yet.</p>
                                    <p className="text-sm">Add context using the buttons above.</p>
                              </div>
                                )}
                            </div>
                              
                              <div className="flex justify-end pt-4">
                                <Button 
                                  onClick={() => saveAgentConfig()}
                                  disabled={saving}
                                  className="rounded-md"
                                >
                                  {saving ? (
                                    <>
                                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                      Saving...
                                    </>
                                  ) : (
                                    <>
                                      <Check className="h-4 w-4 mr-2" />
                                      Save Changes
                                    </>
                          )}
                                </Button>
                        </div>
                            </div>
                          </TabsContent>
                        </Tabs>
                      </div>
                    ) : (
                      <div className="max-w-2xl mx-auto text-center py-12">
                        <div className="h-20 w-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
                          <Bot className="h-10 w-10 text-blue-600" />
                        </div>
                        <h2 className="text-2xl font-medium mb-3">Set Up Customer Service Agent</h2>
                        <p className="text-gray-600 mb-8 max-w-lg mx-auto">
                          Let AI handle customer inquiries automatically, delivering timely and consistent 
                          responses based on your specific business rules and preferences.
                        </p>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-5 text-left max-w-2xl mx-auto mb-8">
                          <div className="bg-gray-50 p-4 rounded-md border">
                            <MessageSquare className="h-6 w-6 text-blue-600 mb-3" />
                            <h3 className="font-medium mb-1">Auto-Response</h3>
                            <p className="text-sm text-gray-600">Automatically reply to common customer questions</p>
                          </div>
                          <div className="bg-gray-50 p-4 rounded-md border">
                            <Clock3 className="h-6 w-6 text-blue-600 mb-3" />
                            <h3 className="font-medium mb-1">24/7 Support</h3>
                            <p className="text-sm text-gray-600">Provide instant responses at any time</p>
                          </div>
                          <div className="bg-gray-50 p-4 rounded-md border">
                            <Bot className="h-6 w-6 text-blue-600 mb-3" />
                            <h3 className="font-medium mb-1">Smart Learning</h3>
                            <p className="text-sm text-gray-600">Gets better as it learns your business</p>
                          </div>
                        </div>
                        <Button 
                          onClick={() => {
                            // Navigate to detailed setup or open a modal
                            setCustomerServiceSheetOpen(true)
                          }}
                          size="lg"
                          className="bg-[#0D6EFD] hover:bg-[#0B5ED7] text-white gap-2 rounded-md px-6"
                        >
                          <Bot className="h-5 w-5" />
                          Set up customer agent
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </TabsContent>
          
          <TabsContent value="customers">
            <CustomersList />
          </TabsContent>
        </Tabs>
      </div>
      {customerServiceSheetOpen && (
        <Sheet open={customerServiceSheetOpen} onOpenChange={setCustomerServiceSheetOpen}>
          <SheetContent side="right" className="w-full sm:max-w-md md:max-w-lg lg:max-w-xl p-0 flex flex-col rounded-md">
            <div className="flex-1 overflow-y-auto">
              <div className="p-6">
                {!showBusinessContext ? (
                  <>
                    <SheetHeader className="mb-8">
                      <div className="flex items-center">
                        <div className="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                          <Bot className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                      <SheetTitle className="text-xl">Customer Service Agent Setup</SheetTitle>
                      <SheetDescription>
                        Configure your AI-powered customer service agent to handle common inquiries.
                      </SheetDescription>
                        </div>
                      </div>
                    </SheetHeader>
                    
                    <div className="space-y-6">
                      <div className="bg-blue-50 p-5 rounded-md border border-blue-100">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                            <BookText className="h-5 w-5 text-blue-600" />
                          </div>
                          <h3 className="font-medium">Business Knowledge</h3>
                        </div>
                        <p className="text-sm text-muted-foreground mb-4">
                          Add information about your business that the agent will use when responding to customer inquiries.
                        </p>
                        <Button 
                          onClick={() => {
                            extractBusinessInsights();
                            setShowBusinessContext(true);
                          }}
                          className="w-full gap-2 rounded-md bg-blue-600 hover:bg-blue-700"
                        >
                          <BookOpen className="h-4 w-4" />
                          View & Edit Business Context
                        </Button>
                      </div>

                      <div className="bg-green-50 p-5 rounded-md border border-green-100">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="h-10 w-10 bg-green-100 rounded-full flex items-center justify-center">
                            <LineChart className="h-5 w-5 text-green-600" />
                          </div>
                          <h3 className="font-medium">Inquiry Analysis</h3>
                        </div>
                        <p className="text-sm text-muted-foreground mb-4">
                          Analyse customer inquiries to identify common patterns and improve automated responses.
                        </p>
                        <Button 
                          onClick={() => {
                            toast({
                              title: "Analysis Started",
                              description: "Analysing customer inquiries. This may take a few minutes.",
                            })
                          }}
                          className="w-full gap-2 rounded-md bg-green-600 hover:bg-green-700 text-white"
                        >
                          <LineChart className="h-4 w-4" />
                          Analyse customer inquiries
                        </Button>
                      </div>

                      <div className="space-y-4">
                        <h3 className="font-medium flex items-center">
                          <Bot className="h-4 w-4 text-blue-600 mr-2" />
                          Agent Configuration
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          Configure how your customer service agent responds to inquiries.
                        </p>
                        
                        <div className="space-y-5 rounded-md border p-5">
                          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-md border">
                            <div className={`h-10 w-10 rounded-full flex items-center justify-center ${agentConfig.emailSettings.automaticResponses ? 'bg-green-100' : 'bg-gray-200'}`}>
                              <MessageSquare className={`h-5 w-5 ${agentConfig.emailSettings.automaticResponses ? 'text-green-600' : 'text-gray-500'}`} />
                            </div>
                            <div className="flex-1">
                              <Label htmlFor="enableAgent" className="font-medium">Enable customer service agent</Label>
                              <p className="text-xs text-muted-foreground mt-1">
                                Agent will automatically respond to customer inquiries
                              </p>
                            </div>
                            <Switch 
                              id="enableAgent" 
                              checked={agentConfig.emailSettings.automaticResponses}
                              onCheckedChange={(checked) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  automaticResponses: checked
                                })
                              }}
                            />
                          </div>
                          
                          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-md border">
                            <div className={`h-10 w-10 rounded-full flex items-center justify-center ${agentConfig.emailSettings.notifyBeforeSend ? 'bg-blue-100' : 'bg-gray-200'}`}>
                              <Check className={`h-5 w-5 ${agentConfig.emailSettings.notifyBeforeSend ? 'text-blue-600' : 'text-gray-500'}`} />
                            </div>
                            <div className="flex-1">
                              <Label htmlFor="humanReview" className="font-medium">Require human review</Label>
                              <p className="text-xs text-muted-foreground mt-1">
                                You'll review all responses before they're sent to customers
                              </p>
                            </div>
                            <Switch 
                              id="humanReview" 
                              checked={agentConfig.emailSettings.notifyBeforeSend}
                              onCheckedChange={(checked) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  notifyBeforeSend: checked
                                })
                              }}
                            />
                          </div>
                          
                          <div className="pt-2">
                            <Label htmlFor="agentTone" className="font-medium mb-2 block">Communication Style</Label>
                            <Select 
                              value={agentConfig.emailSettings.emailTone}
                              onValueChange={(value) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  emailTone: value
                                })
                              }}
                            >
                              <SelectTrigger id="agentTone" className="rounded-md w-full bg-gray-50 border">
                                <SelectValue placeholder="Select a tone" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="professional">Professional</SelectItem>
                                <SelectItem value="friendly">Friendly</SelectItem>
                                <SelectItem value="casual">Casual</SelectItem>
                                <SelectItem value="formal">Formal</SelectItem>
                                <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                                <SelectItem value="empathetic">Empathetic</SelectItem>
                              </SelectContent>
                            </Select>
                            <p className="text-xs text-muted-foreground mt-2">
                              This sets the overall tone for all customer communications
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 p-4 rounded-md text-sm space-y-2 border">
                        <div className="flex items-center gap-2">
                          <Info className="h-4 w-4 text-blue-600" />
                        <p className="font-medium">About the Customer Service Agent</p>
                        </div>
                        <p className="text-muted-foreground">
                          This AI agent automatically responds to customer inquiries based on your business information. With human review enabled, you'll approve responses before they're sent.
                        </p>
                      </div>
                    </div>
                  </>
                ) : (
                  renderBusinessContextPage()
                )}
              </div>
            </div>
            
            <div className="border-t border-[#E2E4E8] bg-white p-4">
              <div className="flex justify-between items-center">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => {
                    if (showBusinessContext) {
                      setShowBusinessContext(false);
                    } else {
                      // Use the resetToDefault function
                      resetToDefault();
                    }
                  }}
                  className="h-9 gap-2 border shadow-sm rounded-md"
                >
                  {showBusinessContext ? "Back to Setup" : "Reset Settings"}
                </Button>
                
                <Button 
                  onClick={() => {
                    if (showBusinessContext) {
                      // Save business context information
                      saveAgentConfig();
                      setShowBusinessContext(false);
                    } else {
                      saveAgentConfig();
                      setCustomerServiceSheetOpen(false);
                    }
                  }}
                  disabled={saving}
                  size="sm"
                  className="h-9 bg-[#0D6EFD] hover:bg-[#0B5ED7] text-white shadow-sm rounded-md"
                >
                  {saving ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Saving...
                    </>
                  ) : showBusinessContext ? (
                    "Save & Continue"
                  ) : (
                    "Save Configuration"
                  )}
                </Button>
              </div>
            </div>
          </SheetContent>
        </Sheet>
      )}
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { PageTransition } from "@/components/page-transition"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Progress } from "@/components/ui/progress"
import { 
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import {
  LayoutDashboard,
  FileQuestion,
  Cloud,
  Percent,
  Target,
  AlertTriangle,
  ShieldCheck,
  LineChart,
  Lightbulb,
  CalendarRange,
  Brain,
  BarChart3,
  Building2,
  Receipt,
  BadgeDollarSign,
  Users,
  Gift, 
  Settings, 
  Info,
  ArrowRight,
  DollarSign,
  Plus,
  CheckCircle,
  MessageSquareText,
  Bell, 
  Calendar,
  FileText, 
  BarChart,
  Clock, 
  Sparkles,
  Zap,
  Star,
  MessageSquare as Message,
  Star as StarIcon,
  Clipboard,
  ClipboardList,
  UserCircle,
  Cake,
  Trophy,
  Mail,
  ShoppingBag
} from "lucide-react"

// Import necessary Firebase dependencies
import { db } from "@/lib/firebase"
import { doc, setDoc, getDoc, collection, getDocs, query, where } from "firebase/firestore" 
import { useAuth } from "@/contexts/auth-context"
import { getAuth } from 'firebase/auth';

// Add the gradient text CSS
const gradientTextStyle = `
.gradient-text {
  background: linear-gradient(90deg, #3D8BFF 0%, #FF8A00 100%);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  font-weight: 700;
}

.apple-switch {
  background-color: #007AFF;
}

.apple-card {
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  border: none;
}

.apple-button {
  background-color: #007AFF;
  border-radius: 8px;
  font-weight: 500;
}

.apple-button:hover {
  background-color: #0062CC;
}
`;

export default function TapAgentPage() {
  // Get the current user's auth state
  const { user } = useAuth()
  
  // State for active tab
  const [activeTab, setActiveTab] = useState<string>("business-brand")
  const [completionStatus, setCompletionStatus] = useState<Record<string, number>>({
    "business-brand": 0,
    "objectives": 0,
    "product-pricing": 0,
    "financial": 0,
    "customer-segments": 0,
    "reward-constraints": 0,
    "messaging": 0
  })
  const [overallProgress, setOverallProgress] = useState<number>(0)
  const { toast } = useToast()
  
  // Add state for merchant name
  const [merchantName, setMerchantName] = useState<string>("")
  
  // Sample form state for business and brand section
  const [businessBrand, setBusinessBrand] = useState({
    merchantId: "", // Keep merchantId in state but hide the input field
    brandPalette: "",
    brandPrimaryColor: "#007AFF",
    brandSecondaryColor: "#FFFFFF",
    brandAccentColor: "#FF3B30",
    logoUrl: "",
    toneOfVoice: [] as string[],
    agentTasks: {} as Record<string, boolean>,
    openingHours: {} as {[day: string]: {isOpen: boolean, openTime: string, closeTime: string}},
    businessContext: "" // Add this new field
  })

  // Add a useEffect to load settings from the settings page
  useEffect(() => {
    // This will be called when the component mounts
    async function loadSettings() {
      try {
        // Call Firestore to get the merchant data
        // For now, setting some default values to demonstrate
        const defaultHours = {} as {[day: string]: {isOpen: boolean, openTime: string, closeTime: string}};
        const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        
        daysOfWeek.forEach(day => {
          defaultHours[day.toLowerCase()] = {
            isOpen: true,
            openTime: "09:00",
            closeTime: "17:00"
          }
        });
        
        // Default agent tasks
        const defaultAgentTasks = {
          rewards: false,
          banners: false,
          messages: false,
          "re-engagement": false,
          email: false,
          analysis: false
        };
        
        // Update the state with the imported values
        setBusinessBrand(prev => ({
          ...prev,
          openingHours: defaultHours,
          agentTasks: defaultAgentTasks,
          // We would also set merchantId here from the fetched data
          merchantId: "merchant_12345"
        }));
      } catch (error) {
        console.error("Error loading settings:", error);
      }
    }
    
    loadSettings();
  }, []);

  // Initialize the productPricing state with an empty skus array
  const [productPricing, setProductPricing] = useState({
    skuList: [] as {name: string, category: string, price: string, cost: string}[],
    heroItems: [] as string[],
    lowVelocityItems: [] as string[],
    averageBasketSize: "",
    basketComposition: [] as {category: string, percentage: number}[],
    newHeroItem: "",
    newLowVelocityItem: "",
    newBasketCategory: "",
    newBasketPercentage: 0,
    newSkuName: "",
    newSkuCategory: "",
    newSkuPrice: "",
    newSkuCost: "",
    productCategory: "",
    skus: [] as { name: string, category: string, price: string, cost: string }[],
    heroProducts: "",
    lowVelocityProducts: "",
    pricingStrategy: "",
    competitivePressure: "",
    seasonalPricing: "",
    bundlingStrategy: ""
  })

  // Add a new state for the financial guard-rails section after the productPricing state
  const [financialGuardrails, setFinancialGuardrails] = useState({
    targetGrossMargin: "",
    monthlyRewardBudget: "",
    rewardBudgetType: "fixed", // 'fixed' or 'percentage'
    maxCostPerAcquisition: "",
    maxDiscountPercentage: "",
    targetROAS: "",
    minRewardValue: "",
    maxRewardValue: "",
    avgRewardValue: "",
    minPurchaseRequirement: ""
  })

  // Add a new state for messaging and creative inputs
  const [messagingInputs, setMessagingInputs] = useState({
    bannerSlots: "1",
    bannerDimensions: "1200x628",
    copyLengthLimits: "",
    quietHoursStart: "21:00",
    quietHoursEnd: "07:00",
    preferredEmojis: "",
    ctaLandingRoute: "/rewards/{id}",
    restrictedKeywords: ""
  })

  // Add state for customer segments
  const [customerSegments, setCustomerSegments] = useState({
    loyaltyTiers: [
      { 
        name: "Bronze", 
        order: 1,
        description: "Basic membership benefits",
        conditions: {
          lifetimeTransactions: { enabled: true, value: 0 },
          lifetimeSpend: { enabled: true, value: 0 },
          numberOfRedemptions: { enabled: false, value: 0 }
        }
      },
      { 
        name: "Silver", 
        order: 2,
        description: "Enhanced membership benefits",
        conditions: {
          lifetimeTransactions: { enabled: true, value: 10 },
          lifetimeSpend: { enabled: true, value: 500 },
          numberOfRedemptions: { enabled: false, value: 0 }
        }
      },
      { 
        name: "Gold", 
        order: 3,
        description: "Premium membership benefits",
        conditions: {
          lifetimeTransactions: { enabled: true, value: 25 },
          lifetimeSpend: { enabled: true, value: 1500 },
          numberOfRedemptions: { enabled: true, value: 5 }
        }
      }
    ],
    dormantThreshold: "30",
    vipCriteria: "",
    demographicTags: [] as string[],
    // Additional cohort settings
    newCustomerDuration: "30",
    frequentVisitorThreshold: "4",
    frequentVisitorPeriod: "30",
    highSpenderThreshold: "100",
    highSpenderPeriod: "30",
    seasonalVisitors: [] as string[],
    birthdayRewards: true,
    anniversaryRewards: true,
    // Add cohort thresholds
    activeThreshold: "30",
    newCustomerThreshold: "30",
    newCustomerVisitLimit: "2",
    churnedThreshold: "180",
    resurrectedThreshold: "60",
    dormantCohortThreshold: "90",
    // Add escalation strategy
    escalationStrategy: "value_increase",
    // Initialize VIP thresholds with empty strings
    vipSpendThreshold: "",
    vipSpendPeriod: "",
    vipVisitThreshold: "",
    birthdayRewardDays: "7",
    transactionMilestones: { enabled: false, interval: "10" },
    redemptionMilestones: { enabled: false, interval: "5" },
    spendingMilestones: { enabled: false, amount: "500" },
    // Track threshold validation errors - initialize with empty strings
    cohortThresholdErrors: {
      activeThreshold: "",
      dormantCohortThreshold: "",
      churnedThreshold: "",
      resurrectedThreshold: "",
      newCustomerThreshold: ""
    }
  })

  // Add state for reward constraints
  const [rewardConstraints, setRewardConstraints] = useState({
    allowedOfferTypes: {
      freeItem: true,
      percentageDiscount: true,
      fixedAmount: true,
      buyXGetY: true,
      mysteryGift: false
    },
    dailyRedemptionLimit: "3",
    redemptionWindow: "7",
    minimumDaysBetweenRewards: "1",
    rewardLifespanMin: "1",
    rewardLifespanMax: "7",
    concurrencyCeiling: "4",
    displayFrequency: "daily",
    displayLocation: ["home_screen", "checkout"] as string[],
    minPurchaseRequirement: "10"
  });

  // Add remaining advanced section states
  const [campaignSettings, setCampaignSettings] = useState({
    frequencyMin: "1",
    frequencyMax: "4",
    aBTestDuration: "14",
    testGroupSize: "10"
  })

  // Add a loading state for Firestore operations
  const [isSaving, setIsSaving] = useState(false)
  const [saveError, setSaveError] = useState<string | null>(null)
  
  // Initialize the objectiveMatrix state with all required properties
  const [objectiveMatrix, setObjectiveMatrix] = useState({
    businessObjectives: [
      {
        name: "increase_revenue",
        description: "Increase overall revenue",
        priority: 10
      },
      {
        name: "customer_retention",
        description: "Keep existing customers coming back",
        priority: 8
      }
    ],
    customerObjectives: {
      value_for_money: 8,
      convenience: 7,
      quality: 9,
      exclusivity: 5,
      personalization: 6,
      novelty: 4
    },
    seasonalObjectives: [
      {
        season: "Summer",
        objective: "Increase cold beverage sales",
        startDate: "2023-06-01",
        endDate: "2023-08-31"
      }
    ],
    // Add this property to fix the type errors
    objectives: [] as any[],
    newObjective: {
      userType: "",
      objective: "",
      importance: "",
      rewardType: "",
      example: ""
    }
  });
  
  // Add a new function to track the completion of the objectives section
  const updateObjectivesStatus = () => {
    // Calculate the completion percentage based on filled objectives
    const hasBusinessObjectives = objectiveMatrix.businessObjectives.length > 0;
    const hasCustomerObjectives = Object.keys(objectiveMatrix.customerObjectives).length > 0;
    
    // Count how many sections are complete
    const sections = [hasBusinessObjectives, hasCustomerObjectives];
    const completeSections = sections.filter(Boolean).length;
    
    // Calculate completion percentage
    const completionPercentage = Math.round((completeSections / sections.length) * 100);
    
    // Update the completion status
    setCompletionStatus(prev => ({
      ...prev,
      "objectives": completionPercentage
    }));
  };
  
  // Update objectiveMatrix useEffect to track completion
  useEffect(() => {
    updateObjectivesStatus();
  }, [objectiveMatrix]);
  
  // Update function for business and brand state
  const updateBusinessBrand = (key: string, value: any) => {
    setBusinessBrand(prev => ({
      ...prev,
      [key]: value
    }))
    
    // Calculate section completion
    const requiredFields = ["merchantId", "brandPrimaryColor", "toneOfVoice"]
    const filledRequired = requiredFields.filter(field => {
      if (field === "toneOfVoice") {
        return businessBrand.toneOfVoice.length > 0;
      }
      return businessBrand[field as keyof typeof businessBrand]
    }).length;
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      "business-brand": completionPercentage
    }))
  }
  
  // Add a new update function for product & pricing state below the updateBusinessBrand function
  const updateProductPricing = (key: string, value: any) => {
    setProductPricing(prev => ({
      ...prev,
      [key]: value
    }))
    
    // Calculate section completion
    const requiredFields = ["skuList", "heroItems", "averageBasketSize"]
    const filledRequired = requiredFields.filter(field => productPricing[field as keyof typeof productPricing]).length
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      "product-pricing": completionPercentage
    }))
  }
  
  // Add a new update function for financial guard-rails state
  const updateFinancialGuardrails = (key: string, value: any) => {
    setFinancialGuardrails(prev => ({
      ...prev,
      [key]: value
    }))
    
    // Calculate section completion
    const requiredFields = ["targetGrossMargin", "monthlyRewardBudget", "maxCostPerAcquisition", "maxDiscountPercentage", "minRewardValue", "maxRewardValue", "avgRewardValue", "minPurchaseRequirement"]
    const filledRequired = requiredFields.filter(field => financialGuardrails[field as keyof typeof financialGuardrails]).length
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      "financial": completionPercentage
    }))
  }
  
  // Add an update function for messaging inputs
  const updateMessagingInputs = (key: string, value: any) => {
    setMessagingInputs(prev => ({
      ...prev,
      [key]: value
    }))
    
    // Calculate section completion for the messaging tab
    const requiredFields = ["bannerSlots", "quietHoursStart", "quietHoursEnd"]
    const filledRequired = requiredFields.filter(field => messagingInputs[field as keyof typeof messagingInputs]).length
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      "messaging": completionPercentage
    }))
  }
  
  // Add a new update function for customer segments
  const updateCustomerSegments = (key: string, value: any) => {
    // Create a new state object with the updated value
    const updatedSegments = {
      ...customerSegments,
      [key]: value
    };
    
    // Ensure cohortThresholdErrors exists
    if (!updatedSegments.cohortThresholdErrors) {
      updatedSegments.cohortThresholdErrors = {
        activeThreshold: "",
        dormantCohortThreshold: "",
        churnedThreshold: "",
        resurrectedThreshold: "",
        newCustomerThreshold: ""
      };
    }
    
    // If this is a cohort threshold, validate the thresholds
    if ([
      'activeThreshold', 
      'dormantCohortThreshold', 
      'churnedThreshold', 
      'resurrectedThreshold'
    ].includes(key)) {
      // Validate cohort thresholds
      validateCohortThresholds(updatedSegments, key);
    } else {
      // Set state with the updated value
      setCustomerSegments(updatedSegments);
    }
    
    // Calculate section completion
    const requiredFields = [
      "loyaltyTiers", 
      "dormantThreshold", 
      "activeThreshold", 
      "newCustomerThreshold", 
      "churnedThreshold", 
      "resurrectedThreshold", 
      "dormantCohortThreshold",
      "vipSpendThreshold",
      "vipSpendPeriod",
      "vipVisitThreshold",
      "birthdayRewardDays",
      "transactionMilestones",
      "redemptionMilestones",
      "spendingMilestones"
    ]
    const filledRequired = requiredFields.filter(field => updatedSegments[field as keyof typeof updatedSegments]).length
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      ["customer-segments"]: completionPercentage
    }))
  }
  
  // Validate cohort thresholds to ensure they are mutually exclusive and collectively exhaustive
  const validateCohortThresholds = (updatedSegments: any, changedKey: string) => {
    // Ensure cohortThresholdErrors exists with default values if not present
    const errors = { 
      ...(updatedSegments.cohortThresholdErrors || {
        activeThreshold: "",
        dormantCohortThreshold: "",
        churnedThreshold: "",
        resurrectedThreshold: "",
        newCustomerThreshold: ""
      }) 
    };
    let hasErrors = false;
    
    // Convert string values to numbers for comparison
    const active = parseInt(updatedSegments.activeThreshold) || 0;
    const dormant = parseInt(updatedSegments.dormantCohortThreshold) || 0;
    const churned = parseInt(updatedSegments.churnedThreshold) || 0;
    const resurrected = parseInt(updatedSegments.resurrectedThreshold) || 0;
    
    // Clear previous errors for the changed field
    errors[changedKey] = "";
    
    // Validate that thresholds are in ascending order: active < dormant < churned
    if (active >= dormant) {
      errors.activeThreshold = "Active threshold must be less than Dormant threshold";
      errors.dormantCohortThreshold = "Dormant threshold must be greater than Active threshold";
      hasErrors = true;
    }
    
    if (dormant >= churned) {
      errors.dormantCohortThreshold = "Dormant threshold must be less than Churned threshold";
      errors.churnedThreshold = "Churned threshold must be greater than Dormant threshold";
      hasErrors = true;
    }
    
    // Validate that resurrected threshold is a reasonable value (positive)
    if (resurrected <= 0) {
      errors.resurrectedThreshold = "Resurrected threshold must be greater than 0";
      hasErrors = true;
    }
    
    // Update the state with new values and any validation errors
    setCustomerSegments({
      ...updatedSegments,
      cohortThresholdErrors: errors
    });
  }
  
  // Add update function for reward constraints
  const updateRewardConstraints = (field: string, value: string | string[]) => {
    setRewardConstraints(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Calculate section completion
    const requiredFields = ["dailyRedemptionLimit", "redemptionWindow", "allowedOfferTypes"]
    const allowedOfferTypesValid = Object.values(rewardConstraints.allowedOfferTypes).some(v => v === true);
    const filledRequired = requiredFields.filter(field => {
      if (field === "allowedOfferTypes") {
        return allowedOfferTypesValid;
      }
      return rewardConstraints[field as keyof typeof rewardConstraints];
    }).length;
    const completionPercentage = Math.round((filledRequired / requiredFields.length) * 100)
    
    setCompletionStatus(prev => ({
      ...prev,
      ["reward-constraints"]: completionPercentage
    }));
  };
  
  // Calculate overall progress whenever section completion changes
  useEffect(() => {
    const sectionValues = Object.values(completionStatus)
    const averageCompletion = sectionValues.reduce((sum, value) => sum + value, 0) / sectionValues.length
    setOverallProgress(Math.round(averageCompletion))
  }, [completionStatus])
  
  // Add this function near your other save functions
  const formatCohortsForFirestore = () => {
    // Create a well-structured object of cohort definitions with conditions as arrays
    return {
      new: {
        id: "new",
        name: "New",
        color: "blue",
        definition: "Recent first-time customers with few visits",
        conditions: [
          {
            type: "firstVisitWithinDays",
            value: parseInt(customerSegments.newCustomerThreshold || "14")
          },
          {
            type: "maxLifetimeVisits",
            value: parseInt(customerSegments.newCustomerVisitLimit || "2")
          }
        ],
        businessValue: "Perfect time for welcome offers and onboarding rewards"
      },
      active: {
        id: "active",
        name: "Active",
        color: "green",
        definition: "Regular customers who visit frequently",
        conditions: [
          {
            type: "lastVisitWithinDays",
            value: parseInt(customerSegments.activeThreshold || "14")
          }
        ],
        businessValue: "Your loyal customers - focus on upselling and increasing basket size"
      },
      dormant: {
        id: "dormant",
        name: "Dormant",
        color: "amber",
        definition: "Customers who haven't visited recently",
        conditions: [
          {
            type: "lastVisitMinDays",
            value: parseInt(customerSegments.activeThreshold || "14")
          },
          {
            type: "lastVisitMaxDays",
            value: parseInt(customerSegments.dormantCohortThreshold || "60")
          }
        ],
        businessValue: "Time for 'We miss you' campaigns with gentle incentives"
      },
      churned: {
        id: "churned",
        name: "Churned",
        color: "red",
        definition: "Long-term inactive customers",
        conditions: [
          {
            type: "lastVisitMoreThanDays",
            value: parseInt(customerSegments.churnedThreshold || "60")
          }
        ],
        businessValue: "Requires strong win-back offers or partnerships"
      },
      resurrected: {
        id: "resurrected",
        name: "Resurrected",
        color: "purple",
        definition: "Previously dormant or churned who just returned",
        conditions: [
          {
            type: "recentVisitWithinDays",
            value: parseInt(customerSegments.resurrectedThreshold || "14")
          },
          {
            type: "previousStatus",
            value: "dormant,churned"
          }
        ],
        businessValue: "Critical re-engagement period - welcome them back warmly"
      }
    };
  };
  
  // Update the saveProgress function to use the new cohorts format
  const saveProgress = async () => {
    // Check if Firebase is initialized
    if (!db) {
      console.error("Firestore not initialized");
      toast({
        title: "Configuration Error",
        description: "Database connection not available. Please refresh the page.",
        variant: "destructive"
      });
      return;
    }
    
    // Get current user directly from auth
    const auth = getAuth();
    const currentUser = auth.currentUser;
    
    if (!currentUser || !currentUser.uid) {
      console.error("No authenticated user found");
      toast({
        title: "Authentication Error",
        description: "You must be logged in to save progress.",
        variant: "destructive"
      });
      return;
    }
    
    setIsSaving(true);
    setSaveError(null);
    
    try {
      console.log("Starting save process with user:", currentUser.uid);
      
      // Format the cohorts
      const formattedCohorts = formatCohortsForFirestore();
      console.log("Formatted cohorts:", formattedCohorts);
      
      // Create the data to save with cohorts at root level
      console.log("Saving to agent collection (new compact format)...");

      /*
        We now transform all local state slices into the exact structure required by
        Firestore.  Refer to the JSON specification provided by the user.
      */

      // 1. BUSINESS BRAND ----------------------------------------------------
      const businessBrandToSave = {
        businessName: merchantName || businessBrand.merchantId || "",
        businessContext: businessBrand.businessContext || "",
        primaryColor: businessBrand.brandPrimaryColor || "",
        secondaryColor: businessBrand.brandSecondaryColor || "",
        brandVoice: businessBrand.toneOfVoice || []
      };

      // 2. AGENT TASKS -------------------------------------------------------
      const tasks = businessBrand.agentTasks || {};
      const agentTasksToSave = {
        rewardsGeneration: tasks.rewards ?? false,
        reEngagement: tasks["re-engagement"] ?? false,
        bannerCreation: tasks.banners ?? false,
        emailMarketing: tasks.email ?? false,
        customerMessaging: tasks.messages ?? false,
        performanceAnalysis: tasks.analysis ?? false
      };

      // 3. BUSINESS HOURS ----------------------------------------------------
      const businessHoursToSave: Record<string, {open: boolean; start: string; end: string}> = {};
      if (businessBrand.openingHours) {
        Object.entries(businessBrand.openingHours).forEach(([day, info]: any) => {
          businessHoursToSave[day.toLowerCase()] = {
            open: info.isOpen ?? false,
            start: info.openTime || "",
            end: info.closeTime || ""
          };
        });
      }

      // 4. OBJECTIVES --------------------------------------------------------
      // Map business objectives
      const businessObjectives = (objectiveMatrix.businessObjectives || []).map((obj: any) => ({
        id: obj.name,
        label: obj.description,
        priority: obj.priority
      }));

      // Map customer value priorities (snake_case -> camelCase)
      const camelCase = (s: string) => s.replace(/_([a-z])/g, (_, c) => c.toUpperCase());
      const customerValuePriorities: Record<string, number> = {};
      Object.entries(objectiveMatrix.customerObjectives || {}).forEach(([key, value]: any) => {
        customerValuePriorities[camelCase(key)] = value as number;
      });

      // Seasonal campaigns
      const seasonalCampaigns = (objectiveMatrix.seasonalObjectives || []).map((obj: any) => ({
        name: obj.season,
        objective: obj.objective,
        startDate: obj.startDate,
        endDate: obj.endDate
      }));

      const objectivesToSave = {
        businessObjectives,
        customerValuePriorities,
        seasonalCampaigns
      };

      // 5. PRODUCT PRICING ---------------------------------------------------
      const productsList = (productPricing.skuList || productPricing.skus || []).map((sku: any) => ({
        name: sku.name,
        price: Number(sku.price ?? 0),
        cost: Number(sku.cost ?? 0),
        category: sku.category || ""
      }));

      const productPricingToSave = {
        averageBasketSize: Number(productPricing.averageBasketSize || 0),
        products: productsList,
        heroProducts: productPricing.heroItems || productPricing.heroProducts || [],
        lowVelocityProducts: productPricing.lowVelocityItems || productPricing.lowVelocityProducts || []
      };

      // 6. FINANCIAL GUARDRAILS ---------------------------------------------
      const financialGuardrailsToSave = {
        rewardBudgetType: financialGuardrails.rewardBudgetType || "fixed",
        monthlyBudget: Number(financialGuardrails.monthlyRewardBudget || 0),
        targetGrossMargin: Number(financialGuardrails.targetGrossMargin || 0),
        maxCostPerAcquisition: Number(financialGuardrails.maxCostPerAcquisition || 0),
        minRewardValue: Number(financialGuardrails.minRewardValue || 0),
        maxRewardValue: Number(financialGuardrails.maxRewardValue || 0)
      };

      // 7. CUSTOMER SEGMENTS -------------------------------------------------
      const loyaltyTiers = (customerSegments.loyaltyTiers || []).map((tier: any) => ({
        name: tier.name,
        lifetimeTransactions: tier.conditions?.lifetimeTransactions?.value ?? 0,
        lifetimeSpend: tier.conditions?.lifetimeSpend?.value ?? 0,
        redemptions: tier.conditions?.numberOfRedemptions?.value ?? 0
      }));

      const visitSpendingThresholds = {
        frequentVisitor: {
          visits: parseInt(customerSegments.frequentVisitorThreshold || "0"),
          perDays: parseInt(customerSegments.frequentVisitorPeriod || "0")
        },
        highSpender: {
          amount: parseInt(customerSegments.highSpenderThreshold || "0"),
          perDays: parseInt(customerSegments.highSpenderPeriod || "0")
        }
      };

      const customerSegmentsToSave = { loyaltyTiers, visitSpendingThresholds };

      // 8. CUSTOMER COHORTS --------------------------------------------------
      const customerCohortsToSave = {
        new: {
          firstVisitWithinDays: parseInt(customerSegments.newCustomerThreshold || "30"),
          maxLifetimeVisits: parseInt(customerSegments.newCustomerVisitLimit || "2")
        },
        active: {
          lastVisitWithinDays: parseInt(customerSegments.activeThreshold || "30")
        },
        dormant: {
          lastVisitBetween: [
            parseInt(customerSegments.activeThreshold || "30"),
            parseInt(customerSegments.dormantCohortThreshold || "90")
          ]
        },
        churned: {
          lastVisitMoreThanDays: parseInt(customerSegments.churnedThreshold || "180")
        },
        resurrected: {
          wasDormantOrChurned: true,
          recentVisitWithinDays: parseInt(customerSegments.resurrectedThreshold || "60")
        }
      };

      // 9. REWARD CONSTRAINTS ----------------------------------------------
      const rewardConstraintsToSave = {
        allowedTypes: rewardConstraints.allowedOfferTypes || {},
        concurrencyCeiling: Number(rewardConstraints.concurrencyCeiling || 0)
      };

      // 10. MESSAGING CONSTRAINTS ------------------------------------------
      let keywordsArray: string[] = [];
      if (messagingInputs.restrictedKeywords) {
        keywordsArray = messagingInputs.restrictedKeywords
          .split(/[,\n]/)
          .map(k => k.trim())
          .filter(Boolean);
      }

      const messagingConstraintsToSave = {
        restrictedKeywords: keywordsArray
      };

      // --------------------------------------------------------------------
      const dataToSave = {
        businessBrand: businessBrandToSave,
        agentTasks: agentTasksToSave,
        businessHours: businessHoursToSave,
        objectives: objectivesToSave,
        productPricing: productPricingToSave,
        financialGuardrails: financialGuardrailsToSave,
        customerSegments: customerSegmentsToSave,
        customerCohorts: customerCohortsToSave,
        rewardConstraints: rewardConstraintsToSave,
        messagingConstraints: messagingConstraintsToSave
      };
      
      // Save to the agent collection using the user's UID
      const agentDocRef = doc(db, "agent", currentUser.uid);
      await setDoc(agentDocRef, dataToSave, { merge: true });
      console.log("Agent data save successful!");
      
      toast({
        title: "Progress saved",
        description: "Your TAP Agent configuration has been updated.",
      });
      
      return true; // Add return value for success
    } catch (error) {
      console.error("Error saving progress:", error);
      
      // More detailed error handling
      let errorMessage = "Unknown error";
      if (error instanceof Error) {
        errorMessage = error.message;
        
        // Check for specific Firebase errors
        if (errorMessage.includes("permission-denied")) {
          errorMessage = "You don't have permission to save data. Please check your account.";
        } else if (errorMessage.includes("unavailable")) {
          errorMessage = "Database is currently unavailable. Please try again later.";
        } else if (errorMessage.includes("not-found")) {
          errorMessage = "Database path not found. Please contact support.";
        }
      }
      
      setSaveError(`Failed to save progress: ${errorMessage}`);
      
      toast({
        title: "Error saving progress",
        description: `There was a problem saving your changes: ${errorMessage}`,
        variant: "destructive"
      });
      
      return false; // Add return value for failure
    } finally {
      setIsSaving(false);
    }
  };
  
  // Add useEffect to load agent settings from Firestore
  useEffect(() => {
    // Skip if user is not authenticated
    if (!user) return
    
    async function loadAgentSettings() {
      try {
        // Fix for 'user' is possibly 'null'
        if (!user) return;
        
        const agentDocRef = doc(db, "agent", user.uid)
        const agentDoc = await getDoc(agentDocRef)
        
        if (agentDoc.exists()) {
          const data = agentDoc.data()
          
          /* -----------------------------------------------------------------
             NEW (COMPACT) FORMAT DETECTION
             If the document contains an "objectives" field we assume the new
             structure introduced in the latest save routine.  We map every
             top-level section back into the component state so the UI reflects
             exactly what was persisted.
          ----------------------------------------------------------------- */

          if (data.objectives) {
            // 1. BUSINESS BRAND & TASKS ------------------------------------
            const bb = data.businessBrand || {};
            const at = data.agentTasks || {};
            const bh = data.businessHours || {};

            // openingHours mapping
            const openingHours = Object.fromEntries(
              Object.entries(bh).map(([day, info]: any) => [
                day,
                {
                  isOpen: info.open ?? false,
                  openTime: info.start || "",
                  closeTime: info.end || ""
                }
              ])
            );

            const agentTasksUi = {
              rewards: at.rewardsGeneration ?? false,
              banners: at.bannerCreation ?? false,
              messages: at.customerMessaging ?? false,
              "re-engagement": at.reEngagement ?? false,
              email: at.emailMarketing ?? false,
              analysis: at.performanceAnalysis ?? false
            };

            setBusinessBrand(prev => ({
              ...prev,
              brandPrimaryColor: bb.primaryColor || prev.brandPrimaryColor,
              brandSecondaryColor: bb.secondaryColor || prev.brandSecondaryColor,
              toneOfVoice: bb.brandVoice || prev.toneOfVoice,
              businessContext: bb.businessContext || prev.businessContext,
              openingHours,
              agentTasks: agentTasksUi
            }));

            // 2. PRODUCT PRICING -------------------------------------------
            const pp = data.productPricing || {};
            const mappedSkus = (pp.products || []).map((p: any) => ({
              name: p.name,
              category: p.category,
              price: p.price?.toString() ?? "",
              cost: p.cost?.toString() ?? ""
            }));

            setProductPricing(prev => ({
              ...prev,
              averageBasketSize: pp.averageBasketSize?.toString() || prev.averageBasketSize,
              heroItems: pp.heroProducts || prev.heroItems,
              lowVelocityItems: pp.lowVelocityProducts || prev.lowVelocityItems,
              skuList: mappedSkus
            }));

            // 3. FINANCIAL GUARDRAILS --------------------------------------
            const fg = data.financialGuardrails || {};
            setFinancialGuardrails(prev => ({
              ...prev,
              rewardBudgetType: fg.rewardBudgetType || prev.rewardBudgetType,
              monthlyRewardBudget: fg.monthlyBudget?.toString() || prev.monthlyRewardBudget,
              targetGrossMargin: fg.targetGrossMargin?.toString() || prev.targetGrossMargin,
              maxCostPerAcquisition: fg.maxCostPerAcquisition?.toString() || prev.maxCostPerAcquisition,
              minRewardValue: fg.minRewardValue?.toString() || prev.minRewardValue,
              maxRewardValue: fg.maxRewardValue?.toString() || prev.maxRewardValue
            }));

            // 4. CUSTOMER SEGMENTS & COHORTS -------------------------------
            const cs = data.customerSegments || {};
            const cc = data.customerCohorts || {};

            const tiers = (cs.loyaltyTiers || []).map((tier: any, idx: number) => ({
              name: tier.name,
              order: idx + 1,
              description: "",
              conditions: {
                lifetimeTransactions: { enabled: true, value: tier.lifetimeTransactions ?? 0 },
                lifetimeSpend: { enabled: true, value: tier.lifetimeSpend ?? 0 },
                numberOfRedemptions: { enabled: true, value: tier.redemptions ?? 0 }
              }
            }));

            const vst = cs.visitSpendingThresholds || {};

            setCustomerSegments(prev => ({
              ...prev,
              loyaltyTiers: ensureCorrectTierStructure(tiers),
              frequentVisitorThreshold: vst.frequentVisitor?.visits?.toString() || prev.frequentVisitorThreshold,
              frequentVisitorPeriod: vst.frequentVisitor?.perDays?.toString() || prev.frequentVisitorPeriod,
              highSpenderThreshold: vst.highSpender?.amount?.toString() || prev.highSpenderThreshold,
              highSpenderPeriod: vst.highSpender?.perDays?.toString() || prev.highSpenderPeriod,
              activeThreshold: cc.active?.lastVisitWithinDays?.toString() || prev.activeThreshold,
              newCustomerThreshold: cc.new?.firstVisitWithinDays?.toString() || prev.newCustomerThreshold,
              newCustomerVisitLimit: cc.new?.maxLifetimeVisits?.toString() || prev.newCustomerVisitLimit,
              dormantCohortThreshold: cc.dormant?.lastVisitBetween?.[1]?.toString() || prev.dormantCohortThreshold,
              churnedThreshold: cc.churned?.lastVisitMoreThanDays?.toString() || prev.churnedThreshold,
              resurrectedThreshold: cc.resurrected?.recentVisitWithinDays?.toString() || prev.resurrectedThreshold
            }));

            // 5. REWARD CONSTRAINTS ----------------------------------------
            const rc = data.rewardConstraints || {};
            setRewardConstraints(prev => ({
              ...prev,
              allowedOfferTypes: rc.allowedTypes || prev.allowedOfferTypes,
              concurrencyCeiling: rc.concurrencyCeiling?.toString() || prev.concurrencyCeiling
            }));

            // 6. MESSAGING CONSTRAINTS -------------------------------------
            const mc = data.messagingConstraints || {};
            setMessagingInputs(prev => ({
              ...prev,
              restrictedKeywords: (mc.restrictedKeywords || []).join(", ")
            }));

            // 7. OBJECTIVES  -> objectiveMatrix ----------------------------
            const ob = data.objectives;

            const snake = (str: string) => str.replace(/[A-Z]/g, l => "_" + l.toLowerCase());

            const businessObjectives = (ob.businessObjectives || []).map((bo: any) => ({
              name: bo.id,
              description: bo.label,
              priority: bo.priority
            }));

            const customerObjectives: Record<string, number> = {};
            Object.entries(ob.customerValuePriorities || {}).forEach(([k, v]: any) => {
              customerObjectives[snake(k as string)] = v as number;
            });

            const seasonalObjectives = (ob.seasonalCampaigns || []).map((so: any) => ({
              season: so.name,
              objective: so.objective,
              startDate: so.startDate,
              endDate: so.endDate
            }));

            setObjectiveMatrix(prev => ({
              ...prev,
              businessObjectives,
              customerObjectives: customerObjectives as any,
              seasonalObjectives
            }) as any);

            // After all mappings recalc progress
            calculateOverallProgress();

            return; // <-- Done handling new format
          }

          /* -----------------------------------------------------------------
             LEGACY FORMAT (fallback)
          ----------------------------------------------------------------- */

          // Existing processing block remains for backward compatibility ------
          // Update each state with the loaded data
          if (data.businessBrand) {
            // Convert agentTasks from array to object if it's in the old format
            if (data.businessBrand.agentTasks && Array.isArray(data.businessBrand.agentTasks)) {
              const tasksObject = {} as Record<string, boolean>;
              data.businessBrand.agentTasks.forEach((taskId: string) => {
                tasksObject[taskId] = true;
              });
              data.businessBrand.agentTasks = tasksObject;
            }
            setBusinessBrand(data.businessBrand);
          }
          if (data.productPricing) {
            setProductPricing({
              ...data.productPricing,
              newHeroItem: data.productPricing.newHeroItem || "",
              newLowVelocityItem: data.productPricing.newLowVelocityItem || ""
            });
          }
          if (data.financialGuardrails) setFinancialGuardrails(data.financialGuardrails);
          if (data.messagingInputs) setMessagingInputs(data.messagingInputs);
          if (data.customerSegments) {
            if (data.customerSegments.loyaltyTiers) {
              data.customerSegments.loyaltyTiers = ensureCorrectTierStructure(data.customerSegments.loyaltyTiers);
            }
            if (data.dormancySettings && !data.customerSegments.activeThreshold) {
              data.customerSegments = {
                ...data.customerSegments,
                activeThreshold: data.dormancySettings.activeThreshold || "30",
                newCustomerThreshold: data.dormancySettings.newCustomerThreshold || "30",
                churnedThreshold: data.dormancySettings.churnedThreshold || "180",
                resurrectedThreshold: data.dormancySettings.resurrectedThreshold || "60",
                dormantCohortThreshold: data.dormancySettings.dormantThreshold || "90",
                escalationStrategy: data.dormancySettings.escalationStrategy || "value_increase"
              };
            }
            setCustomerSegments(data.customerSegments);
          }
          if (data.rewardConstraints) setRewardConstraints(data.rewardConstraints);
          if (data.objectiveMatrix) setObjectiveMatrix(data.objectiveMatrix);
          calculateOverallProgress();
        }
      } catch (error) {
        console.error("Error loading agent settings:", error)
      }
    }
    
    loadAgentSettings()
  }, [user])
  
  // Function to calculate overall progress
  const calculateOverallProgress = () => {
    const sectionValues = Object.values(completionStatus)
    const averageCompletion = sectionValues.reduce((sum, value) => sum + value, 0) / sectionValues.length
    setOverallProgress(Math.round(averageCompletion))
  }
  
  // Update the useEffect that watches completion status to use the new function
  useEffect(() => {
    calculateOverallProgress()
  }, [completionStatus])

  // Add these helper functions for managing loyalty tiers
  const addLoyaltyTier = () => {
    setCustomerSegments(prev => {
      const newTier = { 
        name: "", 
        order: prev.loyaltyTiers.length + 1,
        description: "",
        conditions: {
          lifetimeTransactions: { enabled: true, value: 0 },
          lifetimeSpend: { enabled: true, value: 0 },
          numberOfRedemptions: { enabled: false, value: 0 }
        }
      };
      
      return {
      ...prev,
        loyaltyTiers: [...prev.loyaltyTiers, newTier]
      };
    });
  }

  const removeLoyaltyTier = (index: number) => {
    setCustomerSegments(prev => ({
      ...prev,
      loyaltyTiers: prev.loyaltyTiers.filter((_, i) => i !== index)
    }));
  }

  const updateLoyaltyTier = (index: number, field: string, value: any) => {
    setCustomerSegments(prev => {
      const updatedTiers = [...prev.loyaltyTiers];
      updatedTiers[index] = {
        ...updatedTiers[index],
        [field]: field === 'minVisits' || field === 'maxVisits' 
          ? value === '' || value === 'null' || value === '∞' ? null : Number(value)
          : value
      };
      return {
        ...prev,
        loyaltyTiers: updatedTiers
      };
    });
  }

  // Add this function to ensure each tier has the correct structure
  const ensureCorrectTierStructure = (tiers: any[] | any) => {
    if (!Array.isArray(tiers)) {
      return [
        { 
          name: "Bronze", 
          order: 1,
          description: "Basic membership benefits",
          conditions: {
            lifetimeTransactions: { enabled: true, value: 0 },
            lifetimeSpend: { enabled: true, value: 0 },
            numberOfRedemptions: { enabled: false, value: 0 }
          }
        },
        { 
          name: "Silver", 
          order: 2,
          description: "Enhanced membership benefits",
          conditions: {
            lifetimeTransactions: { enabled: true, value: 10 },
            lifetimeSpend: { enabled: true, value: 500 },
            numberOfRedemptions: { enabled: false, value: 0 }
          }
        },
        { 
          name: "Gold", 
          order: 3,
          description: "Premium membership benefits",
          conditions: {
            lifetimeTransactions: { enabled: true, value: 25 },
            lifetimeSpend: { enabled: true, value: 1500 },
            numberOfRedemptions: { enabled: true, value: 5 }
          }
        }
      ];
    }
    
    return tiers.map(tier => {
      // If no nested conditions, derive them from possible root-level numbers
      if (!tier.conditions || !tier.conditions.lifetimeTransactions) {
        const lt = (tier as any).lifetimeTransactions ?? 0;
        const ls = (tier as any).lifetimeSpend ?? 0;
        const rd = (tier as any).redemptions ?? 0;
        return {
          name: tier.name || "",
          order: tier.order || 1,
          description: tier.description || "",
          conditions: {
            lifetimeTransactions: { enabled: true, value: lt },
            lifetimeSpend:   { enabled: true, value: ls },
            numberOfRedemptions: { enabled: true, value: rd }
          }
        };
      }
      return tier;
    });
  };

  // In the component, add state for merchant ID
  const [merchantId, setMerchantId] = useState("")

  // Add a function to load membership tiers from Firestore
  const loadMembershipTiers = async () => {
    console.log("loadMembershipTiers called with merchantId:", merchantId);
    if (!user || !merchantId) {
      console.log("Missing user or merchantId, skipping load");
      return;
    }
    
    try {
      // First check if the merchant exists
      const merchantRef = doc(db, `merchants/${merchantId}`);
      const merchantDoc = await getDoc(merchantRef);
      
      if (!merchantDoc.exists()) {
        console.log("Merchant document doesn't exist, creating it");
        // Create the merchant document if it doesn't exist
        await setDoc(merchantRef, {
          name: "Your Business",
          createdAt: new Date(),
          updatedAt: new Date(),
          createdBy: user.uid
        });
      }
      
      // Get memberships collection for this merchant
      const membershipsRef = collection(db, `merchants/${merchantId}/memberships`);
      console.log("Fetching memberships from path:", `merchants/${merchantId}/memberships`);
      
      const membershipsSnapshot = await getDocs(membershipsRef);
      console.log("Memberships snapshot:", membershipsSnapshot.size, "documents found");
      
      if (!membershipsSnapshot.empty) {
        // Convert the memberships to the format we need
        const tiers = membershipsSnapshot.docs.map(doc => {
          const data = doc.data();
          console.log("Membership document data:", doc.id, data);
          
          return {
            id: doc.id, // Store the document ID for updates
            name: data.name || "",
            order: data.order || 0,
            description: data.description || "",
            conditions: {
              lifetimeTransactions: data.conditions?.lifetimeTransactions || { enabled: false, value: 0 },
              lifetimeSpend: data.conditions?.lifetimeSpend || { enabled: false, value: 0 },
              numberOfRedemptions: data.conditions?.numberOfRedemptions || { enabled: false, value: 0 }
            },
            isActive: data.isActive !== undefined ? data.isActive : true
          };
        }).sort((a, b) => a.order - b.order); // Sort by order
        
        console.log("Processed membership tiers:", tiers);
        
        // Update the state with the loaded tiers
        updateCustomerSegments('loyaltyTiers', tiers);
        
        toast({
          title: "Membership Tiers Loaded",
          description: `Loaded ${tiers.length} membership tiers from your account.`,
        });
      } else {
        console.log("No membership documents found, creating default tiers");
        
        // Create default membership tiers
        const defaultTiers = [
          { 
            name: "Bronze", 
            order: 1,
            description: "Basic membership benefits",
            conditions: {
              lifetimeTransactions: { enabled: true, value: 0 },
              lifetimeSpend: { enabled: true, value: 0 },
              numberOfRedemptions: { enabled: false, value: 0 }
            },
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
          },
          { 
            name: "Silver", 
            order: 2,
            description: "Enhanced membership benefits",
            conditions: {
              lifetimeTransactions: { enabled: true, value: 10 },
              lifetimeSpend: { enabled: true, value: 500 },
              numberOfRedemptions: { enabled: false, value: 0 }
            },
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
          },
          { 
            name: "Gold", 
            order: 3,
            description: "Premium membership benefits",
            conditions: {
              lifetimeTransactions: { enabled: true, value: 25 },
              lifetimeSpend: { enabled: true, value: 1500 },
              numberOfRedemptions: { enabled: true, value: 5 }
            },
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
          }
        ];
        
        // Create the membership documents in Firestore
        for (const tier of defaultTiers) {
          const newDocRef = doc(collection(db, `merchants/${merchantId}/memberships`));
          await setDoc(newDocRef, tier);
          console.log("Created default tier:", tier.name, "with ID:", newDocRef.id);
        }
        
        // Update the state with the default tiers
        const tiersWithIds = await Promise.all(defaultTiers.map(async (tier) => {
          const querySnapshot = await getDocs(
            query(
              collection(db, `merchants/${merchantId}/memberships`),
              where("name", "==", tier.name),
              where("order", "==", tier.order)
            )
          );
          
          if (!querySnapshot.empty) {
            const doc = querySnapshot.docs[0];
            return { ...tier, id: doc.id };
          }
          
          return tier;
        }));
        
        updateCustomerSegments('loyaltyTiers', tiersWithIds);
        
        toast({
          title: "Default Membership Tiers Created",
          description: "We've created default Bronze, Silver, and Gold tiers for you.",
        });
      }
    } catch (error) {
      console.error("Error loading/creating membership tiers:", error);
      toast({
        title: "Error with Membership Tiers",
        description: "There was a problem with your membership tiers.",
        variant: "destructive"
      });
    }
  };

  // Update the saveMembershipTiers function
  const saveMembershipTiers = async () => {
    console.log("saveMembershipTiers called with merchantId:", merchantId);
    if (!user || !merchantId) {
      console.log("Missing user or merchantId, skipping save");
      return;
    }
    
    try {
      setIsSaving(true);
      console.log("Saving membership tiers:", customerSegments.loyaltyTiers);
      
      // Get existing membership IDs to track deletions
      const membershipsRef = collection(db, `merchants/${merchantId}/memberships`);
      const existingSnapshot = await getDocs(membershipsRef);
      const existingIds = new Set(existingSnapshot.docs.map(doc => doc.id));
      const updatedIds = new Set();
      
      // For each tier in the current state, create or update the membership document
      for (const tier of customerSegments.loyaltyTiers) {
        console.log("Processing tier for save:", tier);
        
        const membershipData = {
          name: tier.name,
          order: tier.order,
          description: tier.description,
          conditions: {
            lifetimeTransactions: tier.conditions.lifetimeTransactions,
            lifetimeSpend: tier.conditions.lifetimeSpend,
            numberOfRedemptions: tier.conditions.numberOfRedemptions
          },
          isActive: (tier as any).isActive !== undefined ? (tier as any).isActive : true,
          updatedAt: new Date()
        };
        
        // If the tier has an ID, update the existing document
        if ((tier as any).id) {
          console.log("Updating existing tier with ID:", (tier as any).id);
          await setDoc(doc(db, `merchants/${merchantId}/memberships/${(tier as any).id}`), membershipData, { merge: true });
          updatedIds.add((tier as any).id);
        } else {
          // Otherwise create a new document
          console.log("Creating new tier document");
          const newDocRef = doc(collection(db, `merchants/${merchantId}/memberships`));
          await setDoc(newDocRef, {
            ...membershipData,
            createdAt: new Date()
          });
          console.log("Created new tier with ID:", newDocRef.id);
          updatedIds.add(newDocRef.id);
        }
      }
      
      // Check for tiers that were deleted in the UI and remove them from Firestore
      const deletedIds = [...existingIds].filter(id => !updatedIds.has(id));
      console.log("Deleted tier IDs:", deletedIds);
      
      for (const id of deletedIds) {
        console.log("Deleting tier with ID:", id);
        await setDoc(doc(db, `merchants/${merchantId}/memberships/${id}`), {
          isActive: false,
          deletedAt: new Date(),
          updatedAt: new Date()
        }, { merge: true });
      }
      
      toast({
        title: "Membership Tiers Saved",
        description: "Your loyalty tier definitions have been saved.",
      });
      
      // Reload the tiers to get any new IDs
      loadMembershipTiers();
    } catch (error) {
      console.error("Error saving membership tiers:", error);
      toast({
        title: "Error Saving Tiers",
        description: "There was a problem saving your membership tiers.",
        variant: "destructive"
      });
    } finally {
      setIsSaving(false);
    }
  };

  // Update the useEffect to load merchant ID and membership tiers
  useEffect(() => {
    console.log("merchantId useEffect triggered with value:", merchantId);
    if (!user) return;
    
    async function loadInitialData() {
      try {
        console.log("loadInitialData called");
        // First load the agent settings to get the merchant ID
        // Fix for user?.uid possibly being undefined
        if (!user?.uid) return;
        
        const agentDocRef = doc(db, "agent", user.uid);
        const agentDoc = await getDoc(agentDocRef);
        
        if (agentDoc.exists()) {
          const data = agentDoc.data();
          console.log("Agent document data:", data);
          
          // If we have a merchant ID, set it
          if (data.businessBrand && data.businessBrand.merchantId) {
            console.log("Setting merchantId to:", data.businessBrand.merchantId);
            setMerchantId(data.businessBrand.merchantId);
          } else {
            console.log("No merchantId found in agent document");
          }
          
          // Load the rest of the agent settings as before
          if (data.businessBrand) setBusinessBrand(data.businessBrand);
          if (data.productPricing) {
            // Ensure newHeroItem and newLowVelocityItem are initialized properly
            setProductPricing({
              ...data.productPricing,
              newHeroItem: data.productPricing.newHeroItem || "",
              newLowVelocityItem: data.productPricing.newLowVelocityItem || ""
            });
          }
          if (data.financialGuardrails) setFinancialGuardrails(data.financialGuardrails);
          if (data.messagingInputs) setMessagingInputs(data.messagingInputs);
          if (data.customerSegments) {
            // We'll load membership tiers separately, but still load other customer segment settings
            if (data.customerSegments.loyaltyTiers) {
              data.customerSegments.loyaltyTiers = ensureCorrectTierStructure(data.customerSegments.loyaltyTiers);
            }
            setCustomerSegments(data.customerSegments);
          }
          if (data.rewardConstraints) setRewardConstraints(data.rewardConstraints);
          
        } else {
          console.log("Agent document does not exist");
        }
      } catch (error) {
        console.error("Error loading initial data:", error);
      }
    }
    
    loadInitialData();
  }, [user]);

  // Add a separate useEffect to load membership tiers when merchantId changes
  useEffect(() => {
    console.log("merchantId useEffect triggered with value:", merchantId);
    if (merchantId) {
      loadMembershipTiers();
      
      // Fetch merchant name when merchantId is available
      const fetchMerchantName = async () => {
        try {
          const merchantRef = doc(db, 'merchants', merchantId);
          const merchantDoc = await getDoc(merchantRef);
          
          if (merchantDoc.exists()) {
            const data = merchantDoc.data();
            // Look for merchant name in different possible field names
            const name = data.merchantName || data.name || data.tradingName || data.businessName || "";
            setMerchantName(name);
          }
        } catch (error) {
          console.error("Error fetching merchant name:", error);
        }
      };
      
      fetchMerchantName();
    }
  }, [merchantId]);

  // Add these functions to handle the objective matrix updates
  const updateObjectiveMatrix = (
    section: 'businessObjectives' | 'seasonalObjectives',
    index: number,
    field: string,
    value: any
  ) => {
    setObjectiveMatrix(prev => {
      const updated = {...prev};
      // Fix for element implicitly has 'any' type
      const sectionItem = updated[section][index] as Record<string, any>;
      sectionItem[field] = value;
      return updated;
    });
  };

  const updateCustomerObjective = (id: string, value: number) => {
    setObjectiveMatrix(prev => ({
      ...prev,
      customerObjectives: {
        ...prev.customerObjectives,
        [id]: value
      }
    }));
  };

  const addBusinessObjective = () => {
    setObjectiveMatrix(prev => ({
      ...prev,
      businessObjectives: [
        ...prev.businessObjectives,
        {
          name: "",
          description: "",
          priority: 5
        }
      ]
    }));
  };

  const moveObjective = (index: number, direction: 'up' | 'down') => {
    if (direction === 'up' && index > 0) {
      setObjectiveMatrix(prev => {
        const updated = {...prev};
        const temp = updated.businessObjectives[index];
        updated.businessObjectives[index] = updated.businessObjectives[index - 1];
        updated.businessObjectives[index - 1] = temp;
        return updated;
      });
    } else if (direction === 'down' && index < objectiveMatrix.businessObjectives.length - 1) {
      setObjectiveMatrix(prev => {
        const updated = {...prev};
        const temp = updated.businessObjectives[index];
        updated.businessObjectives[index] = updated.businessObjectives[index + 1];
        updated.businessObjectives[index + 1] = temp;
        return updated;
      });
    }
  };

  const addSeasonalObjective = () => {
    setObjectiveMatrix(prev => ({
      ...prev,
      seasonalObjectives: [
        ...prev.seasonalObjectives,
        {
          season: "",
          objective: "",
          startDate: "",
          endDate: ""
        }
      ]
    }));
  };

  const removeSeasonalObjective = (index: number) => {
    setObjectiveMatrix(prev => ({
      ...prev,
      seasonalObjectives: prev.seasonalObjectives.filter((_, i) => i !== index)
    }));
  };

  // Function to add a new objective
  const addObjective = () => {
    const { userType, objective } = objectiveMatrix.newObjective;
    
    if (userType && objective) {
      setObjectiveMatrix(prev => ({
        ...prev,
        objectives: [...prev.objectives, prev.newObjective],
        newObjective: {
        userType: "",
        objective: "",
        importance: "",
        rewardType: "",
        example: ""
        }
      }));
    }
  };

  // Function to remove an objective
  const removeObjective = (index: number) => {
    setObjectiveMatrix(prev => ({
      ...prev,
      objectives: prev.objectives.filter((_, i: number) => i !== index)
    }));
  };

  // Function to update a field in the new objective form
  const updateNewObjectiveField = (field: string, value: string) => {
    setObjectiveMatrix(prev => ({
      ...prev,
      newObjective: {
        ...prev.newObjective,
      [field]: value
      }
    }));
  };

  // Add useEffect to fetch merchant name when user ID is available
  useEffect(() => {
    // Exit early if user is not defined
    if (!user) return;
    
    // User is now definitely defined
    const uid = user.uid;
    if (!uid) return;
    
    async function fetchMerchantName() {
      try {
        const merchantRef = doc(db, 'merchants', uid);
        const merchantDoc = await getDoc(merchantRef);
        
        if (merchantDoc.exists()) {
          const data = merchantDoc.data();
          // Get the merchantName field specifically
          if (data.merchantName) {
            console.log("Found merchantName:", data.merchantName);
            setMerchantName(data.merchantName);
          } else {
            // If merchantName doesn't exist, use user ID
            console.log("No merchantName found, using uid:", uid);
            setMerchantName(uid);
          }
        } else {
          // If merchant document doesn't exist, use user ID
          console.log("No merchant document found, using uid:", uid);
          setMerchantName(uid);
        }
      } catch (error) {
        console.error("Error fetching merchant name:", error);
        // Fallback to user ID if there's an error
        setMerchantName(uid);
      }
    }
    
    fetchMerchantName();
  }, [user]);

  // Add these functions to your component, before the return statement

  // Function to add a new SKU
  const addSku = () => {
    setProductPricing(prev => ({
      ...prev,
      skus: [...(prev.skus || []), { name: "", category: "", price: "", cost: "" }]
    }));
  };

  // Function to update a specific SKU field
  const updateSku = (index: number, field: string, value: string) => {
    setProductPricing(prev => {
      const updatedSkus = [...(prev.skus || [])];
      if (updatedSkus[index]) {
        updatedSkus[index] = {
          ...updatedSkus[index],
          [field]: value
        };
      }
      return {
        ...prev,
        skus: updatedSkus
      };
    });
  };

  // Function to remove a SKU
  const removeSku = (index: number) => {
    setProductPricing(prev => ({
      ...prev,
      skus: (prev.skus || []).filter((_, i) => i !== index)
    }));
  };

  // Add this state variable for the new demographic tag input
  const [newDemographicTag, setNewDemographicTag] = useState<string>("")

  // Add these functions to handle demographic tags
  const addDemographicTag = () => {
    if (newDemographicTag.trim() !== "") {
      setCustomerSegments(prev => ({
        ...prev,
        demographicTags: [...prev.demographicTags, newDemographicTag.trim()]
      }))
      setNewDemographicTag("")
    }
  }

  const removeDemographicTag = (index: number) => {
    setCustomerSegments(prev => ({
      ...prev,
      demographicTags: prev.demographicTags.filter((_, i) => i !== index)
    }))
  }

  // Add these functions to handle loyalty tiers
  const moveLoyaltyTier = (index: number, direction: 'up' | 'down') => {
    if (direction === 'up' && index > 0) {
      setCustomerSegments(prev => {
        const updatedTiers = [...prev.loyaltyTiers]
        const temp = updatedTiers[index]
        updatedTiers[index] = updatedTiers[index - 1]
        updatedTiers[index - 1] = temp
        return { ...prev, loyaltyTiers: updatedTiers }
      })
    } else if (direction === 'down' && index < customerSegments.loyaltyTiers.length - 1) {
      setCustomerSegments(prev => {
        const updatedTiers = [...prev.loyaltyTiers]
        const temp = updatedTiers[index]
        updatedTiers[index] = updatedTiers[index + 1]
        updatedTiers[index + 1] = temp
        return { ...prev, loyaltyTiers: updatedTiers }
      })
    }
  }

  const updateLoyaltyTierCondition = (
    tierIndex: number, 
    conditionName: 'lifetimeTransactions' | 'lifetimeSpend' | 'numberOfRedemptions', 
    field: 'enabled' | 'value', 
    value: boolean | number
  ) => {
    setCustomerSegments(prev => {
      const updatedTiers = [...prev.loyaltyTiers]
      updatedTiers[tierIndex] = {
        ...updatedTiers[tierIndex],
        conditions: {
          ...updatedTiers[tierIndex].conditions,
          [conditionName]: {
            ...updatedTiers[tierIndex].conditions[conditionName],
            [field]: value
          }
        }
      }
      return { ...prev, loyaltyTiers: updatedTiers }
    })
  }

  // Add this function to handle updating offer types in the reward constraints
  const updateRewardConstraintOfferType = (offerType: string, value: boolean) => {
    setRewardConstraints(prev => ({
      ...prev,
      allowedOfferTypes: {
        ...prev.allowedOfferTypes,
        [offerType]: value
      }
    }));
  };

  // Add this near the top of your component
  const auth = getAuth();
  // No need to create a new db instance, use the imported one

  // Add a button to test Firestore connection
  <Button 
    variant="outline"
    onClick={() => {
      console.log("Testing Firestore connection...");
      const testUser = auth.currentUser;
      console.log("Current user:", testUser);
      console.log("Firestore instance:", db);
      
      if (testUser) {
        toast({
          title: "User authenticated",
          description: `Logged in as: ${testUser.email}`,
        });
      } else {
        toast({
          title: "Not authenticated",
          description: "No user is currently logged in.",
          variant: "destructive"
        });
      }
    }}
    className="text-xs"
  >
    Test Connection
  </Button>

  // Create a function to handle the "Done" button click that saves before redirecting
  const handleDoneClick = async () => {
    // First save the agent settings
    const saveSuccessful = await saveProgress();
    
    // Only redirect if save was successful or if saveSuccessful is undefined (function didn't return a value)
    if (saveSuccessful !== false) {
      window.location.href = '/dashboard';
    }
  };

  return (
    <PageTransition>
      <style jsx global>{gradientTextStyle}</style>
      <div className="min-h-[98vh] bg-gray-100">
        <div className="w-[99.5%] mx-auto py-2 px-2 h-[98%]">
          <div className="bg-white rounded-lg shadow-sm overflow-hidden h-full">
            {/* Header with title and progress */}
            <div className="px-4 pt-3 pb-5 border-b">
              <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                <div>
                  <h1 className="text-2xl font-bold">
                    Tap <span className="gradient-text">Agent</span> 
                  </h1>
                  <p className="text-gray-500 mt-1">
                    Configure your agent to create personalised customer rewards
                  </p>
                </div>
                
                <div className="flex flex-col items-end w-full md:w-auto">
                  <div className="flex items-center gap-3 mb-2">
                    {merchantName && (
                      <span className="text-sm font-medium text-gray-700">{merchantName}</span>
                    )}
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="text-xs h-7 px-3"
                      onClick={() => window.location.href = '/dashboard'}
                    >
                      Exit Setup
                    </Button>
                  </div>
                  
                  <div className="w-full md:w-64">
                  <div className="flex items-center justify-between mb-1">
                     
                  </div>
                    <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
                      <div 
                    
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
                  
            {/* Navigation with more visual emphasis */}
            <div className="px-4 py-4 border-b">
              <div className="mb-2">
                <h3 className="text-sm font-medium text-gray-700">Configuration Steps</h3>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {[
                  { id: "business-brand", label: "Business & Brand", icon: <Building2 className="h-4 w-4" /> },
                  { id: "objectives", label: "Objectives", icon: <Brain className="h-4 w-4" /> },
                  { id: "product-pricing", label: "Product & Pricing", icon: <Receipt className="h-4 w-4" /> },
                  { id: "financial", label: "Financial", icon: <BadgeDollarSign className="h-4 w-4" /> },
                  { id: "customer-segments", label: "Customer Segments", icon: <Users className="h-4 w-4" /> },
                  { id: "reward-constraints", label: "Reward Constraints", icon: <Gift className="h-4 w-4" /> },
                  { id: "messaging", label: "Messaging", icon: <MessageSquareText className="h-4 w-4" /> }
                ].map(tab => (
                <button 
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm ${
                      activeTab === tab.id 
                        ? "bg-gradient-to-r from-blue-50 to-orange-50 text-blue-700 font-medium shadow-sm" 
                        : "bg-gray-50 text-gray-700 hover:bg-gray-100"
                    }`}
                  >
                    <div className={activeTab === tab.id ? "text-blue-600" : "text-gray-500"}>
                      {tab.icon}
                    </div>
                    <span>{tab.label}</span>
                    <div className={`ml-1 h-2 w-2 rounded-full ${
                      completionStatus[tab.id] === 100 
                        ? "bg-green-500" 
                        : completionStatus[tab.id] > 0 
                          ? "bg-amber-500" 
                          : "bg-gray-200"
                    }`}></div>
                </button>
                ))}
              </div>
            </div>

            {/* Content area */}
            <div>
            {/* Dynamic content based on active tab */}
            {activeTab === "business-brand" && (
              <Card className="border-0 shadow-md apple-card">
                <CardHeader className="pb-2">
                    <div>
                    <CardTitle className="text-2xl">
                      <span className="gradient-text">Business & Brand DNA</span>
                    </CardTitle>
                    <CardDescription className="text-gray-500 mt-1">
                      Define your brand identity and business details
                      </CardDescription>
                  </div>
                </CardHeader>
                <CardContent className="space-y-8 pt-4">
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium gradient-text">Brand Identity</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                        <Label htmlFor="merchantName" className="text-sm font-medium text-gray-700">Business Name</Label>
                        <Input
                          id="merchantName"
                          placeholder="Your Business Name"
                          value={merchantName}
                          onChange={(e) => setMerchantName(e.target.value)}
                          className="rounded-lg border-gray-200"
                        />
                              </div>
                      
                      {/* Add new Business Context section here */}
                      <div className="space-y-2 md:col-span-2">
                        <Label htmlFor="businessContext" className="text-sm font-medium text-gray-700">Business Context</Label>
                        <textarea
                          id="businessContext"
                          placeholder="Describe your business in detail: what you offer, your unique value proposition, target audience, business goals, and any other context that would help the agent create better rewards."
                          value={businessBrand.businessContext || ""}
                          onChange={(e) => updateBusinessBrand('businessContext', e.target.value)}
                          className="w-full min-h-[120px] p-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                        <p className="text-xs text-gray-500">This information helps the agent understand your business better and create more relevant rewards.</p>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-4">
                      <div className="space-y-2">
                        <Label htmlFor="brandPrimaryColor" className="text-sm font-medium text-gray-700">Primary Color</Label>
                        <div className="flex items-center gap-3">
                          <input
                            type="color"
                            id="brandPrimaryColor"
                            value={businessBrand.brandPrimaryColor}
                            onChange={(e) => updateBusinessBrand('brandPrimaryColor', e.target.value)}
                            className="w-10 h-10 rounded-full overflow-hidden border-0"
                            style={{ appearance: 'none' }}
                          />
                          <Input
                            value={businessBrand.brandPrimaryColor}
                            onChange={(e) => updateBusinessBrand('brandPrimaryColor', e.target.value)}
                            className="rounded-lg border-gray-200 font-mono"
                          />
                    </div>
                  </div>
                  
                      <div className="space-y-2">
                        <Label htmlFor="brandSecondaryColor" className="text-sm font-medium text-gray-700">Secondary Color</Label>
                        <div className="flex items-center gap-3">
                          <input
                            type="color"
                            id="brandSecondaryColor"
                            value={businessBrand.brandSecondaryColor}
                            onChange={(e) => updateBusinessBrand('brandSecondaryColor', e.target.value)}
                            className="w-10 h-10 rounded-full overflow-hidden border-0"
                            style={{ appearance: 'none' }}
                          />
                          <Input
                            value={businessBrand.brandSecondaryColor}
                            onChange={(e) => updateBusinessBrand('brandSecondaryColor', e.target.value)}
                            className="rounded-lg border-gray-200 font-mono"
                          />
                        </div>
                    </div>
                    
                    {/* Removed Accent Color input */}
                    </div>
                                </div>
                        
                  <Separator className="my-6" />
                  
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium gradient-text">Brand Voice & Tone</h3>
                    
                    <div className="space-y-2">
                      <Label className="text-sm font-medium text-gray-700">Tone of Voice</Label>
                      <div className="flex flex-wrap gap-2 mt-2">
                        {["friendly", "professional", "casual", "formal", "playful", "serious", "inspirational", "direct", "quirky", "luxurious"].map(tone => (
                          <Badge 
                            key={tone}
                            variant={(businessBrand.toneOfVoice && businessBrand.toneOfVoice.includes(tone)) ? "default" : "outline"}
                            className={`cursor-pointer px-3 py-1.5 rounded-full transition-all ${
                              (businessBrand.toneOfVoice && businessBrand.toneOfVoice.includes(tone))
                                ? "bg-blue-100 hover:bg-blue-200 text-blue-800 border-blue-200"
                                : "bg-gray-50 hover:bg-gray-100 text-gray-700 border-gray-200"
                            }`}
                            onClick={() => {
                              if (businessBrand.toneOfVoice && businessBrand.toneOfVoice.includes(tone)) {
                                updateBusinessBrand('toneOfVoice', businessBrand.toneOfVoice.filter(t => t !== tone))
                              } else {
                                updateBusinessBrand('toneOfVoice', [...(businessBrand.toneOfVoice || []), tone])
                              }
                            }}
                          >
                            {(businessBrand.toneOfVoice && businessBrand.toneOfVoice.includes(tone)) && (
                              <CheckCircle className="h-3 w-3 mr-1 inline-block text-blue-600" />
                            )}
                            {tone}
                          </Badge>
                        ))}
                              </div>
                      <p className="text-xs text-gray-500 mt-2">Select the tones that best represent your brand's voice</p>
                    </div>
                  </div>
                  
                  <Separator className="my-6" />
                  
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium gradient-text">Agent Capabilities</h3>
                    
                      <div className="space-y-2">
                      <Label className="text-sm font-medium text-gray-700">Enable Agent Tasks</Label>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
                        {[
                          { id: "rewards", label: "Rewards Generation", icon: <Gift className="h-4 w-4 text-blue-600" /> },
                          { id: "banners", label: "Banner Creation", icon: <LayoutDashboard className="h-4 w-4 text-blue-600" /> },
                          { id: "messages", label: "Customer Messaging", icon: <MessageSquareText className="h-4 w-4 text-blue-600" /> },
                          { id: "re-engagement", label: "Re-engagement", icon: <Bell className="h-4 w-4 text-blue-600" /> },
                          { id: "email", label: "Email Marketing", icon: <Mail className="h-4 w-4 text-blue-600" /> },
                          { id: "analysis", label: "Performance Analysis", icon: <BarChart className="h-4 w-4 text-blue-600" /> }
                        ].map(task => (
                          <div key={task.id} className="flex items-center space-x-2 p-3 border border-gray-100 rounded-xl bg-gray-50">
                            <div className="flex items-center gap-2 flex-1">
                              {task.icon}
                              <span className="text-sm text-gray-700">{task.label}</span>
                            </div>
                            <Switch 
                              checked={businessBrand.agentTasks && businessBrand.agentTasks[task.id]} 
                              onCheckedChange={(checked) => {
                                updateBusinessBrand('agentTasks', {
                                  ...(businessBrand.agentTasks || {}),
                                  [task.id]: checked
                                })
                              }}
                              className="data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600"
                                />
                              </div>
                        ))}
                      </div>
                      <p className="text-xs text-gray-500 mt-2">Select which tasks the agent should perform for your business</p>
                            </div>
                          </div>
                          
                  <Separator className="my-6" />
                  
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium gradient-text">Business Hours</h3>
                    
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 gap-4">
                        {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map(day => (
                          <div key={day} className="flex items-center space-x-4 p-3 border border-gray-100 rounded-xl bg-gray-50">
                            <div className="w-24">
                              <span className="text-sm font-medium text-gray-700 capitalize">{day}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Switch 
                                checked={businessBrand.openingHours && businessBrand.openingHours[day] ? businessBrand.openingHours[day].isOpen : true} 
                                onCheckedChange={(checked) => {
                                  updateBusinessBrand('openingHours', {
                                    ...(businessBrand.openingHours || {}),
                                    [day]: {
                                      isOpen: checked,
                                      openTime: businessBrand.openingHours && businessBrand.openingHours[day] ? businessBrand.openingHours[day].openTime : "09:00",
                                      closeTime: businessBrand.openingHours && businessBrand.openingHours[day] ? businessBrand.openingHours[day].closeTime : "17:00"
                                    }
                                  })
                                }}
                                className="data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600"
                              />
                              <span className="text-sm text-gray-600 w-16">
                                {businessBrand.openingHours && businessBrand.openingHours[day] && businessBrand.openingHours[day].isOpen ? "Open" : "Closed"}
                              </span>
                              </div>
                            
                            {businessBrand.openingHours && businessBrand.openingHours[day] && businessBrand.openingHours[day].isOpen && (
                              <div className="flex items-center gap-2 ml-4">
                              <Input
                                  type="time"
                                  value={businessBrand.openingHours[day].openTime}
                                  onChange={(e) => {
                                    updateBusinessBrand('openingHours', {
                                      ...businessBrand.openingHours,
                                      [day]: {
                                        ...businessBrand.openingHours[day],
                                        openTime: e.target.value
                                      }
                                    })
                                  }}
                                  className="w-32 rounded-lg border-gray-200"
                                />
                                <span className="text-gray-500">to</span>
                              <Input
                                  type="time"
                                  value={businessBrand.openingHours[day].closeTime}
                                  onChange={(e) => {
                                    updateBusinessBrand('openingHours', {
                                      ...businessBrand.openingHours,
                                      [day]: {
                                        ...businessBrand.openingHours[day],
                                        closeTime: e.target.value
                                      }
                                    })
                                  }}
                                  className="w-32 rounded-lg border-gray-200"
                              />
                            </div>
                            )}
                          </div>
                          ))}
                        </div>
                      <p className="text-xs text-gray-500 mt-2">Set your business hours to help the agent schedule appropriate campaigns</p>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t p-6">
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      className="flex items-center gap-1 rounded-lg"
                      onClick={() => window.location.href = '/dashboard'}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                        <path d="M19 12H5M12 19l-7-7 7-7"/>
                      </svg>
                      Back to Dashboard
                    </Button>
                    <Button variant="outline" className="rounded-lg">Reset</Button>
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                      onClick={saveProgress}
                      disabled={isSaving}
                    >
                      {isSaving ? (
                        <>
                          <span className="animate-pulse mr-2">●</span>
                          Saving...
                        </>
                      ) : (
                        "Save Progress"
                      )}
                    </Button>
                    <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("objectives")}>
                      Next: Objectives
                      <ArrowRight className="h-4 w-4" />
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            )}
            
              {activeTab === "objectives" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                    <div>
                      <CardTitle className="text-2xl">
                        <span className="gradient-text">Objectives & OKRs</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Define your business objectives and key results the Tap Agent should optimize for
                      </CardDescription>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Business Objectives Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Business Objectives</h3>
                      <p className="text-sm text-gray-600">Define what success looks like for your business</p>
                      
                      {/* Templates dropdown */}
                      <div className="mb-4 flex items-center space-x-2">
                        <Label htmlFor="objective-template" className="text-sm font-medium whitespace-nowrap">Quick templates:</Label>
                        <Select onValueChange={(value) => {
                          if (value === "" || value === "none") return;
                          
                          // Parse the template string to get objective details
                          const [name, description] = value.split('|');
                          
                          // Add new objective from template
                          setObjectiveMatrix(prev => ({
                            ...prev,
                            businessObjectives: [
                              ...prev.businessObjectives,
                              { name, description, priority: 8 }
                            ]
                          }));
                        }}>
                          <SelectTrigger className="w-full" id="objective-template">
                            <SelectValue placeholder="Select a template" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="none">Select a template objective</SelectItem>
                            <SelectItem value="Increase weekly visits|Boost the number of customer visits per week">Increase weekly visits</SelectItem>
                            <SelectItem value="Raise average order value|Increase the average order value to target">Raise AOV</SelectItem>
                            <SelectItem value="Reduce dormant cohort|Decrease percentage of dormant customers">Reduce dormant customers</SelectItem>
                            <SelectItem value="Boost retention rate|Improve customer retention percentage">Boost retention rate</SelectItem>
                            <SelectItem value="Increase customer acquisition|Grow new customer base efficiently">Increase acquisition</SelectItem>
                            <SelectItem value="Improve customer LTV|Maximize lifetime value of customers">Improve customer LTV</SelectItem>
                            <SelectItem value="Optimize inventory turnover|Ensure optimal product rotation">Optimize inventory turnover</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      {/* Business objectives list with cards */}
                      <div className="space-y-4">
                        {objectiveMatrix.businessObjectives.length > 0 ? (
                          <div className="grid grid-cols-1 gap-4">
                            {objectiveMatrix.businessObjectives.map((objective, index) => (
                              <div key={index} className="bg-white rounded-lg border border-gray-200 p-4 shadow-sm">
                                <div className="flex justify-between items-start mb-2">
                                  <div className="flex-1">
                                    <input
                                      type="text"
                                      value={objective.name}
                                      onChange={(e) => updateObjectiveMatrix('businessObjectives', index, 'name', e.target.value)}
                                      className="font-medium text-blue-700 bg-transparent border-0 w-full p-0 focus:outline-none focus:ring-0"
                                      placeholder="Objective name"
                                    />
                                  </div>
                                  <div className="flex items-center space-x-1">
                                    <button 
                                      onClick={() => moveObjective(index, 'up')}
                                      className="p-1 text-gray-400 hover:text-blue-500 rounded transition"
                                      disabled={index === 0}
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="m18 15-6-6-6 6"/>
                                      </svg>
                                    </button>
                                    <button 
                                      onClick={() => moveObjective(index, 'down')}
                                      className="p-1 text-gray-400 hover:text-blue-500 rounded transition"
                                      disabled={index === objectiveMatrix.businessObjectives.length - 1}
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="m6 9 6 6 6-6"/>
                                      </svg>
                                    </button>
                                    <button 
                                      onClick={() => {
                                        setObjectiveMatrix(prev => ({
                                          ...prev,
                                          businessObjectives: prev.businessObjectives.filter((_, i) => i !== index)
                                        }));
                                      }}
                                      className="p-1 text-gray-400 hover:text-red-500 rounded transition"
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                      </svg>
                                    </button>
                                  </div>
                                </div>
                                
                                <div className="mb-3">
                                  <textarea
                                    value={objective.description}
                                    onChange={(e) => updateObjectiveMatrix('businessObjectives', index, 'description', e.target.value)}
                                    className="w-full text-sm text-gray-600 bg-gray-50 border border-gray-100 rounded p-2 min-h-[60px]"
                                    placeholder="Add specifics about this objective (e.g. target metrics)"
                                  />
                                </div>
                                
                                <div className="flex items-center">
                                  <span className="text-xs text-gray-500 mr-2">Priority:</span>
                                  <input
                                    type="range"
                                    min="1"
                                    max="10"
                                    value={objective.priority}
                                    onChange={(e) => updateObjectiveMatrix('businessObjectives', index, 'priority', parseInt(e.target.value))}
                                    className="flex-1 mr-2 h-2"
                                  />
                                  <span className="text-xs font-medium bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full">
                                    {objective.priority}/10
                                  </span>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="bg-gray-50 rounded-lg p-6 text-center border border-dashed border-gray-300">
                            <p className="text-gray-500">No objectives defined yet. Add your first objective or select from templates above.</p>
                          </div>
                        )}
                        
                        <Button 
                          onClick={addBusinessObjective} 
                          variant="outline" 
                          className="w-full mt-2 border-dashed border-gray-300 text-gray-500 hover:text-blue-600 hover:border-blue-300"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          Add New Objective
                        </Button>
                      </div>
                    </div>
                    
                    <Separator className="my-6" />
                    
                    {/* Customer Objectives Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Customer Value Priorities</h3>
                      <p className="text-sm text-gray-600">What matters most to your customers? Adjust importance levels below.</p>
                      
                      <div className="bg-white rounded-lg border border-gray-200 p-4 shadow-sm">
                        <div className="space-y-4 mt-2">
                          {Object.entries(objectiveMatrix.customerObjectives).map(([id, value]) => (
                            <div key={id} className="grid grid-cols-12 gap-4 items-center">
                              <div className="col-span-3 text-sm capitalize font-medium">
                                {id.replace(/_/g, ' ')}
                              </div>
                              <div className="col-span-7">
                                <div className="flex items-center gap-1">
                                  <span className="text-xs text-gray-500">Low</span>
                                  <input
                                    type="range"
                                    min="1"
                                    max="10"
                                    value={value}
                                    onChange={(e) => updateCustomerObjective(id, parseInt(e.target.value))}
                                    className="flex-1 mx-2 h-2"
                                  />
                                  <span className="text-xs text-gray-500">High</span>
                                </div>
                              </div>
                              <div className="col-span-2 text-center">
                                <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                                  value >= 8 ? 'bg-green-100 text-green-800' : 
                                  value >= 5 ? 'bg-blue-100 text-blue-800' : 
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  {value}/10
                                </span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <Separator className="my-6" />
                    
                    {/* Seasonal Objectives Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Seasonal Campaigns</h3>
                      <p className="text-sm text-gray-600">Define time-limited campaigns and seasonal objectives</p>
                      
                      {/* Seasonal templates dropdown */}
                      <div className="mb-4 flex items-center space-x-2">
                        <Label htmlFor="seasonal-template" className="text-sm font-medium whitespace-nowrap">Quick templates:</Label>
                        <Select onValueChange={(value) => {
                          if (value === "") return;
                          
                          // Parse the template string to get season and objective
                          const [season, objective] = value.split('|');
                          
                          const today = new Date();
                          const endDate = new Date();
                          endDate.setMonth(endDate.getMonth() + 1);
                          
                          // Add new seasonal objective from template
                          setObjectiveMatrix(prev => ({
                            ...prev,
                            seasonalObjectives: [
                              ...prev.seasonalObjectives,
                              { 
                                season, 
                                objective, 
                                startDate: today.toISOString().split('T')[0],
                                endDate: endDate.toISOString().split('T')[0]
                              }
                            ]
                          }));
                        }}>
                          <SelectTrigger className="w-full" id="seasonal-template">
                            <SelectValue placeholder="Select a seasonal template" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="none">Select a seasonal template</SelectItem>
                            <SelectItem value="Summer|Increase cold beverage sales">Summer promotion</SelectItem>
                            <SelectItem value="Back to School|Boost sales of student items">Back to School</SelectItem>
                            <SelectItem value="Holiday Season|Maximize holiday shopping revenue">Holiday Season</SelectItem>
                            <SelectItem value="New Year|Promote health and wellness products">New Year</SelectItem>
                            <SelectItem value="Valentine's Day|Increase gift purchases">Valentine's Day</SelectItem>
                            <SelectItem value="Black Friday|Maximize sale period revenue">Black Friday</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      {/* Seasonal objectives list */}
                      <div className="space-y-4">
                        {objectiveMatrix.seasonalObjectives.length > 0 ? (
                          <div className="grid grid-cols-1 gap-4">
                            {objectiveMatrix.seasonalObjectives.map((objective, index) => (
                              <div key={index} className="bg-white rounded-lg border border-gray-200 p-4 shadow-sm">
                                <div className="flex justify-between items-start mb-2">
                                  <div className="flex-1">
                                    <input
                                      type="text"
                                      value={objective.season}
                                      onChange={(e) => updateObjectiveMatrix('seasonalObjectives', index, 'season', e.target.value)}
                                      className="font-medium text-blue-700 bg-transparent border-0 w-full p-0 focus:outline-none focus:ring-0"
                                      placeholder="Season name"
                                    />
                                  </div>
                                  <button 
                                    onClick={() => removeSeasonalObjective(index)}
                                    className="p-1 text-gray-400 hover:text-red-500 rounded transition"
                                  >
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                    </svg>
                                  </button>
                                </div>
                                
                                <div className="mb-3">
                                  <textarea
                                    value={objective.objective}
                                    onChange={(e) => updateObjectiveMatrix('seasonalObjectives', index, 'objective', e.target.value)}
                                    className="w-full text-sm text-gray-600 bg-gray-50 border border-gray-100 rounded p-2 min-h-[60px]"
                                    placeholder="Describe the seasonal objective"
                                  />
                                </div>
                                
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label htmlFor={`startDate-${index}`} className="text-xs text-gray-500 mb-1 block">Start Date</Label>
                                    <input
                                      id={`startDate-${index}`}
                                      type="date"
                                      value={objective.startDate}
                                      onChange={(e) => updateObjectiveMatrix('seasonalObjectives', index, 'startDate', e.target.value)}
                                      className="w-full text-sm border border-gray-200 rounded p-1"
                                    />
                                  </div>
                                  <div>
                                    <Label htmlFor={`endDate-${index}`} className="text-xs text-gray-500 mb-1 block">End Date</Label>
                                    <input
                                      id={`endDate-${index}`}
                                      type="date"
                                      value={objective.endDate}
                                      onChange={(e) => updateObjectiveMatrix('seasonalObjectives', index, 'endDate', e.target.value)}
                                      className="w-full text-sm border border-gray-200 rounded p-1"
                                    />
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="bg-gray-50 rounded-lg p-6 text-center border border-dashed border-gray-300">
                            <p className="text-gray-500">No seasonal campaigns defined yet. Add your first campaign or select from templates above.</p>
                          </div>
                        )}
                        
                        <Button 
                          onClick={addSeasonalObjective} 
                          variant="outline" 
                          className="w-full mt-2 border-dashed border-gray-300 text-gray-500 hover:text-blue-600 hover:border-blue-300"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          Add New Seasonal Campaign
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-between border-t p-6">
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("business-brand")}
                        >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                          <path d="M19 12H5M12 19l-7-7 7-7"/>
                        </svg>
                        Back to Business & Brand
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                    </div>
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                        onClick={saveProgress}
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <span className="animate-pulse mr-2">●</span>
                            Saving...
                          </>
                        ) : (
                          "Save Progress"
                        )}
                      </Button>
                      <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("product-pricing")}>
                        Next: Product & Pricing
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardFooter>
                </Card>
              )}
              
              {activeTab === "product-pricing" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                      <div>
                      <CardTitle className="text-2xl">
                        <span className="gradient-text">Product & Pricing</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Define your product catalog and pricing strategy
                        </CardDescription>
      </div>
                  </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Product Catalog Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Product Catalog</h3>
                      
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div className="space-y-2">
                            <Label htmlFor="productCategory" className="text-sm font-medium text-gray-700">Product Category</Label>
                            <Select
                              value={productPricing.productCategory}
                              onValueChange={(value) => updateProductPricing('productCategory', value)}
                            >
                              <SelectTrigger id="productCategory" className="w-full rounded-lg border-gray-200">
                                <SelectValue placeholder="Select a category" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="food">Food</SelectItem>
                                <SelectItem value="beverage">Beverage</SelectItem>
                                <SelectItem value="retail">Retail</SelectItem>
                                <SelectItem value="service">Service</SelectItem>
                                <SelectItem value="experience">Experience</SelectItem>
                                <SelectItem value="other">Other</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          
                          <div className="space-y-2">
                            <Label htmlFor="averageBasketSize" className="text-sm font-medium text-gray-700">Average Basket Size</Label>
                            <div className="flex items-center gap-2">
                              <span className="text-gray-500">$</span>
                              <Input
                                id="averageBasketSize"
                                type="number"
                                min="0"
                                step="0.01"
                                placeholder="25.00"
                                value={productPricing.averageBasketSize}
                                onChange={(e) => updateProductPricing('averageBasketSize', e.target.value)}
                                className="rounded-lg border-gray-200"
                              />
                            </div>
                            <p className="text-xs text-gray-500">Average amount spent per transaction</p>
                          </div>
    </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <Label className="text-sm font-medium text-gray-700">Product SKUs</Label>
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm" 
                              onClick={addSku}
                              className="rounded-lg border-blue-200 text-blue-700 hover:bg-blue-50"
                            >
                              <Plus className="h-4 w-4 mr-1" />
                              Add SKU
                            </Button>
                          </div>
                          
                          <div className="border border-gray-100 rounded-xl overflow-hidden">
                            <div className="grid grid-cols-12 gap-2 bg-gray-50 p-3 border-b border-gray-100">
                              <div className="col-span-4 text-sm font-medium text-gray-700">Product Name</div>
                              <div className="col-span-2 text-sm font-medium text-gray-700">Price ($)</div>
                              <div className="col-span-2 text-sm font-medium text-gray-700">Cost ($)</div>
                              <div className="col-span-3 text-sm font-medium text-gray-700">Category</div>
                              <div className="col-span-1 text-sm font-medium text-gray-700"></div>
                            </div>
                            
                            <div className="max-h-64 overflow-y-auto">
                              {(productPricing.skus || []).map((sku, index) => (
                                <div key={index} className="grid grid-cols-12 gap-2 p-3 border-b border-gray-100 items-center">
                                  <div className="col-span-4">
                              <Input
                                      value={sku.name}
                                      onChange={(e) => updateSku(index, 'name', e.target.value)}
                                placeholder="Product name"
                                      className="rounded-lg border-gray-200"
                              />
                                  </div>
                                  <div className="col-span-2">
                              <Input
                                      type="number"
                                      min="0"
                                      step="0.01"
                                      value={sku.price}
                                      onChange={(e) => updateSku(index, 'price', e.target.value)}
                                      placeholder="0.00"
                                      className="rounded-lg border-gray-200"
                                    />
                                  </div>
                                  <div className="col-span-2">
                              <Input
                                      type="number"
                                      min="0"
                                      step="0.01"
                                      value={sku.cost}
                                      onChange={(e) => updateSku(index, 'cost', e.target.value)}
                                      placeholder="0.00"
                                      className="rounded-lg border-gray-200"
                                    />
                                  </div>
                                  <div className="col-span-3">
                                    <Select
                                      value={sku.category}
                                      onValueChange={(value) => updateSku(index, 'category', value)}
                                    >
                                      <SelectTrigger className="rounded-lg border-gray-200">
                                        <SelectValue placeholder="Category" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="main">Main</SelectItem>
                                        <SelectItem value="side">Side</SelectItem>
                                        <SelectItem value="dessert">Dessert</SelectItem>
                                        <SelectItem value="drink">Drink</SelectItem>
                                        <SelectItem value="combo">Combo</SelectItem>
                                        <SelectItem value="other">Other</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                  <div className="col-span-1 text-right">
                                <Button 
                                  type="button" 
                                      variant="ghost" 
                                      size="sm" 
                                      onClick={() => removeSku(index)}
                                      className="text-gray-500 hover:text-red-500 p-1 h-auto"
                                    >
                                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M3 6h18M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6M14 11v6"/>
                                      </svg>
                                </Button>
                          </div>
                              </div>
                              ))}
                              
                              {(!productPricing.skus || productPricing.skus.length === 0) && (
                                <div className="p-4 text-center text-gray-500">
                                  No products added yet. Click "Add SKU" to get started.
                              </div>
                            )}
                            </div>
                          </div>
                          <p className="text-xs text-gray-500 mt-2">Add your key products to help the agent create relevant offers</p>
                            </div>
                          </div>
                        </div>
                      
                    <Separator className="my-6" />
                    
                    {/* Special Product Categories */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Special Product Categories</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <Label htmlFor="heroItems" className="text-sm font-medium text-gray-700">Hero Products</Label>
                          <div className="flex gap-2">
                            <Input
                              id="newHeroItem"
                              placeholder="Add a hero product"
                              value={productPricing.newHeroItem}
                              onChange={(e) => updateProductPricing('newHeroItem', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                            <Button 
                              type="button" 
                              onClick={() => {
                                if (productPricing.newHeroItem && productPricing.newHeroItem.trim()) {
                                  updateProductPricing('heroItems', [...productPricing.heroItems, productPricing.newHeroItem.trim()]);
                                  updateProductPricing('newHeroItem', '');
                                }
                              }}
                              disabled={!productPricing.newHeroItem || !productPricing.newHeroItem.trim()}
                              className="bg-blue-600 hover:bg-blue-700 rounded-lg"
                            >
                              Add
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {(productPricing.heroItems || []).map((item, index) => (
                              <Badge 
                                key={index}
                                variant="outline"
                                className="px-3 py-1.5 rounded-full bg-blue-50 text-blue-700 border-blue-100 flex items-center gap-1"
                              >
                                {item}
                                <button
                                  type="button"
                                  onClick={() => updateProductPricing('heroItems', productPricing.heroItems.filter((_, i) => i !== index))}
                                  className="ml-1 h-4 w-4 rounded-full hover:bg-blue-200 inline-flex items-center justify-center"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M18 6 6 18"/>
                                    <path d="m6 6 12 12"/>
                                  </svg>
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <p className="text-xs text-gray-500">Your best-selling or signature products</p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="lowVelocityItems" className="text-sm font-medium text-gray-700">Low Velocity Products</Label>
                          <div className="flex gap-2">
                            <Input
                              id="newLowVelocityItem"
                              placeholder="Add a low velocity product"
                              value={productPricing.newLowVelocityItem}
                              onChange={(e) => updateProductPricing('newLowVelocityItem', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                            <Button 
                              type="button" 
                              onClick={() => {
                                if (productPricing.newLowVelocityItem && productPricing.newLowVelocityItem.trim()) {
                                  updateProductPricing('lowVelocityItems', [...productPricing.lowVelocityItems, productPricing.newLowVelocityItem.trim()]);
                                  updateProductPricing('newLowVelocityItem', '');
                                }
                              }}
                              disabled={!productPricing.newLowVelocityItem || !productPricing.newLowVelocityItem.trim()}
                              className="bg-blue-600 hover:bg-blue-700 rounded-lg"
                            >
                              Add
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {(productPricing.lowVelocityItems || []).map((item, index) => (
                              <Badge 
                                key={index}
                                variant="outline"
                                className="px-3 py-1.5 rounded-full bg-amber-50 text-amber-700 border-amber-100 flex items-center gap-1"
                              >
                                {item}
                                <button
                                  type="button"
                                  onClick={() => updateProductPricing('lowVelocityItems', productPricing.lowVelocityItems.filter((_, i) => i !== index))}
                                  className="ml-1 h-4 w-4 rounded-full hover:bg-amber-200 inline-flex items-center justify-center"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M18 6 6 18"/>
                                    <path d="m6 6 12 12"/>
                                  </svg>
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <p className="text-xs text-gray-500">Products that need a sales boost</p>
                        </div>
                      </div>
                    </div>
                    
                      
                    
                              
                    <div className="bg-blue-50 p-4 rounded-xl border border-blue-100 mt-4">
                      <div className="flex items-start gap-3">
                        <BadgeDollarSign className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="text-sm font-medium text-blue-800">Why this matters</h4>
                          <p className="text-xs text-blue-700 mt-1">
                            Your product and pricing information helps the AI agent create offers that align with your business strategy, 
                            promote high-margin items, and move slow inventory while maintaining your desired price positioning.
                          </p>
                              </div>
                    </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t p-6">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("objectives")}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                          </svg>
                        Previous: Objectives
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                      </div>
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                          onClick={saveProgress}
                          disabled={isSaving}
                        >
                          {isSaving ? (
                            <>
                              <span className="animate-pulse mr-2">●</span>
                              Saving...
                            </>
                          ) : (
                            "Save Progress"
                          )}
                        </Button>
                      <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("financial")}>
                        Next: Financial Guardrails
                            <ArrowRight className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardFooter>
                </Card>
              )}
              
              {activeTab === "financial" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                        <div>
                      <CardTitle className="text-2xl">
                        <span className="gradient-text">Financial Guardrails</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Set budget constraints and financial parameters for your rewards
                  </CardDescription>
                      </div>
                    </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Budget Constraints Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Budget Constraints</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div className="space-y-2">
                          <Label htmlFor="rewardBudgetType" className="text-sm font-medium text-gray-700">Reward Budget Type</Label>
                          <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                              <input 
                                type="radio" 
                                id="fixed" 
                                name="budgetType" 
                                value="fixed" 
                                checked={financialGuardrails.rewardBudgetType === "fixed"}
                                onChange={() => updateFinancialGuardrails('rewardBudgetType', 'fixed')}
                                className="text-blue-600 focus:ring-blue-500"
                              />
                              <Label htmlFor="fixed" className="text-sm text-gray-700 cursor-pointer">Fixed Amount</Label>
                            </div>
                            <div className="flex items-center gap-2">
                              <input 
                                type="radio" 
                                id="percentage" 
                                name="budgetType" 
                                value="percentage" 
                                checked={financialGuardrails.rewardBudgetType === "percentage"}
                                onChange={() => updateFinancialGuardrails('rewardBudgetType', 'percentage')}
                                className="text-blue-600 focus:ring-blue-500"
                              />
                              <Label htmlFor="percentage" className="text-sm text-gray-700 cursor-pointer">Percentage of Revenue</Label>
                            </div>
                      </div>
                        </div>
                          
                            <div className="space-y-2">
                          <Label htmlFor="monthlyRewardBudget" className="text-sm font-medium text-gray-700">
                            {financialGuardrails.rewardBudgetType === "fixed" ? "Monthly Reward Budget" : "Budget as % of Revenue"}
                          </Label>
                          <div className="flex items-center gap-2">
                            {financialGuardrails.rewardBudgetType === "fixed" && <span className="text-gray-500">$</span>}
                              <Input
                                id="monthlyRewardBudget"
                              type="number"
                              min="0"
                              step={financialGuardrails.rewardBudgetType === "fixed" ? "100" : "0.1"}
                              placeholder={financialGuardrails.rewardBudgetType === "fixed" ? "1000" : "2.5"}
                                value={financialGuardrails.monthlyRewardBudget}
                                onChange={(e) => updateFinancialGuardrails('monthlyRewardBudget', e.target.value)}
                              className="rounded-lg border-gray-200"
                              />
                            {financialGuardrails.rewardBudgetType === "percentage" && <span className="text-gray-500">%</span>}
                          </div>
                              <p className="text-xs text-gray-500">
                            {financialGuardrails.rewardBudgetType === "fixed" 
                              ? "Maximum amount to spend on rewards each month" 
                              : "Percentage of monthly revenue allocated to rewards"}
                          </p>
                          </div>
                        </div>
                      </div>
                        
                    <Separator className="my-6" />
                      
                    {/* Profitability Parameters Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Profitability Parameters</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <Label htmlFor="targetGrossMargin" className="text-sm font-medium text-gray-700">Target Gross Margin</Label>
                        <div className="flex items-center gap-2">
                            <Input
                              id="targetGrossMargin"
                              type="number"
                              min="0"
                              max="100"
                              step="0.1"
                              placeholder="30"
                              value={financialGuardrails.targetGrossMargin}
                              onChange={(e) => updateFinancialGuardrails('targetGrossMargin', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                            <span className="text-gray-500">%</span>
                          </div>
                          <p className="text-xs text-gray-500">Minimum gross margin to maintain for reward-driven sales</p>
                      </div>
                      
                          <div className="space-y-2">
                          <Label htmlFor="maxCostPerAcquisition" className="text-sm font-medium text-gray-700">Max Cost Per Acquisition</Label>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-500">$</span>
                            <Input
                              id="maxCostPerAcquisition"
                              type="number"
                              min="0"
                              step="0.01"
                              placeholder="25.00"
                              value={financialGuardrails.maxCostPerAcquisition}
                              onChange={(e) => updateFinancialGuardrails('maxCostPerAcquisition', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                      </div>
                          <p className="text-xs text-gray-500">Maximum cost to acquire a new customer through rewards</p>
                    </div>
                        
                        
                      </div>
                    </div>
                    
                    <Separator className="my-6" />
                    
                    {/* Reward Value Limits Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Reward Value Limits</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <Label htmlFor="minRewardValue" className="text-sm font-medium text-gray-700">Minimum Reward Value</Label>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-500">$</span>
                            <Input
                              id="minRewardValue"
                              type="number"
                              min="0"
                              step="0.01"
                              placeholder="5.00"
                              value={financialGuardrails.minRewardValue}
                              onChange={(e) => updateFinancialGuardrails('minRewardValue', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                          </div>
                          <p className="text-xs text-gray-500">Smallest reward value that can be offered</p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="maxRewardValue" className="text-sm font-medium text-gray-700">Maximum Reward Value</Label>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-500">$</span>
                            <Input
                              id="maxRewardValue"
                              type="number"
                              min="0"
                              step="0.01"
                              placeholder="50.00"
                              value={financialGuardrails.maxRewardValue}
                              onChange={(e) => updateFinancialGuardrails('maxRewardValue', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                          </div>
                          <p className="text-xs text-gray-500">Largest reward value that can be offered</p>
                        </div>
                        
                        
                        
                       
                      </div>
                    </div>
                    
                    <div className="bg-blue-50 p-4 rounded-xl border border-blue-100 mt-4">
                          <div className="flex items-start gap-3">
                        <BadgeDollarSign className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                            <div>
                          <h4 className="text-sm font-medium text-blue-800">Financial Impact</h4>
                          <p className="text-xs text-blue-700 mt-1">
                            Setting clear financial guardrails ensures your reward program remains profitable while still providing 
                            compelling offers to customers. These parameters help the AI agent balance customer engagement with 
                            business sustainability.
                          </p>
                          </div>
                    </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t p-6">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("product-pricing")}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                          </svg>
                        Previous: Product & Pricing
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                      </div>
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                          onClick={saveProgress}
                          disabled={isSaving}
                        >
                          {isSaving ? (
                            <>
                              <span className="animate-pulse mr-2">●</span>
                              Saving...
                            </>
                          ) : (
                            "Save Progress"
                          )}
                        </Button>
                      <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("customer-segments")}>
                        Next: Customer Segments
                            <ArrowRight className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardFooter>
                </Card>
              )}
              
              {activeTab === "customer-segments" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                        <div>
                      <CardTitle className="text-xl">
                        <span className="gradient-text">Customer Segments</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Define your customer segments and loyalty tiers
                          </CardDescription>
                      </div>
                    </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Loyalty Tiers Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Loyalty Tiers</h3>
                        
                        <div className="space-y-4">
                        {customerSegments.loyaltyTiers.map((tier, index) => (
                          <div key={index} className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-3">
                              <div className="flex items-center gap-3">
                                <div className={`h-8 w-8 rounded-full flex items-center justify-center ${
                                  index === 0 ? "bg-amber-100 text-amber-700" :
                                  index === 1 ? "bg-gray-200 text-gray-700" :
                                  "bg-yellow-100 text-yellow-700"
                                }`}>
                                  <Trophy className="h-4 w-4" />
                                </div>
                                <div>
                                      <Input 
                                        value={tier.name}
                                    onChange={(e) => updateLoyaltyTier(index, 'name', e.target.value)}
                                    className="font-medium border-0 bg-transparent p-0 h-auto text-base focus-visible:ring-0"
                                    placeholder="Tier Name"
                                  />
                                      <Input 
                                        value={tier.description}
                                    onChange={(e) => updateLoyaltyTier(index, 'description', e.target.value)}
                                    className="text-sm text-gray-500 border-0 bg-transparent p-0 h-auto focus-visible:ring-0"
                                    placeholder="Tier Description"
                                  />
                                </div>
                              </div>
                                      <div className="flex items-center gap-2">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => moveLoyaltyTier(index, 'up')}
                                  disabled={index === 0}
                                  className="h-8 w-8 p-0 rounded-lg"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="m18 15-6-6-6 6"/>
                                  </svg>
                                </Button>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => moveLoyaltyTier(index, 'down')}
                                  disabled={index === customerSegments.loyaltyTiers.length - 1}
                                  className="h-8 w-8 p-0 rounded-lg"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="m6 9 6 6 6-6"/>
                                  </svg>
                                </Button>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => removeLoyaltyTier(index)}
                                  disabled={customerSegments.loyaltyTiers.length <= 1}
                                  className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg"
                                >
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M3 6h18"/>
                                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6M14 11v6"/>
                                  </svg>
                                </Button>
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                              <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                  <Label htmlFor={`lifetimeTransactions-${index}`} className="text-sm font-medium text-gray-700">
                                    Lifetime Transactions
                                  </Label>
                                        <Switch 
                                    id={`lifetimeTransactions-enabled-${index}`}
                                          checked={tier.conditions.lifetimeTransactions.enabled}
                                    onCheckedChange={(checked) => updateLoyaltyTierCondition(index, 'lifetimeTransactions', 'enabled', checked)}
                                    className="apple-switch"
                                  />
                                </div>
                                        <Input 
                                  id={`lifetimeTransactions-${index}`}
                                          type="number"
                                          min="0"
                                  value={tier.conditions.lifetimeTransactions.value}
                                  onChange={(e) => updateLoyaltyTierCondition(index, 'lifetimeTransactions', 'value', parseInt(e.target.value))}
                                          disabled={!tier.conditions.lifetimeTransactions.enabled}
                                  className="rounded-lg border-gray-200"
                                        />
                                      </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                  <Label htmlFor={`lifetimeSpend-${index}`} className="text-sm font-medium text-gray-700">
                                    Lifetime Spend ($)
                                  </Label>
                                        <Switch 
                                    id={`lifetimeSpend-enabled-${index}`}
                                          checked={tier.conditions.lifetimeSpend.enabled}
                                    onCheckedChange={(checked) => updateLoyaltyTierCondition(index, 'lifetimeSpend', 'enabled', checked)}
                                    className="apple-switch"
                                  />
                                </div>
                                        <Input 
                                  id={`lifetimeSpend-${index}`}
                                          type="number"
                                          min="0"
                                  value={tier.conditions.lifetimeSpend.value}
                                  onChange={(e) => updateLoyaltyTierCondition(index, 'lifetimeSpend', 'value', parseInt(e.target.value))}
                                          disabled={!tier.conditions.lifetimeSpend.enabled}
                                  className="rounded-lg border-gray-200"
                                        />
                                      </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                  <Label htmlFor={`numberOfRedemptions-${index}`} className="text-sm font-medium text-gray-700">
                                    Number of Redemptions
                                  </Label>
                                        <Switch 
                                    id={`numberOfRedemptions-enabled-${index}`}
                                          checked={tier.conditions.numberOfRedemptions.enabled}
                                    onCheckedChange={(checked) => updateLoyaltyTierCondition(index, 'numberOfRedemptions', 'enabled', checked)}
                                    className="apple-switch"
                                  />
                                </div>
                                        <Input 
                                  id={`numberOfRedemptions-${index}`}
                                          type="number"
                                          min="0"
                                  value={tier.conditions.numberOfRedemptions.value}
                                  onChange={(e) => updateLoyaltyTierCondition(index, 'numberOfRedemptions', 'value', parseInt(e.target.value))}
                                          disabled={!tier.conditions.numberOfRedemptions.enabled}
                                  className="rounded-lg border-gray-200"
                                        />
                                      </div>
                            </div>
                          </div>
                        ))}
                        
                        <Button 
                          type="button" 
                          variant="outline" 
                          onClick={addLoyaltyTier}
                          className="w-full py-2 border-dashed border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          Add Loyalty Tier
                        </Button>
                      </div>
                    </div>
                    
                    <Separator className="my-6" />
                    
                    {/* Demographic Tags Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Demographic Tags</h3>
                      
                      <div className="space-y-4">
                        <div className="flex flex-wrap gap-2">
                          {customerSegments.demographicTags.map((tag, index) => (
                            <Badge 
                              key={index}
                              variant="outline"
                              className="px-3 py-1.5 rounded-full bg-blue-50 text-blue-700 border-blue-100 flex items-center gap-1"
                            >
                              {tag}
                                      <button
                                        type="button"
                                onClick={() => removeDemographicTag(index)}
                                className="ml-1 h-4 w-4 rounded-full hover:bg-blue-200 inline-flex items-center justify-center"
                                      >
                                <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                  <path d="M18 6 6 18"/>
                                  <path d="m6 6 12 12"/>
                                </svg>
                                      </button>
                            </Badge>
                          ))}
                          
                          {customerSegments.demographicTags.length === 0 && (
                            <div className="text-sm text-gray-500 italic">No demographic tags added yet</div>
                          )}
                          </div>
                          
                        <div className="flex gap-2">
                          <Input
                            placeholder="Add demographic tag (e.g., parents, students)"
                            value={newDemographicTag}
                            onChange={(e) => setNewDemographicTag(e.target.value)}
                            className="rounded-lg border-gray-200"
                          />
                          <Button 
                            type="button" 
                            onClick={addDemographicTag}
                            disabled={!newDemographicTag}
                            className="bg-blue-600 hover:bg-blue-700 rounded-lg"
                          >
                            Add
                          </Button>
                        </div>
                        <p className="text-xs text-gray-500">Add demographic groups that are relevant to your business</p>
                              </div>
                    </div>
                    
                    <Separator className="my-6" />
                      
                    {/* Visit & Spending Thresholds Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Visit & Spending Thresholds</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Frequent Visitor Threshold */}
                        <div className="space-y-2">
                          <Label htmlFor="frequentVisitorThreshold" className="text-sm font-medium text-gray-700">
                            Frequent Visitor Threshold
                          </Label>
                          <div className="flex items-center gap-2">
                            <Input
                              id="frequentVisitorThreshold"
                              type="number"
                              min="1"
                              placeholder="4"
                              value={customerSegments.frequentVisitorThreshold}
                              onChange={(e) => updateCustomerSegments('frequentVisitorThreshold', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                            <span className="text-sm text-gray-600">visits per</span>
                            <Input
                              id="frequentVisitorPeriod"
                              type="number"
                              min="1"
                              placeholder="30"
                              value={customerSegments.frequentVisitorPeriod}
                              onChange={(e) => updateCustomerSegments('frequentVisitorPeriod', e.target.value)}
                              className="w-20 rounded-lg border-gray-200"
                            />
                            <span className="text-sm text-gray-600">days</span>
                          </div>
                          <p className="text-xs text-gray-500">Number of visits in a period to be considered frequent</p>
                        </div>
                        
                        {/* High Spender Threshold */}
                        <div className="space-y-2">
                          <Label htmlFor="highSpenderThreshold" className="text-sm font-medium text-gray-700">
                            High Spender Threshold
                          </Label>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-500">$</span>
                            <Input
                              id="highSpenderThreshold"
                              type="number"
                              min="1"
                              placeholder="100"
                              value={customerSegments.highSpenderThreshold}
                              onChange={(e) => updateCustomerSegments('highSpenderThreshold', e.target.value)}
                              className="rounded-lg border-gray-200"
                            />
                            <span className="text-sm text-gray-600">per</span>
                            <Input
                              id="highSpenderPeriod"
                              type="number"
                              min="1"
                              placeholder="30"
                              value={customerSegments.highSpenderPeriod}
                              onChange={(e) => updateCustomerSegments('highSpenderPeriod', e.target.value)}
                              className="w-20 rounded-lg border-gray-200"
                            />
                            <span className="text-sm text-gray-600">days</span>
                          </div>
                          <p className="text-xs text-gray-500">Spending amount in a period to be considered a high spender</p>
                        </div>
                      </div>
                    </div>

                    <Separator className="my-6" />
                    
                    {/* Cohort-Specific Thresholds Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Customer Cohort Definitions</h3>
                      
                      <div className="bg-white p-4 rounded-lg border border-gray-100 mb-4">
                        <h4 className="text-sm font-medium text-gray-800 mb-2">What are Customer Cohorts?</h4>
                        <p className="text-xs text-gray-700 mb-3">
                          Customer cohorts are groups of customers categorized by their behavior patterns, especially their transaction history. 
                          By segmenting customers this way, you can deliver personalized experiences that match where they are in their customer journey.
                        </p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-xs">
                          <div className="bg-gray-50 p-2 rounded-md">
                            <h5 className="font-medium text-gray-800">Why Cohorts Matter</h5>
                            <p className="text-gray-600 mt-1">
                              Different customer groups respond to different incentives. New customers need onboarding, active customers need appreciation, 
                              and dormant customers need re-engagement offers.
                            </p>
                          </div>
                          
                          <div className="bg-gray-50 p-2 rounded-md">
                            <h5 className="font-medium text-gray-800">How the Agent Uses Cohorts</h5>
                            <p className="text-gray-600 mt-1">
                              Your agent tailors reward messaging, offer values, and redemption conditions based on cohort data to maximize engagement 
                              and return on investment.
                            </p>
                          </div>
                          
                          <div className="bg-gray-50 p-2 rounded-md">
                            <h5 className="font-medium text-gray-800">Business Impact</h5>
                            <p className="text-gray-600 mt-1">
                              Properly defined cohorts can increase redemption rates by 30-40% and help recover at-risk customers before they fully churn.
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-blue-50 p-4 rounded-lg mb-4">
                        <div className="flex justify-between items-center">
                          <div>
                            <p className="text-sm font-medium text-blue-800 mb-1">
                              <strong>Café-Optimized Customer Segments</strong>
                            </p>
                            <p className="text-xs text-blue-700">
                              These thresholds are optimized for businesses with frequent customer visits like cafés, 
                              bakeries, and quick-service restaurants.
                            </p>
                          </div>
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => {
                              // Create a new object with updated values to ensure state updates properly
                              const updatedSegments = {
                                ...customerSegments,
                                newCustomerThreshold: '14',
                                newCustomerVisitLimit: '2',
                                activeThreshold: '14',
                                activeMinVisits: '2',
                                dormantCohortThreshold: '60',
                                churnedThreshold: '60',
                                resurrectedThreshold: '14'
                              };
                              
                              // Update the entire object at once
                              setCustomerSegments(updatedSegments);
                              
                              // Show a toast notification to confirm the update
                              toast({
                                title: "Café-Optimized Defaults Applied",
                                description: "Cohort thresholds have been set to values ideal for frequent-visit businesses.",
                              });
                            }}
                            className="bg-white border-blue-200 text-blue-700 hover:bg-blue-50 text-xs h-8"
                          >
                            Use Café Defaults (Recommended)
                          </Button>
                        </div>
                      </div>
                      
                      <div className="overflow-hidden bg-white border border-gray-100 rounded-xl shadow-sm mb-6">
                        <div className="grid grid-cols-5 gap-2 bg-gray-50 p-3 border-b border-gray-100 text-xs font-medium text-gray-700">
                          <div>Cohort</div>
                          <div>Definition</div>
                          <div>How It's Calculated</div>
                          <div>Your Settings</div>
                          <div>Why It Matters</div>
                        </div>
                        
                        <div className="divide-y divide-gray-100">
                          {/* New Customers */}
                          <div className="grid grid-cols-5 gap-2 p-3 items-center text-sm">
                            <div className="font-medium text-blue-700">New</div>
                            <div className="text-xs">Recent first-time customers with few visits</div>
                            <div className="text-xs text-gray-600">
                              <ul className="list-disc pl-4 space-y-1">
                                <li>First visit within last X days</li>
                                <li>Total lifetime visits ≤ Y</li>
                              </ul>
                            </div>
                            <div className="flex flex-col gap-2">
                              <div className="flex items-center gap-1">
                                <Input
                                  type="number"
                                  min="1"
                                  value={customerSegments.newCustomerThreshold || "14"}
                                  onChange={(e) => updateCustomerSegments('newCustomerThreshold', e.target.value)}
                                  className="w-16 h-7 text-xs rounded-md"
                                />
                                <span className="text-xs">days since first visit</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <Input
                                  type="number"
                                  min="1"
                                  value={customerSegments.newCustomerVisitLimit || "2"}
                                  onChange={(e) => updateCustomerSegments('newCustomerVisitLimit', e.target.value)}
                                  className="w-16 h-7 text-xs rounded-md"
                                />
                                <span className="text-xs">max lifetime visits</span>
                              </div>
                            </div>
                            <div className="text-xs text-gray-600">Perfect time for welcome offers and onboarding rewards</div>
                          </div>
                          
                          {/* Active Customers */}
                          <div className="grid grid-cols-5 gap-2 p-3 items-center text-sm">
                            <div className="font-medium text-green-700">Active</div>
                            <div className="text-xs">Regular customers who visit frequently</div>
                            <div className="text-xs text-gray-600">
                              <ul className="list-disc pl-4 space-y-1">
                                <li>Last visit within X days</li>
                              </ul>
                            </div>
                            <div className="flex items-center gap-1">
                              <Input
                                type="number"
                                min="1"
                                value={customerSegments.activeThreshold || "14"}
                                onChange={(e) => updateCustomerSegments('activeThreshold', e.target.value)}
                                className="w-16 h-7 text-xs rounded-md"
                              />
                              <span className="text-xs">days since last visit</span>
                            </div>
                            <div className="text-xs text-gray-600">Your loyal customers - focus on upselling and increasing basket size</div>
                          </div>
                          
                          {/* Dormant Customers */}
                          <div className="grid grid-cols-5 gap-2 p-3 items-center text-sm">
                            <div className="font-medium text-amber-700">Dormant</div>
                            <div className="text-xs">Customers who haven't visited recently</div>
                            <div className="text-xs text-gray-600">
                              <ul className="list-disc pl-4 space-y-1">
                                <li>Last visit between X and Y days ago</li>
                                <li>Not yet considered churned</li>
                              </ul>
                            </div>
                            <div className="flex flex-col gap-2">
                              <div className="flex items-center gap-1 text-xs">
                                <span>Between</span>
                                <Input
                                  type="number"
                                  min="1"
                                  value={customerSegments.activeThreshold || "14"}
                                  disabled
                                  className="w-12 h-7 text-xs rounded-md bg-gray-50"
                                />
                                <span>and</span>
                                <Input
                                  type="number"
                                  min="1"
                                  value={customerSegments.dormantCohortThreshold || "60"}
                                  onChange={(e) => updateCustomerSegments('dormantCohortThreshold', e.target.value)}
                                  className="w-16 h-7 text-xs rounded-md"
                                />
                                <span>days since last visit</span>
                              </div>
                            </div>
                            <div className="text-xs text-gray-600">Time for "We miss you" campaigns with gentle incentives</div>
                          </div>
                          
                          {/* Churned Customers */}
                          <div className="grid grid-cols-5 gap-2 p-3 items-center text-sm">
                            <div className="font-medium text-red-700">Churned</div>
                            <div className="text-xs">Long-term inactive customers</div>
                            <div className="text-xs text-gray-600">
                              <ul className="list-disc pl-4 space-y-1">
                                <li>Last visit more than X days ago</li>
                                <li>Considered lost customers</li>
                              </ul>
                            </div>
                            <div className="flex items-center gap-1 text-xs">
                              <span>More than</span>
                              <Input
                                type="number"
                                min="1"
                                value={customerSegments.churnedThreshold || "60"}
                                onChange={(e) => updateCustomerSegments('churnedThreshold', e.target.value)}
                                className="w-16 h-7 text-xs rounded-md"
                              />
                              <span>days since last visit</span>
                            </div>
                            <div className="text-xs text-gray-600">Requires strong win-back offers or partnerships</div>
                          </div>
                          
                          {/* Resurrected Customers */}
                          <div className="grid grid-cols-5 gap-2 p-3 items-center text-sm">
                            <div className="font-medium text-purple-700">Resurrected</div>
                            <div className="text-xs">Previously dormant or churned who just returned</div>
                            <div className="text-xs text-gray-600">
                              <ul className="list-disc pl-4 space-y-1">
                                <li>Recent visit within X days</li>
                                <li>Was previously dormant or churned</li>
                              </ul>
                            </div>
                            <div className="flex items-center gap-1 text-xs">
                              <span>Within</span>
                              <Input
                                type="number"
                                min="1"
                                value={customerSegments.resurrectedThreshold || "14"}
                                onChange={(e) => updateCustomerSegments('resurrectedThreshold', e.target.value)}
                                className="w-16 h-7 text-xs rounded-md"
                              />
                              <span>days after returning</span>
                            </div>
                            <div className="text-xs text-gray-600">Critical re-engagement period - welcome them back warmly</div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="text-sm font-medium text-gray-800 mb-2">How Customer Cohorts Work:</h4>
                        <ul className="text-xs text-gray-600 space-y-2">
                          <li><strong>Evaluation Order:</strong> Customers are checked in this order: Resurrected → New → Active → Dormant → Churned</li>
                          <li><strong>Customer Data Used:</strong> First visit date, last visit date, total visit count, and visit frequency</li>
                          <li><strong>Café Recommendation:</strong> For coffee shops, bakeries, and quick-service restaurants, the default values work well</li>
                          <li><strong>Business Impact:</strong> These segments help target the right offers to the right customers at the right time</li>
                        </ul>
                      </div>
                      
                      {/* Visual Timeline */}
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-800 mb-3">Customer Cohorts Based on Last Transaction Date:</h4>
                        
                        {/* Cohort segments as cards instead of timeline */}
                        <div className="grid grid-cols-3 gap-3 mb-4">
                          {/* Active segment */}
                          <div className="bg-green-50 border border-green-100 rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="h-4 w-4 bg-green-500 rounded-full"></div>
                              <h5 className="font-medium text-green-800">Active</h5>
                            </div>
                            <p className="text-xs text-green-700">
                              Most recent transaction within last {customerSegments.activeThreshold || "14"} days
                            </p>
                          </div>
                          
                          {/* Dormant segment */}
                          <div className="bg-amber-50 border border-amber-100 rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="h-4 w-4 bg-amber-500 rounded-full"></div>
                              <h5 className="font-medium text-amber-800">Dormant</h5>
                            </div>
                            <p className="text-xs text-amber-700">
                              Most recent transaction between {customerSegments.activeThreshold || "14"} and {customerSegments.dormantCohortThreshold || "60"} days ago
                            </p>
                          </div>
                          
                          {/* Churned segment */}
                          <div className="bg-red-50 border border-red-100 rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="h-4 w-4 bg-red-500 rounded-full"></div>
                              <h5 className="font-medium text-red-800">Churned</h5>
                            </div>
                            <p className="text-xs text-red-700">
                              Most recent transaction more than {customerSegments.churnedThreshold || "60"} days ago
                            </p>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-3">
                          {/* New segment */}
                          <div className="bg-blue-50 border border-blue-100 rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="h-4 w-4 bg-blue-500 rounded-full"></div>
                              <h5 className="font-medium text-blue-800">New</h5>
                            </div>
                            <p className="text-xs text-blue-700">
                              First transaction within last {customerSegments.newCustomerThreshold || "14"} days and fewer than {customerSegments.newCustomerVisitLimit || "2"} total visits
                            </p>
                          </div>
                          
                          {/* Resurrected segment */}
                          <div className="bg-purple-50 border border-purple-100 rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="h-4 w-4 bg-purple-500 rounded-full"></div>
                              <h5 className="font-medium text-purple-800">Resurrected</h5>
                            </div>
                            <p className="text-xs text-purple-700">
                              Was dormant/churned but most recent transaction within last {customerSegments.resurrectedThreshold || "14"} days
                            </p>
                          </div>
                        </div>
                        
                        {/* Simple timeline visualization */}
                        <div className="mt-6 bg-white p-4 rounded-lg border border-gray-200">
                          <h5 className="text-xs font-medium mb-3">Transaction Recency Timeline:</h5>
                          <div className="relative">
                            <div className="h-1 bg-gray-200 w-full mb-4"></div>
                            
                            {/* Timeline labels */}
                            <div className="flex justify-between text-[10px] text-gray-500">
                              <div>Today</div>
                              <div>{customerSegments.activeThreshold || "14"} days ago</div>
                              <div>{customerSegments.dormantCohortThreshold || "60"} days ago</div>
                              <div>Older</div>
                            </div>
                            
                            {/* Timeline segments */}
                            <div className="flex w-full h-6 mt-1">
                              <div className="bg-green-100 text-[10px] text-green-800 flex items-center justify-center" style={{ width: '33%' }}>
                                Active
                              </div>
                              <div className="bg-amber-100 text-[10px] text-amber-800 flex items-center justify-center" style={{ width: '33%' }}>
                                Dormant
                              </div>
                              <div className="bg-red-100 text-[10px] text-red-800 flex items-center justify-center" style={{ width: '34%' }}>
                                Churned
                              </div>
                            </div>
                            
                            {/* Special cases note */}
                            <div className="mt-3 text-[10px] text-gray-600">
                              <p><strong>Note:</strong> New and Resurrected customers are special cases based on additional criteria beyond just transaction recency.</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                            
                    <div className="bg-blue-50 p-4 rounded-xl border border-blue-100 mt-4">
                            <div className="flex items-start gap-3">
                        <Users className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                              <div>
                          <h4 className="text-sm font-medium text-blue-800">Why Customer Segmentation Matters</h4>
                          <p className="text-xs text-blue-700 mt-1">
                            Detailed customer segmentation allows your AI agent to create highly targeted rewards that resonate with specific customer groups. 
                            This increases engagement and conversion rates while building stronger customer relationships.
                          </p>
                        </div>
                          </div>
                        </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t p-6">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("financial")}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                          </svg>
                        Previous: Financial
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                      </div>
                      <div className="flex gap-2">
                          <Button 
                            variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                          onClick={saveProgress}
                          disabled={isSaving}
                        >
                          {isSaving ? (
                            <>
                              <span className="animate-pulse mr-2">●</span>
                              Saving...
                            </>
                          ) : (
                            "Save Progress"
                          )}
                        </Button>
                      <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("reward-constraints")}>
                            Next: Reward Constraints
                            <ArrowRight className="h-4 w-4" />
                        </Button>
                          </div>
                    </CardFooter>
                  </Card>
                )}
              
              {activeTab === "reward-constraints" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                    <div>
                      <CardTitle className="text-2xl">
                        <span className="gradient-text">Reward Constraints</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Configure the rules and limitations for your rewards program
                      </CardDescription>
                          </div>
                  </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Allowed Offer Types Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Allowed Offer Types</h3>
                      <p className="text-sm text-gray-600">Select which reward types the agent is allowed to create</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-2">
                        <div className="bg-white rounded-xl border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-blue-50 flex items-center justify-center">
                                <Gift className="h-5 w-5 text-blue-600" />
                              </div>
                              <div>
                                <h4 className="font-medium">Free Item</h4>
                                <p className="text-xs text-gray-500 mt-1">E.g., Free coffee, dessert, or side item with purchase</p>
                            </div>
                        </div>
                            <Switch 
                              checked={rewardConstraints.allowedOfferTypes.freeItem}
                              onCheckedChange={(checked) => updateRewardConstraintOfferType('freeItem', checked)}
                              className="data-[state=checked]:bg-blue-600"
                            />
                          </div>
                          </div>
                          
                        <div className="bg-white rounded-xl border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-green-50 flex items-center justify-center">
                                <Percent className="h-5 w-5 text-green-600" />
                              </div>
                              <div>
                                <h4 className="font-medium">Percentage Discount (%)</h4>
                                <p className="text-xs text-gray-500 mt-1">E.g., 15% off your next purchase, 20% off specific items</p>
                            </div>
                        </div>
                            <Switch 
                              checked={rewardConstraints.allowedOfferTypes.percentageDiscount}
                              onCheckedChange={(checked) => updateRewardConstraintOfferType('percentageDiscount', checked)}
                              className="data-[state=checked]:bg-blue-600"
                            />
                              </div>
                          </div>
                          
                        <div className="bg-white rounded-xl border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-amber-50 flex items-center justify-center">
                                <BadgeDollarSign className="h-5 w-5 text-amber-600" />
                              </div>
                              <div>
                                <h4 className="font-medium">Fixed Amount ($)</h4>
                                <p className="text-xs text-gray-500 mt-1">E.g., $5 off your order, $10 off when you spend $50+</p>
                            </div>
                        </div>
                            <Switch 
                              checked={rewardConstraints.allowedOfferTypes.fixedAmount}
                              onCheckedChange={(checked) => updateRewardConstraintOfferType('fixedAmount', checked)}
                              className="data-[state=checked]:bg-blue-600"
                            />
                          </div>
                          </div>
                          
                        <div className="bg-white rounded-xl border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-purple-50 flex items-center justify-center">
                                <ShoppingBag className="h-5 w-5 text-purple-600" />
                              </div>
                              <div>
                                <h4 className="font-medium">Buy X Get Y</h4>
                                <p className="text-xs text-gray-500 mt-1">E.g., Buy one get one free, Buy 3 get 1 free</p>
                            </div>
                        </div>
                            <Switch
                              checked={rewardConstraints.allowedOfferTypes.buyXGetY}
                              onCheckedChange={(checked) => updateRewardConstraintOfferType('buyXGetY', checked)}
                              className="data-[state=checked]:bg-blue-600"
                            />
                        </div>
                          </div>
                          
                        <div className="bg-white rounded-xl border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                          <div className="flex items-start justify-between">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-pink-50 flex items-center justify-center">
                                <Sparkles className="h-5 w-5 text-pink-600" />
                              </div>
                          <div>
                                <h4 className="font-medium">Mystery Gift</h4>
                                <p className="text-xs text-gray-500 mt-1">E.g., Surprise reward revealed at checkout, random prize</p>
                              </div>
                            </div>
                            <Switch 
                              checked={rewardConstraints.allowedOfferTypes.mysteryGift}
                              onCheckedChange={(checked) => updateRewardConstraintOfferType('mysteryGift', checked)}
                              className="data-[state=checked]:bg-blue-600"
                            />
                          </div>
                        </div>
                      </div>
                          </div>
                          
                    <Separator className="my-6" />
                    
                    
                    
                    
                    {/* Reward Duration & Display Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Reward Duration & Display</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        
                        
                            <div className="space-y-2">
                          <Label htmlFor="concurrencyCeiling" className="text-sm font-medium text-gray-700">
                            Concurrency Ceiling
                          </Label>
                              <div className="flex items-center gap-2">
                                <Input
                              id="concurrencyCeiling"
                                  type="number"
                                  min="1"
                              max="10"
                              placeholder="4"
                              value={rewardConstraints.concurrencyCeiling}
                              onChange={(e) => updateRewardConstraints('concurrencyCeiling', e.target.value)}
                              className="max-w-[100px] rounded-lg border-gray-200"
                            />
                            <span className="text-sm text-gray-600">active rewards</span>
                              </div>
                          <p className="text-xs text-gray-500">Maximum number of rewards displayed to a customer at once</p>
                            </div>
                          
                        <div className="space-y-2">
                          
                            </div>
                            
                        <div className="space-y-2 md:col-span-2">
                          
                            </div>
                        </div>
                      </div>
                      
                    <div className="bg-blue-50 p-4 rounded-xl border border-blue-100 mt-4">
                        <div className="flex items-start gap-3">
                        <Gift className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                          <div>
                          <h4 className="text-sm font-medium text-blue-800">Reward Constraints Impact</h4>
                          <p className="text-xs text-blue-700 mt-1">
                            Setting clear constraints helps your AI agent create rewards that align with your business goals and customer expectations.
                            These parameters ensure rewards are valuable but sustainable, and presented at the right time and place.
                            </p>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t p-6">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("customer-segments")}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                          </svg>
                        Previous: Customer Segments
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                    </div>
                      <div className="flex gap-2">
                          <Button 
                            variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                          onClick={saveProgress}
                            disabled={isSaving}
                          >
                            {isSaving ? (
                              <>
                                <span className="animate-pulse mr-2">●</span>
                            Saving...
                              </>
                            ) : (
                          "Save Progress"
                            )}
                          </Button>
                      <Button className="gap-2 bg-blue-600 hover:bg-blue-700 rounded-lg" onClick={() => setActiveTab("messaging")}>
                        Next: Messaging
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardFooter>
                </Card>
              )}

              {activeTab === "messaging" && (
                <Card className="border-0 shadow-md apple-card">
                  <CardHeader className="pb-2">
                    <div>
                      <CardTitle className="text-2xl">
                        <span className="gradient-text">Messaging</span>
                      </CardTitle>
                      <CardDescription className="text-gray-500 mt-1">
                        Configure messaging constraints for your rewards
                      </CardDescription>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-8 pt-4">
                    {/* Restricted Keywords Section */}
                      <div className="space-y-4">
                      <h3 className="text-lg font-medium gradient-text">Restricted Keywords</h3>
                      <p className="text-sm text-gray-600">Specify words that should not be used in reward messaging</p>
                      
                      <div className="space-y-4">
                        <div className="space-y-4">
                          <Label htmlFor="restrictedKeywords" className="text-sm font-medium text-gray-700">
                            Keywords to Avoid
                          </Label>
                          <Input
                            id="restrictedKeywords"
                            placeholder="e.g., free, guaranteed, unlimited, best, cheapest"
                            value={messagingInputs.restrictedKeywords || ""}
                            onChange={(e) => updateMessagingInputs('restrictedKeywords', e.target.value)}
                            className="rounded-lg border-gray-200"
                          />
                          <p className="text-xs text-gray-500">
                            Enter comma-separated words that should be avoided in reward messaging. 
                            These might include legally sensitive terms or words that don't align with your brand voice.
                          </p>
                            </div>
                            
                        <div className="space-y-2">
                          <h4 className="text-sm font-medium text-gray-700">Common Restricted Terms</h4>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {["free", "guaranteed", "unlimited", "best", "cheapest", "discount", "sale", "limited time", "exclusive", "secret"].map(keyword => (
                              <Badge 
                                key={keyword}
                            variant="outline" 
                                className="cursor-pointer px-3 py-1.5 rounded-full transition-all bg-gray-50 hover:bg-gray-100 text-gray-700 border-gray-200"
                            onClick={() => {
                                  const currentKeywords = messagingInputs.restrictedKeywords || "";
                                  const keywordArray = currentKeywords.split(',').map(k => k.trim()).filter(k => k !== "");
                                  
                                  if (!keywordArray.includes(keyword)) {
                                    const newKeywords = [...keywordArray, keyword].join(', ');
                                    updateMessagingInputs('restrictedKeywords', newKeywords);
                                  }
                                }}
                              >
                                + {keyword}
                              </Badge>
                            ))}
                            </div>
                          <p className="text-xs text-gray-500 mt-2">Click to add these common restricted terms to your list</p>
                          </div>
                            </div>
                            
                      <div className="bg-blue-50 p-4 rounded-xl border border-blue-100 mt-6">
                        <div className="flex items-start gap-3">
                          <MessageSquareText className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                          <div>
                            <h4 className="text-sm font-medium text-blue-800">Why Restricted Keywords Matter</h4>
                            <p className="text-xs text-blue-700 mt-1">
                              Restricting certain keywords helps ensure your rewards messaging complies with regulations and 
                              maintains your brand standards. This prevents potential legal issues and keeps your messaging 
                              consistent with your brand voice.
                            </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t p-6">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                        className="flex items-center gap-1 rounded-lg"
                        onClick={() => setActiveTab("reward-constraints")}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                          </svg>
                        Previous: Reward Constraints
                        </Button>
                      <Button variant="outline" className="rounded-lg">Reset</Button>
                      </div>
                      <div className="flex gap-2">
                          <Button 
                            variant="outline" 
                        className="border-blue-200 text-blue-700 hover:bg-blue-50 rounded-lg" 
                          onClick={saveProgress}
                            disabled={isSaving}
                          >
                            {isSaving ? (
                              <>
                                <span className="animate-pulse mr-2">●</span>
                              Saving...
                              </>
                            ) : (
                            "Save Progress"
                            )}
                          </Button>
                      <Button 
                        className="gap-2 bg-green-600 hover:bg-green-700 rounded-lg" 
                        onClick={handleDoneClick}
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <span className="animate-pulse mr-2">●</span>
                            Saving...
                          </>
                        ) : (
                          <>
                            Done
                            <CheckCircle className="h-4 w-4" />
                          </>
                        )}
                      </Button>
                    </div>
                  </CardFooter>
                </Card>
              )}
            </div>
          </div>
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import { useState } from 'react'
import { getFunctions, httpsCallable } from 'firebase/functions'

export default function TestFunctionsPage() {
  const [result, setResult] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)

  const testFunction = async () => {
    setLoading(true)
    setError('')
    setResult('')
    
    try {
      const functions = getFunctions()
      console.log('Functions object:', functions)
      
      const getOpenAIKey = httpsCallable(functions, 'getOpenAIKey')
      console.log('Function reference created')
      
      const result = await getOpenAIKey()
      console.log('Function call result:', result)
      
      setResult(JSON.stringify(result.data, null, 2))
    } catch (err: any) {
      console.error('Error calling function:', err)
      setError(err.message || 'Unknown error')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Test Firebase Functions</h1>
      
      <button 
        onClick={testFunction}
        disabled={loading}
        className="px-4 py-2 bg-blue-500 text-white rounded disabled:bg-gray-400"
      >
        {loading ? 'Testing...' : 'Test getOpenAIKey Function'}
      </button>
      
      {error && (
        <div className="mt-4 p-4 bg-red-100 border border-red-400 rounded">
          <h2 className="font-bold">Error:</h2>
          <p>{error}</p>
        </div>
      )}
      
      {result && (
        <div className="mt-4 p-4 bg-green-100 border border-green-400 rounded">
          <h2 className="font-bold">Result:</h2>
          <pre>{result}</pre>
        </div>
      )}
    </div>
  )
} 'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function GmailToolsPage() {
  const [merchantId, setMerchantId] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<any>(null);
  const [action, setAction] = useState<string>('debug');
  const [email, setEmail] = useState('');
  
  const router = useRouter();
  const searchParams = useSearchParams();
  
  useEffect(() => {
    // Get merchantId from URL if present
    const urlMerchantId = searchParams.get('merchantId');
    if (urlMerchantId) {
      setMerchantId(urlMerchantId);
    }
  }, [searchParams]);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setResult(null);
    
    try {
      let response;
      
      switch (action) {
        case 'debug':
          response = await fetch(`/api/auth/gmail/debug?merchantId=${merchantId}`);
          break;
        case 'profile':
          response = await fetch(`/api/auth/gmail/profile?merchantId=${merchantId}`);
          break;
        case 'userinfo':
          response = await fetch(`/api/auth/gmail/userinfo?merchantId=${merchantId}`);
          break;
        case 'update-email':
          response = await fetch('/api/auth/gmail/update-email', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ merchantId, emailAddress: email }),
          });
          break;
        case 'save-profile-email':
          response = await fetch(`/api/auth/gmail/profile?merchantId=${merchantId}&save=true`);
          break;
        case 'save-userinfo-email':
          response = await fetch(`/api/auth/gmail/userinfo?merchantId=${merchantId}&save=true`);
          break;
        default:
          throw new Error('Invalid action');
      }
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Something went wrong');
      }
      
      setResult(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : String(err));
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Gmail Integration Tools</h1>
      
      <div className="bg-white shadow-md rounded-md p-6 mb-6">
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="merchantId" className="block text-sm font-medium text-gray-700 mb-1">
              Merchant ID
            </label>
            <input
              type="text"
              id="merchantId"
              value={merchantId}
              onChange={(e) => setMerchantId(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="action" className="block text-sm font-medium text-gray-700 mb-1">
              Action
            </label>
            <select
              id="action"
              value={action}
              onChange={(e) => setAction(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="debug">Debug Integration</option>
              <option value="profile">Get Gmail Profile</option>
              <option value="userinfo">Get OpenID UserInfo</option>
              <option value="update-email">Update Email Manually</option>
              <option value="save-profile-email">Get & Save Profile Email</option>
              <option value="save-userinfo-email">Get & Save UserInfo Email</option>
            </select>
          </div>
          
          {action === 'update-email' && (
            <div className="mb-4">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required={action === 'update-email'}
              />
            </div>
          )}
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300"
          >
            {loading ? 'Processing...' : 'Submit'}
          </button>
        </form>
      </div>
      
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md mb-6">
          <h2 className="text-lg font-medium mb-2">Error</h2>
          <p>{error}</p>
        </div>
      )}
      
      {result && (
        <div className="bg-white shadow-md rounded-md p-6">
          <h2 className="text-lg font-medium mb-2">Result</h2>
          <pre className="bg-gray-100 p-4 rounded-md overflow-auto max-h-96">
            {JSON.stringify(result, null, 2)}
          </pre>
        </div>
      )}
      
      <div className="mt-6">
        <Link 
          href="/dashboard" 
          className="text-indigo-600 hover:text-indigo-800"
        >
          Back to Dashboard
        </Link>
      </div>
    </div>
  );
} 'use client';

import { useState } from 'react';
import Link from 'next/link';

interface EndpointInfo {
  path: string;
  description: string;
  method: string;
  params: string[];
  requiresAuth?: boolean;
}

export default function GmailSummaryPage() {
  const [merchantId, setMerchantId] = useState('');
  
  const endpoints: EndpointInfo[] = [
    {
      path: '/api/auth/gmail/connect',
      method: 'GET',
      description: 'Initiates the OAuth flow to connect a Gmail account',
      params: ['merchantId'],
    },
    {
      path: '/api/auth/gmail/callback',
      method: 'GET',
      description: 'OAuth callback endpoint (system use)',
      params: ['code', 'state'],
    },
    {
      path: '/api/auth/gmail/refresh',
      method: 'POST',
      description: 'Refreshes an access token using a refresh token',
      params: ['merchantId', 'refresh_token'],
    },
    {
      path: '/api/auth/gmail/profile',
      method: 'GET',
      description: 'Fetches the user\'s profile from Gmail API',
      params: ['merchantId', 'save (optional)'],
      requiresAuth: true,
    },
    {
      path: '/api/auth/gmail/userinfo',
      method: 'GET',
      description: 'Fetches the user\'s info from OpenID Connect',
      params: ['merchantId', 'save (optional)'],
      requiresAuth: true,
    },
    {
      path: '/api/auth/gmail/debug',
      method: 'GET',
      description: 'Debug endpoint for Gmail integration',
      params: ['merchantId'],
      requiresAuth: true,
    },
    {
      path: '/api/auth/gmail/test-email',
      method: 'GET',
      description: 'Tests all methods for fetching email address',
      params: ['merchantId'],
      requiresAuth: true,
    },
    {
      path: '/api/auth/gmail/update-email',
      method: 'POST',
      description: 'Manually updates the email address for a Gmail integration',
      params: ['merchantId', 'emailAddress'],
    },
  ];
  
  const pages = [
    {
      path: '/tools/gmail',
      description: 'Gmail integration tools UI',
    },
    {
      path: '/store/emails',
      description: 'Email store management page',
    },
  ];
  
  return (
    <div className="max-w-6xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8">Gmail Integration Summary</h1>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Quick Access</h2>
        <div className="flex items-center gap-4 mb-4">
          <input
            type="text"
            placeholder="Enter Merchant ID"
            value={merchantId}
            onChange={(e) => setMerchantId(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
          <Link
            href={`/tools/gmail?merchantId=${merchantId}`}
            className={`px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 ${!merchantId ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Go to Tools
          </Link>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div>
          <h2 className="text-xl font-semibold mb-4">API Endpoints</h2>
          <div className="bg-white shadow-md rounded-md overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Endpoint
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Method
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Description
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {endpoints.map((endpoint, index) => (
                  <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {endpoint.path}
                      {endpoint.requiresAuth && (
                        <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium bg-blue-100 text-blue-800">
                          Auth
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium ${
                        endpoint.method === 'GET' ? 'bg-green-100 text-green-800' : 'bg-purple-100 text-purple-800'
                      }`}>
                        {endpoint.method}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500">
                      <div>{endpoint.description}</div>
                      <div className="mt-1">
                        <span className="font-medium">Params:</span> {endpoint.params.join(', ')}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-4">UI Pages</h2>
          <div className="bg-white shadow-md rounded-md overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Page
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Description
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {pages.map((page, index) => (
                  <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {page.path}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500">
                      {page.description}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <Link
                        href={merchantId ? `${page.path}?merchantId=${merchantId}` : page.path}
                        className="text-indigo-600 hover:text-indigo-900"
                      >
                        Visit
                      </Link>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          <div className="mt-6">
            <h2 className="text-xl font-semibold mb-4">Integration Flow</h2>
            <div className="bg-white shadow-md rounded-md p-6">
              <ol className="list-decimal pl-5 space-y-3">
                <li>User initiates connection via <code>/store/emails</code> page</li>
                <li>System redirects to <code>/api/auth/gmail/connect</code> with merchant ID</li>
                <li>User authenticates with Google and grants permissions</li>
                <li>Google redirects to <code>/api/auth/gmail/callback</code> with auth code</li>
                <li>System exchanges code for tokens and attempts to fetch email address</li>
                <li>Email address is stored in the integration document</li>
                <li>User is redirected back to <code>/store/emails</code> page</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
      
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Troubleshooting</h2>
        <div className="bg-white shadow-md rounded-md p-6">
          <h3 className="text-lg font-medium mb-3">Common Issues</h3>
          <ul className="list-disc pl-5 space-y-2">
            <li>
              <span className="font-medium">Missing email address:</span> Use the debug endpoint to check integration status and the test-email endpoint to try all methods.
            </li>
            <li>
              <span className="font-medium">Token errors:</span> Check if the refresh token is stored correctly and use the refresh endpoint to get a new access token.
            </li>
            <li>
              <span className="font-medium">Scope issues:</span> Ensure the OAuth scopes include 'openid', 'email', and 'https://www.googleapis.com/auth/gmail.readonly'.
            </li>
          </ul>
        </div>
      </div>
      
      <div className="mt-6">
        <Link 
          href="/dashboard" 
          className="text-indigo-600 hover:text-indigo-800"
        >
          Back to Dashboard
        </Link>
      </div>
    </div>
  );
} "use client"

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/auth-context'

export default function FinancialsRedirectPage() {
  const router = useRouter()
  const { user, loading } = useAuth()

  useEffect(() => {
    // Wait until auth is loaded
    if (loading) return

    if (user?.uid) {
      // Redirect to the merchant-specific financials page
      router.push(`/merchant/financials`)
    } else {
      // If not logged in, redirect to login
      router.push('/login')
    }
  }, [user, loading, router])

  // Show a loading state while redirecting
  return (
    <div className="flex items-center justify-center h-screen">
      <div className="flex flex-col items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#007AFF]"></div>
        <p className="mt-4 text-sm text-gray-500">Redirecting to financials...</p>
      </div>
    </div>
  )
} "use client"

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  Gift, 
  PackageOpen, 
  Zap,
  Search,
  Filter,
  Plus,
  Coffee,
  ShoppingBag,
  Cake,
  Star,
  DollarSign,
  Calendar,
  UserPlus,
  LayoutGrid,
  List,
  Clock,
  AlertCircle
} from "lucide-react"
import { Input } from "@/components/ui/input"
import { useRouter } from "next/navigation"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { useState } from "react"
import { cn } from "@/lib/utils"
import { RewardDetailsDialog } from "@/components/reward-details-dialog"
import { CreateRewardDialog } from "@/components/create-reward-dialog"

// Empty array for reward templates
const rewardTemplates = [
  {
    id: 'free-coffee',
    name: 'Free Coffee',
    description: 'Enjoy a complimentary cup of our signature coffee on your next visit with any purchase.',
    category: 'welcome',
    pointsCost: "0",
    icon: Coffee,
    tags: ['Free', 'Beverage', 'Welcome'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: true,
      minimumTransactions: "1",
      maximumTransactions: "",
      useSpendingRequirements: false,
      minimumLifetimeSpend: "",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "200",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-muffin',
    name: 'Free Muffin',
    description: 'Grab a free muffin with any beverage purchase at our café!',
    category: 'loyalty',
    pointsCost: "0",
    icon: Cake,
    tags: ['Free', 'Food', 'Bakery'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: false,
      minimumTransactions: "",
      maximumTransactions: "",
      useSpendingRequirements: true,
      minimumLifetimeSpend: "5",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "150",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-pastry',
    name: 'Free Pastry',
    description: 'Enjoy a free pastry of your choice on any order over $10!',
    category: 'loyalty',
    pointsCost: "0",
    icon: Cake,
    tags: ['Free', 'Food', 'Bakery'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: false,
      minimumTransactions: "",
      maximumTransactions: "",
      useSpendingRequirements: true,
      minimumLifetimeSpend: "10",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "100",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-iced-tea',
    name: 'Free Iced Tea',
    description: 'Cool down with a complimentary iced tea with any meal purchased!',
    category: 'loyalty',
    pointsCost: "0",
    icon: Coffee,
    tags: ['Free', 'Beverage', 'Refreshing'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: true,
      minimumTransactions: "2",
      maximumTransactions: "",
      useSpendingRequirements: false,
      minimumLifetimeSpend: "",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "120",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-sandwich',
    name: 'Free Sandwich',
    description: 'Enjoy a complimentary sandwich with any purchase over $15!',
    category: 'spending',
    pointsCost: "0",
    icon: ShoppingBag,
    tags: ['Free', 'Food', 'Meal'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: false,
      minimumTransactions: "",
      maximumTransactions: "",
      useSpendingRequirements: true,
      minimumLifetimeSpend: "15",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "80",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-hot-chocolate',
    name: 'Free Hot Chocolate',
    description: 'Warm up with a free hot chocolate after any pastry purchase!',
    category: 'special-occasion',
    pointsCost: "0",
    icon: Coffee,
    tags: ['Free', 'Beverage', 'Seasonal'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: true,
      minimumTransactions: "1",
      maximumTransactions: "",
      useSpendingRequirements: false,
      minimumLifetimeSpend: "",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "90",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-smoothie',
    name: 'Free Smoothie',
    description: 'Refresh yourself with a delicious smoothie after your third visit!',
    category: 'loyalty',
    pointsCost: "0",
    icon: Coffee,
    tags: ['Free', 'Beverage', 'Healthy'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: true,
      minimumTransactions: "3",
      maximumTransactions: "",
      useSpendingRequirements: false,
      minimumLifetimeSpend: "",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "75",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-cake-slice',
    name: 'Free Cake Slice',
    description: 'Enjoy a complimentary slice of cake with any drink purchase over $10!',
    category: 'special-occasion',
    pointsCost: "0",
    icon: Cake,
    tags: ['Free', 'Dessert', 'Premium'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: false,
      minimumTransactions: "",
      maximumTransactions: "",
      useSpendingRequirements: true,
      minimumLifetimeSpend: "10",
      minimumPointsBalance: "",
      useTimeRequirements: false,
      daysSinceJoined: "",
      daysSinceLastVisit: "",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "60",
      perCustomerLimit: "1",
      useTimeRestrictions: false,
      startTime: "",
      endTime: "",
      dayRestrictions: []
    }
  },
  {
    id: 'free-breakfast-item',
    name: 'Free Breakfast Item',
    description: 'Start your day right with a free breakfast item with any purchase before 10 AM!',
    category: 'recurring',
    pointsCost: "0",
    icon: Coffee,
    tags: ['Free', 'Breakfast', 'Morning'],
    type: "voucher",
    voucherAmount: "0",
    rewardVisibility: "global",
    isActive: true,
    conditions: {
      useTransactionRequirements: false,
      minimumTransactions: "",
      maximumTransactions: "",
      useSpendingRequirements: false,
      minimumLifetimeSpend: "",
      minimumPointsBalance: "",
      useTimeRequirements: true,
      daysSinceJoined: "",
      daysSinceLastVisit: "1",
      membershipLevel: "",
      newCustomer: false
    },
    limitations: {
      totalRedemptionLimit: "70",
      perCustomerLimit: "1",
      useTimeRestrictions: true,
      startTime: "06:00 AM",
      endTime: "10:00 AM",
      dayRestrictions: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
    }
  }
]

// Keep the categories for the UI structure
const rewardCategories = [
  { id: 'all', label: 'All Templates', icon: Gift },
  { id: 'special-occasion', label: 'Special Occasions', icon: Cake },
  { id: 'loyalty', label: 'Loyalty & Punch Cards', icon: Coffee },
  { id: 'welcome', label: 'Welcome Rewards', icon: UserPlus },
  { id: 'tier', label: 'Tier Benefits', icon: Star },
  { id: 'spending', label: 'Spending Rewards', icon: DollarSign },
  { id: 'recurring', label: 'Recurring Rewards', icon: Calendar }
]

export default function RewardLibraryPage() {
  const router = useRouter()
  const [viewType, setViewType] = useState<"grid" | "list">("grid")
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedReward, setSelectedReward] = useState<typeof rewardTemplates[0] | null>(null)
  const [isDetailsOpen, setIsDetailsOpen] = useState(false)
  const [isCreateRewardOpen, setIsCreateRewardOpen] = useState(false)

  const filterRewards = (templates: typeof rewardTemplates, query: string) => {
    if (!query.trim()) return templates
    
    const searchLower = query.toLowerCase()
    return templates.filter(template => 
      template.name.toLowerCase().includes(searchLower) ||
      template.description.toLowerCase().includes(searchLower) ||
      template.tags.some(tag => tag.toLowerCase().includes(searchLower))
    )
  }

  const handleRewardClick = (reward: typeof rewardTemplates[0]) => {
    setSelectedReward(reward)
    setIsDetailsOpen(true)
  }

  const handleEdit = () => {
    setIsDetailsOpen(false)
    setIsCreateRewardOpen(true)
  }

  const handleCreate = () => {
    router.push(`/store/rewards/create?template=${selectedReward?.id}`)
  }

  const renderRewardItem = (template: typeof rewardTemplates[0], viewType: "grid" | "list") => {
    const Icon = template.icon || Gift
    
    // Count active conditions and limitations
    const conditionCount = Object.entries(template.conditions).filter(([key, value]) => {
      if (key === 'useTransactionRequirements' || key === 'useSpendingRequirements' || key === 'useTimeRequirements') {
        return value === true
      }
      if (key === 'newCustomer') return value === true
      return value && value !== ""
    }).length
    
    const limitationCount = Object.entries(template.limitations).filter(([key, value]) => {
      if (key === 'useTimeRestrictions') return value === true
      if (key === 'dayRestrictions') return Array.isArray(value) && value.length > 0
      return value && value !== ""
    }).length

    if (viewType === 'list') {
      return (
        <div 
          key={template.id}
          className="group flex items-stretch overflow-hidden bg-gray-50 border border-gray-100 rounded-lg hover:shadow-md transition-all cursor-pointer"
          onClick={() => handleRewardClick(template)}
        >
          <div className="w-16 bg-blue-50 flex items-center justify-center">
            <Icon className="h-6 w-6 text-blue-500" />
          </div>
          
          <div className="flex-1 p-4 flex items-center">
            <div className="flex-1">
              <h3 className="font-medium text-gray-900">{template.name}</h3>
              <p className="text-sm text-gray-500 line-clamp-1">{template.description}</p>
            </div>
            
            <div className="flex items-center gap-3 ml-4">
              {conditionCount > 0 && (
                <div className="flex items-center gap-1.5 bg-blue-50 text-blue-700 px-2 py-1 rounded-full text-xs font-medium">
                  <Clock className="h-3 w-3" />
                  {conditionCount} {conditionCount === 1 ? 'condition' : 'conditions'}
                </div>
              )}
              
              {limitationCount > 0 && (
                <div className="flex items-center gap-1.5 bg-white text-gray-700 px-2 py-1 rounded-full text-xs font-medium border border-gray-100">
                  <AlertCircle className="h-3 w-3" />
                  {limitationCount} {limitationCount === 1 ? 'limit' : 'limits'}
                </div>
              )}
              
              <Button 
                variant="outline" 
                size="sm"
                className="ml-2 bg-white border-blue-200 text-blue-700 hover:bg-blue-50 hover:text-blue-800"
                onClick={(e) => {
                  e.stopPropagation()
                  handleRewardClick(template)
                }}
              >
                Use Template
              </Button>
            </div>
          </div>
        </div>
      )
    }

    return (
      <div 
        key={template.id} 
        className="group bg-gray-50 border border-gray-100 hover:border-blue-100 hover:shadow-md transition-all rounded-lg overflow-hidden cursor-pointer"
        onClick={() => handleRewardClick(template)}
      >
        <div className="p-5">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="h-10 w-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Icon className="h-5 w-5 text-blue-500" />
              </div>
              <div>
                <h3 className="font-medium text-gray-900">{template.name}</h3>
                <p className="text-sm text-gray-500 line-clamp-2 mt-0.5">{template.description}</p>
              </div>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2 mb-4">
            {template.tags.map((tag: string) => (
              <Badge 
                key={tag} 
                variant="secondary"
                className="bg-white text-gray-600 border border-gray-100"
              >
                {tag}
              </Badge>
            ))}
          </div>
          
          <div className="flex items-center justify-between pt-3 border-t border-gray-200">
            <div className="flex items-center gap-2">
              {conditionCount > 0 && (
                <div className="flex items-center gap-1.5 bg-blue-50 text-blue-700 px-2 py-1 rounded-full text-xs font-medium">
                  <Clock className="h-3 w-3" />
                  {conditionCount}
                </div>
              )}
              
              {limitationCount > 0 && (
                <div className="flex items-center gap-1.5 bg-white text-gray-700 px-2 py-1 rounded-full text-xs font-medium border border-gray-100">
                  <AlertCircle className="h-3 w-3" />
                  {limitationCount}
                </div>
              )}
              
              <div className="text-sm text-gray-500">
                {template.pointsCost === "0" ? (
                  <span className="text-green-600 font-medium">Free</span>
                ) : (
                  <span>{template.pointsCost} points</span>
                )}
              </div>
            </div>
            
            <Button 
              variant="outline" 
              size="sm"
              className="bg-white border-blue-200 text-blue-700 hover:bg-blue-50 hover:text-blue-800"
              onClick={(e) => {
                e.stopPropagation()
                handleRewardClick(template)
              }}
            >
              Use Template
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Rewards Library"
          subtitle="Browse and create rewards from pre-made templates"
        >
          <Button onClick={() => setIsCreateRewardOpen(true)}>
            <Plus className="mr-2 h-4 w-4" />
            Create New Reward
          </Button>
        </PageHeader>
        
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
          <Tabs defaultValue="all" value={selectedCategory} onValueChange={setSelectedCategory}>
            <TabsList>
              <TabsTrigger value="all">All Templates</TabsTrigger>
              <TabsTrigger value="welcome">Welcome</TabsTrigger>
              <TabsTrigger value="loyalty">Loyalty</TabsTrigger>
              <TabsTrigger value="spending">Spending</TabsTrigger>
              <TabsTrigger value="birthday">Birthday</TabsTrigger>
            </TabsList>
          </Tabs>
          
          <div className="flex items-center gap-2">
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input 
                type="search" 
                placeholder="Search templates..." 
                className="pl-9 h-9 w-[250px]"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            
            <div className="border rounded-md flex">
              <Button 
                variant="ghost" 
                size="icon"
                className={cn(
                  "h-9 w-9 rounded-none rounded-l-md",
                  viewType === "grid" && "bg-muted"
                )}
                onClick={() => setViewType("grid")}
              >
                <LayoutGrid className="h-4 w-4" />
              </Button>
              <Button 
                variant="ghost" 
                size="icon"
                className={cn(
                  "h-9 w-9 rounded-none rounded-r-md",
                  viewType === "list" && "bg-muted"
                )}
                onClick={() => setViewType("list")}
              >
                <List className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
        
        {/* Main Tabs */}
        <Tabs defaultValue="individual" className="space-y-6">
          <div className="flex items-center justify-between">
            <TabsList className="bg-muted">
              <TabsTrigger value="individual" className="flex items-center gap-2">
                <Gift className="h-4 w-4" />
                <span>Individual Rewards</span>
              </TabsTrigger>
              <TabsTrigger value="programs" className="flex items-center gap-2">
                <PackageOpen className="h-4 w-4" />
                <span>Programs</span>
              </TabsTrigger>
              <TabsTrigger value="points" className="flex items-center gap-2">
                <Zap className="h-4 w-4" />
                <span>Points Rules</span>
              </TabsTrigger>
            </TabsList>
          </div>

          {/* Individual Rewards Content with Sub-tabs */}
          <TabsContent value="individual">
            <Tabs defaultValue="all" className="space-y-6">
              <TabsList className="w-full bg-background border-b h-12 p-0 space-x-2">
                {rewardCategories.map(category => {
                  const Icon = category.icon
                  return (
                    <TabsTrigger 
                      key={category.id}
                      value={category.id}
                      className="data-[state=active]:bg-background data-[state=active]:shadow-none data-[state=active]:border-primary data-[state=active]:border-b-2"
                    >
                      <div className="flex items-center gap-2">
                        <Icon className="h-4 w-4" />
                        <span>{category.label}</span>
                      </div>
                    </TabsTrigger>
                  )
                })}
              </TabsList>

              {rewardCategories.map(category => (
                <TabsContent key={category.id} value={category.id}>
                  <div className={cn(
                    viewType === 'grid' 
                      ? "grid grid-cols-1 md:grid-cols-3 gap-4"
                      : "space-y-4"
                  )}>
                    {filterRewards(
                      rewardTemplates.filter(template => 
                        category.id === 'all' || template.category === category.id
                      ),
                      searchQuery
                    ).map((template) => renderRewardItem(template, viewType))}
                  </div>
                </TabsContent>
              ))}
            </Tabs>
          </TabsContent>

          {/* Programs Content */}
          <TabsContent value="programs">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="group hover:shadow-md transition-shadow rounded-md">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="h-10 w-10 rounded-lg bg-purple-50 flex items-center justify-center">
                        <Star className="h-5 w-5 text-purple-500" />
                      </div>
                      <div>
                        <CardTitle className="text-base">VIP Program</CardTitle>
                        <CardDescription>Multi-tier loyalty program with exclusive benefits</CardDescription>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2 mb-4">
                    <Badge variant="secondary" className="bg-gray-100 text-gray-600">
                      Premium
                    </Badge>
                    <Badge variant="secondary" className="bg-gray-100 text-gray-600">
                      Multi-tier
                    </Badge>
                  </div>
                  <Button variant="outline" size="sm" className="w-full">
                    View Program
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Points Rules Content */}
          <TabsContent value="points">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="group hover:shadow-md transition-shadow rounded-md">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="h-10 w-10 rounded-lg bg-green-50 flex items-center justify-center">
                        <DollarSign className="h-5 w-5 text-green-500" />
                      </div>
                      <div>
                        <CardTitle className="text-base">Standard Points</CardTitle>
                        <CardDescription>1 point per $1 spent</CardDescription>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2 mb-4">
                    <Badge variant="secondary" className="bg-gray-100 text-gray-600">
                      Basic
                    </Badge>
                    <Badge variant="secondary" className="bg-gray-100 text-gray-600">
                      Points
                    </Badge>
                  </div>
                  <Button variant="outline" size="sm" className="w-full">
                    Configure Rule
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* Add dialogs */}
        {selectedReward && (
          <>
            <RewardDetailsDialog
              isOpen={isDetailsOpen}
              onClose={() => setIsDetailsOpen(false)}
              reward={selectedReward}
              onEdit={handleEdit}
              onCreate={handleCreate}
            />
            <CreateRewardDialog
              open={isCreateRewardOpen}
              onOpenChange={setIsCreateRewardOpen}
              defaultValues={selectedReward}
            />
          </>
        )}
      </div>
    </PageTransition>
  )
} "use client"

import { useState, useEffect, useRef } from "react"
import { useRouter } from "next/navigation"
import { createUserWithEmailAndPassword, updateProfile, getAuth, fetchSignInMethodsForEmail } from "firebase/auth"
import { doc, setDoc, GeoPoint } from "firebase/firestore"
import { ref, uploadBytes, getDownloadURL } from "firebase/storage"
import { auth, db, storage } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { toast } from "@/components/ui/use-toast"
import { Eye, EyeOff, ArrowRight, Loader2, ChevronLeft, ChevronRight, Upload } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { collection, query, where, getDocs } from "firebase/firestore"
import Script from "next/script"

// Business types matching iOS app
const businessTypes = [
  { value: "cafe", label: "Cafe" },
  { value: "restaurant", label: "Restaurant" },
  { value: "retail", label: "Retail" },
  { value: "salon", label: "Salon" },
  { value: "gym", label: "Gym" },
  { value: "other", label: "Other" }
]

// Point of sale systems
const pointOfSaleSystems = [
  { value: "lightspeed", label: "Lightspeed" },
  { value: "square", label: "Square" },
  { value: "shopify", label: "Shopify" },
  { value: "vend", label: "Vend" },
  { value: "other", label: "Other" },
  { value: "none", label: "None" }
]

// Payment providers
const paymentProviders = [
  { value: "square", label: "Square" },
  { value: "stripe", label: "Stripe" },
  { value: "paypal", label: "PayPal" },
  { value: "eftpos", label: "EFTPOS" },
  { value: "other", label: "Other" },
  { value: "none", label: "None" }
]

// Australian states
const australianStates = [
  { value: "NSW", label: "New South Wales" },
  { value: "VIC", label: "Victoria" },
  { value: "QLD", label: "Queensland" },
  { value: "WA", label: "Western Australia" },
  { value: "SA", label: "South Australia" },
  { value: "TAS", label: "Tasmania" },
  { value: "ACT", label: "Australian Capital Territory" },
  { value: "NT", label: "Northern Territory" }
]

// Days of the week
const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

export default function SignupPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const totalSteps = 6
  const [validationErrors, setValidationErrors] = useState<string[]>([])
  
  // Step 1: Basic Auth
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  
  // Step 2: Business Details
  const [legalBusinessName, setLegalBusinessName] = useState("")
  const [tradingName, setTradingName] = useState("")
  const [businessEmail, setBusinessEmail] = useState("")
  const [businessPhone, setBusinessPhone] = useState("")
  const [businessType, setBusinessType] = useState("cafe")
  const [logoFile, setLogoFile] = useState<File | null>(null)
  
  // Step 3: Address
  const [street, setStreet] = useState("")
  const [suburb, setSuburb] = useState("")
  const [state, setState] = useState("NSW")
  const [postcode, setPostcode] = useState("")
  
  // Step 4: Operating Hours
  const [operatingHours, setOperatingHours] = useState(() => {
    const defaultHours = {}
    daysOfWeek.forEach(day => {
      defaultHours[day.toLowerCase()] = {
        isOpen: true,
        openTime: "09:00",
        closeTime: "17:00"
      }
    })
    return defaultHours
  })
  
  // Step 5: Representative Details
  const [repName, setRepName] = useState("")
  const [repPhone, setRepPhone] = useState("")
  const [repEmail, setRepEmail] = useState("")
  
  // Step 6: Business Verification & Systems
  const [abn, setAbn] = useState("")
  const [pointOfSale, setPointOfSale] = useState("lightspeed")
  const [paymentProvider, setPaymentProvider] = useState("square")
  
  const updateOperatingHours = (day, field, value) => {
    setOperatingHours(prev => ({
      ...prev,
      [day.toLowerCase()]: {
        ...prev[day.toLowerCase()],
        [field]: value
      }
    }))
  }
  
  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setLogoFile(e.target.files[0])
    }
  }
  
  const validateCurrentStep = () => {
    const errors = []
    
    switch (currentStep) {
      case 1: // Basic Auth
        if (!email) errors.push("Email is required")
        if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) errors.push("Invalid email format")
        if (!password) errors.push("Password is required")
        if (password && password.length < 8) errors.push("Password must be at least 8 characters")
        if (password !== confirmPassword) errors.push("Passwords do not match")
        break
        
      case 2: // Business Details
        if (!legalBusinessName) errors.push("Legal business name is required")
        if (!tradingName) errors.push("Trading name is required")
        if (!businessEmail) errors.push("Business email is required")
        if (businessEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(businessEmail)) errors.push("Invalid business email format")
        if (!businessPhone) errors.push("Business phone is required")
        break
        
      case 3:
        if (!street) errors.push("Street address is required")
        if (!suburb) errors.push("Suburb is required")
        if (!state) errors.push("State is required")
        if (!postcode) errors.push("Postcode is required")
        if (postcode && (postcode.length !== 4 || !/^\d+$/.test(postcode))) errors.push("Postcode must be 4 digits")
        break
        
      case 4: // Operating Hours
        // Basic validation for operating hours
        for (const day of daysOfWeek) {
          const dayLower = day.toLowerCase()
          if (operatingHours[dayLower]?.isOpen) {
            if (!operatingHours[dayLower]?.openTime) errors.push(`Opening time for ${day} is required`)
            if (!operatingHours[dayLower]?.closeTime) errors.push(`Closing time for ${day} is required`)
          }
        }
        break
        
      case 5: // Representative
        if (!repName) errors.push("Representative name is required")
        if (!repPhone) errors.push("Contact phone is required")
        if (!repEmail) errors.push("Contact email is required")
        if (repEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(repEmail)) errors.push("Invalid contact email format")
        break
        
      case 6: // ABN & Verification
        if (!abn) errors.push("ABN is required")
        if (abn && (abn.length !== 11 || !/^\d+$/.test(abn))) errors.push("ABN must be 11 digits")
        break
    }
    
    setValidationErrors(errors)
    return errors.length === 0
  }
  
  const nextStep = async () => {
    if (!validateCurrentStep()) return;
    
    // For step 1, check if email already exists
    if (currentStep === 1) {
      setLoading(true);
      try {
        console.log("Checking if email exists:", email);
        
        // First check with Firebase Auth
        const signInMethods = await fetchSignInMethodsForEmail(auth, email);
        console.log("Sign-in methods found:", signInMethods);
        
        // If there are sign-in methods available, the email is already in use
        if (signInMethods.length > 0) {
          console.log("Email already exists in Auth, showing error");
          setValidationErrors(["This email is already registered. Please use a different email or login."]);
          setLoading(false);
          return;
        }
        
        // Also check in Firestore merchants collection for primaryemail field
        console.log("Checking Firestore for email...");
        const merchantsRef = collection(db, "merchants");
        const q = query(merchantsRef, where("primaryemail", "==", email));
        const querySnapshot = await getDocs(q);
        
        if (!querySnapshot.empty) {
          console.log("Email found in Firestore merchants collection");
          setValidationErrors(["This email is already registered. Please use a different email or login."]);
          setLoading(false);
          return;
        }
        
        // Also check for businessEmail field
        const businessEmailQuery = query(merchantsRef, where("businessEmail", "==", email));
        const businessEmailSnapshot = await getDocs(businessEmailQuery);
        
        if (!businessEmailSnapshot.empty) {
          console.log("Email found as business email in Firestore");
          setValidationErrors(["This email is already registered. Please use a different email or login."]);
          setLoading(false);
          return;
        }
        
        console.log("Email is available, proceeding to next step");
        // Email is available, proceed to next step
        setCurrentStep(prev => Math.min(prev + 1, totalSteps));
      } catch (error) {
        console.error("Error checking email:", error);
        setValidationErrors(["An error occurred while checking email availability. Please try again."]);
      } finally {
        setLoading(false);
      }
    } else {
      // For other steps, just proceed normally
      setCurrentStep(prev => Math.min(prev + 1, totalSteps));
    }
  }
  
  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }
  
  const uploadLogo = async (userId) => {
    console.log("Starting logo upload for user:", userId);
    
    if (!logoFile) {
      console.warn("No logo file selected");
      return null;
    }
    
    console.log("Logo file details:", {
      name: logoFile.name,
      type: logoFile.type,
      size: `${(logoFile.size / 1024).toFixed(2)} KB`
    });
    
    const filename = `${userId}/logo/${logoFile.name}`;
    console.log("Target storage path:", filename);
    
    try {
      console.log("Creating storage reference...");
      const storageRef = ref(storage, filename);
      console.log("Storage reference created:", storageRef);
      
      console.log("Starting file upload...");
      const snapshot = await uploadBytes(storageRef, logoFile);
      console.log("Upload completed:", snapshot);
      
      console.log("Getting download URL...");
      const downloadURL = await getDownloadURL(snapshot.ref);
      console.log("Download URL obtained:", downloadURL);
      
      return downloadURL;
    } catch (error) {
      console.error("Error uploading logo:", error);
      console.error("Error details:", JSON.stringify(error, null, 2));
      // Return the path instead of null, so we at least have the reference
      return `${userId}/logo/${logoFile.name}`;
    }
  }
  
  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateCurrentStep()) return
    
    setLoading(true)
    
    try {
      console.log("Starting account creation process...");
      console.log("Form data:", { 
        email, 
        password: "********", // Don't log actual password
        legalBusinessName,
        tradingName,
        businessType
      });
      
      // Create user account
      console.log("Attempting to create user with Firebase Auth...");
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      )
      
      console.log("User created successfully:", userCredential.user.uid);
      const user = userCredential.user
      const userId = user.uid
      
      // Update profile with business name
      console.log("Updating user profile...");
      await updateProfile(user, {
        displayName: tradingName
      })
      
      console.log("User created successfully, starting file uploads...");

      // Upload logo if provided
      console.log("Uploading logo...");
      const logoURL = await uploadLogo(userId);
      console.log("Logo upload result:", logoURL);
      
      // Format the display address
      const displayAddress = [street, suburb]
        .filter(part => part)
        .join(", ")
      
      // Format the full address
      const formattedAddress = [street, suburb, postcode, state]
        .filter(part => part)
        .join(", ")
      
      // Create business details
      const businessData = {
        legalName: legalBusinessName,
        tradingName: tradingName,
        merchantName: tradingName,
        abn: abn,
        businessType: businessType,
        businessPhone: businessPhone,
        address: {
          street: street,
          suburb: suburb,
          state: state,
          postcode: postcode
        },
        location: {
          address: [formattedAddress],
          displayAddress: displayAddress,
          coordinates: {
            latitude: 0,
            longitude: 0
          }
        },
        operatingHours: operatingHours,
        representative: {
          name: repName,
          phone: repPhone,
          email: repEmail
        },
        businessEmail: businessEmail,
        primaryemail: email,
        merchantId: userId,
        pointOfSale: pointOfSale,
        paymentProvider: paymentProvider,
        defaultmultiplier: 3,
        createdAt: new Date(),
        status: "active",
        plan: "free",
        logoUrl: logoURL // Use the actual URL or path
      }
      
      // Save to Firestore
      await setDoc(doc(db, "merchants", userId), businessData)
      
      toast({
        title: "Account created!",
        description: "Welcome to Tap Loyalty. Redirecting to your dashboard...",
      })
      
      setTimeout(() => {
        router.push("/dashboard")
      }, 1500)
      
    } catch (error) {
      console.error("Error creating account:", error);
      // More detailed error logging
      if (error.code) {
        console.error("Error code:", error.code);
      }
      
      // Show error to user
      toast({
        title: "Account creation failed",
        description: error.message || "There was an error creating your account. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false)
    }
  }
  
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="your@email.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="Create a password (min 8 characters)"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
                <Button 
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4 text-gray-500" />
                  ) : (
                    <Eye className="h-4 w-4 text-gray-500" />
                  )}
                </Button>
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
          </div>
        )
        
      case 2:
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="legalBusinessName">Legal Business Name</Label>
              <Input
                id="legalBusinessName"
                placeholder="Legal registered name"
                value={legalBusinessName}
                onChange={(e) => setLegalBusinessName(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tradingName">Trading Name</Label>
              <Input
                id="tradingName"
                placeholder="Name customers know you by"
                value={tradingName}
                onChange={(e) => setTradingName(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="businessPhone">Business Phone</Label>
              <Input
                id="businessPhone"
                type="tel"
                placeholder="Business phone number"
                value={businessPhone}
                onChange={(e) => {
                  // Only allow numeric input
                  const numericValue = e.target.value.replace(/\D/g, '');
                  setBusinessPhone(numericValue);
                }}
                inputMode="numeric"
                pattern="[0-9]*"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="businessEmail">Business Email</Label>
              <Input
                id="businessEmail"
                type="email"
                placeholder="business@example.com"
                value={businessEmail}
                onChange={(e) => setBusinessEmail(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="businessType">Business Type</Label>
              <Select value={businessType} onValueChange={setBusinessType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select business type" />
                </SelectTrigger>
                <SelectContent>
                  {businessTypes.map(type => (
                    <SelectItem key={type.value} value={type.value}>
                      {type.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )
        
      case 3:
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="street">Street Address</Label>
              <Input
                id="street"
                placeholder="123 Main Street"
                value={street}
                onChange={(e) => setStreet(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="suburb">Suburb</Label>
              <Input
                id="suburb"
                placeholder="Suburb"
                value={suburb}
                onChange={(e) => setSuburb(e.target.value)}
                required
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="state">State</Label>
                <Select value={state} onValueChange={setState}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select state" />
                  </SelectTrigger>
                  <SelectContent>
                    {australianStates.map(state => (
                      <SelectItem key={state.value} value={state.value}>
                        {state.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="postcode">Postcode</Label>
                <Input
                  id="postcode"
                  placeholder="0000"
                  value={postcode}
                  onChange={(e) => setPostcode(e.target.value.replace(/\D/g, '').slice(0, 4))}
                  required
                />
              </div>
            </div>
          </div>
        )
        
      case 4:
        return (
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">Set your business operating hours</p>
            
            <div className="space-y-4 max-h-[300px] overflow-y-auto pr-2">
              {daysOfWeek.map(day => {
                const dayLower = day.toLowerCase()
                return (
                  <div key={day} className="space-y-2 pb-2 border-b">
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id={`open-${dayLower}`}
                        checked={operatingHours[dayLower]?.isOpen}
                        onCheckedChange={(checked) => 
                          updateOperatingHours(dayLower, 'isOpen', checked)
                        }
                      />
                      <Label htmlFor={`open-${dayLower}`} className="font-medium">{day}</Label>
                    </div>
                    
                    {operatingHours[dayLower]?.isOpen && (
                      <div className="grid grid-cols-2 gap-4 ml-6 mt-2">
                        <div className="space-y-1">
                          <Label htmlFor={`open-time-${dayLower}`} className="text-xs">Open</Label>
                          <Input
                            id={`open-time-${dayLower}`}
                            type="time"
                            value={operatingHours[dayLower]?.openTime || "09:00"}
                            onChange={(e) => updateOperatingHours(dayLower, 'openTime', e.target.value)}
                          />
                        </div>
                        <div className="space-y-1">
                          <Label htmlFor={`close-time-${dayLower}`} className="text-xs">Close</Label>
                          <Input
                            id={`close-time-${dayLower}`}
                            type="time"
                            value={operatingHours[dayLower]?.closeTime || "17:00"}
                            onChange={(e) => updateOperatingHours(dayLower, 'closeTime', e.target.value)}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                )
              })}
            </div>
          </div>
        )
        
      case 5:
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="repName">Representative Name</Label>
              <Input
                id="repName"
                placeholder="Full name"
                value={repName}
                onChange={(e) => setRepName(e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="repPhone">Contact Phone</Label>
              <Input
                id="repPhone"
                placeholder="Phone number"
                value={repPhone}
                onChange={(e) => {
                  // Only allow numeric input
                  const numericValue = e.target.value.replace(/\D/g, '');
                  setRepPhone(numericValue);
                }}
                type="tel"
                inputMode="numeric"
                pattern="[0-9]*"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="repEmail">Contact Email</Label>
              <Input
                id="repEmail"
                type="email"
                placeholder="contact@example.com"
                value={repEmail}
                onChange={(e) => setRepEmail(e.target.value)}
                required
              />
            </div>
          </div>
        )
        
      case 6:
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="abn">ABN (Australian Business Number)</Label>
              <Input
                id="abn"
                placeholder="11 digit ABN"
                value={abn}
                onChange={(e) => setAbn(e.target.value.replace(/\D/g, '').slice(0, 11))}
                required
              />
              <p className="text-sm text-muted-foreground mt-1">
                Your ABN is required for matching customer payments with your business, allowing us to accurately 
                award loyalty points to your customers when they make purchases.
              </p>
            </div>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="pointOfSale">Point of Sale System</Label>
                <Select value={pointOfSale} onValueChange={setPointOfSale}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select POS system" />
                  </SelectTrigger>
                  <SelectContent>
                    {pointOfSaleSystems.map(system => (
                      <SelectItem key={system.value} value={system.value}>
                        {system.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="paymentProvider">Payment Provider</Label>
                <Select value={paymentProvider} onValueChange={setPaymentProvider}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select payment provider" />
                  </SelectTrigger>
                  <SelectContent>
                    {paymentProviders.map(provider => (
                      <SelectItem key={provider.value} value={provider.value}>
                        {provider.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        )
        
      default:
        return null
    }
  }
  
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4">
      <div className="w-full max-w-md space-y-6">
        <div className="flex flex-col items-center space-y-2 text-center">
          <div className="flex items-center gap-2">
            <Image 
              src="/logo.png" 
              alt="Tap Loyalty" 
              width={48} 
              height={48} 
              className="rounded-lg"
            />
            <h1 className="text-2xl">
              <span className="text-[#007AFF] font-extrabold">Tap</span>{" "}
              <span className="font-semibold">Loyalty</span>
            </h1>
          </div>
          <p className="text-gray-500 max-w-xs">
Let's get started...
          </p>
        </div>
        
        <Card className="border-none shadow-md">
          <CardHeader className="space-y-1 pb-4">
            <div className="flex justify-between items-center">
              <CardTitle className="text-xl">Step {currentStep} of {totalSteps}</CardTitle>
              <div className="flex items-center space-x-1">
                {Array.from({ length: totalSteps }).map((_, i) => (
                  <div 
                    key={i} 
                    className={`h-2 w-2 rounded-full ${i < currentStep ? 'bg-blue-600' : 'bg-gray-200'}`}
                  />
                ))}
              </div>
            </div>
            <CardDescription>
              {currentStep === 1 && "Account information"}
              {currentStep === 2 && "Business details"}
              {currentStep === 3 && "Business address"}
              {currentStep === 4 && "Operating hours"}
              {currentStep === 5 && "Representative details"}
              {currentStep === 6 && "Business verification"}
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              {renderStepContent()}
              
              {validationErrors.length > 0 && (
                <div className="bg-red-50 p-3 rounded-md">
                  <p className="text-sm font-medium text-red-800 mb-1">Please fix the following errors:</p>
                  <ul className="text-xs text-red-700 list-disc pl-5">
                    {validationErrors.map((error, index) => (
                      <li key={index}>{error}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              <div className="flex justify-between pt-2">
                {currentStep > 1 ? (
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={prevStep}
                    disabled={loading}
                  >
                    <ChevronLeft className="h-4 w-4 mr-2" />
                    Back
                  </Button>
                ) : (
                  <div></div>
                )}
                
                {currentStep < totalSteps ? (
                  <Button 
                    type="button" 
                    onClick={nextStep}
                    disabled={loading}
                    className="bg-[#007AFF] hover:bg-[#0066CC] text-white"
                  >
                    Next
                    <ChevronRight className="h-4 w-4 ml-2" />
                  </Button>
                ) : (
                  <Button 
                    type="submit" 
                    className="bg-[#007AFF] hover:bg-[#0066CC] text-white"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Creating Account...
                      </>
                    ) : (
                      <>
                        Create Account
                        <ArrowRight className="ml-2 h-4 w-4" />
                      </>
                    )}
                  </Button>
                )}
              </div>
            </form>
          </CardContent>
          
          <CardFooter className="flex flex-col space-y-4">
            <Separator />
            <div className="text-center text-sm">
              Already have an account?{" "}
              <Link href="/login" className="text-blue-600 hover:underline font-medium">
                Log in
              </Link>
            </div>
          </CardFooter>
        </Card>
        
        <div className="text-center text-xs text-gray-500">
          By creating an account, you agree to our{" "}
          <Link href="/terms" className="text-blue-600 hover:underline">
            Terms of Service
          </Link>{" "}
          and{" "}
          <Link href="/privacy" className="text-blue-600 hover:underline">
            Privacy Policy
          </Link>
        </div>
      </div>
    </div>
  )
} "use client"

import { useSearchParams, useRouter } from 'next/navigation'
import { CreateRewardDialog } from '@/components/create-reward-dialog'

export default function CreateRewardPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const customerId = searchParams.get('customerId')
  const customerName = searchParams.get('customerName')
  
  return (
    <CreateRewardDialog 
      open={true}
      onOpenChange={(open) => {
        if (!open) router.push('/rewards')
      }}
      customerId={customerId || undefined}
      customerName={customerName ? decodeURIComponent(customerName) : undefined}
    />
  )
} "use client"

import { useState, useEffect } from "react"
import { doc, getDoc, collection, getDocs, query, where, orderBy, updateDoc } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useRouter } from "next/navigation"
import { ArrowLeft, User, Edit, Save, X, Store, MoreHorizontal } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { formatDistanceToNow, format } from "date-fns"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { toast } from "@/components/ui/use-toast"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export default function CustomerDetailsPage({ params }: { params: { customerId: string } }) {
  const router = useRouter()
  const [customerData, setCustomerData] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [merchantConnections, setMerchantConnections] = useState<any[]>([])
  const [transactions, setTransactions] = useState<any[]>([])
  const [redemptions, setRedemptions] = useState<any[]>([])
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [editingCustomer, setEditingCustomer] = useState<any>(null)
  const [isEditMerchantDialogOpen, setIsEditMerchantDialogOpen] = useState(false)
  const [selectedMerchantConnection, setSelectedMerchantConnection] = useState<any>(null)
  const [editingMerchantCustomer, setEditingMerchantCustomer] = useState<any>(null)

  useEffect(() => {
    fetchCustomerData()
  }, [params.customerId])

  const fetchCustomerData = async () => {
    try {
      setLoading(true)
      
      // Fetch customer profile data
      const customerRef = doc(db, "customers", params.customerId)
      const customerSnap = await getDoc(customerRef)
      
      if (!customerSnap.exists()) {
        console.error("Customer not found")
        setLoading(false)
        return
      }
      
      const customerInfo = {
        id: customerSnap.id,
        ...customerSnap.data()
      }
      
      setCustomerData(customerInfo)
      setEditingCustomer(customerInfo)
      
      // Additional data will be fetched here
      await fetchMerchantConnections(params.customerId)
      
      setLoading(false)
    } catch (error) {
      console.error("Error fetching customer data:", error)
      setLoading(false)
    }
  }
  
  const fetchMerchantConnections = async (customerId: string) => {
    try {
      // Fetch merchant connections
      const merchantsRef = collection(db, "merchants")
      const merchantsSnap = await getDocs(merchantsRef)
      
      const connections: any[] = []
      
      for (const merchantDoc of merchantsSnap.docs) {
        const merchantId = merchantDoc.id
        const merchantData = merchantDoc.data()
        
        // Check if this customer exists in the merchant's customers collection
        const customerMerchantRef = doc(db, `merchants/${merchantId}/customers`, customerId)
        const customerMerchantSnap = await getDoc(customerMerchantRef)
        
        if (customerMerchantSnap.exists()) {
          connections.push({
            merchantId,
            merchantName: merchantData.tradingName || merchantData.merchantName || merchantId,
            logoUrl: merchantData.logoUrl,
            customerData: customerMerchantSnap.data()
          })
          
          // Fetch transactions for this merchant-customer pair
          await fetchTransactions(merchantId, customerId)
          await fetchRedemptions(merchantId, customerId)
        }
      }
      
      setMerchantConnections(connections)
    } catch (error) {
      console.error("Error fetching merchant connections:", error)
    }
  }
  
  const fetchTransactions = async (merchantId: string, customerId: string) => {
    try {
      const transactionsRef = collection(db, "merchants", merchantId, "transactions")
      const transactionsQuery = query(
        transactionsRef,
        where("customerId", "==", customerId),
        orderBy("createdAt", "desc")
      )
      
      const transactionsSnap = await getDocs(transactionsQuery)
      
      const newTransactions = transactionsSnap.docs.map(doc => ({
        id: doc.id,
        merchantId,
        ...doc.data()
      }))
      
      setTransactions(prev => [...prev, ...newTransactions])
    } catch (error) {
      console.error("Error fetching transactions:", error)
    }
  }
  
  const fetchRedemptions = async (merchantId: string, customerId: string) => {
    try {
      const redemptionsRef = collection(db, `customers/${customerId}/redemptions`)
      const redemptionsQuery = query(
        redemptionsRef,
        where("merchantId", "==", merchantId),
        orderBy("redemptionDate", "desc")
      )
      
      const redemptionsSnap = await getDocs(redemptionsQuery)
      
      const newRedemptions = redemptionsSnap.docs.map(doc => ({
        id: doc.id,
        merchantId,
        ...doc.data()
      }))
      
      setRedemptions(prev => [...prev, ...newRedemptions])
    } catch (error) {
      console.error("Error fetching redemptions:", error)
    }
  }
  
  const handleUpdateCustomer = async () => {
    try {
      if (!editingCustomer) return
      
      const customerRef = doc(db, "customers", params.customerId)
      await updateDoc(customerRef, editingCustomer)
      
      setCustomerData(editingCustomer)
      setIsEditDialogOpen(false)
      
      toast({
        title: "Success",
        description: "Customer information updated successfully",
      })
    } catch (error) {
      console.error("Error updating customer:", error)
      toast({
        title: "Error",
        description: "Failed to update customer information",
        variant: "destructive"
      })
    }
  }
  
  const handleFieldChange = (field: string, value: any) => {
    setEditingCustomer((prev: any) => ({
      ...prev,
      [field]: value
    }))
  }

  const formatDate = (timestamp: any) => {
    if (!timestamp) return 'N/A'
    
    try {
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
      return format(date, 'MMM d, yyyy h:mm a')
    } catch (error) {
      return 'Invalid date'
    }
  }

  const handleEditMerchantCustomer = (connection: any) => {
    setSelectedMerchantConnection(connection)
    setEditingMerchantCustomer({ ...connection.customerData })
    setIsEditMerchantDialogOpen(true)
  }
  
  const handleMerchantCustomerFieldChange = (field: string, value: any) => {
    setEditingMerchantCustomer((prev: any) => ({
      ...prev,
      [field]: value
    }))
  }
  
  const handleMerchantCustomerCohortChange = (cohort: string, value: boolean) => {
    setEditingMerchantCustomer((prev: any) => {
      const cohorts = { ...(prev.cohorts || {}) }
      if (value) {
        cohorts[cohort] = true
      } else {
        delete cohorts[cohort]
      }
      return { ...prev, cohorts }
    })
  }

  const handleUpdateMerchantCustomer = async () => {
    try {
      if (!editingMerchantCustomer || !selectedMerchantConnection) return
      
      const customerMerchantRef = doc(
        db, 
        `merchants/${selectedMerchantConnection.merchantId}/customers`, 
        params.customerId
      )
      
      await updateDoc(customerMerchantRef, editingMerchantCustomer)
      
      // Update the merchant connection in state
      setMerchantConnections(prev => 
        prev.map(connection => 
          connection.merchantId === selectedMerchantConnection.merchantId 
            ? { ...connection, customerData: editingMerchantCustomer } 
            : connection
        )
      )
      
      setIsEditMerchantDialogOpen(false)
      
      toast({
        title: "Success",
        description: "Customer merchant data updated successfully",
      })
    } catch (error) {
      console.error("Error updating merchant customer data:", error)
      toast({
        title: "Error",
        description: "Failed to update merchant customer data",
        variant: "destructive"
      })
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center mb-8">
            <Skeleton className="h-10 w-32 mr-4" />
            <Skeleton className="h-8 w-80" />
          </div>
          <Skeleton className="h-[600px] w-full rounded-lg" />
        </div>
      </div>
    )
  }

  if (!customerData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center p-8 bg-white rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-4">Customer Not Found</h1>
          <p className="mb-6">The customer with ID {params.customerId} could not be found.</p>
          <Button onClick={() => router.push("/admin")}>
            Return to Admin
          </Button>
        </div>
      </div>
    )
  }

  // Will implement the UI later
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="flex items-center mb-8">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => router.push("/admin")}
            className="mr-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Admin
          </Button>
          
          <div className="flex items-center">
            <div className="h-16 w-16 rounded-full bg-[#007AFF]/10 flex items-center justify-center overflow-hidden mr-4">
              {customerData.profilePictureUrl ? (
                <img 
                  src={customerData.profilePictureUrl} 
                  alt={customerData.fullName || `${customerData.firstName} ${customerData.lastName}`}
                  className="w-full h-full object-cover"
                  onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                />
              ) : (
                <User className="h-8 w-8 text-[#007AFF]" />
              )}
            </div>
            <div>
              <h1 className="text-3xl font-bold">
                {customerData.fullName || `${customerData.firstName || ''} ${customerData.lastName || ''}`}
              </h1>
              <div className="flex items-center mt-1">
                <span className="text-sm text-gray-500">
                  {customerData.email || 'No email provided'}
                </span>
                <Button 
                  variant="outline"
                  size="sm"
                  className="ml-4"
                  onClick={() => setIsEditDialogOpen(true)}
                >
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Customer
                </Button>
              </div>
            </div>
          </div>
        </div>

        <Tabs defaultValue="profile" className="w-full">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="profile">Profile</TabsTrigger>
            <TabsTrigger value="merchants">Merchant Connections</TabsTrigger>
            <TabsTrigger value="transactions">Transactions</TabsTrigger>
            <TabsTrigger value="redemptions">Redemptions</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>
          
          <TabsContent value="profile" className="mt-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="md:col-span-1">
                <CardHeader>
                  <CardTitle>Personal Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Full Name</div>
                      <div>{customerData.fullName || `${customerData.firstName || ''} ${customerData.lastName || ''}`}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium text-gray-500">Email</div>
                      <div>{customerData.email || '—'}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium text-gray-500">Phone</div>
                      <div>{customerData.mobileNumber || customerData.phone || '—'}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium text-gray-500">Gender</div>
                      <div>{customerData.gender || '—'}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium text-gray-500">Age Group</div>
                      <div>{customerData.ageGroup || '—'}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium text-gray-500">Occupation</div>
                      <div>{customerData.occupation || '—'}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle>Loyalty Program Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    <div className="text-center p-4 bg-blue-50 rounded-md">
                      <div className="text-2xl font-bold text-blue-600">{customerData.tapPoints || 0}</div>
                      <div className="text-xs text-gray-500">Points Balance</div>
                    </div>
                    
                    <div className="text-center p-4 bg-green-50 rounded-md">
                      <div className="text-2xl font-bold text-green-600">
                        {merchantConnections.reduce((sum, connection) => 
                          sum + (connection.customerData.totalLifetimeSpend || 0), 0).toFixed(2)}
                      </div>
                      <div className="text-xs text-gray-500">Lifetime Spend ($)</div>
                    </div>
                    
                    <div className="text-center p-4 bg-purple-50 rounded-md">
                      <div className="text-2xl font-bold text-purple-600">
                        {merchantConnections.reduce((sum, connection) => 
                          sum + (connection.customerData.lifetimeTransactionCount || 0), 0)}
                      </div>
                      <div className="text-xs text-gray-500">Total Transactions</div>
                    </div>
                    
                    <div className="text-center p-4 bg-amber-50 rounded-md">
                      <div className="text-2xl font-bold text-amber-600">{customerData.totalRedemptions || 0}</div>
                      <div className="text-xs text-gray-500">Rewards Redeemed</div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium mb-2">Customer Created</div>
                    <p>{formatDate(customerData.createdAt)}</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="merchants" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Merchant Connections</CardTitle>
                <CardDescription>Merchants this customer has engaged with</CardDescription>
              </CardHeader>
              <CardContent>
                {merchantConnections.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    No merchant connections found for this customer
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {merchantConnections.map((connection) => (
                      <Card key={connection.merchantId} className="overflow-hidden">
                        <div className="p-4 border-b bg-gray-50 flex items-center">
                          <div className="w-10 h-10 rounded overflow-hidden bg-white flex items-center justify-center mr-3">
                            {connection.logoUrl ? (
                              <img 
                                src={connection.logoUrl} 
                                alt={connection.merchantName} 
                                className="w-full h-full object-cover"
                                onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                              />
                            ) : (
                              <Store className="h-5 w-5 text-gray-400" />
                            )}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h3 className="font-medium truncate">{connection.merchantName}</h3>
                            <div className="text-xs text-gray-500 truncate">{connection.merchantId}</div>
                          </div>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon" className="h-8 w-8">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => handleEditMerchantCustomer(connection)}>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit Customer
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => router.push(`/admin/${connection.merchantId}`)}>
                                <Store className="h-4 w-4 mr-2" />
                                View Merchant
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                        <CardContent className="p-4">
                          <div className="grid grid-cols-2 gap-2 text-sm mb-3">
                            <div>
                              <div className="text-xs text-gray-500">Points Balance</div>
                              <div>{connection.customerData.pointsBalance || 0}</div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">Lifetime Spend</div>
                              <div>${connection.customerData.totalLifetimeSpend?.toFixed(2) || '0.00'}</div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">Transactions</div>
                              <div>{connection.customerData.lifetimeTransactionCount || 0}</div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-500">Last Visit</div>
                              <div>{formatDate(connection.customerData.lastTransactionDate) || 'Never'}</div>
                            </div>
                          </div>

                          {/* Customer Cohorts */}
                          {connection.customerData.cohorts && Object.keys(connection.customerData.cohorts).length > 0 && (
                            <div className="mt-2">
                              <div className="text-xs text-gray-500 mb-1">Cohorts</div>
                              <div className="flex flex-wrap gap-1">
                                {Object.keys(connection.customerData.cohorts).map(cohort => (
                                  <Badge key={cohort} variant="secondary" className="text-xs">
                                    {cohort}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                          
                          {/* First Purchase */}
                          {connection.customerData.firstTransactionDate && (
                            <div className="mt-2">
                              <div className="text-xs text-gray-500">First Purchase</div>
                              <div className="text-xs">
                                {formatDate(connection.customerData.firstTransactionDate)}
                                {connection.customerData.daysSinceFirstPurchase && (
                                  <span className="text-gray-500 ml-1">
                                    ({connection.customerData.daysSinceFirstPurchase} days ago)
                                  </span>
                                )}
                              </div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="transactions" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Transaction History</CardTitle>
                <CardDescription>All transactions across all merchants</CardDescription>
              </CardHeader>
              <CardContent>
                {transactions.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    No transactions found for this customer
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Merchant</TableHead>
                        <TableHead>Type</TableHead>
                        <TableHead>Amount</TableHead>
                        <TableHead>Points</TableHead>
                        <TableHead>Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {transactions.map((transaction) => {
                        const merchant = merchantConnections.find(m => m.merchantId === transaction.merchantId);
                        return (
                          <TableRow key={transaction.id}>
                            <TableCell>{formatDate(transaction.createdAt)}</TableCell>
                            <TableCell>{merchant?.merchantName || transaction.merchantId}</TableCell>
                            <TableCell>{transaction.type || 'purchase'}</TableCell>
                            <TableCell>${transaction.amount?.toFixed(2) || '0.00'}</TableCell>
                            <TableCell>{transaction.pointsEarned || 0}</TableCell>
                            <TableCell>
                              <Badge variant={transaction.status === 'completed' ? 'default' : 'secondary'}>
                                {transaction.status || 'completed'}
                              </Badge>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="redemptions" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Redemption History</CardTitle>
                <CardDescription>All rewards redeemed by this customer</CardDescription>
              </CardHeader>
              <CardContent>
                {redemptions.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    No redemptions found for this customer
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Merchant</TableHead>
                        <TableHead>Reward</TableHead>
                        <TableHead>Points Used</TableHead>
                        <TableHead>Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {redemptions.map((redemption) => {
                        const merchant = merchantConnections.find(m => m.merchantId === redemption.merchantId);
                        return (
                          <TableRow key={redemption.id}>
                            <TableCell>{formatDate(redemption.redemptionDate)}</TableCell>
                            <TableCell>{merchant?.merchantName || redemption.merchantId}</TableCell>
                            <TableCell>{redemption.rewardName || 'Unknown Reward'}</TableCell>
                            <TableCell>{redemption.pointsUsed || 0}</TableCell>
                            <TableCell>
                              <Badge variant={redemption.status === 'successful' ? 'default' : 'secondary'}>
                                {redemption.status || 'successful'}
                              </Badge>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="settings" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Additional Information</CardTitle>
                <CardDescription>Other customer details and settings</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Account Details</h3>
                    <div className="space-y-3">
                      <div>
                        <div className="text-sm font-medium text-gray-500">Customer ID</div>
                        <div className="font-mono text-sm">{customerData.id}</div>
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">Sign-in Method</div>
                        <div>{customerData.signInMethod || 'Unknown'}</div>
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">FCM Token</div>
                        <div className="truncate max-w-xs font-mono text-xs">
                          {customerData.fcmToken ? customerData.fcmToken.substring(0, 20) + '...' : 'None'}
                        </div>
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">Created At</div>
                        <div>{formatDate(customerData.createdAt)}</div>
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">Updated At</div>
                        <div>{formatDate(customerData.updatedAt)}</div>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-4">Preferences & Interests</h3>
                    <div className="space-y-3">
                      <div>
                        <div className="text-sm font-medium text-gray-500">Interests</div>
                        {customerData.interests && customerData.interests.length > 0 ? (
                          <div className="flex flex-wrap gap-2 mt-1">
                            {customerData.interests.map((interest: string) => (
                              <Badge key={interest} variant="outline">{interest}</Badge>
                            ))}
                          </div>
                        ) : (
                          <div>No interests specified</div>
                        )}
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">Business Preferences</div>
                        {customerData.businessPreferences && customerData.businessPreferences.length > 0 ? (
                          <div className="flex flex-wrap gap-2 mt-1">
                            {customerData.businessPreferences.map((preference: string) => (
                              <Badge key={preference} variant="outline">{preference}</Badge>
                            ))}
                          </div>
                        ) : (
                          <div>No business preferences specified</div>
                        )}
                      </div>
                      
                      <div>
                        <div className="text-sm font-medium text-gray-500">Last Known Location</div>
                        {customerData.lastKnownLocation ? (
                          <div>
                            {customerData.lastKnownLocation.suburb || 'Unknown location'}
                            {customerData.lastKnownLocation.updatedAt && 
                              ` (${formatDate(customerData.lastKnownLocation.updatedAt)})`}
                          </div>
                        ) : (
                          <div>No location data</div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
      
      {/* Edit Customer Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Customer</DialogTitle>
            <DialogDescription>
              Make changes to the customer information here.
            </DialogDescription>
          </DialogHeader>
          
          {editingCustomer && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
              <div>
                <Label htmlFor="fullName">Full Name</Label>
                <Input
                  id="fullName"
                  value={editingCustomer.fullName || ''}
                  onChange={(e) => handleFieldChange("fullName", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={editingCustomer.email || ''}
                  onChange={(e) => handleFieldChange("email", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="mobileNumber">Phone Number</Label>
                <Input
                  id="mobileNumber"
                  value={editingCustomer.mobileNumber || editingCustomer.phone || ''}
                  onChange={(e) => handleFieldChange("mobileNumber", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="gender">Gender</Label>
                <Input
                  id="gender"
                  value={editingCustomer.gender || ''}
                  onChange={(e) => handleFieldChange("gender", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="ageGroup">Age Group</Label>
                <Input
                  id="ageGroup"
                  value={editingCustomer.ageGroup || ''}
                  onChange={(e) => handleFieldChange("ageGroup", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="occupation">Occupation</Label>
                <Input
                  id="occupation"
                  value={editingCustomer.occupation || ''}
                  onChange={(e) => handleFieldChange("occupation", e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="tapPoints">Points Balance</Label>
                <Input
                  id="tapPoints"
                  type="number"
                  value={editingCustomer.tapPoints || 0}
                  onChange={(e) => handleFieldChange("tapPoints", parseInt(e.target.value) || 0)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="profilePictureUrl">Profile Picture URL</Label>
                <Input
                  id="profilePictureUrl"
                  value={editingCustomer.profilePictureUrl || ''}
                  onChange={(e) => handleFieldChange("profilePictureUrl", e.target.value)}
                  className="mt-1"
                />
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUpdateCustomer}>
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Edit Merchant Customer Dialog */}
      <Dialog open={isEditMerchantDialogOpen} onOpenChange={setIsEditMerchantDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              Edit Customer Data for {selectedMerchantConnection?.merchantName || 'Merchant'}
            </DialogTitle>
            <DialogDescription>
              Make changes to the customer's merchant-specific information.
            </DialogDescription>
          </DialogHeader>
          
          {editingMerchantCustomer && selectedMerchantConnection && (
            <div className="space-y-6 py-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Customer Cohorts</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {['newCustomer', 'highValue', 'active', 'atRisk', 'dormant', 'loyal'].map(cohort => (
                    <div key={cohort} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id={`cohort-${cohort}`}
                        checked={editingMerchantCustomer.cohorts && editingMerchantCustomer.cohorts[cohort] || false}
                        onChange={(e) => handleMerchantCustomerCohortChange(cohort, e.target.checked)}
                        className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <Label htmlFor={`cohort-${cohort}`} className="text-sm">{cohort}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="pointsBalance">Points Balance</Label>
                  <Input
                    id="pointsBalance"
                    type="number"
                    value={editingMerchantCustomer.pointsBalance || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("pointsBalance", parseInt(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="membershipTier">Membership Tier</Label>
                  <Input
                    id="membershipTier"
                    value={editingMerchantCustomer.membershipTier || ''}
                    onChange={(e) => handleMerchantCustomerFieldChange("membershipTier", e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="totalLifetimeSpend">Lifetime Spend</Label>
                  <Input
                    id="totalLifetimeSpend"
                    type="number"
                    step="0.01"
                    value={editingMerchantCustomer.totalLifetimeSpend || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("totalLifetimeSpend", parseFloat(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="lifetimeTransactionCount">Transaction Count</Label>
                  <Input
                    id="lifetimeTransactionCount"
                    type="number"
                    value={editingMerchantCustomer.lifetimeTransactionCount || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("lifetimeTransactionCount", parseInt(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="daysSinceFirstPurchase">Days Since First Purchase</Label>
                  <Input
                    id="daysSinceFirstPurchase"
                    type="number"
                    value={editingMerchantCustomer.daysSinceFirstPurchase || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("daysSinceFirstPurchase", parseInt(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="daysSinceLastVisit">Days Since Last Visit</Label>
                  <Input
                    id="daysSinceLastVisit"
                    type="number"
                    value={editingMerchantCustomer.daysSinceLastVisit || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("daysSinceLastVisit", parseInt(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="highestTransactionAmount">Highest Transaction Amount</Label>
                  <Input
                    id="highestTransactionAmount"
                    type="number"
                    step="0.01"
                    value={editingMerchantCustomer.highestTransactionAmount || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("highestTransactionAmount", parseFloat(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="redemptionCount">Redemption Count</Label>
                  <Input
                    id="redemptionCount"
                    type="number"
                    value={editingMerchantCustomer.redemptionCount || 0}
                    onChange={(e) => handleMerchantCustomerFieldChange("redemptionCount", parseInt(e.target.value) || 0)}
                    className="mt-1"
                  />
                </div>
              </div>
              
              {/* Transaction IDs (read-only) */}
              <div>
                <h3 className="text-sm font-medium mb-2">Transaction IDs (Read Only)</h3>
                <div className="grid grid-cols-1 gap-2">
                  <div>
                    <Label htmlFor="firstTransactionId" className="text-xs text-gray-500">First Transaction ID</Label>
                    <Input
                      id="firstTransactionId"
                      value={editingMerchantCustomer.firstTransactionId || ''}
                      readOnly
                      className="mt-1 bg-gray-50 text-gray-500 text-xs font-mono"
                    />
                  </div>
                  <div>
                    <Label htmlFor="lastTransactionId" className="text-xs text-gray-500">Last Transaction ID</Label>
                    <Input
                      id="lastTransactionId"
                      value={editingMerchantCustomer.lastTransactionId || ''}
                      readOnly
                      className="mt-1 bg-gray-50 text-gray-500 text-xs font-mono"
                    />
                  </div>
                </div>
              </div>
              
              {/* Additional custom fields */}
              <div>
                <h3 className="text-sm font-medium mb-2">Additional Fields</h3>
                <div className="grid grid-cols-1 gap-2">
                  {Object.entries(editingMerchantCustomer)
                    .filter(([key]) => 
                      !['pointsBalance', 'membershipTier', 'totalLifetimeSpend', 'lifetimeTransactionCount', 
                        'daysSinceFirstPurchase', 'daysSinceLastVisit', 'highestTransactionAmount', 'redemptionCount',
                        'firstTransactionId', 'lastTransactionId', 'firstTransactionDate', 'lastTransactionDate',
                        'merchantId', 'customerId', 'id', 'cohorts'].includes(key) && 
                      typeof editingMerchantCustomer[key] !== 'object')
                    .map(([key, value]) => (
                      <div key={key}>
                        <Label htmlFor={`custom-${key}`} className="text-xs text-gray-500 capitalize">
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                        </Label>
                        <Input
                          id={`custom-${key}`}
                          value={value !== null && value !== undefined ? String(value) : ''}
                          onChange={(e) => handleMerchantCustomerFieldChange(key, e.target.value)}
                          className="mt-1"
                        />
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditMerchantDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUpdateMerchantCustomer}>
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { doc, getDoc } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { useRouter } from "next/navigation"
import { ArrowLeft } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export default function MerchantDetails({ params }: { params: { merchantId: string } }) {
  const router = useRouter()
  const [merchantData, setMerchantData] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchMerchantData() {
      try {
        setLoading(true)
        const merchantRef = doc(db, "merchants", params.merchantId)
        const merchantDoc = await getDoc(merchantRef)
        
        if (merchantDoc.exists()) {
          setMerchantData({
            id: merchantDoc.id,
            ...merchantDoc.data()
          })
        } else {
          console.error("Merchant not found")
        }
      } catch (error) {
        console.error("Error fetching merchant data:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchMerchantData()
  }, [params.merchantId])

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center mb-8">
            <Skeleton className="h-10 w-32 mr-4" />
            <Skeleton className="h-8 w-80" />
          </div>
          <Skeleton className="h-[600px] w-full rounded-lg" />
        </div>
      </div>
    )
  }

  if (!merchantData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center p-8 bg-white rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-4">Merchant Not Found</h1>
          <p className="mb-6">The merchant with ID {params.merchantId} could not be found.</p>
          <Button onClick={() => router.push("/admin")}>
            Return to Merchant List
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="flex items-center mb-8">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => router.push("/admin")}
            className="mr-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Merchants
          </Button>
          
          <div className="flex items-center">
            {merchantData.logoUrl && (
              <div className="w-16 h-16 rounded-md overflow-hidden border mr-4 flex-shrink-0">
                <img 
                  src={merchantData.logoUrl} 
                  alt={`${merchantData.merchantName || merchantData.tradingName} logo`} 
                  className="w-full h-full object-cover"
                  onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                />
              </div>
            )}
            <div>
              <h1 className="text-3xl font-bold">{merchantData.tradingName || merchantData.merchantName}</h1>
              <div className="flex items-center mt-1">
                <Badge variant={merchantData.status === "active" ? "default" : "secondary"}>
                  {merchantData.status || "inactive"}
                </Badge>
                {merchantData.businessType && (
                  <span className="ml-2 text-sm text-gray-500">
                    {merchantData.businessType}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>

        <Tabs defaultValue="details" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="details">Details</TabsTrigger>
            <TabsTrigger value="contact">Contact & Location</TabsTrigger>
            <TabsTrigger value="settings">Business Settings</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
          </TabsList>
          
          <TabsContent value="details" className="mt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Business Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Trading Name</div>
                      <div>{merchantData.tradingName || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Legal Name</div>
                      <div>{merchantData.legalName || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">ABN</div>
                      <div>{merchantData.abn || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Business Type</div>
                      <div>{merchantData.businessType || "—"}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Account Details</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Merchant ID</div>
                      <div className="truncate">{merchantData.merchantId || merchantData.id || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Points Balance</div>
                      <div>{merchantData.merchantPoints || "0"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Onboarded</div>
                      <div>{merchantData.onboardingCompleted ? "Yes" : "No"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Last Updated</div>
                      <div>{merchantData.lastUpdated || "—"}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="contact" className="mt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Contact Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Primary Email</div>
                      <div>{merchantData.primaryEmail || merchantData.businessEmail || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Representative</div>
                      <div>{merchantData.representative?.name || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Phone</div>
                      <div>{merchantData.representative?.phone || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Representative Email</div>
                      <div>{merchantData.representative?.email || "—"}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Location</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Street</div>
                      <div>{merchantData.address?.street || merchantData.location?.address?.street || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Suburb</div>
                      <div>{merchantData.address?.suburb || merchantData.location?.address?.suburb || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">State & Postcode</div>
                      <div>
                        {(merchantData.address?.state || merchantData.location?.address?.state || "—")} {" "}
                        {(merchantData.address?.postcode || merchantData.location?.address?.postcode || "—")}
                      </div>
                    </div>
                    {merchantData.location?.coordinates && (
                      <div>
                        <div className="text-sm font-medium text-gray-500">Coordinates</div>
                        <div>
                          Lat: {merchantData.location.coordinates.latitude}, 
                          Long: {merchantData.location.coordinates.longitude}
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="settings" className="mt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Business Settings</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Default Multiplier</div>
                      <div>{merchantData.defaultMultiplier || "1"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Payment Provider</div>
                      <div>{merchantData.paymentProvider || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Point of Sale</div>
                      <div>{merchantData.pointOfSale || "—"}</div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Status</div>
                      <div>{merchantData.status || "inactive"}</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Rewards Settings</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Has Introductory Reward</div>
                      <div>{merchantData.hasIntroductoryReward ? "Yes" : "No"}</div>
                    </div>
                    {merchantData.hasIntroductoryReward && (
                      <div>
                        <div className="text-sm font-medium text-gray-500">Intro Reward ID</div>
                        <div className="truncate">{merchantData.introductoryRewardId || "—"}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="notifications" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Notification Settings</CardTitle>
                <CardDescription>
                  Configuration for which notifications the merchant receives
                </CardDescription>
              </CardHeader>
              <CardContent>
                {merchantData.notifications ? (
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {Object.entries(merchantData.notifications).map(([key, value]) => (
                      <div key={key} className="flex items-center gap-2">
                        <div className={`w-3 h-3 rounded-full ${value ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                        <span className="text-sm">{formatNotificationName(key)}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-gray-500">No notification settings found</p>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

function formatNotificationName(key: string): string {
  // Convert camelCase to readable format
  return key
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, (str) => str.toUpperCase())
} "use client"

import { useState, useEffect } from "react"
import { collection, getDocs, doc, getDoc, updateDoc, deleteDoc, addDoc } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { toast } from "@/components/ui/use-toast"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { ChevronDown, Edit, MoreHorizontal, Plus, Trash, ArrowLeft, ArrowUp, ArrowDown, CheckCircle, XCircle, User } from "lucide-react"
import Link from "next/link"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { 
  Select, 
  SelectContent, 
  SelectGroup, 
  SelectItem, 
  SelectLabel, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select"
import { useRouter } from "next/navigation"
import {
  Tabs,
  TabsList,
  TabsContent,
  TabsTrigger,
} from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"

interface Customer {
  id: string;
  abn?: string;
  ageGroup?: string;
  badge?: number;
  basicConsentId?: string;
  basicUserId?: string;
  businessPreferences?: string[];
  consumerID?: string;
  createdAt?: string;
  customerId?: string;
  email?: string;
  fcmToken?: string;
  firstName?: string;
  fullName?: string;
  gender?: string;
  hasActiveConnection?: boolean;
  interests?: string[];
  lastConnectionCheck?: string;
  lastConnectionId?: string;
  lastKnownLocation?: {
    latitude?: number;
    longitude?: number;
    suburb?: string;
    updatedAt?: string;
  };
  lastName?: string;
  lifetimeTapPoints?: number;
  location?: {
    address?: string;
    latitude?: number;
    longitude?: number;
    radius?: number;
    updatedAt?: string;
  };
  mobileNumber?: string;
  occupation?: string;
  profilePictureUrl?: string;
  referralCode?: string;
  signInMethod?: string;
  tapPoints?: number;
  totalRedemptions?: number;
  updatedAt?: string;
  [key: string]: any;
}

interface Merchant {
  id: string;
  abn?: string;
  address?: {
    postcode?: string;
    state?: string;
    street?: string;
    suburb?: string;
    country?: string;
    countryCode?: string;
    isoCountryCode?: string;
    subAdministrativeArea?: string;
    subLocality?: string;
  };
  businessEmail?: string;
  businessPhone?: string;
  businessType?: string;
  defaultMultiplier?: number;
  displayAddress?: string;
  hasIntroductoryReward?: boolean;
  inlandWater?: string;
  introductoryRewardId?: string;
  lastUpdated?: string;
  legalName?: string;
  location?: {
    address?: string;
    areaOfInterest?: string;
    coordinates?: {
      latitude?: number;
      longitude?: number;
    };
    displayAddress?: string;
  };
  logoUrl?: string;
  merchantId?: string;
  merchantName?: string;
  merchantPoints?: number;
  notifications?: {
    customerAnniversary?: boolean;
    customerBirthday?: boolean;
    customerFirstPurchase?: boolean;
    customerMilestone?: boolean;
    dailySummary?: boolean;
    lowInventory?: boolean;
    monthlySummary?: boolean;
    paymentIssues?: boolean;
    pointsAwarded?: boolean;
    rewardCreated?: boolean;
    rewardExpiring?: boolean;
    rewardRedeemed?: boolean;
    salesTarget?: boolean;
    securityAlerts?: boolean;
    systemUpdates?: boolean;
    weeklySummary?: boolean;
  };
  ocean?: string;
  onboardingCompleted?: boolean;
  onboardingCompletedAt?: string;
  operatingHours?: {
    monday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    tuesday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    wednesday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    thursday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    friday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    saturday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    sunday?: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    };
    [key: string]: {
      open?: string;
      close?: string;
      isClosed?: boolean;
    } | undefined;
  };
  paymentProvider?: string;
  pointOfSale?: string;
  primaryEmail?: string;
  representative?: {
    email?: string;
    name?: string;
    phone?: string;
  };
  status?: string;
  timeZone?: string;
  tradingName?: string;
  [key: string]: any;
}

interface FunctionConfig {
  name: string;
  schedule: string;
  timeZone: string;
  memory: string;
  timeoutSeconds: number;
  secrets: string[];
  enabled: boolean;
  description: string;
  code: string;
}

export default function AdminMerchants() {
  const router = useRouter();
  const [currentView, setCurrentView] = useState<'merchants' | 'customers' | 'functions'>('merchants');
  const [merchants, setMerchants] = useState<Merchant[]>([]);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [editingMerchant, setEditingMerchant] = useState<Merchant | null>(null);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [viewMode, setViewMode] = useState<'standard' | 'advanced'>('standard');
  const [editingCell, setEditingCell] = useState<{
    merchantId: string;
    field: string;
    value: any;
  } | null>(null);
  const [sortConfig, setSortConfig] = useState<{
    key: keyof Merchant | string;
    direction: 'ascending' | 'descending';
  } | null>(null);
  const [customerSortConfig, setCustomerSortConfig] = useState<{
    key: string;
    direction: 'ascending' | 'descending';
  } | null>(null);
  const [newMerchant, setNewMerchant] = useState<Partial<Merchant>>({
    tradingName: "",
    businessType: "",
    status: "active",
    address: {
      street: "",
      suburb: "",
      postcode: "",
      state: ""
    }
  });

  // State for functions tab
  const [functions, setFunctions] = useState<FunctionConfig[]>([{
    name: "createRewards",
    schedule: "0 */12 * * *",
    timeZone: "Australia/Melbourne",
    memory: "1GiB",
    timeoutSeconds: 540,
    secrets: ["OPENAI_API_KEY"],
    enabled: true,
    description: "Creates personalized rewards for customers every 12 hours",
    code: `const { OpenAI } = await import("openai");
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const MAX_WRITES_PER_BATCH = 500;
let batch = db.batch();
let writes = 0;

try {
  const merchantsSnap = await db.collection("merchants").get();
  logger.info(\`Found \${merchantsSnap.size} merchants.\`);

  for (const merchantDoc of merchantsSnap.docs) {
    const merchantId = merchantDoc.id;
    const merchantData = merchantDoc.data();
    const { businessInsights } = merchantData || {};

    const customersSnap = await db.collection(\`merchants/\${merchantId}/customers\`).get();
    if (customersSnap.empty) {
      logger.info(\`Merchant \${merchantId} has no customers → skipping\`);
      continue;
    }

    for (const customerDoc of customersSnap.docs) {
      const customerId = customerDoc.id;
      const customerData = customerDoc.data();

      // Count existing agent rewards for this customer for this merchant
      const rewardsSnap = await db
        .collection(\`customers/\${customerId}/rewards\`)
        .where("programtype", "==", "agent")
        .where("merchantId", "==", merchantId)
        .where("redeemable", "==", true)
        .where("visible", "==", true)
        .get();

      if (rewardsSnap.size >= 4) {
        logger.info(\`Customer \${customerId} at merchant \${merchantId} already has \${rewardsSnap.size} agent rewards → skipping\`);
        continue;
      }

      const numToCreate = 4 - rewardsSnap.size;

      const baseSpecs = [
        { conditionsType: "none", offeringType: "Discount Voucher" },
        { conditionsType: "none", offeringType: "Loyalty Bonus" },
        { conditionsType: "optional", offeringType: "Exclusive Access Pass" },
        { conditionsType: "optional", offeringType: "Free Gift" },
      ];
      const rewardSpecs = baseSpecs.slice(0, numToCreate);

      for (const spec of rewardSpecs) {
        const now = new Date();
        const expiry = new Date(now.getTime() + 12 * 60 * 60 * 1000); // 12 hours later

        const conditionInstruction =
          spec.conditionsType === "none"
            ? "This reward must have no conditions; return an empty conditions array."
            : "This reward can include conditions if they make sense based on the data.";

        const promptContent = \`Create a personalized reward for customer \${customerId} using these customer metrics: \${JSON.stringify(customerData)}.
Also consider the merchant's business insights: \${JSON.stringify(businessInsights)}.
\${conditionInstruction}
This reward is a \${spec.offeringType} offering. Generate a completely unique, creative, and distinct reward that differs from any other offering.
Limit to customerLimit = 1.
Ensure the reward title (rewardName) is fantastic, customer-facing, max 20 characters.
Ensure the reward description is enticing, customer-facing, max 50 characters.\`;

        const aiResponse = await openai.chat.completions.create({
          model: "gpt-4.1",
          messages: [
            {
              role: "system",
              content: "You are a conversational assistant helping users create reward programs for their customers.",
            },
            { role: "user", content: promptContent },
          ],
          tools: [
            {
              type: "function",
              function: {
                name: "create_reward",
                description: "Create a personalized reward",
                parameters: {
                  type: "object",
                  properties: {
                    rewardName: { type: "string" },
                    description: { type: "string" },
                    isActive: { type: "boolean" },
                    pointsCost: { type: "number" },
                    rewardVisibility: {
                      type: "string",
                      enum: ["global", "private"],
                    },
                    customers: {
                      type: "array",
                      items: { type: "string" },
                    },
                    voucherAmount: { type: "number" },
                    delayedVisibility: {
                      type: "object",
                      properties: {
                        type: { type: "string" },
                        value: { type: "number" },
                      },
                    },
                    conditions: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          type: {
                            type: "string",
                            enum: [
                              "minimumLifetimeSpend",
                              "minimumTransactions",
                              "maximumTransactions",
                              "minimumPointsBalance",
                              "membershipLevel",
                              "daysSinceJoined",
                              "daysSinceLastVisit",
                            ],
                          },
                          value: { type: "number" },
                        },
                      },
                    },
                    limitations: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          type: {
                            type: "string",
                            enum: ["customerLimit", "totalRedemptionLimit"],
                          },
                          value: { type: "number" },
                        },
                      },
                    },
                  },
                  required: [
                    "rewardName",
                    "description",
                    "isActive",
                    "pointsCost",
                    "rewardVisibility",
                    "customers",
                    "conditions",
                    "limitations",
                  ],
                },
              },
            },
          ],
          tool_choice: {
            type: "function",
            function: { name: "create_reward" },
          },
        });

        const toolCall = aiResponse.choices[0].message.tool_calls?.[0];
        if (!toolCall) {
          throw new Error(\`Invalid tool response for merchant \${merchantId}, customer \${customerId}\`);
        }

        const rewardJSON = JSON.parse(toolCall.function.arguments);

        // Enforce business logic
        rewardJSON.conditions = spec.conditionsType === "none" ? [] : rewardJSON.conditions;
        rewardJSON.limitations = [{ type: "customerLimit", value: 1 }];
        rewardJSON.programtype = "agent";
        rewardJSON.rewardVisibility = "global";
        rewardJSON.pin = "1111";
        rewardJSON.createdAt = now;
        rewardJSON.expiryDate = expiry;
        rewardJSON.customers = [customerId];

        // Write to Firestore
        const rewardId = db.collection("rewards").doc().id;

        batch.set(db.doc(\`merchants/\${merchantId}/rewards/\${rewardId}\`), rewardJSON);
        writes++;

        batch.set(db.doc(\`customers/\${customerId}/rewards/\${rewardId}\`), {
          ...rewardJSON,
          merchantId,
          redeemable: true,
          visible: true,
        });
        writes++;

        batch.set(db.doc(\`rewards/\${rewardId}\`), {
          ...rewardJSON,
          merchantId,
          redeemable: true,
          visible: true,
        });
        writes++;

        logger.info(\`Created reward \${rewardId} for merchant \${merchantId}, customer \${customerId}\`);

        if (writes >= MAX_WRITES_PER_BATCH) {
          logger.info(\`Committing batch of \${writes} writes.\`);
          await batch.commit();
          batch = db.batch();
          writes = 0;
        }
      }
    }
  }

  if (writes > 0) {
    logger.info(\`Final commit of \${writes} writes.\`);
    await batch.commit();
  }

  logger.info("✅ createRewards completed.");
} catch (err) {
  logger.error("❌ Error in createRewards:", err);
}`
  }]);
  const [editingFunction, setEditingFunction] = useState<FunctionConfig | null>(null);
  const [isEditFunctionDialogOpen, setIsEditFunctionDialogOpen] = useState(false);
  const [isAddFunctionDialogOpen, setIsAddFunctionDialogOpen] = useState(false);
  const [newFunction, setNewFunction] = useState<FunctionConfig>({
    name: "",
    schedule: "0 0 * * *", // Default to daily at midnight
    timeZone: "Australia/Melbourne",
    memory: "256MiB",
    timeoutSeconds: 60,
    secrets: [],
    enabled: true,
    description: "",
    code: ""
  });

  useEffect(() => {
    if (currentView === 'merchants') {
      fetchMerchants();
    } else {
      fetchCustomers();
    }
  }, [currentView]);

  const fetchMerchants = async () => {
    try {
      setLoading(true);
      const merchantsCollection = collection(db, "merchants");
      const merchantsSnapshot = await getDocs(merchantsCollection);
      const merchantsList = merchantsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Merchant[];
      
      setMerchants(merchantsList);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching merchants:", error);
      toast({
        title: "Error",
        description: "Failed to fetch merchants",
        variant: "destructive"
      });
      setLoading(false);
    }
  };

  const fetchCustomers = async () => {
    try {
      setLoading(true);
      const customersCollection = collection(db, "customers");
      const customersSnapshot = await getDocs(customersCollection);
      
      const customersList = await Promise.all(customersSnapshot.docs.map(async (docSnapshot) => {
        const customerData = docSnapshot.data();
        const customerId = docSnapshot.id;
        
        // For each customer, find their merchant-specific data for all merchants
        const merchantCustomerRefs = collection(db, "merchants");
        const merchantsSnapshot = await getDocs(merchantCustomerRefs);
        
        interface MerchantCustomerData {
          merchantId: string;
          merchantData: any;
          customerData: {
            totalLifetimeSpend?: number;
            lifetimeTransactionCount?: number;
            redemptionCount?: number;
            [key: string]: any;
          };
        }
        
        const merchantsData = await Promise.all(
          merchantsSnapshot.docs.map(async merchantDoc => {
            // Fix the reference to use customerId instead of doc.id
            const customerRef = doc(db, 'merchants', merchantDoc.id, 'customers', customerId);
            const customerSnap = await getDoc(customerRef);
            if (customerSnap.exists()) {
              return {
                merchantId: merchantDoc.id,
                merchantData: merchantDoc.data(),
                customerData: customerSnap.data()
              } as MerchantCustomerData;
            }
            return null;
          })
        );
        
        // Filter out null values and get relevant stats
        const validMerchantData = merchantsData.filter((data): data is MerchantCustomerData => data !== null);
        
        // Calculate aggregate statistics across all merchants
        const totalLifetimeSpend = validMerchantData.reduce(
          (total, data) => total + (data.customerData.totalLifetimeSpend || 0), 
          0
        );
        const totalTransactions = validMerchantData.reduce(
          (total, data) => total + (data.customerData.lifetimeTransactionCount || 0), 
          0
        );
        const totalRedemptions = validMerchantData.reduce(
          (total, data) => total + (data.customerData.redemptionCount || 0), 
          0
        );
        
        return {
          id: customerId,
          ...customerData,
          totalMerchants: validMerchantData.length,
          totalLifetimeSpend,
          totalTransactions,
          totalRedemptions,
          merchantConnections: validMerchantData.map(data => ({
            merchantId: data.merchantId,
            merchantName: data.merchantData.tradingName || data.merchantData.merchantName,
          }))
        };
      }));
      
      setCustomers(customersList);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching customers:", error);
      toast({
        title: "Error",
        description: "Failed to fetch customers",
        variant: "destructive"
      });
      setLoading(false);
    }
  };

  const handleEdit = (merchant: Merchant) => {
    setEditingMerchant(merchant);
    setIsEditDialogOpen(true);
  };

  const handleDelete = (merchant: Merchant) => {
    setEditingMerchant(merchant);
    setIsDeleteDialogOpen(true);
  };

  const handleUpdateMerchant = async () => {
    if (!editingMerchant) return;
    
    try {
      const merchantRef = doc(db, "merchants", editingMerchant.id);
      await updateDoc(merchantRef, editingMerchant);
      
      setMerchants(merchants.map(m => 
        m.id === editingMerchant.id ? editingMerchant : m
      ));
      
      toast({
        title: "Success",
        description: "Merchant updated successfully",
      });
      
      setIsEditDialogOpen(false);
    } catch (error) {
      console.error("Error updating merchant:", error);
      toast({
        title: "Error",
        description: "Failed to update merchant",
        variant: "destructive"
      });
    }
  };

  const handleDeleteMerchant = async () => {
    if (!editingMerchant) return;
    
    try {
      const merchantRef = doc(db, "merchants", editingMerchant.id);
      await deleteDoc(merchantRef);
      
      setMerchants(merchants.filter(m => m.id !== editingMerchant.id));
      
      toast({
        title: "Success",
        description: "Merchant deleted successfully",
      });
      
      setIsDeleteDialogOpen(false);
    } catch (error) {
      console.error("Error deleting merchant:", error);
      toast({
        title: "Error",
        description: "Failed to delete merchant",
        variant: "destructive"
      });
    }
  };

  const handleCreateMerchant = async () => {
    try {
      const merchantsCollection = collection(db, "merchants");
      const docRef = await addDoc(merchantsCollection, newMerchant);
      
      const newMerchantWithId = {
        id: docRef.id,
        ...newMerchant
      } as Merchant;
      
      setMerchants([...merchants, newMerchantWithId]);
      
      toast({
        title: "Success",
        description: "Merchant created successfully",
      });
      
      setIsCreateDialogOpen(false);
      setNewMerchant({
        tradingName: "",
        businessType: "",
        status: "active",
        address: {
          street: "",
          suburb: "",
          postcode: "",
          state: ""
        }
      });
    } catch (error) {
      console.error("Error creating merchant:", error);
      toast({
        title: "Error",
        description: "Failed to create merchant",
        variant: "destructive"
      });
    }
  };

  const handleFieldChange = (field: string, value: any) => {
    if (editingMerchant) {
      setEditingMerchant({
        ...editingMerchant,
        [field]: value
      });
    }
  };

  const handleAddressChange = (field: string, value: string) => {
    if (editingMerchant) {
      setEditingMerchant({
        ...editingMerchant,
        address: {
          ...editingMerchant.address,
          [field]: value
        }
      });
    }
  };

  const handleNewMerchantFieldChange = (field: string, value: any) => {
    setNewMerchant({
      ...newMerchant,
      [field]: value
    });
  };

  const handleNewMerchantAddressChange = (field: string, value: string) => {
    setNewMerchant({
      ...newMerchant,
      address: {
        ...newMerchant.address,
        [field]: value
      }
    });
  };

  const handleSort = (key: keyof Merchant | string) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    
    if (sortConfig && sortConfig.key === key) {
      direction = sortConfig.direction === 'ascending' ? 'descending' : 'ascending';
    }
    
    setSortConfig({ key, direction });
  };

  const getSortedMerchants = (merchantsToSort: Merchant[]) => {
    if (!sortConfig) return merchantsToSort;
    
    return [...merchantsToSort].sort((a, b) => {
      let aValue: any;
      let bValue: any;

      // Handle nested properties
      if (sortConfig.key === 'contact') {
        aValue = a.representative?.name || a.primaryEmail || a.businessEmail || '';
        bValue = b.representative?.name || b.primaryEmail || b.businessEmail || '';
      } else if (sortConfig.key === 'location') {
        aValue = a.address?.suburb || '';
        bValue = b.address?.suburb || '';
      } else if (typeof sortConfig.key === 'string' && sortConfig.key.includes('.')) {
        const keys = sortConfig.key.split('.');
        aValue = keys.reduce((obj: any, key: string) => obj?.[key] ?? '', a);
        bValue = keys.reduce((obj: any, key: string) => obj?.[key] ?? '', b);
      } else {
        // Handle merchantName and tradingName special case (fallback to the other if one is empty)
        if (sortConfig.key === 'merchantName') {
          aValue = a.merchantName || a.tradingName || '';
          bValue = b.merchantName || b.tradingName || '';
        } else if (sortConfig.key === 'tradingName') {
          aValue = a.tradingName || a.merchantName || '';
          bValue = b.tradingName || b.merchantName || '';
        } else {
          aValue = a[sortConfig.key as keyof Merchant] || '';
          bValue = b[sortConfig.key as keyof Merchant] || '';
        }
      }

      // Handle different types
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        // Ensure case-insensitive string comparison for proper alphabetical sorting
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      } else if (aValue === undefined || aValue === null) {
        aValue = ''; // Ensure undefined/null values are handled
      } else if (bValue === undefined || bValue === null) {
        bValue = ''; // Ensure undefined/null values are handled
      }

      if (aValue < bValue) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  };

  const filteredMerchants = merchants.filter(merchant => {
    const searchLower = searchTerm.toLowerCase();
    return (
      (merchant.merchantName || "").toLowerCase().includes(searchLower) ||
      (merchant.tradingName || "").toLowerCase().includes(searchLower) ||
      (merchant.merchantId || "").toLowerCase().includes(searchLower) ||
      (merchant.businessType || "").toLowerCase().includes(searchLower) ||
      (merchant.primaryEmail || "").toLowerCase().includes(searchLower) ||
      (merchant.address?.suburb || "").toLowerCase().includes(searchLower) ||
      (merchant.representative?.name || "").toLowerCase().includes(searchLower) ||
      (merchant.abn || "").toLowerCase().includes(searchLower)
    );
  });

  // Apply sorting after filtering
  const sortedMerchants = getSortedMerchants(filteredMerchants);

  const renderSortIcon = (columnKey: string) => {
    if (sortConfig?.key !== columnKey) {
      return <ChevronDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    return sortConfig.direction === 'ascending' ? (
      <ArrowUp className="h-4 w-4 ml-1" />
    ) : (
      <ArrowDown className="h-4 w-4 ml-1" />
    );
  };

  // Add a function to handle inline cell editing
  const handleCellEdit = (merchantId: string, field: string, value: any) => {
    setEditingCell({
      merchantId,
      field,
      value
    });
  };

  const saveCellEdit = async () => {
    if (!editingCell) return;

    try {
      const merchant = merchants.find(m => m.id === editingCell.merchantId);
      if (!merchant) return;

      // Handle nested fields like address.street
      if (editingCell.field.includes('.')) {
        const [parent, child] = editingCell.field.split('.');
        const updatedMerchant = {
          ...merchant,
          [parent]: {
            ...(merchant[parent] || {}),
            [child]: editingCell.value
          }
        };

        const merchantRef = doc(db, "merchants", merchant.id);
        await updateDoc(merchantRef, updatedMerchant);
        
        setMerchants(merchants.map(m => 
          m.id === merchant.id ? updatedMerchant : m
        ));
      } else {
        // Handle direct fields
        const updatedMerchant = {
          ...merchant,
          [editingCell.field]: editingCell.value
        };

        const merchantRef = doc(db, "merchants", merchant.id);
        await updateDoc(merchantRef, updatedMerchant);
        
        setMerchants(merchants.map(m => 
          m.id === merchant.id ? updatedMerchant : m
        ));
      }

      toast({
        title: "Success",
        description: "Field updated successfully",
      });
    } catch (error) {
      console.error("Error updating field:", error);
      toast({
        title: "Error",
        description: "Failed to update field",
        variant: "destructive"
      });
    } finally {
      setEditingCell(null);
    }
  };

  const cancelCellEdit = () => {
    setEditingCell(null);
  };

  // List of all possible merchant fields for advanced view
  const allMerchantFields = [
    { key: 'merchantName', label: 'Merchant Name' },
    { key: 'merchantId', label: 'Merchant ID' },
    { key: 'tradingName', label: 'Trading Name' },
    { key: 'legalName', label: 'Legal Name' },
    { key: 'businessType', label: 'Business Type' },
    { key: 'abn', label: 'ABN' },
    { key: 'status', label: 'Status' },
    { key: 'logoUrl', label: 'Logo URL' },
    { key: 'displayAddress', label: 'Display Address' },
    { key: 'businessEmail', label: 'Business Email' },
    { key: 'businessPhone', label: 'Business Phone' },
    { key: 'primaryEmail', label: 'Primary Email' },
    { key: 'address.street', label: 'Street' },
    { key: 'address.suburb', label: 'Suburb' },
    { key: 'address.postcode', label: 'Postcode' },
    { key: 'address.state', label: 'State' },
    { key: 'address.country', label: 'Country' },
    { key: 'address.countryCode', label: 'Country Code' },
    { key: 'address.isoCountryCode', label: 'ISO Country Code' },
    { key: 'address.subAdministrativeArea', label: 'Sub Administrative Area' },
    { key: 'address.subLocality', label: 'Sub Locality' },
    { key: 'location.address', label: 'Location Address' },
    { key: 'location.displayAddress', label: 'Location Display Address' },
    { key: 'location.areaOfInterest', label: 'Area of Interest' },
    { key: 'location.coordinates.latitude', label: 'Latitude' },
    { key: 'location.coordinates.longitude', label: 'Longitude' },
    { key: 'defaultMultiplier', label: 'Default Multiplier' },
    { key: 'merchantPoints', label: 'Merchant Points' },
    { key: 'pointOfSale', label: 'Point of Sale' },
    { key: 'paymentProvider', label: 'Payment Provider' },
    { key: 'inlandWater', label: 'Inland Water' },
    { key: 'ocean', label: 'Ocean' },
    { key: 'timeZone', label: 'Time Zone' },
    { key: 'onboardingCompleted', label: 'Onboarding Completed' },
    { key: 'onboardingCompletedAt', label: 'Onboarding Completed At' },
    { key: 'hasIntroductoryReward', label: 'Has Introductory Reward' },
    { key: 'introductoryRewardId', label: 'Introductory Reward ID' },
    { key: 'representative.name', label: 'Representative Name' },
    { key: 'representative.email', label: 'Representative Email' },
    { key: 'representative.phone', label: 'Representative Phone' }
  ];

  // Function to get value from a merchant object using a field path (e.g., "location.coordinates.latitude")
  const getNestedValue = (obj: any, path: string): any => {
    const keys = path.split('.');
    return keys.reduce((o, key) => (o || {})[key], obj);
  };

  // Function to render cell content based on field type
  const renderCellContent = (merchant: Merchant, field: string) => {
    const value = getNestedValue(merchant, field);
    
    // If this cell is being edited, show input
    if (editingCell && editingCell.merchantId === merchant.id && editingCell.field === field) {
      return (
        <div className="flex items-center space-x-1">
          <Input
            value={editingCell.value}
            onChange={(e) => setEditingCell({...editingCell, value: e.target.value})}
            autoFocus
            className="h-8 py-1"
          />
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={saveCellEdit}
            className="h-7 w-7 p-0"
          >
            <CheckCircle className="h-4 w-4 text-green-600" />
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={cancelCellEdit}
            className="h-7 w-7 p-0"
          >
            <XCircle className="h-4 w-4 text-red-600" />
          </Button>
        </div>
      );
    }
    
    // Handle different field types
    if (field === 'logoUrl') {
      return value ? (
        <div className="flex items-center">
          <div className="w-8 h-8 rounded overflow-hidden mr-2">
            <img 
              src={value} 
              alt="Logo" 
              className="w-full h-full object-cover"
              onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
            />
          </div>
          <span className="text-xs truncate max-w-[150px]">{value}</span>
        </div>
      ) : "—";
    }
    
    if (typeof value === 'boolean') {
      return (
        <Badge variant={value ? "default" : "secondary"}>
          {value ? "Yes" : "No"}
        </Badge>
      );
    }
    
    if (field === 'status') {
      return (
        <Badge variant={value === "active" ? "default" : "secondary"}>
          {value || "inactive"}
        </Badge>
      );
    }
    
    // Default rendering
    if (value === undefined || value === null) {
      return "—";
    }
    
    return String(value);
  };

  // Handle sorting for customers
  const handleCustomerSort = (key: string) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    
    if (customerSortConfig && customerSortConfig.key === key) {
      direction = customerSortConfig.direction === 'ascending' ? 'descending' : 'ascending';
    }
    
    setCustomerSortConfig({ key, direction });
  };

  // Get sorted customers
  const getSortedCustomers = (customersToSort: Customer[]) => {
    if (!customerSortConfig) return customersToSort;
    
    return [...customersToSort].sort((a, b) => {
      let aValue: any = a[customerSortConfig.key as keyof Customer] || '';
      let bValue: any = b[customerSortConfig.key as keyof Customer] || '';
      
      // Handle special cases
      if (customerSortConfig.key === 'fullName') {
        aValue = a.fullName || `${a.firstName || ''} ${a.lastName || ''}`.trim() || '';
        bValue = b.fullName || `${b.firstName || ''} ${b.lastName || ''}`.trim() || '';
      }
      
      // Handle numeric vs string comparisons
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return customerSortConfig.direction === 'ascending' ? aValue - bValue : bValue - aValue;
      }
      
      // Convert to string for comparison
      aValue = String(aValue).toLowerCase();
      bValue = String(bValue).toLowerCase();
      
      if (aValue < bValue) {
        return customerSortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (aValue > bValue) {
        return customerSortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  };

  // Filter customers based on search term
  const filteredCustomers = customers.filter(customer => {
    const searchLower = searchTerm.toLowerCase();
    const fullName = customer.fullName || `${customer.firstName || ''} ${customer.lastName || ''}`.trim();
    
    return (
      fullName.toLowerCase().includes(searchLower) ||
      (customer.email || '').toLowerCase().includes(searchLower) ||
      (customer.mobileNumber || '').includes(searchLower) ||
      (customer.customerId || '').toLowerCase().includes(searchLower)
    );
  });

  // Apply sorting to filtered customers
  const sortedCustomers = getSortedCustomers(filteredCustomers);

  // Render sort icon for customer table
  const renderCustomerSortIcon = (columnKey: string) => {
    if (customerSortConfig?.key !== columnKey) {
      return <ChevronDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    return customerSortConfig.direction === 'ascending' ? (
      <ArrowUp className="h-4 w-4 ml-1" />
    ) : (
      <ArrowDown className="h-4 w-4 ml-1" />
    );
  };

  // Function management handlers
  const handleEditFunction = (func: FunctionConfig) => {
    setEditingFunction({...func});
    setIsEditFunctionDialogOpen(true);
  };

  const handleUpdateFunction = () => {
    if (!editingFunction) return;
    
    // In a real app, this would call a Firebase Function to update the function code
    setFunctions(functions.map(f => 
      f.name === editingFunction.name ? editingFunction : f
    ));
    
    toast({
      title: "Success",
      description: "Function configuration updated successfully",
    });
    
    setIsEditFunctionDialogOpen(false);
  };

  const handleAddFunction = () => {
    // In a real app, this would call a Firebase Function to create a new function
    setFunctions([...functions, newFunction]);
    
    toast({
      title: "Success",
      description: "Function created successfully",
    });
    
    setIsAddFunctionDialogOpen(false);
    setNewFunction({
      name: "",
      schedule: "0 0 * * *",
      timeZone: "Australia/Melbourne",
      memory: "256MiB",
      timeoutSeconds: 60,
      secrets: [],
      enabled: true,
      description: "",
      code: ""
    });
  };

  const handleToggleFunctionStatus = (functionName: string, enabled: boolean) => {
    // In a real app, this would call a Firebase Function to enable/disable the function
    setFunctions(functions.map(f => 
      f.name === functionName ? {...f, enabled} : f
    ));
    
    toast({
      title: enabled ? "Function Enabled" : "Function Disabled",
      description: `Function ${functionName} has been ${enabled ? "enabled" : "disabled"}`,
    });
  };

  const handleDeleteFunction = (functionName: string) => {
    // In a real app, this would call a Firebase Function to delete the function
    setFunctions(functions.filter(f => f.name !== functionName));
    
    toast({
      title: "Success",
      description: `Function ${functionName} has been deleted`,
    });
  };

  // Function to safely get regex match results
  const safeRegexMatch = (regex: RegExp, text: string, defaultValue: string): string => {
    const match = text.match(regex);
    return match && match[1] ? match[1] : defaultValue;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center mb-8">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => router.push("/dashboard")}
            className="mr-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Button>
          <h1 className="text-3xl font-bold">Admin Portal</h1>
        </div>

        {/* Entity type tabs */}
        <Tabs 
          defaultValue="merchants" 
          className="mb-8" 
          onValueChange={(value) => setCurrentView(value as 'merchants' | 'customers' | 'functions')}
        >
          <TabsList className="grid w-full max-w-md grid-cols-3">
            <TabsTrigger value="merchants">Merchants</TabsTrigger>
            <TabsTrigger value="customers">Customers</TabsTrigger>
            <TabsTrigger value="functions">Functions</TabsTrigger>
          </TabsList>
        </Tabs>

        {/* Display the appropriate content based on currentView */}
        {currentView === 'merchants' && (
          <div className="bg-white p-6 rounded-lg shadow mb-8">
            <div className="flex justify-between mb-6">
              <div className="flex items-center gap-4">
                <div className="relative w-72">
                  <Input 
                    placeholder="Search merchants..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </div>
                
                <div className="flex items-center bg-gray-100 rounded-md p-1">
                  <Button 
                    variant={viewMode === 'standard' ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setViewMode('standard')}
                    className="text-xs h-8"
                  >
                    Standard View
                  </Button>
                  <Button 
                    variant={viewMode === 'advanced' ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setViewMode('advanced')}
                    className="text-xs h-8"
                  >
                    Advanced View
                  </Button>
                </div>
              </div>
              
              <Button onClick={() => setIsCreateDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Add Merchant
              </Button>
            </div>

            {loading ? (
              <div className="flex justify-center items-center h-64">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
              </div>
            ) : (
              <>
                {viewMode === 'standard' ? (
                  // Standard view with limited columns
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead 
                            className="w-[180px] cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('merchantName')}
                          >
                            <div className="flex items-center">
                              Merchant Name
                              {renderSortIcon('merchantName')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('merchantId')}
                          >
                            <div className="flex items-center">
                              Merchant ID
                              {renderSortIcon('merchantId')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('businessType')}
                          >
                            <div className="flex items-center">
                              Business Type
                              {renderSortIcon('businessType')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('abn')}
                          >
                            <div className="flex items-center">
                              ABN
                              {renderSortIcon('abn')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('contact')}
                          >
                            <div className="flex items-center">
                              Contact
                              {renderSortIcon('contact')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('location')}
                          >
                            <div className="flex items-center">
                              Location
                              {renderSortIcon('location')}
                            </div>
                          </TableHead>
                          <TableHead 
                            className="cursor-pointer hover:bg-gray-50"
                            onClick={() => handleSort('status')}
                          >
                            <div className="flex items-center">
                              Status
                              {renderSortIcon('status')}
                            </div>
                          </TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {sortedMerchants.length === 0 ? (
                          <TableRow>
                            <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                              {searchTerm ? "No merchants match your search" : "No merchants found"}
                            </TableCell>
                          </TableRow>
                        ) : (
                          sortedMerchants.map((merchant) => (
                            <TableRow key={merchant.id}>
                              <TableCell className="font-medium">
                                <div className="flex items-center gap-3">
                                  <div className="w-10 h-10 rounded border overflow-hidden flex-shrink-0 bg-gray-50">
                                    {merchant.logoUrl ? (
                                      <img 
                                        src={merchant.logoUrl} 
                                        alt={`${merchant.merchantName || merchant.tradingName} logo`} 
                                        className="w-full h-full object-cover"
                                        onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                                      />
                                    ) : (
                                      <div className="w-full h-full flex items-center justify-center text-gray-400">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                          <rect width="18" height="18" x="3" y="3" rx="2" ry="2"></rect>
                                          <circle cx="9" cy="9" r="2"></circle>
                                          <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"></path>
                                        </svg>
                                      </div>
                                    )}
                                  </div>
                                  <span>{merchant.merchantName || merchant.tradingName || "—"}</span>
                                </div>
                              </TableCell>
                              <TableCell className="font-mono text-xs">{merchant.merchantId || "—"}</TableCell>
                              <TableCell>{merchant.businessType || "—"}</TableCell>
                              <TableCell>{merchant.abn || "—"}</TableCell>
                              <TableCell>
                                <div className="text-sm">
                                  <div>{merchant.representative?.name || "—"}</div>
                                  <div className="text-gray-500">{merchant.primaryEmail || merchant.businessEmail || "—"}</div>
                                </div>
                              </TableCell>
                              <TableCell>
                                {merchant.address?.suburb ? (
                                  <div className="text-sm">
                                    <div>{merchant.address?.street}</div>
                                    <div className="text-gray-500">
                                      {merchant.address?.suburb}, {merchant.address?.state} {merchant.address?.postcode}
                                    </div>
                                  </div>
                                ) : (
                                  "—"
                                )}
                              </TableCell>
                              <TableCell>
                                <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  merchant.status === "active" 
                                    ? "bg-green-100 text-green-800" 
                                    : "bg-gray-100 text-gray-800"
                                }`}>
                                  {merchant.status || "inactive"}
                                </div>
                              </TableCell>
                              <TableCell className="text-right">
                                <DropdownMenu>
                                  <DropdownMenuTrigger asChild>
                                    <Button variant="ghost" size="sm">
                                      <MoreHorizontal className="h-4 w-4" />
                                    </Button>
                                  </DropdownMenuTrigger>
                                  <DropdownMenuContent align="end">
                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem onClick={() => handleEdit(merchant)}>
                                      <Edit className="h-4 w-4 mr-2" />
                                      Edit
                                    </DropdownMenuItem>
                                    <DropdownMenuItem 
                                      onClick={() => handleDelete(merchant)}
                                      className="text-red-600 focus:text-red-600"
                                    >
                                      <Trash className="h-4 w-4 mr-2" />
                                      Delete
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem 
                                      onClick={() => window.open(`/admin/${merchant.id}`, "_blank")}
                                    >
                                      View Details
                                    </DropdownMenuItem>
                                  </DropdownMenuContent>
                                </DropdownMenu>
                              </TableCell>
                            </TableRow>
                          ))
                        )}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  // Advanced view with all columns
                  <div className="overflow-x-auto">
                    <p className="text-sm text-gray-500 mb-2">Double-click any cell to edit its value</p>
                    <div className="border rounded-md max-h-[70vh] overflow-auto">
                      <Table>
                        <TableHeader className="sticky top-0 bg-white z-10">
                          <TableRow>
                            <TableHead className="w-[200px] sticky left-0 bg-white z-20 border-r">
                              Merchant
                            </TableHead>
                            {allMerchantFields.map(field => (
                              <TableHead 
                                key={field.key} 
                                className="cursor-pointer hover:bg-gray-50 whitespace-nowrap min-w-[120px]"
                                onClick={() => handleSort(field.key)}
                              >
                                <div className="flex items-center">
                                  {field.label}
                                  {renderSortIcon(field.key)}
                                </div>
                              </TableHead>
                            ))}
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {sortedMerchants.length === 0 ? (
                            <TableRow>
                              <TableCell colSpan={allMerchantFields.length + 1} className="text-center py-8 text-gray-500">
                                {searchTerm ? "No merchants match your search" : "No merchants found"}
                              </TableCell>
                            </TableRow>
                          ) : (
                            sortedMerchants.map((merchant) => (
                              <TableRow key={merchant.id}>
                                <TableCell className="font-medium sticky left-0 bg-white z-10 border-r">
                                  <div className="flex items-center gap-2">
                                    <div className="w-8 h-8 rounded border overflow-hidden flex-shrink-0 bg-gray-50">
                                      {merchant.logoUrl ? (
                                        <img 
                                          src={merchant.logoUrl} 
                                          alt="Logo" 
                                          className="w-full h-full object-cover"
                                          onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                                        />
                                      ) : (
                                        <div className="w-full h-full flex items-center justify-center text-gray-400">
                                          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                            <rect width="18" height="18" x="3" y="3" rx="2" ry="2"></rect>
                                            <circle cx="9" cy="9" r="2"></circle>
                                            <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"></path>
                                          </svg>
                                        </div>
                                      )}
                                    </div>
                                    <div className="truncate max-w-[140px]">
                                      {merchant.merchantName || merchant.tradingName || "Unknown Merchant"}
                                    </div>
                                  </div>
                                </TableCell>
                                
                                {allMerchantFields.map(field => (
                                  <TableCell 
                                    key={`${merchant.id}-${field.key}`}
                                    className="whitespace-nowrap"
                                    onDoubleClick={() => handleCellEdit(
                                      merchant.id, 
                                      field.key, 
                                      getNestedValue(merchant, field.key) || ""
                                    )}
                                  >
                                    {renderCellContent(merchant, field.key)}
                                  </TableCell>
                                ))}
                              </TableRow>
                            ))
                          )}
                        </TableBody>
                      </Table>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        )}

        {/* Customers Table View */}
        {currentView === 'customers' && (
          <div className="bg-white p-6 rounded-lg shadow mb-8">
            <div className="flex justify-between mb-6">
              <div className="flex items-center gap-4">
                <div className="relative w-72">
                  <Input 
                    placeholder="Search customers..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </div>
              </div>
            </div>

            {loading ? (
              <div className="flex justify-center items-center h-64">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead 
                        className="w-[200px] cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('fullName')}
                      >
                        <div className="flex items-center">
                          Customer
                          {renderCustomerSortIcon('fullName')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('email')}
                      >
                        <div className="flex items-center">
                          Email
                          {renderCustomerSortIcon('email')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('mobileNumber')}
                      >
                        <div className="flex items-center">
                          Phone
                          {renderCustomerSortIcon('mobileNumber')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('totalMerchants')}
                      >
                        <div className="flex items-center">
                          Merchants
                          {renderCustomerSortIcon('totalMerchants')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('totalTransactions')}
                      >
                        <div className="flex items-center">
                          Transactions
                          {renderCustomerSortIcon('totalTransactions')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('totalLifetimeSpend')}
                      >
                        <div className="flex items-center">
                          Lifetime Spend
                          {renderCustomerSortIcon('totalLifetimeSpend')}
                        </div>
                      </TableHead>
                      <TableHead 
                        className="cursor-pointer hover:bg-gray-50"
                        onClick={() => handleCustomerSort('totalRedemptions')}
                      >
                        <div className="flex items-center">
                          Redemptions
                          {renderCustomerSortIcon('totalRedemptions')}
                        </div>
                      </TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {sortedCustomers.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={8} className="text-center py-8 text-gray-500">
                          {searchTerm ? "No customers match your search" : "No customers found"}
                        </TableCell>
                      </TableRow>
                    ) : (
                      sortedCustomers.map((customer) => (
                        <TableRow key={customer.id}>
                          <TableCell className="font-medium">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-md bg-[#007AFF]/10 flex items-center justify-center flex-shrink-0 overflow-hidden">
                                {customer.profilePictureUrl ? (
                                  <img 
                                    src={customer.profilePictureUrl} 
                                    alt={customer.fullName || `${customer.firstName || ''} ${customer.lastName || ''}`.trim()}
                                    className="w-full h-full object-cover"
                                    onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                                  />
                                ) : (
                                  <User className="h-5 w-5 text-[#007AFF]" />
                                )}
                              </div>
                              <div>
                                <div className="font-medium">
                                  {customer.fullName || `${customer.firstName || ''} ${customer.lastName || ''}`.trim() || 'Unknown Customer'}
                                </div>
                                {customer.customerId && (
                                  <div className="text-xs text-muted-foreground font-mono">
                                    ID: {customer.customerId}
                                  </div>
                                )}
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>{customer.email || '—'}</TableCell>
                          <TableCell>{customer.mobileNumber || '—'}</TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">
                                {customer.totalMerchants || 0}
                              </Badge>
                            </div>
                          </TableCell>
                          <TableCell>{customer.totalTransactions || 0}</TableCell>
                          <TableCell>${(customer.totalLifetimeSpend || 0).toFixed(2)}</TableCell>
                          <TableCell>{customer.totalRedemptions || 0}</TableCell>
                          <TableCell className="text-right">
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem onClick={() => router.push(`/admin/customers/${customer.id}`)}>
                                  View Details
                                </DropdownMenuItem>
                                {customer.merchantConnections && customer.merchantConnections.length > 0 && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuLabel>Linked Merchants</DropdownMenuLabel>
                                    {customer.merchantConnections.map((connection: { merchantId: string; merchantName?: string }, index: number) => (
                                      <DropdownMenuItem 
                                        key={index}
                                        onClick={() => router.push(`/admin/${connection.merchantId}`)}
                                      >
                                        {connection.merchantName || connection.merchantId}
                                      </DropdownMenuItem>
                                    ))}
                                  </>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </div>
            )}
          </div>
        )}

        {/* Functions Tab View */}
        {currentView === 'functions' && (
          <div className="bg-white p-6 rounded-lg shadow mb-8">
            <div className="flex justify-between mb-6">
              <h2 className="text-xl font-semibold">Cloud Functions</h2>
              <Button onClick={() => setIsAddFunctionDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Add Function
              </Button>
            </div>

            {functions.length === 0 ? (
              <div className="text-center py-12 text-gray-500">
                No functions configured. Click "Add Function" to create one.
              </div>
            ) : (
              <div className="space-y-6">
                {functions.map((func) => (
                  <div key={func.name} className="border rounded-lg overflow-hidden">
                    <div className="p-4 flex items-center justify-between border-b bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className={`w-3 h-3 rounded-full ${func.enabled ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                        <h3 className="font-medium">{func.name}</h3>
                        <Badge variant="outline" className="ml-2">{func.schedule}</Badge>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button 
                          variant="ghost" 
                          size="sm"
                          className={func.enabled ? "text-red-600" : "text-green-600"}
                          onClick={() => handleToggleFunctionStatus(func.name, !func.enabled)}
                        >
                          {func.enabled ? "Disable" : "Enable"}
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleEditFunction(func)}
                        >
                          <Edit className="h-4 w-4 mr-1" />
                          Edit
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          className="text-red-600"
                          onClick={() => handleDeleteFunction(func.name)}
                        >
                          <Trash className="h-4 w-4 mr-1" />
                          Delete
                        </Button>
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <div className="mb-4">{func.description}</div>
                      
                      <div className="grid grid-cols-3 gap-4 text-sm mb-4">
                        <div>
                          <span className="font-medium block">Schedule:</span>
                          <span className="text-gray-600">{func.schedule}</span>
                        </div>
                        <div>
                          <span className="font-medium block">Memory:</span>
                          <span className="text-gray-600">{func.memory}</span>
                        </div>
                        <div>
                          <span className="font-medium block">Timeout:</span>
                          <span className="text-gray-600">{func.timeoutSeconds} seconds</span>
                        </div>
                        <div>
                          <span className="font-medium block">Timezone:</span>
                          <span className="text-gray-600">{func.timeZone}</span>
                        </div>
                        <div className="col-span-2">
                          <span className="font-medium block">Secrets:</span>
                          <span className="text-gray-600">
                            {func.secrets.length > 0 
                              ? func.secrets.map(s => <Badge key={s} variant="secondary" className="mr-1">{s}</Badge>) 
                              : "None"}
                          </span>
                        </div>
                      </div>
                      
                      <div className="mt-4">
                        <h4 className="font-medium mb-2">Function Code:</h4>
                        <div className="bg-gray-900 text-gray-50 p-4 rounded-md font-mono text-xs overflow-x-auto max-h-80 overflow-y-auto">
                          <pre className="whitespace-pre-wrap break-words">{func.code}</pre>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Edit Merchant Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Merchant</DialogTitle>
            <DialogDescription>
              Make changes to the merchant information here.
            </DialogDescription>
          </DialogHeader>
          
          {editingMerchant && (
            <Tabs defaultValue="basic">
              <TabsList className="grid w-full grid-cols-5 mb-4">
                <TabsTrigger value="basic">Basic Info</TabsTrigger>
                <TabsTrigger value="address">Address & Contact</TabsTrigger>
                <TabsTrigger value="business">Business Settings</TabsTrigger>
                <TabsTrigger value="hours">Operating Hours</TabsTrigger>
                <TabsTrigger value="notifications">Notifications</TabsTrigger>
              </TabsList>
              
              <TabsContent value="basic" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="col-span-2">
                    <Label htmlFor="logoUrl">Logo URL</Label>
                    <div className="flex gap-2 items-center">
                      <Input
                        id="logoUrl"
                        value={editingMerchant.logoUrl || ""}
                        onChange={(e) => handleFieldChange("logoUrl", e.target.value)}
                        className="flex-1"
                      />
                      {editingMerchant.logoUrl && (
                        <div className="w-12 h-12 rounded border overflow-hidden flex-shrink-0">
                          <img 
                            src={editingMerchant.logoUrl} 
                            alt="Logo preview" 
                            className="w-full h-full object-cover"
                            onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                          />
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <Label htmlFor="merchantName">Merchant Name</Label>
                    <Input
                      id="merchantName"
                      value={editingMerchant.merchantName || ""}
                      onChange={(e) => handleFieldChange("merchantName", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="tradingName">Trading Name</Label>
                    <Input
                      id="tradingName"
                      value={editingMerchant.tradingName || ""}
                      onChange={(e) => handleFieldChange("tradingName", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="legalName">Legal Name</Label>
                    <Input
                      id="legalName"
                      value={editingMerchant.legalName || ""}
                      onChange={(e) => handleFieldChange("legalName", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="businessType">Business Type</Label>
                    <Input
                      id="businessType"
                      value={editingMerchant.businessType || ""}
                      onChange={(e) => handleFieldChange("businessType", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="abn">ABN</Label>
                    <Input
                      id="abn"
                      value={editingMerchant.abn || ""}
                      onChange={(e) => handleFieldChange("abn", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="status">Status</Label>
                    <Select 
                      value={editingMerchant.status} 
                      onValueChange={(value) => handleFieldChange("status", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="inactive">Inactive</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="suspended">Suspended</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="merchantId">Merchant ID</Label>
                    <Input
                      id="merchantId"
                      value={editingMerchant.merchantId || ""}
                      onChange={(e) => handleFieldChange("merchantId", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="merchantPoints">Merchant Points</Label>
                    <Input
                      id="merchantPoints"
                      type="number"
                      value={editingMerchant.merchantPoints || 0}
                      onChange={(e) => handleFieldChange("merchantPoints", parseInt(e.target.value) || 0)}
                    />
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="address" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="street">Street</Label>
                    <Input
                      id="street"
                      value={editingMerchant.address?.street || ""}
                      onChange={(e) => handleAddressChange("street", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="suburb">Suburb</Label>
                    <Input
                      id="suburb"
                      value={editingMerchant.address?.suburb || ""}
                      onChange={(e) => handleAddressChange("suburb", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="postcode">Postcode</Label>
                    <Input
                      id="postcode"
                      value={editingMerchant.address?.postcode || ""}
                      onChange={(e) => handleAddressChange("postcode", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="state">State</Label>
                    <Select 
                      value={editingMerchant.address?.state} 
                      onValueChange={(value) => handleAddressChange("state", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select state" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="VIC">VIC</SelectItem>
                        <SelectItem value="NSW">NSW</SelectItem>
                        <SelectItem value="QLD">QLD</SelectItem>
                        <SelectItem value="WA">WA</SelectItem>
                        <SelectItem value="SA">SA</SelectItem>
                        <SelectItem value="TAS">TAS</SelectItem>
                        <SelectItem value="ACT">ACT</SelectItem>
                        <SelectItem value="NT">NT</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="country">Country</Label>
                    <Input
                      id="country"
                      value={editingMerchant.address?.country || ""}
                      onChange={(e) => handleAddressChange("country", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="countryCode">Country Code</Label>
                    <Input
                      id="countryCode"
                      value={editingMerchant.address?.countryCode || ""}
                      onChange={(e) => handleAddressChange("countryCode", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="isoCountryCode">ISO Country Code</Label>
                    <Input
                      id="isoCountryCode"
                      value={editingMerchant.address?.isoCountryCode || ""}
                      onChange={(e) => handleAddressChange("isoCountryCode", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="subAdministrativeArea">Sub Administrative Area</Label>
                    <Input
                      id="subAdministrativeArea"
                      value={editingMerchant.address?.subAdministrativeArea || ""}
                      onChange={(e) => handleAddressChange("subAdministrativeArea", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="subLocality">Sub Locality</Label>
                    <Input
                      id="subLocality"
                      value={editingMerchant.address?.subLocality || ""}
                      onChange={(e) => handleAddressChange("subLocality", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="displayAddress">Display Address</Label>
                    <Input
                      id="displayAddress"
                      value={editingMerchant.displayAddress || ""}
                      onChange={(e) => handleFieldChange("displayAddress", e.target.value)}
                    />
                  </div>
                </div>
                
                <div className="pt-4 border-t space-y-4">
                  <div className="text-sm font-medium">Location Details</div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="locationAddress">Location Address</Label>
                      <Input
                        id="locationAddress"
                        value={editingMerchant.location?.address || ""}
                        onChange={(e) => {
                          setEditingMerchant({
                            ...editingMerchant,
                            location: {
                              ...editingMerchant.location,
                              address: e.target.value
                            }
                          });
                        }}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="locationDisplayAddress">Location Display Address</Label>
                      <Input
                        id="locationDisplayAddress"
                        value={editingMerchant.location?.displayAddress || ""}
                        onChange={(e) => {
                          setEditingMerchant({
                            ...editingMerchant,
                            location: {
                              ...editingMerchant.location,
                              displayAddress: e.target.value
                            }
                          });
                        }}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="areaOfInterest">Area of Interest</Label>
                      <Input
                        id="areaOfInterest"
                        value={editingMerchant.location?.areaOfInterest || ""}
                        onChange={(e) => {
                          setEditingMerchant({
                            ...editingMerchant,
                            location: {
                              ...editingMerchant.location,
                              areaOfInterest: e.target.value
                            }
                          });
                        }}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="inlandWater">Inland Water</Label>
                      <Input
                        id="inlandWater"
                        value={editingMerchant.inlandWater || ""}
                        onChange={(e) => handleFieldChange("inlandWater", e.target.value)}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="ocean">Ocean</Label>
                      <Input
                        id="ocean"
                        value={editingMerchant.ocean || ""}
                        onChange={(e) => handleFieldChange("ocean", e.target.value)}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="timeZone">Time Zone</Label>
                      <Input
                        id="timeZone"
                        value={editingMerchant.timeZone || ""}
                        onChange={(e) => handleFieldChange("timeZone", e.target.value)}
                      />
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                  <div>
                    <Label htmlFor="primaryEmail">Primary Email</Label>
                    <Input
                      id="primaryEmail"
                      value={editingMerchant.primaryEmail || ""}
                      onChange={(e) => handleFieldChange("primaryEmail", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="businessEmail">Business Email</Label>
                    <Input
                      id="businessEmail"
                      value={editingMerchant.businessEmail || ""}
                      onChange={(e) => handleFieldChange("businessEmail", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="businessPhone">Business Phone</Label>
                    <Input
                      id="businessPhone"
                      value={editingMerchant.businessPhone || ""}
                      onChange={(e) => handleFieldChange("businessPhone", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="repName">Representative Name</Label>
                    <Input
                      id="repName"
                      value={editingMerchant.representative?.name || ""}
                      onChange={(e) => {
                        setEditingMerchant({
                          ...editingMerchant,
                          representative: {
                            ...editingMerchant.representative,
                            name: e.target.value
                          }
                        });
                      }}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="repPhone">Representative Phone</Label>
                    <Input
                      id="repPhone"
                      value={editingMerchant.representative?.phone || ""}
                      onChange={(e) => {
                        setEditingMerchant({
                          ...editingMerchant,
                          representative: {
                            ...editingMerchant.representative,
                            phone: e.target.value
                          }
                        });
                      }}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="repEmail">Representative Email</Label>
                    <Input
                      id="repEmail"
                      value={editingMerchant.representative?.email || ""}
                      onChange={(e) => {
                        setEditingMerchant({
                          ...editingMerchant,
                          representative: {
                            ...editingMerchant.representative,
                            email: e.target.value
                          }
                        });
                      }}
                    />
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="business" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="defaultMultiplier">Default Multiplier</Label>
                    <Input
                      id="defaultMultiplier"
                      type="number"
                      value={editingMerchant.defaultMultiplier || 1}
                      onChange={(e) => handleFieldChange("defaultMultiplier", parseFloat(e.target.value) || 1)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="pointOfSale">Point of Sale System</Label>
                    <Input
                      id="pointOfSale"
                      value={editingMerchant.pointOfSale || ""}
                      onChange={(e) => handleFieldChange("pointOfSale", e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="paymentProvider">Payment Provider</Label>
                    <Input
                      id="paymentProvider"
                      value={editingMerchant.paymentProvider || ""}
                      onChange={(e) => handleFieldChange("paymentProvider", e.target.value)}
                    />
                  </div>
                  
                  <div className="flex items-center space-x-2 pt-6">
                    <Checkbox
                      id="hasIntroductoryReward"
                      checked={editingMerchant.hasIntroductoryReward || false}
                      onCheckedChange={(checked) => handleFieldChange("hasIntroductoryReward", checked === true)}
                    />
                    <Label htmlFor="hasIntroductoryReward">Has Introductory Reward</Label>
                  </div>
                  
                  {editingMerchant.hasIntroductoryReward && (
                    <div>
                      <Label htmlFor="introductoryRewardId">Introductory Reward ID</Label>
                      <Input
                        id="introductoryRewardId"
                        value={editingMerchant.introductoryRewardId || ""}
                        onChange={(e) => handleFieldChange("introductoryRewardId", e.target.value)}
                      />
                    </div>
                  )}
                  
                  <div className="flex items-center space-x-2 pt-6">
                    <Checkbox
                      id="onboardingCompleted"
                      checked={editingMerchant.onboardingCompleted || false}
                      onCheckedChange={(checked) => handleFieldChange("onboardingCompleted", checked === true)}
                    />
                    <Label htmlFor="onboardingCompleted">Onboarding Completed</Label>
                  </div>
                  
                  {editingMerchant.onboardingCompleted && (
                    <div>
                      <Label htmlFor="onboardingCompletedAt">Onboarding Completed At</Label>
                      <Input
                        id="onboardingCompletedAt"
                        value={editingMerchant.onboardingCompletedAt || ""}
                        onChange={(e) => handleFieldChange("onboardingCompletedAt", e.target.value)}
                      />
                    </div>
                  )}
                </div>
              </TabsContent>
              
              <TabsContent value="hours" className="space-y-4">
                <div className="text-sm text-gray-500 mb-4">
                  Configure operating hours for each day of the week
                </div>
                
                {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => (
                  <div key={day} className="space-y-2">
                    <div className="flex items-center gap-2">
                      <h3 className="text-sm font-medium capitalize">{day}</h3>
                      <div className="flex-1 h-px bg-gray-200"></div>
                      <Checkbox
                        id={`${day}-closed`}
                        checked={editingMerchant.operatingHours?.[day]?.isClosed || false}
                        onCheckedChange={(checked) => {
                          setEditingMerchant({
                            ...editingMerchant,
                            operatingHours: {
                              ...editingMerchant.operatingHours,
                              [day]: {
                                ...editingMerchant.operatingHours?.[day],
                                isClosed: checked === true
                              }
                            }
                          });
                        }}
                      />
                      <Label htmlFor={`${day}-closed`} className="text-sm">Closed</Label>
                    </div>
                    
                    {!editingMerchant.operatingHours?.[day]?.isClosed && (
                      <div className="grid grid-cols-2 gap-4 pl-4">
                        <div>
                          <Label htmlFor={`${day}-open`}>Opening Time</Label>
                          <Input
                            id={`${day}-open`}
                            value={editingMerchant.operatingHours?.[day]?.open || ""}
                            onChange={(e) => {
                              setEditingMerchant({
                                ...editingMerchant,
                                operatingHours: {
                                  ...editingMerchant.operatingHours,
                                  [day]: {
                                    ...editingMerchant.operatingHours?.[day],
                                    open: e.target.value
                                  }
                                }
                              });
                            }}
                            placeholder="09:00"
                          />
                        </div>
                        
                        <div>
                          <Label htmlFor={`${day}-close`}>Closing Time</Label>
                          <Input
                            id={`${day}-close`}
                            value={editingMerchant.operatingHours?.[day]?.close || ""}
                            onChange={(e) => {
                              setEditingMerchant({
                                ...editingMerchant,
                                operatingHours: {
                                  ...editingMerchant.operatingHours,
                                  [day]: {
                                    ...editingMerchant.operatingHours?.[day],
                                    close: e.target.value
                                  }
                                }
                              });
                            }}
                            placeholder="17:00"
                          />
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </TabsContent>
              
              <TabsContent value="notifications" className="space-y-4">
                <div className="text-sm text-gray-500 mb-4">
                  Configure which notifications this merchant should receive
                </div>
                
                <div className="grid grid-cols-2 gap-3">
                  {[
                    { key: "customerAnniversary", label: "Customer Anniversary" },
                    { key: "customerBirthday", label: "Customer Birthday" },
                    { key: "customerFirstPurchase", label: "Customer First Purchase" },
                    { key: "customerMilestone", label: "Customer Milestone" },
                    { key: "dailySummary", label: "Daily Summary" },
                    { key: "lowInventory", label: "Low Inventory" },
                    { key: "monthlySummary", label: "Monthly Summary" },
                    { key: "paymentIssues", label: "Payment Issues" },
                    { key: "pointsAwarded", label: "Points Awarded" },
                    { key: "rewardCreated", label: "Reward Created" },
                    { key: "rewardExpiring", label: "Reward Expiring" },
                    { key: "rewardRedeemed", label: "Reward Redeemed" },
                    { key: "salesTarget", label: "Sales Target" },
                    { key: "securityAlerts", label: "Security Alerts" },
                    { key: "systemUpdates", label: "System Updates" },
                    { key: "weeklySummary", label: "Weekly Summary" }
                  ].map(notification => (
                    <div key={notification.key} className="flex items-center space-x-2">
                      <Checkbox
                        id={`notification-${notification.key}`}
                        checked={
                          editingMerchant.notifications?.[notification.key as keyof typeof editingMerchant.notifications] || false
                        }
                        onCheckedChange={(checked) => {
                          setEditingMerchant({
                            ...editingMerchant,
                            notifications: {
                              ...editingMerchant.notifications,
                              [notification.key]: checked === true
                            }
                          });
                        }}
                      />
                      <Label htmlFor={`notification-${notification.key}`}>{notification.label}</Label>
                    </div>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUpdateMerchant}>
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Merchant</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this merchant? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          
          {editingMerchant && (
            <div className="py-4">
              <p className="text-sm text-gray-500">
                You are about to delete: <strong>{editingMerchant.tradingName || editingMerchant.merchantName}</strong>
              </p>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteMerchant}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Create Merchant Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Add New Merchant</DialogTitle>
            <DialogDescription>
              Enter the details for the new merchant.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid grid-cols-2 gap-4 py-4">
            <div className="col-span-2 mb-2">
              <Label htmlFor="newLogoUrl">Logo URL</Label>
              <div className="flex gap-2 items-center">
                <Input
                  id="newLogoUrl"
                  value={newMerchant.logoUrl || ""}
                  onChange={(e) => handleNewMerchantFieldChange("logoUrl", e.target.value)}
                  className="flex-1"
                  placeholder="https://example.com/logo.png"
                />
                {newMerchant.logoUrl && (
                  <div className="w-12 h-12 rounded border overflow-hidden flex-shrink-0">
                    <img 
                      src={newMerchant.logoUrl} 
                      alt="Logo preview" 
                      className="w-full h-full object-cover"
                      onError={(e) => (e.target as HTMLImageElement).src = "/hand1.png"}
                    />
                  </div>
                )}
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="newMerchantName">Merchant Name</Label>
                <Input
                  id="newMerchantName"
                  value={newMerchant.merchantName || ""}
                  onChange={(e) => handleNewMerchantFieldChange("merchantName", e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="newTradingName">Trading Name</Label>
                <Input
                  id="newTradingName"
                  value={newMerchant.tradingName || ""}
                  onChange={(e) => handleNewMerchantFieldChange("tradingName", e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="newBusinessType">Business Type</Label>
                <Input
                  id="newBusinessType"
                  value={newMerchant.businessType || ""}
                  onChange={(e) => handleNewMerchantFieldChange("businessType", e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="newAbn">ABN</Label>
                <Input
                  id="newAbn"
                  value={newMerchant.abn || ""}
                  onChange={(e) => handleNewMerchantFieldChange("abn", e.target.value)}
                />
              </div>

              <div>
                <Label htmlFor="newPrimaryEmail">Primary Email</Label>
                <Input
                  id="newPrimaryEmail"
                  value={newMerchant.primaryEmail || ""}
                  onChange={(e) => handleNewMerchantFieldChange("primaryEmail", e.target.value)}
                />
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="newStreet">Street</Label>
                <Input
                  id="newStreet"
                  value={newMerchant.address?.street || ""}
                  onChange={(e) => handleNewMerchantAddressChange("street", e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="newSuburb">Suburb</Label>
                <Input
                  id="newSuburb"
                  value={newMerchant.address?.suburb || ""}
                  onChange={(e) => handleNewMerchantAddressChange("suburb", e.target.value)}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <Label htmlFor="newPostcode">Postcode</Label>
                  <Input
                    id="newPostcode"
                    value={newMerchant.address?.postcode || ""}
                    onChange={(e) => handleNewMerchantAddressChange("postcode", e.target.value)}
                  />
                </div>
                
                <div>
                  <Label htmlFor="newState">State</Label>
                  <Select 
                    value={newMerchant.address?.state} 
                    onValueChange={(value) => handleNewMerchantAddressChange("state", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select state" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="VIC">VIC</SelectItem>
                      <SelectItem value="NSW">NSW</SelectItem>
                      <SelectItem value="QLD">QLD</SelectItem>
                      <SelectItem value="WA">WA</SelectItem>
                      <SelectItem value="SA">SA</SelectItem>
                      <SelectItem value="TAS">TAS</SelectItem>
                      <SelectItem value="ACT">ACT</SelectItem>
                      <SelectItem value="NT">NT</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="newStatus">Status</Label>
                <Select 
                  value={newMerchant.status} 
                  onValueChange={(value) => handleNewMerchantFieldChange("status", value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                    <SelectItem value="pending">Pending</SelectItem>
                    <SelectItem value="suspended">Suspended</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleCreateMerchant}>
              Create Merchant
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Function Dialog */}
      <Dialog open={isEditFunctionDialogOpen} onOpenChange={setIsEditFunctionDialogOpen}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Function Configuration</DialogTitle>
            <DialogDescription>
              Customize your cloud function configuration.
            </DialogDescription>
          </DialogHeader>
          
          {editingFunction && (
            <Tabs defaultValue="basic">
              <TabsList className="grid w-full grid-cols-4 mb-4">
                <TabsTrigger value="basic">Basic Settings</TabsTrigger>
                <TabsTrigger value="config">Advanced Configuration</TabsTrigger>
                {editingFunction.name === "createRewards" && (
                  <TabsTrigger value="rewards">Reward Configuration</TabsTrigger>
                )}
                <TabsTrigger value="code">Function Code</TabsTrigger>
              </TabsList>
              
              <TabsContent value="basic" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="functionName">Function Name</Label>
                    <Input
                      id="functionName"
                      value={editingFunction.name}
                      onChange={(e) => setEditingFunction({...editingFunction, name: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="enabled">Status</Label>
                    <Select 
                      value={editingFunction.enabled ? "enabled" : "disabled"} 
                      onValueChange={(value) => setEditingFunction({...editingFunction, enabled: value === "enabled"})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="enabled">Enabled</SelectItem>
                        <SelectItem value="disabled">Disabled</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="col-span-2">
                    <Label htmlFor="description">Description</Label>
                    <Input
                      id="description"
                      value={editingFunction.description}
                      onChange={(e) => setEditingFunction({...editingFunction, description: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="schedule">Schedule (cron format)</Label>
                    <Input
                      id="schedule"
                      value={editingFunction.schedule}
                      onChange={(e) => setEditingFunction({...editingFunction, schedule: e.target.value})}
                      placeholder="0 */12 * * *"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Example: 0 */12 * * * runs every 12 hours
                    </p>
                  </div>
                  
                  <div>
                    <Label htmlFor="timeZone">Timezone</Label>
                    <Select 
                      value={editingFunction.timeZone} 
                      onValueChange={(value) => setEditingFunction({...editingFunction, timeZone: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select timezone" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Australia/Melbourne">Australia/Melbourne</SelectItem>
                        <SelectItem value="Australia/Sydney">Australia/Sydney</SelectItem>
                        <SelectItem value="Australia/Perth">Australia/Perth</SelectItem>
                        <SelectItem value="Australia/Brisbane">Australia/Brisbane</SelectItem>
                        <SelectItem value="Pacific/Auckland">Pacific/Auckland</SelectItem>
                        <SelectItem value="UTC">UTC</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="config" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="memory">Memory Allocation</Label>
                    <Select 
                      value={editingFunction.memory} 
                      onValueChange={(value) => setEditingFunction({...editingFunction, memory: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select memory" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="128MiB">128MiB</SelectItem>
                        <SelectItem value="256MiB">256MiB</SelectItem>
                        <SelectItem value="512MiB">512MiB</SelectItem>
                        <SelectItem value="1GiB">1GiB</SelectItem>
                        <SelectItem value="2GiB">2GiB</SelectItem>
                        <SelectItem value="4GiB">4GiB</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="timeout">Timeout (seconds)</Label>
                    <Input
                      id="timeout"
                      type="number"
                      value={editingFunction.timeoutSeconds}
                      onChange={(e) => setEditingFunction({...editingFunction, timeoutSeconds: parseInt(e.target.value) || 60})}
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Maximum: 540 seconds (9 minutes)
                    </p>
                  </div>
                  
                  <div className="col-span-2">
                    <Label htmlFor="secrets">Secrets</Label>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {editingFunction.secrets.map((secret, index) => (
                        <div key={index} className="flex items-center bg-gray-100 px-2 py-1 rounded">
                          <span>{secret}</span>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-5 w-5 p-0 ml-1"
                            onClick={() => {
                              const newSecrets = [...editingFunction.secrets];
                              newSecrets.splice(index, 1);
                              setEditingFunction({...editingFunction, secrets: newSecrets});
                            }}
                          >
                            <XCircle className="h-3 w-3" />
                          </Button>
                        </div>
                      ))}
                      <div className="flex">
                        <Input
                          id="newSecret"
                          placeholder="Add new secret"
                          className="h-8"
                          onKeyDown={(e) => {
                            if (e.key === 'Enter' && e.currentTarget.value) {
                              e.preventDefault();
                              const newSecret = e.currentTarget.value;
                              setEditingFunction({
                                ...editingFunction, 
                                secrets: [...editingFunction.secrets, newSecret]
                              });
                              e.currentTarget.value = "";
                            }
                          }}
                        />
                        <Button
                          variant="outline"
                          size="sm"
                          className="ml-2"
                          onClick={() => {
                            const input = document.getElementById('newSecret') as HTMLInputElement;
                            if (input.value) {
                              setEditingFunction({
                                ...editingFunction, 
                                secrets: [...editingFunction.secrets, input.value]
                              });
                              input.value = "";
                            }
                          }}
                        >
                          Add
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </TabsContent>
              
              {editingFunction.name === "createRewards" && (
                <TabsContent value="rewards" className="space-y-6">
                  <div className="bg-blue-50 p-4 rounded-md">
                    <h3 className="font-medium text-blue-800 mb-2">Reward Generation Settings</h3>
                    <p className="text-sm text-blue-700">
                      Configure how rewards are generated for your customers.
                    </p>
                  </div>
                  
                  <div className="border rounded-md p-4">
                    <h3 className="font-medium mb-3">AI Model Configuration</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="aiModel">AI Model</Label>
                        <Select 
                          value={editingFunction.code.includes("gpt-4.1") ? "gpt-4.1" : "gpt-3.5-turbo"}
                          onValueChange={(value) => {
                            const updatedCode = editingFunction.code.replace(
                              /model: "([^"]+)"/,
                              `model: "${value}"`
                            );
                            setEditingFunction({...editingFunction, code: updatedCode});
                          }}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select AI model" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gpt-4.1">GPT-4 (Most capable)</SelectItem>
                            <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo (Faster, cheaper)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label htmlFor="maxRewardsPerCustomer">Max Rewards Per Customer</Label>
                        <Input
                          id="maxRewardsPerCustomer"
                          type="number"
                          min="1"
                          max="10"
                          value={safeRegexMatch(/if \(rewardsSnap\.size >= (\d+)\)/, editingFunction.code, "4")}
                          onChange={(e) => {
                            const maxRewards = e.target.value;
                            let updatedCode = editingFunction.code.replace(
                              /if \(rewardsSnap\.size >= (\d+)\)/g,
                              `if (rewardsSnap.size >= ${maxRewards})`
                            );
                            updatedCode = updatedCode.replace(
                              /const numToCreate = (\d+) - rewardsSnap\.size/g,
                              `const numToCreate = ${maxRewards} - rewardsSnap.size`
                            );
                            setEditingFunction({...editingFunction, code: updatedCode});
                          }}
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-4">
                    <h3 className="font-medium mb-3">Reward Types Configuration</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Configure the types of rewards that will be generated.
                    </p>
                    
                    <div className="space-y-4">
                      {["Discount Voucher", "Loyalty Bonus", "Exclusive Access Pass", "Free Gift"].map((rewardType, index) => {
                        // Extract current settings from code
                        const rewardTypeRegex = new RegExp(`{ conditionsType: "([^"]+)", offeringType: "${rewardType}" }`);
                        const match = editingFunction.code.match(rewardTypeRegex);
                        const currentConditionType = match ? match[1] : "none";
                        
                        return (
                          <div key={rewardType} className="grid grid-cols-3 gap-4 pb-4 border-b last:border-0 last:pb-0">
                            <div>
                              <Label>{rewardType}</Label>
                              <div className="mt-1">
                                <Select 
                                  value={currentConditionType}
                                  onValueChange={(value) => {
                                    const updatedCode = editingFunction.code.replace(
                                      rewardTypeRegex,
                                      `{ conditionsType: "${value}", offeringType: "${rewardType}" }`
                                    );
                                    setEditingFunction({...editingFunction, code: updatedCode});
                                  }}
                                >
                                  <SelectTrigger>
                                    <SelectValue placeholder="Condition type" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="none">No Conditions</SelectItem>
                                    <SelectItem value="optional">Optional Conditions</SelectItem>
                                    <SelectItem value="required">Required Conditions</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>
                            
                            <div className="col-span-2">
                              <Label>Display Name</Label>
                              <Input 
                                value={rewardType}
                                onChange={(e) => {
                                  const newName = e.target.value;
                                  const updatedCode = editingFunction.code.replace(
                                    new RegExp(`offeringType: "${rewardType}"`, 'g'),
                                    `offeringType: "${newName}"`
                                  );
                                  setEditingFunction({...editingFunction, code: updatedCode});
                                }}
                              />
                            </div>
                          </div>
                        );
                      })}
                      
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          // Extract current reward types
                          const baseSpecsMatch = editingFunction.code.match(/const baseSpecs = \[([\s\S]*?)\];/);
                          if (baseSpecsMatch) {
                            const currentBaseSpecs = baseSpecsMatch[1];
                            const updatedBaseSpecs = currentBaseSpecs + ',\n        { conditionsType: "none", offeringType: "New Reward Type" }';
                            const updatedCode = editingFunction.code.replace(
                              /const baseSpecs = \[([\s\S]*?)\];/,
                              `const baseSpecs = [${updatedBaseSpecs}];`
                            );
                            setEditingFunction({...editingFunction, code: updatedCode});
                          }
                        }}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Reward Type
                      </Button>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-4">
                    <h3 className="font-medium mb-3">Reward Expiration Settings</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiryHours">Expiry Time (hours)</Label>
                        <Input
                          id="expiryHours"
                          type="number"
                          min="1"
                          value={safeRegexMatch(/const expiry = new Date\(now\.getTime\(\) \+ (\d+) \* 60 \* 60 \* 1000\)/, editingFunction.code, "12")}
                          onChange={(e) => {
                            const hours = e.target.value;
                            const updatedCode = editingFunction.code.replace(
                              /const expiry = new Date\(now\.getTime\(\) \+ (\d+) \* 60 \* 60 \* 1000\)/,
                              `const expiry = new Date(now.getTime() + ${hours} * 60 * 60 * 1000)`
                            );
                            setEditingFunction({...editingFunction, code: updatedCode});
                          }}
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          How long rewards will be valid after creation
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-4">
                    <h3 className="font-medium mb-3">AI Prompt Configuration</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Customize the prompt sent to the AI for generating rewards.
                    </p>
                    
                    <div>
                      <Label htmlFor="systemPrompt">System Prompt</Label>
                      <textarea
                        id="systemPrompt"
                        className="w-full h-20 p-2 mt-1 border rounded-md text-sm font-mono"
                        value={safeRegexMatch(/role: "system",\s+content: "([^"]+)"/, editingFunction.code, 
                          "You are a conversational assistant helping users create reward programs for their customers.")}
                        onChange={(e) => {
                          const systemPrompt = e.target.value;
                          const updatedCode = editingFunction.code.replace(
                            /role: "system",\s+content: "([^"]+)"/,
                            `role: "system",\n                  content: "${systemPrompt}"`
                          );
                          setEditingFunction({...editingFunction, code: updatedCode});
                        }}
                      />
                    </div>
                    
                    <div className="mt-4">
                      <Label htmlFor="userPromptTemplate">User Prompt Template</Label>
                      <textarea
                        id="userPromptTemplate"
                        className="w-full h-40 p-2 mt-1 border rounded-md text-sm font-mono"
                        value={safeRegexMatch(/const promptContent = `([^`]+)`;/, editingFunction.code, "")}
                        onChange={(e) => {
                          const userPrompt = e.target.value;
                          const updatedCode = editingFunction.code.replace(
                            /const promptContent = `([^`]+)`;/,
                            `const promptContent = \`${userPrompt}\`;`
                          );
                          setEditingFunction({...editingFunction, code: updatedCode});
                        }}
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        You can use template variables like ${`{conditionInstruction}`}, ${`{customerData}`}, etc.
                      </p>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-4">
                    <h3 className="font-medium mb-3">Processing Limits</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="batchSize">Max Writes Per Batch</Label>
                        <Input
                          id="batchSize"
                          type="number"
                          min="100"
                          max="1000"
                          value={safeRegexMatch(/const MAX_WRITES_PER_BATCH = (\d+);/, editingFunction.code, "500")}
                          onChange={(e) => {
                            const batchSize = e.target.value;
                            const updatedCode = editingFunction.code.replace(
                              /const MAX_WRITES_PER_BATCH = \d+;/,
                              `const MAX_WRITES_PER_BATCH = ${batchSize};`
                            );
                            setEditingFunction({...editingFunction, code: updatedCode});
                          }}
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          Maximum number of Firestore writes before committing a batch
                        </p>
                      </div>
                    </div>
                  </div>
                </TabsContent>
              )}
              
              <TabsContent value="code" className="space-y-4">
                <div>
                  <Label htmlFor="functionCode">Function Code</Label>
                  <div className="border rounded-md mt-1 bg-gray-50">
                    <textarea
                      id="functionCode"
                      value={editingFunction.code}
                      onChange={(e) => setEditingFunction({...editingFunction, code: e.target.value})}
                      className="w-full h-96 p-4 font-mono text-sm bg-transparent focus:outline-none"
                      spellCheck="false"
                    />
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditFunctionDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUpdateFunction}>
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Function Dialog */}
      <Dialog open={isAddFunctionDialogOpen} onOpenChange={setIsAddFunctionDialogOpen}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Create New Function</DialogTitle>
            <DialogDescription>
              Configure a new cloud function.
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="basic">
            <TabsList className="grid w-full grid-cols-3 mb-4">
              <TabsTrigger value="basic">Basic Settings</TabsTrigger>
              <TabsTrigger value="config">Advanced Configuration</TabsTrigger>
              <TabsTrigger value="code">Function Code</TabsTrigger>
            </TabsList>
            
            <TabsContent value="basic" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="newFunctionName">Function Name</Label>
                  <Input
                    id="newFunctionName"
                    value={newFunction.name}
                    onChange={(e) => setNewFunction({...newFunction, name: e.target.value})}
                    placeholder="myFunction"
                  />
                </div>
                
                <div>
                  <Label htmlFor="newEnabled">Status</Label>
                  <Select 
                    value={newFunction.enabled ? "enabled" : "disabled"} 
                    onValueChange={(value) => setNewFunction({...newFunction, enabled: value === "enabled"})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="enabled">Enabled</SelectItem>
                      <SelectItem value="disabled">Disabled</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="col-span-2">
                  <Label htmlFor="newDescription">Description</Label>
                  <Input
                    id="newDescription"
                    value={newFunction.description}
                    onChange={(e) => setNewFunction({...newFunction, description: e.target.value})}
                    placeholder="Describe what this function does"
                  />
                </div>
                
                <div>
                  <Label htmlFor="newSchedule">Schedule (cron format)</Label>
                  <Input
                    id="newSchedule"
                    value={newFunction.schedule}
                    onChange={(e) => setNewFunction({...newFunction, schedule: e.target.value})}
                    placeholder="0 0 * * *"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Example: 0 0 * * * runs daily at midnight
                  </p>
                </div>
                
                <div>
                  <Label htmlFor="newTimeZone">Timezone</Label>
                  <Select 
                    value={newFunction.timeZone} 
                    onValueChange={(value) => setNewFunction({...newFunction, timeZone: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select timezone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Australia/Melbourne">Australia/Melbourne</SelectItem>
                      <SelectItem value="Australia/Sydney">Australia/Sydney</SelectItem>
                      <SelectItem value="Australia/Perth">Australia/Perth</SelectItem>
                      <SelectItem value="Australia/Brisbane">Australia/Brisbane</SelectItem>
                      <SelectItem value="Pacific/Auckland">Pacific/Auckland</SelectItem>
                      <SelectItem value="UTC">UTC</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="config" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="newMemory">Memory Allocation</Label>
                  <Select 
                    value={newFunction.memory} 
                    onValueChange={(value) => setNewFunction({...newFunction, memory: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select memory" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="128MiB">128MiB</SelectItem>
                      <SelectItem value="256MiB">256MiB</SelectItem>
                      <SelectItem value="512MiB">512MiB</SelectItem>
                      <SelectItem value="1GiB">1GiB</SelectItem>
                      <SelectItem value="2GiB">2GiB</SelectItem>
                      <SelectItem value="4GiB">4GiB</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="newTimeout">Timeout (seconds)</Label>
                  <Input
                    id="newTimeout"
                    type="number"
                    value={newFunction.timeoutSeconds}
                    onChange={(e) => setNewFunction({...newFunction, timeoutSeconds: parseInt(e.target.value) || 60})}
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Maximum: 540 seconds (9 minutes)
                  </p>
                </div>
                
                <div className="col-span-2">
                  <Label htmlFor="newSecrets">Secrets</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {newFunction.secrets.map((secret, index) => (
                      <div key={index} className="flex items-center bg-gray-100 px-2 py-1 rounded">
                        <span>{secret}</span>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-5 w-5 p-0 ml-1"
                          onClick={() => {
                            const newSecrets = [...newFunction.secrets];
                            newSecrets.splice(index, 1);
                            setNewFunction({...newFunction, secrets: newSecrets});
                          }}
                        >
                          <XCircle className="h-3 w-3" />
                        </Button>
                      </div>
                    ))}
                    <div className="flex">
                      <Input
                        id="addNewSecret"
                        placeholder="Add new secret"
                        className="h-8"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            const newSecret = e.currentTarget.value;
                            setNewFunction({
                              ...newFunction, 
                              secrets: [...newFunction.secrets, newSecret]
                            });
                            e.currentTarget.value = "";
                          }
                        }}
                      />
                      <Button
                        variant="outline"
                        size="sm"
                        className="ml-2"
                        onClick={() => {
                          const input = document.getElementById('addNewSecret') as HTMLInputElement;
                          if (input.value) {
                            setNewFunction({
                              ...newFunction, 
                              secrets: [...newFunction.secrets, input.value]
                            });
                            input.value = "";
                          }
                        }}
                      >
                        Add
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="code" className="space-y-4">
              <div>
                <Label htmlFor="newFunctionCode">Function Code</Label>
                <div className="border rounded-md mt-1 bg-gray-50">
                  <textarea
                    id="newFunctionCode"
                    value={newFunction.code}
                    onChange={(e) => setNewFunction({...newFunction, code: e.target.value})}
                    className="w-full h-96 p-4 font-mono text-sm bg-transparent focus:outline-none"
                    spellCheck="false"
                    placeholder="// Write your function code here"
                  />
                </div>
              </div>
            </TabsContent>
          </Tabs>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddFunctionDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleAddFunction} disabled={!newFunction.name || !newFunction.code}>
              Create Function
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
} "use client"

import { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/auth-context'

export default function ApiKeyTestPage() {
  const [logs, setLogs] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const { user } = useAuth()
  
  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toISOString()}: ${message}`])
  }
  
  const testRewrite = async () => {
    setIsLoading(true)
    addLog('Testing rewrite URL...')
    
    try {
      // Get the current user's ID token
      const { getAuth } = await import('firebase/auth')
      const auth = getAuth()
      const user = auth.currentUser
      
      if (!user) {
        addLog('ERROR: No authenticated user')
        setIsLoading(false)
        return
      }
      
      addLog(`User authenticated: ${user.uid}`)
      const token = await user.getIdToken()
      addLog(`Got ID token (length: ${token.length})`)
      
      // Make the request with the token
      addLog('Making request to /api/openai-key')
      const response = await fetch('/api/openai-key', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      addLog(`Response status: ${response.status}`)
      
      if (!response.ok) {
        const errorText = await response.text()
        addLog(`ERROR: HTTP error ${response.status}: ${errorText}`)
        setIsLoading(false)
        return
      }
      
      const data = await response.json()
      addLog(`Response data: ${JSON.stringify(data)}`)
      
      if (data && data.apiKey) {
        addLog(`SUCCESS: Got API key (length: ${data.apiKey.length})`)
      } else {
        addLog('ERROR: No API key in response')
      }
    } catch (error) {
      addLog(`ERROR: ${error instanceof Error ? error.message : String(error)}`)
    } finally {
      setIsLoading(false)
    }
  }
  
  const testCallable = async () => {
    setIsLoading(true)
    addLog('Testing callable function...')
    
    try {
      const { getFunctions, httpsCallable } = await import('firebase/functions')
      const { getApp } = await import('firebase/app')
      
      addLog('Getting Firebase functions instance')
      const functionsInstance = getFunctions(getApp())
      addLog(`Functions region: ${functionsInstance.region}`)
      
      addLog('Creating callable function reference')
      const getOpenAIKey = httpsCallable(functionsInstance, 'getOpenAIKey')
      
      addLog('Calling getOpenAIKey function')
      try {
        const result = await getOpenAIKey()
        addLog(`Function call result: ${JSON.stringify(result.data)}`)
        
        const data = result.data as { apiKey: string }
        
        if (data && data.apiKey) {
          addLog(`SUCCESS: Got API key (length: ${data.apiKey.length})`)
        } else {
          addLog('ERROR: No API key in response')
        }
      } catch (callError: any) {
        // Extract detailed error information from Firebase callable error
        addLog(`ERROR: Function call failed with code: ${callError.code}`)
        addLog(`ERROR message: ${callError.message}`)
        
        if (callError.details) {
          addLog(`ERROR details: ${JSON.stringify(callError.details)}`)
        }
        
        // Try to get the Firebase Functions logs URL
        const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'tap-loyalty-fb6d0'
        const logsUrl = `https://console.firebase.google.com/project/${projectId}/functions/logs`
        addLog(`Check Firebase Functions logs for more details: ${logsUrl}`)
      }
    } catch (error) {
      if (error instanceof Error) {
        addLog(`ERROR: ${error.message}`)
        addLog(`ERROR stack: ${error.stack}`)
      } else {
        addLog(`ERROR: ${String(error)}`)
      }
    } finally {
      setIsLoading(false)
    }
  }
  
  const testHttp = async () => {
    setIsLoading(true)
    addLog('Testing HTTP function...')
    
    try {
      // Get the current user's ID token
      const { getAuth } = await import('firebase/auth')
      const auth = getAuth()
      const user = auth.currentUser
      
      if (!user) {
        addLog('ERROR: No authenticated user')
        setIsLoading(false)
        return
      }
      
      addLog(`User authenticated: ${user.uid}`)
      const token = await user.getIdToken()
      addLog(`Got ID token (length: ${token.length})`)
      
      // Make the request with the token
      addLog('Making HTTP request to getOpenAIKeyHttp')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/getOpenAIKeyHttp', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      })
      
      addLog(`Response status: ${response.status}`)
      
      if (!response.ok) {
        const errorText = await response.text()
        addLog(`ERROR: HTTP error ${response.status}: ${errorText}`)
        setIsLoading(false)
        return
      }
      
      const data = await response.json()
      addLog(`Response data: ${JSON.stringify(data)}`)
      
      if (data && data.apiKey) {
        addLog(`SUCCESS: Got API key (length: ${data.apiKey.length})`)
      } else {
        addLog('ERROR: No API key in response')
      }
    } catch (error) {
      addLog(`ERROR: ${error instanceof Error ? error.message : String(error)}`)
    } finally {
      setIsLoading(false)
    }
  }
  
  const testConfig = async () => {
    setIsLoading(true)
    addLog('Testing config...')
    
    try {
      // Make the request to check config
      addLog('Making request to checkConfig')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/checkConfig')
      
      addLog(`Response status: ${response.status}`)
      
      if (!response.ok) {
        const errorText = await response.text()
        addLog(`ERROR: HTTP error ${response.status}: ${errorText}`)
        setIsLoading(false)
        return
      }
      
      const data = await response.json()
      addLog(`Config data: ${JSON.stringify(data)}`)
    } catch (error) {
      addLog(`ERROR: ${error instanceof Error ? error.message : String(error)}`)
    } finally {
      setIsLoading(false)
    }
  }
  
  const testDirectConfig = async () => {
    setIsLoading(true)
    addLog('Testing direct config access...')
    
    try {
      // Make the request to check config
      addLog('Making request to checkConfig')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/checkConfig')
      
      addLog(`Response status: ${response.status}`)
      
      if (!response.ok) {
        const errorText = await response.text()
        addLog(`ERROR: HTTP error ${response.status}: ${errorText}`)
        setIsLoading(false)
        return
      }
      
      const data = await response.json()
      addLog(`Config data: ${JSON.stringify(data)}`)
      
      // Check if the OpenAI API key exists
      if (data.apiKeyExists) {
        addLog(`SUCCESS: OpenAI API key exists (length: ${data.apiKeyLength})`)
      } else {
        addLog('ERROR: OpenAI API key does not exist in Firebase config')
        
        // Provide instructions for setting the API key
        addLog('To set the API key, run:')
        addLog('firebase functions:config:set openai.api_key="YOUR_API_KEY"')
        addLog('Then redeploy your functions:')
        addLog('firebase deploy --only functions')
      }
    } catch (error) {
      if (error instanceof Error) {
        addLog(`ERROR: ${error.message}`)
        addLog(`ERROR stack: ${error.stack}`)
      } else {
        addLog(`ERROR: ${String(error)}`)
      }
    } finally {
      setIsLoading(false)
    }
  }
  
  const testEnvironment = async () => {
    setIsLoading(true)
    addLog('Testing Firebase environment...')
    
    try {
      // Make the request to check environment
      addLog('Making request to checkEnvironment')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/checkEnvironment')
      
      addLog(`Response status: ${response.status}`)
      
      if (!response.ok) {
        const errorText = await response.text()
        addLog(`ERROR: HTTP error ${response.status}: ${errorText}`)
        setIsLoading(false)
        return
      }
      
      const data = await response.json()
      addLog(`Environment data:`)
      Object.entries(data).forEach(([key, value]) => {
        addLog(`  ${key}: ${value}`)
      })
    } catch (error) {
      if (error instanceof Error) {
        addLog(`ERROR: ${error.message}`)
        addLog(`ERROR stack: ${error.stack}`)
      } else {
        addLog(`ERROR: ${String(error)}`)
      }
    } finally {
      setIsLoading(false)
    }
  }
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">API Key Test</h1>
      
      {!user ? (
        <p className="text-red-500">You must be logged in to test API key retrieval</p>
      ) : (
        <div className="space-y-4">
          <div className="flex space-x-4">
            <button 
              onClick={testRewrite}
              disabled={isLoading}
              className="px-4 py-2 bg-blue-500 text-white rounded disabled:bg-gray-400"
            >
              Test Rewrite
            </button>
            
            <button 
              onClick={testCallable}
              disabled={isLoading}
              className="px-4 py-2 bg-green-500 text-white rounded disabled:bg-gray-400"
            >
              Test Callable
            </button>
            
            <button 
              onClick={testHttp}
              disabled={isLoading}
              className="px-4 py-2 bg-purple-500 text-white rounded disabled:bg-gray-400"
            >
              Test HTTP
            </button>
            
            <button 
              onClick={testConfig}
              disabled={isLoading}
              className="px-4 py-2 bg-yellow-500 text-white rounded disabled:bg-gray-400"
            >
              Test Config
            </button>
            
            <button 
              onClick={testDirectConfig}
              disabled={isLoading}
              className="px-4 py-2 bg-orange-500 text-white rounded disabled:bg-gray-400"
            >
              Test Direct Config
            </button>
            
            <button 
              onClick={testEnvironment}
              disabled={isLoading}
              className="px-4 py-2 bg-teal-500 text-white rounded disabled:bg-gray-400"
            >
              Test Environment
            </button>
          </div>
          
          <div className="border p-4 bg-gray-50 rounded h-96 overflow-auto">
            <h2 className="font-bold mb-2">Logs:</h2>
            {logs.length === 0 ? (
              <p className="text-gray-500">No logs yet. Click a test button to start.</p>
            ) : (
              <pre className="whitespace-pre-wrap text-sm">
                {logs.map((log, i) => (
                  <div key={i} className="mb-1">{log}</div>
                ))}
              </pre>
            )}
          </div>
        </div>
      )}
    </div>
  )
} 
export default function LibraryIdPage() {
  return <div>Placeholder Page</div>;
}
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Plus } from "lucide-react"
import { PageTransition } from "@/components/page-transition"

export default function RewardsLibraryPage() {
  const router = useRouter()

  return (
    <PageTransition>
      <div className="p-6 max-w-7xl mx-auto">
        <div className="space-y-6">
          {/* Header */}
          <div className="flex justify-between items-center gap-4">
            <h1 className="text-2xl font-bold">Reward Templates</h1>
            <Button 
              onClick={() => router.push("/create")}
              className="h-9 gap-2 rounded-md"
            >
              <Plus className="h-4 w-4" />
              Create Reward
            </Button>
          </div>
          
          {/* Content placeholder */}
          <div className="p-8 text-center">
            <p>Library content will appear here</p>
          </div>
        </div>
      </div>
    </PageTransition>
  )
} import { DocsContent } from '@/components/docs-content'
import { notFound } from 'next/navigation'
import { docsConfig } from '@/config/docs-config'

// Function to check if a slug is valid
function isValidSlug(slug: string): boolean {
  // Check all sections in docsConfig
  return docsConfig.some(section => 
    section.items.some(item => {
      // Remove the /docs/ prefix for comparison
      const itemPath = item.href.replace('/docs/', '')
      return itemPath === slug || (slug === '' && itemPath === '')
    })
  )
}

export default function DocsPage({ params }: { params: { slug?: string[] } }) {
  // Handle the root docs page
  if (!params.slug || params.slug.length === 0) {
    return (
      <div className="py-6">
        <DocsContent slug="introduction" />
      </div>
    )
  }

  // Get the first segment of the slug
  const slug = params.slug[0]
  
  // For debugging
  console.log('Requested slug:', slug)
  
  // Validate the slug
  if (!isValidSlug(slug)) {
    console.log('Invalid slug:', slug)
    return notFound()
  }

  return (
    <div className="py-6">
      <DocsContent slug={slug} />
    </div>
  )
} "use client"

import { useState, useEffect } from 'react'
import { getFunctions, httpsCallable } from 'firebase/functions'
import { getApp, getApps } from 'firebase/app'
import { PageTransition } from "@/components/page-transition"

export default function FirebaseDiagnosticsPage() {
  const [diagnostics, setDiagnostics] = useState<string[]>([])
  const [error, setError] = useState<string | null>(null)
  
  const addLog = (message: string) => {
    setDiagnostics(prev => [...prev, `${new Date().toISOString()}: ${message}`])
  }
  
  useEffect(() => {
    // Run diagnostics on page load
    runDiagnostics()
  }, [])
  
  const runDiagnostics = async () => {
    setDiagnostics([])
    setError(null)
    
    try {
      // Check Firebase initialization
      addLog('Starting Firebase diagnostics')
      
      // Check if Firebase is initialized
      addLog(`Firebase apps initialized: ${getApps().length}`)
      
      // Check environment
      addLog(`Running in environment: ${process.env.NODE_ENV}`)
      addLog(`Window location: ${window.location.href}`)
      
      // Check for environment variables
      addLog(`NEXT_PUBLIC_OPENAI_AVAILABLE: ${process.env.NEXT_PUBLIC_OPENAI_AVAILABLE || 'not set'}`)
      addLog(`NEXT_PUBLIC_OPENAI_API_KEY: ${process.env.NEXT_PUBLIC_OPENAI_API_KEY ? 'set' : 'not set'}`)
      
      // Test HTTP function
      try {
        addLog('Testing HTTP function (hello)')
        const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/hello')
        if (response.ok) {
          const data = await response.json()
          addLog(`HTTP function response: ${JSON.stringify(data)}`)
        } else {
          addLog(`HTTP function failed with status: ${response.status}`)
        }
      } catch (err: any) {
        addLog(`HTTP function error: ${err.message}`)
      }
      
      // Test callable function
      try {
        addLog('Getting Firebase functions instance')
        const functions = getFunctions(getApp())
        addLog(`Functions region: ${functions.region || 'not set'}`)
        
        addLog('Creating callable function reference')
        const getOpenAIKey = httpsCallable(functions, 'getOpenAIKey')
        
        addLog('Calling getOpenAIKey function')
        const result = await getOpenAIKey()
        
        addLog(`Function call successful: ${JSON.stringify(result.data)}`)
      } catch (err: any) {
        addLog(`Callable function error: ${err.message}`)
        console.error('Full error:', err)
        setError(err.message)
      }
      
      // Test CORS
      await testCors()
      
      addLog('Diagnostics complete')
    } catch (err: any) {
      addLog(`Diagnostics error: ${err.message}`)
      setError(err.message)
    }
  }
  
  const testCors = async () => {
    addLog('Testing CORS with HTTP function')
    
    // Test preflight request
    try {
      addLog('Testing preflight request')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/hello', {
        method: 'OPTIONS',
        headers: {
          'Origin': window.location.origin,
          'Access-Control-Request-Method': 'GET',
          'Access-Control-Request-Headers': 'Content-Type'
        }
      })
      
      addLog(`CORS preflight status: ${response.status}`)
      addLog(`CORS headers: ${JSON.stringify(Object.fromEntries(response.headers.entries()))}`)
    } catch (err: any) {
      addLog(`CORS preflight test error: ${err.message}`)
    }
    
    // Test HTTP version of getOpenAIKey
    try {
      addLog('Testing HTTP version of getOpenAIKey')
      const response = await fetch('https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/getOpenAIKeyHttp', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        addLog(`HTTP function response: ${JSON.stringify(data)}`)
      } else {
        addLog(`HTTP function failed with status: ${response.status}`)
      }
    } catch (err: any) {
      addLog(`HTTP function error: ${err.message}`)
    }
  }
  
  return (
    <PageTransition>
      <div className="container mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold mb-4">Firebase Diagnostics</h1>
        
        <button 
          onClick={runDiagnostics}
          className="px-4 py-2 bg-blue-500 text-white rounded mb-4"
        >
          Run Diagnostics
        </button>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <div className="bg-gray-100 p-4 rounded font-mono text-sm h-[400px] overflow-auto">
          {diagnostics.length === 0 ? (
            <p className="text-gray-500">No diagnostic data available. Click "Run Diagnostics" to begin.</p>
          ) : (
            diagnostics.map((log, index) => (
              <div key={index} className="mb-1">
                {log}
              </div>
            ))
          )}
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import { useState } from 'react'
import { callOpenAI } from '@/lib/assistant'
import { useAuth } from '@/contexts/auth-context'
import { useOpenAI } from '@/components/providers/openai-provider'
import { Button } from '@/components/ui/button'

export default function TestAIPage() {
  const [result, setResult] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)
  const { user } = useAuth()
  const { aiAvailable, checkAvailability } = useOpenAI()

  const testAPI = async () => {
    setLoading(true)
    setError(null)
    setResult(null)

    try {
      console.log('Testing OpenAI API...')
      const models = await callOpenAI('models.list', {})
      console.log('API response:', models)
      setResult(JSON.stringify(models, null, 2))
    } catch (err) {
      console.error('API test failed:', err)
      setError(err instanceof Error ? err.message : String(err))
    } finally {
      setLoading(false)
    }
  }

  const checkAPI = async () => {
    setLoading(true)
    setError(null)
    
    try {
      const isAvailable = await checkAvailability()
      setResult(`OpenAI API is ${isAvailable ? 'available' : 'not available'}`)
    } catch (err) {
      console.error('API check failed:', err)
      setError(err instanceof Error ? err.message : String(err))
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Test OpenAI API</h1>
      
      <div className="mb-4">
        <p>User: {user ? user.uid : 'Not logged in'}</p>
        <p>OpenAI Available: {aiAvailable ? 'Yes' : 'No'}</p>
      </div>
      
      <div className="flex gap-4 mb-4">
        <Button 
          onClick={testAPI} 
          disabled={loading || !user}
        >
          {loading ? 'Testing...' : 'Test OpenAI API'}
        </Button>
        
        <Button 
          onClick={checkAPI}
          disabled={loading || !user}
          variant="outline"
        >
          {loading ? 'Checking...' : 'Check Availability'}
        </Button>
      </div>
      
      {error && (
        <div className="p-4 mb-4 bg-red-100 text-red-700 rounded">
          <h2 className="font-bold">Error:</h2>
          <pre>{error}</pre>
        </div>
      )}
      
      {result && (
        <div className="p-4 bg-green-100 text-green-700 rounded">
          <h2 className="font-bold">Result:</h2>
          <pre className="whitespace-pre-wrap">{result}</pre>
        </div>
      )}
    </div>
  )
} "use client"

import React, { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { useAuth } from "@/contexts/auth-context"
import { 
  User, 
  Bell, 
  CreditCard, 
  Users, 
  Store, 
  Layers, 
  ShieldCheck,
  ShieldAlert,
  Mail,
  Smartphone,
  Palette,
  Save,
  Upload,
  MapPin,
  Key,
  Gift,
  BarChart,
  FileText,
  Image,
  Download,
  Brain,
  Badge as BadgeIcon,
  ShoppingBag
} from "lucide-react"
import { doc, getDoc, updateDoc } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { toast } from "@/components/ui/use-toast"
import { Checkbox } from "@/components/ui/checkbox"
import { ref, uploadBytes, getDownloadURL } from "firebase/storage"
import { storage } from "@/lib/firebase"
import { firebase } from "@/lib/firebase"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { Badge } from "@/components/ui/badge"

const SettingsPage: React.FC = () => {
  const router = useRouter()
  const { user } = useAuth()
  const [loading, setLoading] = useState(false)
  const [dataLoading, setDataLoading] = useState(true)
  
  // Days of the week - moved to the top
  const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
  
  // Form states from signup page
  const [legalBusinessName, setLegalBusinessName] = useState("")
  const [tradingName, setTradingName] = useState("")
  const [businessEmail, setBusinessEmail] = useState("")
  const [businessType, setBusinessType] = useState("cafe")
  const [logoFile, setLogoFile] = useState<File | null>(null)
  const [logoUrl, setLogoUrl] = useState("")
  
  // Address fields
  const [street, setStreet] = useState("")
  const [suburb, setSuburb] = useState("")
  const [state, setState] = useState("NSW")
  const [postcode, setPostcode] = useState("")
  
  // Other existing states
  const [businessName, setBusinessName] = useState("My Business")
  const [email, setEmail] = useState("")
  const [phone, setPhone] = useState("")
  const [notificationsEmail, setNotificationsEmail] = useState(true)
  const [notificationsSMS, setNotificationsSMS] = useState(false)
  const [notificationsApp, setNotificationsApp] = useState(true)
  
  // Australian states from signup page
  const australianStates = [
    { value: "NSW", label: "New South Wales" },
    { value: "VIC", label: "Victoria" },
    { value: "QLD", label: "Queensland" },
    { value: "WA", label: "Western Australia" },
    { value: "SA", label: "South Australia" },
    { value: "TAS", label: "Tasmania" },
    { value: "ACT", label: "Australian Capital Territory" },
    { value: "NT", label: "Northern Territory" }
  ]
  
  // Business types from signup page
  const businessTypes = [
    { value: "cafe", label: "Cafe" },
    { value: "restaurant", label: "Restaurant" },
    { value: "retail", label: "Retail" },
    { value: "salon", label: "Salon" },
    { value: "gym", label: "Gym" },
    { value: "other", label: "Other" }
  ]
  
  // Representative Details from signup page
  const [repName, setRepName] = useState("")
  const [repPhone, setRepPhone] = useState("")
  const [repEmail, setRepEmail] = useState("")
  
  // Operating Hours from signup page - moved after daysOfWeek
  const [operatingHours, setOperatingHours] = useState(() => {
    const defaultHours = {}
    daysOfWeek.forEach(day => {
      defaultHours[day.toLowerCase()] = {
        isOpen: true,
        openTime: "09:00",
        closeTime: "17:00"
      }
    })
    return defaultHours
  })
  
  // Business Verification & Systems from signup page
  const [abn, setAbn] = useState("")
  const [abnVerificationFile, setAbnVerificationFile] = useState<File | null>(null)
  const [abnVerificationUrl, setAbnVerificationUrl] = useState("")
  const [pointOfSale, setPointOfSale] = useState("lightspeed")
  const [paymentProvider, setPaymentProvider] = useState("square")
  const [storeActive, setStoreActive] = useState(true)
  
  // Point of sale systems
  const pointOfSaleSystems = [
    { value: "lightspeed", label: "Lightspeed" },
    { value: "square", label: "Square" },
    { value: "shopify", label: "Shopify" },
    { value: "vend", label: "Vend" },
    { value: "other", label: "Other" },
    { value: "none", label: "None" }
  ]

  // Payment providers
  const paymentProviders = [
    { value: "square", label: "Square" },
    { value: "stripe", label: "Stripe" },
    { value: "paypal", label: "PayPal" },
    { value: "eftpos", label: "EFTPOS" },
    { value: "other", label: "Other" },
    { value: "none", label: "None" }
  ]
  
  // Add merchantId to state variables
  const [merchantId, setMerchantId] = useState("")
  
  // Add this state variable for the primary color
  const [primaryColor, setPrimaryColor] = useState("#007AFF")
  
  // Add these state variables for notification settings
  const [notifications, setNotifications] = useState({
    // Customer Milestones
    customerFirstPurchase: true,
    customerMilestone: true,
    customerBirthday: true,
    customerAnniversary: false,
    
    // Rewards Activity
    rewardCreated: true,
    rewardRedeemed: true,
    rewardExpiring: true,
    pointsAwarded: false,
    
    // Business Performance
    dailySummary: true,
    weeklySummary: true,
    monthlySummary: true,
    salesTarget: false,
    
    // System Notifications
    systemUpdates: true,
    securityAlerts: true,
    paymentIssues: true,
    lowInventory: false
  })
  
  // Load merchant data from Firestore
  useEffect(() => {
    async function fetchMerchantData() {
      if (!user?.uid) {
        setDataLoading(false)
        return
      }
      
      try {
        setDataLoading(true)
        const merchantDoc = await getDoc(doc(db, 'merchants', user.uid))
        
        if (merchantDoc.exists()) {
          const data = merchantDoc.data()
          
          // Set merchantId
          setMerchantId(user.uid)
          
          // Set business details
          setLegalBusinessName(data.legalName || "")
          setTradingName(data.tradingName || "")
          setBusinessEmail(data.businessEmail || "")
          setBusinessType(data.businessType || "cafe")
          setLogoUrl(data.logoUrl || "")
          
          // Set address
          if (data.address) {
            setStreet(data.address.street || "")
            setSuburb(data.address.suburb || "")
            setState(data.address.state || "NSW")
            setPostcode(data.address.postcode || "")
          }
          
          // Set representative details
          if (data.representative) {
            setRepName(data.representative.name || "")
            setRepPhone(data.representative.phone || "")
            setRepEmail(data.representative.email || "")
          }
          
          // Set operating hours
          if (data.operatingHours) {
            setOperatingHours(data.operatingHours)
          }
          
          // Set business verification details
          setAbn(data.abn || "")
          setAbnVerificationUrl(data.abnVerificationUrl || "")
          setPointOfSale(data.pointOfSale || "lightspeed")
          setPaymentProvider(data.paymentProvider || "square")
          setStoreActive(data.status === "active")
          
          // Set notifications
          if (data.notifications) {
            setNotifications({
              ...notifications,
              ...data.notifications
            })
          }
          
          // Set business insights for Tap Agent
          if (data.businessInsights) {
            setBusinessInsights({
              ...businessInsights,
              ...data.businessInsights
            });
          }
        }
      } catch (error) {
        console.error("Error fetching merchant data:", error)
        toast({
          title: "Error",
          description: "Failed to load your settings. Please try again.",
          variant: "destructive"
        })
      } finally {
        setDataLoading(false)
      }
    }
    
    fetchMerchantData()
  }, [user])
  
  const handleLogoChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      
      // Set the file to state
      setLogoFile(file);
      
      // Create a mock URL for development
      const mockUrl = URL.createObjectURL(file);
      setMockLogoUrl(mockUrl);
      
      // Show a toast to indicate the file is ready
      toast({
        title: "Logo Selected",
        description: `${file.name} is ready for preview`,
      });
      
      // Update the logo URL for immediate display
      setLogoUrl(mockUrl);
    }
  };
  
  const updateOperatingHours = (day, field, value) => {
    setOperatingHours(prev => ({
      ...prev,
      [day.toLowerCase()]: {
        ...prev[day.toLowerCase()],
        [field]: value
      }
    }))
  }
  
  const handleAbnFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setAbnVerificationFile(e.target.files[0])
    }
  }
  
  const toggleStoreStatus = async () => {
    if (!user?.uid) return
    
    setLoading(true)
    
    try {
      const merchantRef = doc(db, 'merchants', user.uid)
      
      // Update store status
      await updateDoc(merchantRef, {
        status: storeActive ? "inactive" : "active"
      })
      
      setStoreActive(!storeActive)
      
      toast({
        title: storeActive ? "Store Deactivated" : "Store Activated",
        description: storeActive 
          ? "Your store is now hidden from customers" 
          : "Your store is now visible to customers",
      })
    } catch (error) {
      console.error("Error toggling store status:", error)
      toast({
        title: "Error",
        description: "Failed to update store status. Please try again.",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }
  
  // Modify the upload function to include additional CORS headers
  const uploadWithCorsHeaders = async (file, path) => {
    try {
      // Create a reference with a unique name
      const fileRef = ref(storage, path);
      
      // Set metadata with CORS headers
      const metadata = {
        contentType: file.type,
        customMetadata: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Disposition, Content-Length'
        }
      };
      
      // Upload the file with metadata
      const uploadResult = await uploadBytes(fileRef, file, metadata);
      
      // Get the download URL
      const downloadUrl = await getDownloadURL(uploadResult.ref);
      
      return downloadUrl;
    } catch (error) {
      console.error("Upload error:", error);
      throw error;
    }
  };
  
  // Then use this function in handleSave
  const handleSave = async () => {
    if (!user?.uid) {
      console.error("Error: No user ID available");
      toast({
        title: "Error",
        description: "You must be logged in to save changes.",
        variant: "destructive"
      });
      return;
    }
    
    setLoading(true);
    console.log("Save process started");
    
    try {
      // Handle logo upload
      let newLogoUrl = logoUrl;
      if (logoFile) {
        try {
          const fileName = `merchants/${user.uid}/logo/${Date.now()}-${logoFile.name}`;
          newLogoUrl = await uploadWithCorsHeaders(logoFile, fileName);
          setLogoUrl(newLogoUrl);
          setLogoFile(null);
          
          toast({
            title: "Logo Uploaded",
            description: "Your business logo has been updated.",
          });
        } catch (error) {
          console.error("Error uploading logo:", error);
          toast({
            title: "Upload Failed",
            description: "Failed to upload logo. Please try again.",
            variant: "destructive"
          });
        }
      }
      
      // Handle document upload
      if (documentFile) {
        try {
          console.log("Uploading document to Firebase Storage");
          const timestamp = Date.now();
          const fileName = `merchants/${user.uid}/documents/${timestamp}-${documentFile.name}`;
          const documentUrl = await uploadWithCorsHeaders(documentFile, fileName);
          
          console.log("Document uploaded successfully:", documentUrl);
          
          // Add to documents array
          const newDocument = {
            name: documentFile.name,
            url: documentUrl,
            path: fileName,
            uploadedAt: new Date()
          };
          
          setDocuments(prev => [...prev, newDocument]);
          setDocumentFile(null);
          
          toast({
            title: "Document Uploaded",
            description: "Your document has been uploaded successfully.",
          });
        } catch (error) {
          console.error("Error uploading document:", error);
          toast({
            title: "Upload Failed",
            description: "Failed to upload document. Please try again.",
            variant: "destructive"
          });
        }
      }
      
      // Save all changes to Firestore
      const merchantData = {
        legalName: legalBusinessName,
        tradingName: tradingName,
        businessEmail: businessEmail,
        businessType: businessType,
        logoUrl: newLogoUrl,
        merchantName: tradingName,
        address: {
          street,
          suburb,
          state,
          postcode
        },
        representative: {
          name: repName,
          phone: repPhone,
          email: repEmail
        },
        operatingHours,
        abn,
        abnVerificationUrl,
        pointOfSale,
        paymentProvider,
        status: storeActive ? "active" : "inactive",
        notifications,
        businessInsights,
        updatedAt: new Date(),
        documents: documents.map(doc => ({
          name: doc.name,
          path: doc.path,
          uploadedAt: doc.uploadedAt,
          url: doc.url
        }))
      };
      
      // Update Firestore
      await updateDoc(doc(db, 'merchants', user.uid), merchantData);
      
      toast({
        title: "Settings Saved",
        description: "Your settings have been updated successfully."
      });
    } catch (error) {
      console.error("Error saving settings:", error);
      toast({
        title: "Save Failed",
        description: "Failed to save your settings. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const [profileSection, setProfileSection] = useState('business')
  const [notificationSection, setNotificationSection] = useState('channels')

  // Function to update notification settings
  const updateNotification = (key, value) => {
    setNotifications(prev => ({
      ...prev,
      [key]: value
    }))
  }

  // Modify the document file handler to use a mock upload in development
  const handleDocumentFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      
      // Set the file to state
      setDocumentFile(file);
      
      // Create a mock URL for development
      const mockUrl = URL.createObjectURL(file);
      setMockDocumentUrl(mockUrl);
      
      // Show a toast to indicate the file is ready
      toast({
        title: "File Selected",
        description: `${file.name} is ready for preview`,
      });
      
      // Add to documents array for immediate display
      setDocuments(prev => [
        ...prev, 
        {
          name: file.name,
          url: mockUrl,
          path: `merchants/${merchantId}/documents/${Date.now()}-${file.name}`,
          uploadedAt: new Date()
        }
      ]);
    }
  };

  const [documentFile, setDocumentFile] = useState<File | null>(null);
  const [mockDocumentUrl, setMockDocumentUrl] = useState<string | null>(null);
  const [documents, setDocuments] = useState<Array<{name: string, url: string, path: string, uploadedAt: Date}>>([]);

  // Add this state variable
  const [mockLogoUrl, setMockLogoUrl] = useState<string | null>(null);

  // Tap Agent related state variables
  const [agentSection, setAgentSection] = useState('products')
  const [businessInsights, setBusinessInsights] = useState({
    // Products and Services
    productTypes: "",
    topProducts: "",
    productPriceRange: "",
    productSeasonality: "",
    
    // Customer Information
    customerDemographics: "",
    customerPreferences: "",
    frequencyOfVisit: "",
    averagePurchaseValue: "",
    
    // Competition & Market
    mainCompetitors: "",
    uniqueSellingPoints: "",
    industryTrends: "",
    businessChallenges: "",
    
    // Goals & Strategy
    businessGoals: "",
    targetedOutcomes: "",
    preferredRewardTypes: "",
    previousSuccessfulPromotions: ""
  });

  // Function to update business insights
  const updateBusinessInsight = (key, value) => {
    setBusinessInsights(prev => ({
      ...prev,
      [key]: value
    }));
  };

  if (dataLoading) {
    return (
      <PageTransition>
        <div className="p-6">
          {/* Empty state instead of spinner */}
        </div>
      </PageTransition>
    )
  }

  return (
    <PageTransition>
      <div className="p-6 py-4 space-y-6">
        <div>
          <div className="flex justify-between items-center mb-0">
            <div>
              <h1 className="text-xl font-semibold tracking-tight">Settings</h1>
            </div>
            
            {/* Store Activation Toggle - Updated without nested buttons */}
            <div
              onClick={!loading ? toggleStoreStatus : undefined}
              className={`h-8 px-4 flex items-center gap-2 border rounded-md cursor-pointer ${
                storeActive 
                  ? 'bg-green-50 border-green-200 hover:bg-green-100 hover:border-green-300' 
                  : 'bg-red-50 border-red-200 hover:bg-red-100 hover:border-red-300'
              } ${loading ? 'opacity-70 cursor-not-allowed' : ''}`}
            >
              <span className="text-sm font-medium">Store Status:</span>
              <span className={`text-sm ${storeActive ? 'text-green-600' : 'text-red-600'} font-medium`}>
                {storeActive ? "Active" : "Inactive"}
              </span>
              <Switch 
                checked={storeActive}
                onCheckedChange={toggleStoreStatus}
                disabled={loading}
                className={`ml-2 ${storeActive ? "data-[state=checked]:bg-green-600" : "data-[state=unchecked]:bg-red-600"}`}
              />
            </div>
          </div>
          <div className="mt-4">
            <div style={{
              width: "100vw",
              position: "relative",
              left: "50%",
              right: "50%",
              marginLeft: "-50vw",
              marginRight: "-50vw",
              height: "1px",
              backgroundColor: "rgb(229, 231, 235)"
            }}></div>
          </div>
        </div>
        
        <Tabs defaultValue="profile" className="space-y-6">
          <TabsList className="bg-muted/60 rounded-md">
            <TabsTrigger value="profile" className="flex items-center gap-2">
              <User className="h-4 w-4" />
              <span>Profile</span>
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              <span>Notifications</span>
            </TabsTrigger>
            <TabsTrigger value="billing" className="flex items-center gap-2">
              <CreditCard className="h-4 w-4" />
              <span>Billing</span>
            </TabsTrigger>
            <TabsTrigger value="team" className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              <span>Team</span>
            </TabsTrigger>
            <TabsTrigger value="store" className="flex items-center gap-2">
              <Store className="h-4 w-4" />
              <span>Store</span>
            </TabsTrigger>
            <TabsTrigger value="integrations" className="flex items-center gap-2">
              <Layers className="h-4 w-4" />
              <span>Integrations</span>
            </TabsTrigger>
            <TabsTrigger value="security" className="flex items-center gap-2">
              <ShieldCheck className="h-4 w-4" />
              <span>Security</span>
            </TabsTrigger>
            <TabsTrigger value="tapagent" className="flex items-center gap-2">
              <Brain className="h-4 w-4" />
              <span>Tap Agent</span>
            </TabsTrigger>
            <TabsTrigger value="files" className="flex items-center gap-2">
              <FileText className="h-4 w-4" />
              <span>Files</span>
            </TabsTrigger>
            <TabsTrigger value="admin" className="flex items-center gap-2">
              <ShieldAlert className="h-4 w-4" />
              <span>Admin</span>
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="profile">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {/* Left Submenu - New Design */}
              <div className="md:col-span-1">
                <Card className="overflow-hidden rounded-md">
                  <div className="p-4 border-b flex flex-col items-center">
                    <div className="w-24 h-24 rounded-full overflow-hidden border mb-3">
                      {logoUrl ? (
                        <img 
                          src={logoUrl} 
                          alt={tradingName || "Business Logo"} 
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full bg-gray-100 flex items-center justify-center">
                          <Store className="h-8 w-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <h3 className="font-medium text-sm">{tradingName || legalBusinessName || "Your Business"}</h3>
                    <p className="text-xs text-muted-foreground mt-1">{businessEmail || "No email set"}</p>
                  </div>
                  
                  <div className="p-2">
                    {[
                      { id: 'business', label: 'Business Information', icon: <Store className="h-4 w-4" /> },
                      { id: 'address', label: 'Business Address', icon: <MapPin className="h-4 w-4" /> },
                      { id: 'merchant', label: 'Merchant ID', icon: <Key className="h-4 w-4" /> }
                    ].map(item => (
                      <button
                        key={item.id}
                        onClick={() => setProfileSection(item.id)}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-md text-left transition-colors ${
                          profileSection === item.id 
                            ? 'bg-blue-50 text-blue-700' 
                            : 'hover:bg-gray-100'
                        }`}
                      >
                        <div className={`p-1.5 rounded-md ${
                          profileSection === item.id 
                            ? 'bg-blue-100 text-blue-700' 
                            : 'bg-gray-100 text-gray-500'
                        }`}>
                          {item.icon}
                        </div>
                        <span className="font-medium text-sm">{item.label}</span>
                      </button>
                    ))}
                  </div>
                </Card>
              </div>
              
              {/* Right Content Area */}
              <div className="md:col-span-3">
                <Card className="rounded-md">
                  <CardHeader>
                    <CardTitle>
                      {profileSection === 'business' && "Business Information"}
                      {profileSection === 'address' && "Business Address"}
                      {profileSection === 'merchant' && "Merchant ID"}
                    </CardTitle>
                    <CardDescription>
                      {profileSection === 'business' && "Update your business details"}
                      {profileSection === 'address' && "Set your business location"}
                      {profileSection === 'merchant' && "Your unique merchant identifier"}
                    </CardDescription>
                  </CardHeader>
                  
                  <CardContent className="space-y-6">
                    {/* Business Information Section */}
                    {profileSection === 'business' && (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="legalBusinessName">Legal Business Name</Label>
                            <Input
                              id="legalBusinessName"
                              value={legalBusinessName}
                              onChange={(e) => setLegalBusinessName(e.target.value)}
                              placeholder="Legal name as registered"
                            />
                          </div>
                          
                          <div className="space-y-2">
                            <Label htmlFor="tradingName">Trading Name</Label>
                            <Input
                              id="tradingName"
                              value={tradingName}
                              onChange={(e) => setTradingName(e.target.value)}
                              placeholder="Name customers know you by"
                            />
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="businessEmail">Business Email</Label>
                          <Input
                            id="businessEmail"
                            type="email"
                            value={businessEmail}
                            onChange={(e) => setBusinessEmail(e.target.value)}
                            placeholder="contact@yourbusiness.com"
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="businessType">Business Type</Label>
                          <select 
                            id="businessType"
                            value={businessType}
                            onChange={(e) => setBusinessType(e.target.value)}
                            className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                          >
                            {businessTypes.map(type => (
                              <option key={type.value} value={type.value}>
                                {type.label}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                    )}
                    
                    {/* Business Address Section */}
                    {profileSection === 'address' && (
                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label htmlFor="street">Street Address</Label>
                          <Input 
                            id="street"
                            value={street}
                            onChange={(e) => setStreet(e.target.value)}
                            placeholder="123 Main Street"
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="suburb">Suburb</Label>
                          <Input 
                            id="suburb"
                            value={suburb}
                            onChange={(e) => setSuburb(e.target.value)}
                            placeholder="Suburb"
                          />
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="state">State</Label>
                            <select 
                              id="state"
                              value={state}
                              onChange={(e) => setState(e.target.value)}
                              className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                            >
                              {australianStates.map(state => (
                                <option key={state.value} value={state.value}>
                                  {state.label}
                                </option>
                              ))}
                            </select>
                          </div>
                          
                          <div className="space-y-2">
                            <Label htmlFor="postcode">Postcode</Label>
                            <Input 
                              id="postcode"
                              value={postcode}
                              onChange={(e) => setPostcode(e.target.value.replace(/\D/g, '').slice(0, 4))}
                              placeholder="0000"
                            />
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {/* Merchant ID Section */}
                    {profileSection === 'merchant' && (
                      <div className="space-y-4">
                        <div className="bg-muted/30 p-3 rounded-md">
                          <div className="flex items-center justify-between">
                            <div className="space-y-1">
                              <Label htmlFor="merchantId">Your Merchant ID (for API integration)</Label>
                              <div className="flex items-center gap-2">
                                <code className="bg-gray-100 p-2 rounded text-sm font-mono w-full overflow-x-auto">
                                  {merchantId}
                                </code>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => {
                                    navigator.clipboard.writeText(merchantId);
                                    toast({
                                      title: "Copied!",
                                      description: "Merchant ID copied to clipboard",
                                    });
                                  }}
                                >
                                  Copy
                                </Button>
                              </div>
                            </div>
                          </div>
                          <p className="text-xs text-muted-foreground mt-2">
                            This is your unique merchant identifier. You'll need this when integrating with our API.
                          </p>
                        </div>
                        
                        <div className="bg-blue-50 border border-blue-200 p-4 rounded-md">
                          <h4 className="text-sm font-medium text-blue-800 mb-2">API Documentation</h4>
                          <p className="text-xs text-blue-700 mb-3">
                            Learn how to integrate your systems with our API to automate loyalty points and rewards.
                          </p>
                          <Button variant="outline" size="sm" className="text-blue-700 border-blue-300">
                            View API Docs
                          </Button>
                        </div>
                      </div>
                    )}
                    
                    <div className="flex justify-end">
                      <Button 
                        className="gap-2" 
                        onClick={handleSave}
                        disabled={loading}
                      >
                        <Save className="h-4 w-4" />
                        {loading ? "Saving..." : "Save Changes"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="notifications" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {/* Left Submenu */}
              <div className="md:col-span-1">
                <Card className="overflow-hidden rounded-md">
                  <div className="p-2">
                    {[
                      { id: 'channels', label: 'Notification Channels', icon: <Bell className="h-4 w-4" /> },
                      { id: 'customers', label: 'Customer Milestones', icon: <User className="h-4 w-4" /> },
                      { id: 'rewards', label: 'Rewards Activity', icon: <Gift className="h-4 w-4" /> },
                      { id: 'business', label: 'Business Performance', icon: <BarChart className="h-4 w-4" /> },
                      { id: 'system', label: 'System Notifications', icon: <ShieldAlert className="h-4 w-4" /> }
                    ].map(item => (
                      <button
                        key={item.id}
                        onClick={() => setNotificationSection(item.id)}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-md text-left transition-colors ${
                          notificationSection === item.id 
                            ? 'bg-blue-50 text-blue-700' 
                            : 'hover:bg-gray-100'
                        }`}
                      >
                        <div className={`p-1.5 rounded-md ${
                          notificationSection === item.id 
                            ? 'bg-blue-100 text-blue-700' 
                            : 'bg-gray-100 text-gray-500'
                        }`}>
                          {item.icon}
                        </div>
                        <span className="font-medium text-sm">{item.label}</span>
                      </button>
                    ))}
                  </div>
                </Card>
              </div>
              
              {/* Right Content Area */}
              <div className="md:col-span-3">
                <Card className="rounded-md">
                  <CardHeader>
                    <CardTitle>
                      {notificationSection === 'channels' && "Notification Channels"}
                      {notificationSection === 'customers' && "Customer Milestones"}
                      {notificationSection === 'rewards' && "Rewards Activity"}
                      {notificationSection === 'business' && "Business Performance"}
                      {notificationSection === 'system' && "System Notifications"}
                    </CardTitle>
                    <CardDescription>
                      {notificationSection === 'channels' && "Choose how you want to receive notifications"}
                      {notificationSection === 'customers' && "Notifications about customer activity and achievements"}
                      {notificationSection === 'rewards' && "Notifications about rewards and points"}
                      {notificationSection === 'business' && "Notifications about your business metrics and performance"}
                      {notificationSection === 'system' && "Important system and account notifications"}
                    </CardDescription>
                  </CardHeader>
                  
                  <CardContent className="space-y-6">
                    {/* Notification Channels Section */}
                    {notificationSection === 'channels' && (
                      <div className="space-y-4">
                        <p className="text-sm text-muted-foreground">
                          Select how you want to receive notifications
                        </p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="flex items-center space-x-2">
                            <Checkbox 
                              id="notifyEmail" 
                              checked={notificationsEmail}
                              onCheckedChange={setNotificationsEmail}
                            />
                            <div className="grid gap-1.5">
                              <Label htmlFor="notifyEmail" className="font-medium">Email</Label>
                              <p className="text-sm text-muted-foreground">
                                Receive notifications via email
                              </p>
                            </div>
                          </div>
                          
                          <div className="flex items-center space-x-2">
                            <Checkbox 
                              id="notifySMS" 
                              checked={notificationsSMS}
                              onCheckedChange={setNotificationsSMS}
                            />
                            <div className="grid gap-1.5">
                              <Label htmlFor="notifySMS" className="font-medium">SMS</Label>
                              <p className="text-sm text-muted-foreground">
                                Receive notifications via text message
                              </p>
                            </div>
                          </div>
                          
                          <div className="flex items-center space-x-2">
                            <Checkbox 
                              id="notifyApp" 
                              checked={notificationsApp}
                              onCheckedChange={setNotificationsApp}
                            />
                            <div className="grid gap-1.5">
                              <Label htmlFor="notifyApp" className="font-medium">In-App</Label>
                              <p className="text-sm text-muted-foreground">
                                Receive notifications in the dashboard
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {/* Customer Milestones Section */}
                    {notificationSection === 'customers' && (
                      <div className="space-y-4">
                        <div className="space-y-4">
                          <div className="flex items-center justify-between">
                            <div className="space-y-0.5">
                              <Label>First Purchase</Label>
                              <p className="text-sm text-muted-foreground">
                                When a new customer makes their first purchase
                              </p>
                            </div>
                            <Switch 
                              checked={notifications.customerFirstPurchase}
                              onCheckedChange={(checked) => updateNotification('customerFirstPurchase', checked)}
                            />
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <div className="space-y-0.5">
                              <Label>Purchase Milestones</Label>
                              <p className="text-sm text-muted-foreground">
                                When customers reach their 10th, 25th, 50th purchase
                              </p>
                            </div>
                            <Switch 
                              checked={notifications.customerMilestone}
                              onCheckedChange={(checked) => updateNotification('customerMilestone', checked)}
                            />
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <div className="space-y-0.5">
                              <Label>Customer Birthdays</Label>
                              <p className="text-sm text-muted-foreground">
                                When it's a customer's birthday (if provided)
                              </p>
                            </div>
                            <Switch 
                              checked={notifications.customerBirthday}
                              onCheckedChange={(checked) => updateNotification('customerBirthday', checked)}
                            />
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <div className="space-y-0.5">
                              <Label>Loyalty Anniversary</Label>
                              <p className="text-sm text-muted-foreground">
                                When a customer has been in your loyalty program for 1 year
                              </p>
                            </div>
                            <Switch 
                              checked={notifications.customerAnniversary}
                              onCheckedChange={(checked) => updateNotification('customerAnniversary', checked)}
                            />
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {/* Rewards Activity Section */}
                    {notificationSection === 'rewards' && (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>New Reward Created</Label>
                            <p className="text-sm text-muted-foreground">
                              When you or your team creates a new reward
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.rewardCreated}
                            onCheckedChange={(checked) => updateNotification('rewardCreated', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Reward Redemptions</Label>
                            <p className="text-sm text-muted-foreground">
                              When a customer redeems a reward
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.rewardRedeemed}
                            onCheckedChange={(checked) => updateNotification('rewardRedeemed', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Rewards Expiring</Label>
                            <p className="text-sm text-muted-foreground">
                              When rewards are about to expire
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.rewardExpiring}
                            onCheckedChange={(checked) => updateNotification('rewardExpiring', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Points Awarded</Label>
                            <p className="text-sm text-muted-foreground">
                              When points are awarded to customers
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.pointsAwarded}
                            onCheckedChange={(checked) => updateNotification('pointsAwarded', checked)}
                          />
                        </div>
                      </div>
                    )}
                    
                    {/* Business Performance Section */}
                    {notificationSection === 'business' && (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Daily Summary</Label>
                            <p className="text-sm text-muted-foreground">
                              Daily summary of loyalty activity and sales
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.dailySummary}
                            onCheckedChange={(checked) => updateNotification('dailySummary', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Weekly Report</Label>
                            <p className="text-sm text-muted-foreground">
                              Weekly performance report and insights
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.weeklySummary}
                            onCheckedChange={(checked) => updateNotification('weeklySummary', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Monthly Analytics</Label>
                            <p className="text-sm text-muted-foreground">
                              Monthly detailed analytics and trends
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.monthlySummary}
                            onCheckedChange={(checked) => updateNotification('monthlySummary', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Sales Targets</Label>
                            <p className="text-sm text-muted-foreground">
                              When you reach or miss sales targets
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.salesTarget}
                            onCheckedChange={(checked) => updateNotification('salesTarget', checked)}
                          />
                        </div>
                      </div>
                    )}
                    
                    {/* System Notifications Section */}
                    {notificationSection === 'system' && (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>System Updates</Label>
                            <p className="text-sm text-muted-foreground">
                              New features and system improvements
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.systemUpdates}
                            onCheckedChange={(checked) => updateNotification('systemUpdates', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Security Alerts</Label>
                            <p className="text-sm text-muted-foreground">
                              Important security notifications
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.securityAlerts}
                            onCheckedChange={(checked) => updateNotification('securityAlerts', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Payment Issues</Label>
                            <p className="text-sm text-muted-foreground">
                              Problems with billing or payments
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.paymentIssues}
                            onCheckedChange={(checked) => updateNotification('paymentIssues', checked)}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label>Low Reward Inventory</Label>
                            <p className="text-sm text-muted-foreground">
                              When reward inventory is running low
                            </p>
                          </div>
                          <Switch 
                            checked={notifications.lowInventory}
                            onCheckedChange={(checked) => updateNotification('lowInventory', checked)}
                          />
                        </div>
                      </div>
                    )}
                    
                    <div className="flex justify-end">
                      <Button 
                        className="gap-2" 
                        onClick={handleSave}
                        disabled={loading}
                      >
                        <Save className="h-4 w-4" />
                        {loading ? "Saving..." : "Save Changes"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="billing" className="space-y-6">
            {/* Billing content remains the same */}
          </TabsContent>
          
          <TabsContent value="team">
            <Card className="rounded-md">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Team Members</CardTitle>
                    <CardDescription>
                      Manage people who have access to your account
                    </CardDescription>
                  </div>
                  <Button>Invite Team Member</Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Representative Details Section */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Primary Representative</h3>
                  <p className="text-sm text-muted-foreground">
                    This person will be the main contact for your business
                  </p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="repName">Representative Name</Label>
                      <Input
                        id="repName"
                        placeholder="Full name"
                        value={repName}
                        onChange={(e) => setRepName(e.target.value)}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="repPhone">Contact Phone</Label>
                      <Input
                        id="repPhone"
                        placeholder="Phone number"
                        value={repPhone}
                        onChange={(e) => setRepPhone(e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="repEmail">Contact Email</Label>
                    <Input
                      id="repEmail"
                      type="email"
                      placeholder="contact@example.com"
                      value={repEmail}
                      onChange={(e) => setRepEmail(e.target.value)}
                    />
                  </div>
                  
                  <div className="flex justify-end">
                    <Button 
                      className="gap-2" 
                      onClick={handleSave}
                      disabled={loading}
                    >
                      <Save className="h-4 w-4" />
                      {loading ? "Saving..." : "Save Changes"}
                    </Button>
                  </div>
                </div>
                
                <Separator />
                
                {/* Team Members Section */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Additional Team Members</h3>
                  <p className="text-sm text-muted-foreground">
                    Invite colleagues to help manage your business
                  </p>
                  
                  <div className="bg-muted/30 rounded-md p-8 text-center">
                    <Users className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                    <p className="text-muted-foreground mb-4">
                      No team members yet. Invite someone to get started.
                    </p>
                    <Button>
                      Invite Team Member
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="store">
            <Card className="rounded-md">
              <CardHeader>
                <CardTitle>Store Settings</CardTitle>
                <CardDescription>
                  Customize your customer-facing loyalty store
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Operating Hours</h3>
                  <p className="text-sm text-muted-foreground">Set your business operating hours</p>
                  
                  <div className="space-y-4 max-h-[400px] overflow-y-auto pr-2">
                    {daysOfWeek.map(day => {
                      const dayLower = day.toLowerCase()
                      return (
                        <div key={day} className="space-y-2 pb-2 border-b">
                          <div className="flex items-center space-x-2">
                            <Checkbox 
                              id={`open-${dayLower}`}
                              checked={operatingHours[dayLower]?.isOpen}
                              onCheckedChange={(checked) => 
                                updateOperatingHours(dayLower, 'isOpen', checked)
                              }
                            />
                            <Label htmlFor={`open-${dayLower}`} className="font-medium">{day}</Label>
                          </div>
                          
                          {operatingHours[dayLower]?.isOpen && (
                            <div className="grid grid-cols-2 gap-4 ml-6 mt-2">
                              <div className="space-y-1">
                                <Label htmlFor={`open-time-${dayLower}`} className="text-xs">Open</Label>
                                <Input
                                  id={`open-time-${dayLower}`}
                                  type="time"
                                  value={operatingHours[dayLower]?.openTime || "09:00"}
                                  onChange={(e) => updateOperatingHours(dayLower, 'openTime', e.target.value)}
                                />
                              </div>
                              <div className="space-y-1">
                                <Label htmlFor={`close-time-${dayLower}`} className="text-xs">Close</Label>
                                <Input
                                  id={`close-time-${dayLower}`}
                                  type="time"
                                  value={operatingHours[dayLower]?.closeTime || "17:00"}
                                  onChange={(e) => updateOperatingHours(dayLower, 'closeTime', e.target.value)}
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Store Configuration</h3>
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label htmlFor="enableStore">Enable Customer Store</Label>
                      <p className="text-sm text-muted-foreground">
                        Allow customers to view and redeem rewards
                      </p>
                    </div>
                    <Switch id="enableStore" defaultChecked />
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <Button 
                    className="gap-2" 
                    onClick={handleSave}
                    disabled={loading}
                  >
                    <Save className="h-4 w-4" />
                    {loading ? "Saving..." : "Save Changes"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="integrations">
            <div className="space-y-4">
              <Card className="rounded-md">
                <CardHeader>
                  <CardTitle>Integrations</CardTitle>
                  <CardDescription>
                    Connect your business tools with your loyalty program
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Gmail Integration Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <Mail className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">Gmail</CardTitle>
                              <CardDescription>Email Integration</CardDescription>
                            </div>
                          </div>
                          <Badge variant="outline" className={`${!pointOfSale || pointOfSale === 'none' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' : 'bg-green-50 text-green-700 border-green-200'}`}>
                            {!pointOfSale || pointOfSale === 'none' ? 'Not Configured' : 'Connected'}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          Connect your Gmail account to enable automated email sending and communication with your customers.
                        </p>
                      </CardContent>
                      <CardFooter>
                        {(!pointOfSale || pointOfSale === 'none') ? (
                          <Button 
                            variant="default"
                            className="w-full rounded-md"
                            onClick={() => window.open('https://accounts.google.com/o/oauth2/auth?scope=email&redirect_uri=https://tap-loyalty.com/auth/callback&response_type=code&client_id=YOUR_CLIENT_ID&access_type=offline', '_blank')}
                          >
                            Connect with Gmail
                          </Button>
                        ) : (
                          <div className="w-full flex gap-2">
                            <Button 
                              variant="outline"
                              className="flex-1"
                              onClick={() => window.open('https://tap-loyalty.com/integrations/gmail/settings', '_blank')}
                            >
                              Configure
                            </Button>
                            <Button 
                              variant="destructive"
                              className="flex-1"
                              onClick={() => {
                                setPointOfSale('none');
                                toast({
                                  title: "Disconnected",
                                  description: "Gmail integration has been disconnected",
                                });
                              }}
                            >
                              Disconnect
                            </Button>
                          </div>
                        )}
                      </CardFooter>
                    </Card>
                    
                    {/* Lightspeed Integration Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <Layers className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">Lightspeed Retail</CardTitle>
                              <CardDescription>Point of Sale Integration</CardDescription>
                            </div>
                          </div>
                          <Badge variant="outline" className={`${pointOfSale !== 'lightspeed' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' : 'bg-green-50 text-green-700 border-green-200'}`}>
                            {pointOfSale !== 'lightspeed' ? 'Not Configured' : 'Connected'}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          Connect to Lightspeed Retail POS (R-Series) for advanced inventory and customer management.
                        </p>
                      </CardContent>
                      <CardFooter>
                        {pointOfSale !== 'lightspeed' ? (
                          <Button 
                            variant="default"
                            className="w-full rounded-md"
                            onClick={() => window.open('https://cloud.lightspeedapp.com/oauth/authorize?response_type=code&client_id=YOUR_CLIENT_ID&redirect_uri=https://tap-loyalty.com/auth/callback', '_blank')}
                          >
                            Connect with Lightspeed
                          </Button>
                        ) : (
                          <div className="w-full flex gap-2">
                            <Button 
                              variant="outline"
                              className="flex-1"
                              onClick={() => window.open('https://tap-loyalty.com/integrations/lightspeed/settings', '_blank')}
                            >
                              Configure
                            </Button>
                            <Button 
                              variant="destructive"
                              className="flex-1"
                              onClick={() => {
                                setPointOfSale('none');
                                toast({
                                  title: "Disconnected",
                                  description: "Lightspeed integration has been disconnected",
                                });
                              }}
                            >
                              Disconnect
                            </Button>
                          </div>
                        )}
                      </CardFooter>
                    </Card>
                    
                    {/* Square Integration Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <CreditCard className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">Square</CardTitle>
                              <CardDescription>Payment Provider Integration</CardDescription>
                            </div>
                          </div>
                          <Badge variant="outline" className={`${paymentProvider !== 'square' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' : 'bg-green-50 text-green-700 border-green-200'}`}>
                            {paymentProvider !== 'square' ? 'Not Configured' : 'Connected'}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          Sync customer data, transactions, and payments with your Square account for a seamless integration.
                        </p>
                      </CardContent>
                      <CardFooter>
                        {paymentProvider !== 'square' ? (
                          <Button 
                            variant="default"
                            className="w-full rounded-md"
                            onClick={() => window.open('https://connect.squareup.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&scope=PAYMENTS_WRITE+PAYMENTS_READ+ORDERS_WRITE+ORDERS_READ&response_type=code', '_blank')}
                          >
                            Connect with Square
                          </Button>
                        ) : (
                          <div className="w-full flex gap-2">
                            <Button 
                              variant="outline"
                              className="flex-1"
                              onClick={() => window.open('https://tap-loyalty.com/integrations/square/settings', '_blank')}
                            >
                              Configure
                            </Button>
                            <Button 
                              variant="destructive"
                              className="flex-1"
                              onClick={() => {
                                setPaymentProvider('none');
                                toast({
                                  title: "Disconnected",
                                  description: "Square integration has been disconnected",
                                });
                              }}
                            >
                              Disconnect
                            </Button>
                          </div>
                        )}
                      </CardFooter>
                    </Card>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="security">
            <Card className="rounded-md">
              <CardHeader>
                <CardTitle>Security Settings</CardTitle>
                <CardDescription>
                  Manage account security and business verification
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Business Verification</h3>
                  
                  <div className="space-y-2">
                    <Label htmlFor="abn">ABN (Australian Business Number)</Label>
                    <Input
                      id="abn"
                      placeholder="11 digit ABN"
                      value={abn}
                      onChange={(e) => setAbn(e.target.value.replace(/\D/g, '').slice(0, 11))}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="abnVerification">ABN Verification Document</Label>
                    <div className="border rounded-md p-4 bg-gray-50">
                      <div className="flex items-center justify-center w-full">
                        <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-md cursor-pointer bg-white hover:bg-gray-50">
                          <div className="flex flex-col items-center justify-center pt-5 pb-6">
                            {abnVerificationFile ? (
                              <div className="text-center">
                                <p className="text-sm text-green-600 mb-2">File selected</p>
                                <p className="text-xs text-gray-500">{abnVerificationFile.name}</p>
                              </div>
                            ) : abnVerificationUrl ? (
                              <div className="text-center">
                                <p className="text-sm text-blue-600 mb-2">Document on file</p>
                                <p className="text-xs text-gray-500">Click to replace</p>
                              </div>
                            ) : (
                              <>
                                <Upload className="w-8 h-8 mb-2 text-gray-500" />
                                <p className="mb-2 text-sm text-gray-500">
                                  <span className="font-semibold">Click to upload</span> or drag and drop
                                </p>
                                <p className="text-xs text-gray-500">PDF, PNG, JPG (MAX. 10MB)</p>
                              </>
                            )}
                          </div>
                          <input 
                            id="abnVerification" 
                            type="file" 
                            className="hidden" 
                            onChange={handleAbnFileChange}
                            accept=".pdf,.png,.jpg,.jpeg"
                          />
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Business Systems</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="pointOfSale">Point of Sale System</Label>
                      <select 
                        id="pointOfSale"
                        value={pointOfSale}
                        onChange={(e) => setPointOfSale(e.target.value)}
                        className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                      >
                        {pointOfSaleSystems.map(system => (
                          <option key={system.value} value={system.value}>
                            {system.label}
                          </option>
                        ))}
                      </select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="paymentProvider">Payment Provider</Label>
                      <select 
                        id="paymentProvider"
                        value={paymentProvider}
                        onChange={(e) => setPaymentProvider(e.target.value)}
                        className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                      >
                        {paymentProviders.map(provider => (
                          <option key={provider.value} value={provider.value}>
                            {provider.label}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Account Security</h3>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label htmlFor="2fa">Two-Factor Authentication</Label>
                      <p className="text-sm text-muted-foreground">
                        Add an extra layer of security to your account
                      </p>
                    </div>
                    <Button variant="outline">Enable</Button>
                  </div>
                  
                  <Separator />
                  
                  <div>
                    <h3 className="text-lg font-medium mb-2">Password</h3>
                    <Button variant="outline">Change Password</Button>
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <Button 
                    className="gap-2" 
                    onClick={handleSave}
                    disabled={loading}
                  >
                    <Save className="h-4 w-4" />
                    {loading ? "Saving..." : "Save Changes"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="tapagent" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {/* Left Submenu */}
              <div className="md:col-span-1">
                <Card className="overflow-hidden rounded-md">
                  <div className="p-4 border-b">
                    <h3 className="font-medium text-sm">Tap Agent</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Help our AI understand your business to create better rewards
                    </p>
                  </div>
                  
                  <div className="p-2">
                    {[
                      { id: 'products', label: 'Products & Services', icon: <Store className="h-4 w-4" /> },
                      { id: 'customers', label: 'Customer Information', icon: <User className="h-4 w-4" /> },
                      { id: 'competition', label: 'Competition & Market', icon: <BarChart className="h-4 w-4" /> },
                      { id: 'goals', label: 'Goals & Strategy', icon: <Gift className="h-4 w-4" /> }
                    ].map(item => (
                      <button
                        key={item.id}
                        onClick={() => setAgentSection(item.id)}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-md text-left transition-colors ${
                          agentSection === item.id 
                            ? 'bg-blue-50 text-blue-700' 
                            : 'hover:bg-gray-100'
                        }`}
                      >
                        <div className={`p-1.5 rounded-md ${
                          agentSection === item.id 
                            ? 'bg-blue-100 text-blue-700' 
                            : 'bg-gray-100 text-gray-500'
                        }`}>
                          {item.icon}
                        </div>
                        <span className="font-medium text-sm">{item.label}</span>
                      </button>
                    ))}
                  </div>
                </Card>
              </div>
              
              {/* Right Content Area */}
              <div className="md:col-span-3">
                <Card className="rounded-md">
                  <CardHeader>
                    <CardTitle>
                      {agentSection === 'products' && "Products & Services"}
                      {agentSection === 'customers' && "Customer Information"}
                      {agentSection === 'competition' && "Competition & Market"}
                      {agentSection === 'goals' && "Goals & Strategy"}
                    </CardTitle>
                    <CardDescription>
                      {agentSection === 'products' && "Tell us about what you sell"}
                      {agentSection === 'customers' && "Help us understand your customers"}
                      {agentSection === 'competition' && "Share insights about your market"}
                      {agentSection === 'goals' && "What do you want to achieve with rewards?"}
                    </CardDescription>
                  </CardHeader>
                  
                  <CardContent className="space-y-6">
                    {/* Products & Services Section */}
                    {agentSection === 'products' && (
                      <div className="space-y-4">
                        <div className="bg-amber-50 border border-amber-200 p-4 rounded-md mb-6">
                          <div className="flex items-start gap-3">
                            <Brain className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                            <div>
                              <h4 className="text-sm font-medium text-amber-800">Tap Agent Insights</h4>
                              <p className="text-xs text-amber-700 mt-1">
                                The more details you provide about your products and services, the better our AI can tailor rewards that align with your business offerings. This helps create more relevant and effective loyalty programs.
                              </p>
                            </div>
                          </div>
                        </div>
                      
                        <div className="space-y-2">
                          <Label htmlFor="productTypes">Types of Products/Services Offered</Label>
                          <Input
                            id="productTypes"
                            placeholder="What kinds of products or services do you sell?"
                            value={businessInsights.productTypes}
                            onChange={(e) => updateBusinessInsight('productTypes', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Coffee, pastries, sandwiches, salads, catering services"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="topProducts">Best-Selling Products/Services</Label>
                          <Input
                            id="topProducts"
                            placeholder="What are your most popular items?"
                            value={businessInsights.topProducts}
                            onChange={(e) => updateBusinessInsight('topProducts', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Flat white coffee, avocado toast, breakfast bagel"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="productPriceRange">Price Range</Label>
                          <Input
                            id="productPriceRange"
                            placeholder="What are your typical price points?"
                            value={businessInsights.productPriceRange}
                            onChange={(e) => updateBusinessInsight('productPriceRange', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Coffees $4-6, Light meals $12-18, Full meals $20-30"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="productSeasonality">Seasonal Variations</Label>
                          <Input
                            id="productSeasonality"
                            placeholder="Do you have seasonal products or busy periods?"
                            value={businessInsights.productSeasonality}
                            onChange={(e) => updateBusinessInsight('productSeasonality', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Iced drinks in summer, hot soups in winter, busier during weekday lunch hours"
                          </p>
                        </div>
                      </div>
                    )}
                    
                    {/* Customer Information Section */}
                    {agentSection === 'customers' && (
                      <div className="space-y-4">
                        <div className="bg-amber-50 border border-amber-200 p-4 rounded-md mb-6">
                          <div className="flex items-start gap-3">
                            <Brain className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                            <div>
                              <h4 className="text-sm font-medium text-amber-800">Tap Agent Insights</h4>
                              <p className="text-xs text-amber-700 mt-1">
                                Understanding your customers helps our AI create personalized rewards that resonate with their preferences and behaviors. This information improves customer engagement and loyalty program effectiveness.
                              </p>
                            </div>
                          </div>
                        </div>
                      
                        <div className="space-y-2">
                          <Label htmlFor="customerDemographics">Customer Demographics</Label>
                          <Input
                            id="customerDemographics"
                            placeholder="Who are your typical customers?"
                            value={businessInsights.customerDemographics}
                            onChange={(e) => updateBusinessInsight('customerDemographics', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Young professionals 25-40, families on weekends, local office workers"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="customerPreferences">Customer Preferences</Label>
                          <Input
                            id="customerPreferences"
                            placeholder="What do your customers care about most?"
                            value={businessInsights.customerPreferences}
                            onChange={(e) => updateBusinessInsight('customerPreferences', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Quality coffee, quick service, healthy options, sustainable packaging"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="frequencyOfVisit">Visit Frequency</Label>
                          <Input
                            id="frequencyOfVisit"
                            placeholder="How often do customers typically visit?"
                            value={businessInsights.frequencyOfVisit}
                            onChange={(e) => updateBusinessInsight('frequencyOfVisit', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Regulars visit 3-4 times per week, casual customers 1-2 times per month"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="averagePurchaseValue">Average Purchase Value</Label>
                          <Input
                            id="averagePurchaseValue"
                            placeholder="What's the typical spend per customer visit?"
                            value={businessInsights.averagePurchaseValue}
                            onChange={(e) => updateBusinessInsight('averagePurchaseValue', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "$15 for breakfast, $22 for lunch, $8 for coffee-only visits"
                          </p>
                        </div>
                      </div>
                    )}
                    
                    {/* Competition & Market Section */}
                    {agentSection === 'competition' && (
                      <div className="space-y-4">
                        <div className="bg-amber-50 border border-amber-200 p-4 rounded-md mb-6">
                          <div className="flex items-start gap-3">
                            <Brain className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                            <div>
                              <h4 className="text-sm font-medium text-amber-800">Tap Agent Insights</h4>
                              <p className="text-xs text-amber-700 mt-1">
                                Market context helps our AI understand how to differentiate your loyalty program from competitors. These insights allow us to suggest rewards that highlight your unique strengths and address specific market challenges.
                              </p>
                            </div>
                          </div>
                        </div>
                      
                        <div className="space-y-2">
                          <Label htmlFor="mainCompetitors">Main Competitors</Label>
                          <Input
                            id="mainCompetitors"
                            placeholder="Who are your primary competitors?"
                            value={businessInsights.mainCompetitors}
                            onChange={(e) => updateBusinessInsight('mainCompetitors', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Local: Bean There Cafe, Chain: Starbucks and Gloria Jean's"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="uniqueSellingPoints">Unique Selling Points</Label>
                          <Input
                            id="uniqueSellingPoints"
                            placeholder="What makes your business special?"
                            value={businessInsights.uniqueSellingPoints}
                            onChange={(e) => updateBusinessInsight('uniqueSellingPoints', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "House-roasted beans, all organic ingredients, family owned since 1998"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="industryTrends">Industry Trends</Label>
                          <Input
                            id="industryTrends"
                            placeholder="What trends are affecting your business?"
                            value={businessInsights.industryTrends}
                            onChange={(e) => updateBusinessInsight('industryTrends', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Plant-based options growing, increase in mobile ordering, specialty drinks"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="businessChallenges">Business Challenges</Label>
                          <Input
                            id="businessChallenges"
                            placeholder="What challenges is your business facing?"
                            value={businessInsights.businessChallenges}
                            onChange={(e) => updateBusinessInsight('businessChallenges', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Slower mid-afternoon periods, weekend customer retention, increasing costs"
                          </p>
                        </div>
                      </div>
                    )}
                    
                    {/* Goals & Strategy Section */}
                    {agentSection === 'goals' && (
                      <div className="space-y-4">
                        <div className="bg-amber-50 border border-amber-200 p-4 rounded-md mb-6">
                          <div className="flex items-start gap-3">
                            <Brain className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                            <div>
                              <h4 className="text-sm font-medium text-amber-800">Tap Agent Insights</h4>
                              <p className="text-xs text-amber-700 mt-1">
                                Sharing your business goals helps our AI align reward strategies with your objectives. This ensures that every reward we suggest contributes to your broader business vision and targets your desired outcomes.
                              </p>
                            </div>
                          </div>
                        </div>
                      
                        <div className="space-y-2">
                          <Label htmlFor="businessGoals">Business Goals</Label>
                          <Input
                            id="businessGoals"
                            placeholder="What are your main business goals?"
                            value={businessInsights.businessGoals}
                            onChange={(e) => updateBusinessInsight('businessGoals', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Increase weekday foot traffic, grow average order value, retain first-time visitors"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="targetedOutcomes">Desired Loyalty Outcomes</Label>
                          <Input
                            id="targetedOutcomes"
                            placeholder="What do you want your loyalty program to achieve?"
                            value={businessInsights.targetedOutcomes}
                            onChange={(e) => updateBusinessInsight('targetedOutcomes', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Increase visit frequency, encourage customers to try new items, build community"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="preferredRewardTypes">Preferred Reward Types</Label>
                          <Input
                            id="preferredRewardTypes"
                            placeholder="What kinds of rewards would you like to offer?"
                            value={businessInsights.preferredRewardTypes}
                            onChange={(e) => updateBusinessInsight('preferredRewardTypes', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Free items, discounts, early access to new products, exclusive events"
                          </p>
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="previousSuccessfulPromotions">Past Successful Promotions</Label>
                          <Input
                            id="previousSuccessfulPromotions"
                            placeholder="What promotions have worked well for you in the past?"
                            value={businessInsights.previousSuccessfulPromotions}
                            onChange={(e) => updateBusinessInsight('previousSuccessfulPromotions', e.target.value)}
                          />
                          <p className="text-xs text-muted-foreground">
                            Example: "Happy hour discounts, buy-one-get-one weekends, seasonal menu specials"
                          </p>
                        </div>
                      </div>
                    )}
                    
                    <div className="flex justify-end">
                      <Button 
                        className="gap-2" 
                        onClick={handleSave}
                        disabled={loading}
                      >
                        <Save className="h-4 w-4" />
                        {loading ? "Saving..." : "Save Changes"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="files">
            <Card className="rounded-md">
              <CardHeader>
                <CardTitle>Files & Documents</CardTitle>
                <CardDescription>
                  Manage your business documents and uploaded files
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Uploaded Documents</h3>
                  
                  <div className="grid grid-cols-1 gap-4">
                    {/* Display both real documents and mock documents */}
                    {(documents.length > 0 || abnVerificationUrl || logoUrl) ? (
                      <div className="grid grid-cols-1 gap-4">
                        {/* ABN Verification Document */}
                        {abnVerificationUrl && (
                          <div className="flex items-center justify-between p-4 border rounded-md">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-blue-50 rounded-md">
                                <FileText className="h-5 w-5 text-blue-600" />
                              </div>
                              <div>
                                <p className="font-medium">ABN Verification</p>
                                <p className="text-sm text-muted-foreground">
                                  Uploaded {new Date().toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="outline" 
                                size="sm" 
                                className="h-8 gap-1"
                                onClick={() => window.open(abnVerificationUrl, '_blank')}
                              >
                                <Download className="h-4 w-4" />
                                Download
                              </Button>
                              <Button variant="outline" size="sm" className="h-8 gap-1">
                                <Upload className="h-4 w-4" />
                                Replace
                              </Button>
                            </div>
                          </div>
                        )}
                        
                        {/* Business Logo */}
                        {logoUrl && (
                          <div className="flex items-center justify-between p-4 border rounded-md">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-blue-50 rounded-md">
                                <Image className="h-5 w-5 text-blue-600" />
                              </div>
                              <div>
                                <p className="font-medium">Business Logo</p>
                                <p className="text-sm text-muted-foreground">
                                  Uploaded {new Date().toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="outline" 
                                size="sm" 
                                className="h-8 gap-1"
                                onClick={() => window.open(logoUrl, '_blank')}
                              >
                                <Download className="h-4 w-4" />
                                Download
                              </Button>
                              <Button variant="outline" size="sm" className="h-8 gap-1">
                                <Upload className="h-4 w-4" />
                                Replace
                              </Button>
                            </div>
                          </div>
                        )}
                        
                        {/* Mock/Development Documents */}
                        {documents.map((doc, index) => (
                          <div key={index} className="flex items-center justify-between p-4 border rounded-md">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-blue-50 rounded-md">
                                <FileText className="h-5 w-5 text-blue-600" />
                              </div>
                              <div>
                                <p className="font-medium">{doc.name}</p>
                                <p className="text-sm text-muted-foreground">
                                  Uploaded {doc.uploadedAt.toLocaleDateString()}
                                </p>
                                <p className="text-xs text-gray-500 mt-1">
                                  {doc.path} (Development Preview)
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="outline" 
                                size="sm" 
                                className="h-8 gap-1"
                                onClick={() => window.open(doc.url, '_blank')}
                              >
                                <Download className="h-4 w-4" />
                                Preview
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="bg-muted/30 rounded-md p-8 text-center">
                        <FileText className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                        <p className="text-muted-foreground mb-4">
                          No documents uploaded yet. Upload a file to get started.
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                <Separator className="my-6" />

                {/* Upload New Document Section */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Upload New Document</h3>
                  <div className="border rounded-md p-4 bg-gray-50">
                    <div className="flex items-center justify-center w-full">
                      <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-md cursor-pointer bg-white hover:bg-gray-50">
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <Upload className="w-8 h-8 mb-2 text-gray-500" />
                          <p className="mb-2 text-sm text-gray-500">
                            <span className="font-semibold">Click to upload</span> or drag and drop
                          </p>
                          <p className="text-xs text-gray-500">PDF, PNG, JPG, DOCX (MAX. 10MB)</p>
                          <p className="text-xs text-blue-600 mt-2">
                            Files will be saved to: gs://tap-loyalty-fb6d0/merchants/{merchantId}/documents
                          </p>
                        </div>
                        <input 
                          type="file" 
                          className="hidden" 
                          accept=".pdf,.png,.jpg,.jpeg,.docx"
                          onChange={handleDocumentFileChange}
                        />
                      </label>
                    </div>
                  </div>
                </div>

                <div className="flex justify-end mt-6">
                  <Button 
                    className="gap-2" 
                    onClick={handleSave}
                    disabled={loading}
                  >
                    <Save className="h-4 w-4" />
                    {loading ? "Saving..." : "Save Changes"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="admin">
            <div className="space-y-4">
              <Card className="rounded-md">
                <CardHeader>
                  <CardTitle>Admin Panel</CardTitle>
                  <CardDescription>
                    Manage your account and system configurations
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Merchant Management Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <Store className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">Merchant Management</CardTitle>
                              <CardDescription>Configure business settings</CardDescription>
                            </div>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          Access advanced merchant settings, business configurations, and manage multiple locations.
                        </p>
                      </CardContent>
                      <CardFooter>
                        <Button 
                          variant="default"
                          className="w-full rounded-md"
                          onClick={() => router.push('/admin')}
                        >
                          Manage
                        </Button>
                      </CardFooter>
                    </Card>
                    
                    {/* Customer Data Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <Users className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">Customer Data</CardTitle>
                              <CardDescription>View and manage customer data</CardDescription>
                            </div>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          View detailed customer information, export data, and manage customer profiles at an advanced level.
                        </p>
                      </CardContent>
                      <CardFooter>
                        <Button 
                          variant="default"
                          className="w-full rounded-md"
                          onClick={() => router.push('/admin')}
                        >
                          Access
                        </Button>
                      </CardFooter>
                    </Card>
                    
                    {/* System Configuration Card */}
                    <Card>
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                              <ShieldCheck className="w-6 h-6" />
                            </div>
                            <div>
                              <CardTitle className="text-base font-medium">System Configuration</CardTitle>
                              <CardDescription>Advanced system settings</CardDescription>
                            </div>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <p className="text-sm text-muted-foreground">
                          Configure system behavior, scheduled tasks, and advanced security settings.
                        </p>
                      </CardContent>
                      <CardFooter>
                        <Button 
                          variant="default"
                          className="w-full rounded-md"
                          onClick={() => router.push('/admin')}
                        >
                          Configure
                        </Button>
                      </CardFooter>
                    </Card>
                  </div>
                  
                  {/* Admin Tools Section */}
                  <div className="pt-6 border-t">
                    <h3 className="text-lg font-medium mb-4">Admin Tools</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-start space-x-3 p-4 border rounded-md hover:bg-gray-50 transition-colors">
                        <div className="p-2 bg-blue-50 rounded-md">
                          <BarChart className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-sm">Analytics Dashboard</h4>
                          <p className="text-xs text-muted-foreground mt-1">
                            Access detailed analytics and reporting tools
                          </p>
                          <Button variant="link" size="sm" className="p-0 h-auto mt-2" onClick={() => router.push('/admin')}>
                            View Analytics
                          </Button>
                        </div>
                      </div>
                      
                      <div className="flex items-start space-x-3 p-4 border rounded-md hover:bg-gray-50 transition-colors">
                        <div className="p-2 bg-blue-50 rounded-md">
                          <FileText className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-sm">Logs & Audit Trail</h4>
                          <p className="text-xs text-muted-foreground mt-1">
                            Review system logs and user activities
                          </p>
                          <Button variant="link" size="sm" className="p-0 h-auto mt-2" onClick={() => router.push('/admin')}>
                            View Logs
                          </Button>
                        </div>
                      </div>
                      
                      <div className="flex items-start space-x-3 p-4 border rounded-md hover:bg-gray-50 transition-colors">
                        <div className="p-2 bg-blue-50 rounded-md">
                          <User className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-sm">User Management</h4>
                          <p className="text-xs text-muted-foreground mt-1">
                            Manage user accounts and access permissions
                          </p>
                          <Button variant="link" size="sm" className="p-0 h-auto mt-2" onClick={() => router.push('/admin')}>
                            Manage Users
                          </Button>
                        </div>
                      </div>
                      
                      <div className="flex items-start space-x-3 p-4 border rounded-md hover:bg-gray-50 transition-colors">
                        <div className="p-2 bg-blue-50 rounded-md">
                          <Gift className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-sm">Rewards Management</h4>
                          <p className="text-xs text-muted-foreground mt-1">
                            Configure global reward settings and templates
                          </p>
                          <Button variant="link" size="sm" className="p-0 h-auto mt-2" onClick={() => router.push('/admin')}>
                            Manage Rewards
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex justify-center mt-6">
                    <Button
                      variant="outline"
                      size="lg"
                      className="gap-2"
                      onClick={() => router.push('/admin')}
                    >
                      <ShieldAlert className="h-4 w-4" />
                      Go to Admin Panel
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </PageTransition>
  )
}

export default SettingsPage "use client"

import { useState } from "react"
import { Mail, Package, AlertCircle, CheckCircle, XCircle, ChevronDown, Star, Clock, Eye } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { useToast } from "@/components/ui/use-toast"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetFooter,
  SheetClose,
} from "@/components/ui/sheet"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

// Define types for agent actions
interface AgentAction {
  id: string
  type: "email" | "offer" | "program" | "other"
  title: string
  description: string
  priority: "high" | "medium" | "low"
  timestamp: Date
  agent: "customer-service" | "marketing" | "loyalty" | "other"
  content: any
  status: "pending" | "approved" | "declined"
}

// Add a gradient text component for Agent branding
const GradientText = ({ children }: { children: React.ReactNode }) => {
  return (
    <span className="bg-gradient-to-r from-blue-500 to-orange-500 bg-clip-text text-transparent font-semibold">
      {children}
    </span>
  );
};

export default function AgentInboxPage() {
  const { toast } = useToast()
  const [activeTab, setActiveTab] = useState<string>("all")
  const [selectedAction, setSelectedAction] = useState<AgentAction | null>(null)
  const [isDetailSheetOpen, setIsDetailSheetOpen] = useState(false)
  const [pendingActions, setPendingActions] = useState<AgentAction[]>([
    {
      id: "act-1",
      type: "email",
      title: "Email Response to Customer Inquiry",
      description: "A customer has asked about product availability. I've drafted a response.",
      priority: "high",
      timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 mins ago
      agent: "customer-service",
      content: {
        customerEmail: "sarah.johnson@example.com",
        customerName: "Sarah Johnson",
        subject: "Product Availability Inquiry",
        inquiry: "Hello, I'm interested in purchasing your premium coffee subscription, but I wanted to check if it's available for international shipping? I'm located in Canada. Also, do you offer sample packs before committing to a full subscription? Thanks, Sarah",
        suggestedResponse: "Hi Sarah,\n\nThank you for your interest in our premium coffee subscription! I'm happy to inform you that we do ship to Canada, with deliveries typically taking 5-7 business days.\n\nRegarding sample packs, we actually do offer a 'Coffee Explorer' package that includes 3 small bags of our most popular blends. It's a perfect way to experience our coffee before committing to a full subscription. The sample pack is priced at $14.99 with free shipping for Canadian customers.\n\nWould you like me to send you more details about our international shipping policies or the Coffee Explorer sample pack?\n\nLooking forward to helping you enjoy our coffee!\n\nBest regards,\nThe Coffee House Team"
      },
      status: "pending"
    },
    {
      id: "act-2",
      type: "offer",
      title: "Personalized Discount Offer",
      description: "This customer hasn't purchased in 45 days. I recommend sending them a special offer.",
      priority: "medium",
      timestamp: new Date(Date.now() - 1000 * 60 * 120), // 2 hours ago
      agent: "marketing",
      content: {
        customerEmail: "mike.roberts@example.com",
        customerName: "Mike Roberts",
        lastPurchaseDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 45), // 45 days ago
        purchaseHistory: [
          { date: "2023-06-15", amount: 68.50, items: ["Medium Roast Coffee (2 lbs)", "Ceramic Pour Over"] },
          { date: "2023-04-02", amount: 32.75, items: ["Light Roast Coffee (1 lb)", "Coffee Filters"] },
          { date: "2023-02-18", amount: 49.99, items: ["Coffee Gift Box", "Travel Mug"] }
        ],
        suggestedOffer: {
          discountType: "percentage",
          discountAmount: 15,
          expirationDays: 7,
          message: "We miss you! Here's 15% off your next order.",
          reasoning: "Customer has made 3 purchases averaging $50.41 but hasn't returned in 45 days. Our data shows that customers who receive a 15% offer within 45-60 days of their last purchase have a 42% return rate."
        }
      },
      status: "pending"
    },
    {
      id: "act-3",
      type: "program",
      title: "Loyalty Program Recommendation",
      description: "Based on customer purchase patterns, I recommend creating a new Coffee Enthusiast tier.",
      priority: "low",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6), // 6 hours ago
      agent: "loyalty",
      content: {
        programName: "Coffee Enthusiast Tier",
        analysis: "After analyzing your customer purchase patterns, I've identified a segment of customers who purchase more than 3 lbs of coffee per month but don't qualify for your current premium tier.",
        customerSegmentSize: "93 customers (12% of your active customer base)",
        averageSpend: "$64.75 per month",
        recommendation: {
          tierName: "Coffee Enthusiast",
          qualifications: "Purchases of 3+ lbs of coffee per month",
          benefits: [
            "Free shipping on all orders",
            "Early access to limited edition beans",
            "10% discount on brewing equipment",
            "Free coffee sample with each order"
          ],
          expectedResults: "Projected 22% increase in retention and 15% increase in average order value for this segment.",
          implementationDifficulty: "Medium - requires updates to your loyalty program structure and tracking of monthly coffee purchases."
        }
      },
      status: "pending"
    }
  ])

  // Filter actions based on active tab
  const filteredActions = pendingActions.filter(action => {
    if (activeTab === "all") return true
    if (activeTab === "high") return action.priority === "high"
    if (activeTab === "email") return action.type === "email"
    if (activeTab === "offer") return action.type === "offer"
    if (activeTab === "program") return action.type === "program"
    return false
  })

  // Handle action approval
  const handleApprove = (actionId: string) => {
    setPendingActions(prev => 
      prev.map(action => 
        action.id === actionId 
          ? { ...action, status: "approved" }
          : action
      )
    )
    
    toast({
      title: "Action Approved",
      description: "The agent will now implement this action.",
      variant: "default",
    })
    
    setIsDetailSheetOpen(false)
  }
  
  // Handle action decline
  const handleDecline = (actionId: string) => {
    setPendingActions(prev => 
      prev.map(action => 
        action.id === actionId 
          ? { ...action, status: "declined" }
          : action
      )
    )
    
    toast({
      title: "Action Declined",
      description: "The agent will not proceed with this action.",
      variant: "destructive",
    })
    
    setIsDetailSheetOpen(false)
  }
  
  // Show action details
  const viewActionDetails = (action: AgentAction) => {
    setSelectedAction(action)
    setIsDetailSheetOpen(true)
  }
  
  // Format relative time
  const formatTimeAgo = (date: Date) => {
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000)
    
    let interval = Math.floor(seconds / 31536000)
    if (interval >= 1) return `${interval} year${interval === 1 ? '' : 's'} ago`
    
    interval = Math.floor(seconds / 2592000)
    if (interval >= 1) return `${interval} month${interval === 1 ? '' : 's'} ago`
    
    interval = Math.floor(seconds / 86400)
    if (interval >= 1) return `${interval} day${interval === 1 ? '' : 's'} ago`
    
    interval = Math.floor(seconds / 3600)
    if (interval >= 1) return `${interval} hour${interval === 1 ? '' : 's'} ago`
    
    interval = Math.floor(seconds / 60)
    if (interval >= 1) return `${interval} minute${interval === 1 ? '' : 's'} ago`
    
    if (seconds < 10) return 'just now'
    
    return `${Math.floor(seconds)} second${Math.floor(seconds) === 1 ? '' : 's'} ago`
  }
  
  // Get icon for action type
  const getActionIcon = (type: string) => {
    switch (type) {
      case "email":
        return <Mail className="h-5 w-5 text-blue-500" />
      case "offer":
        return <Package className="h-5 w-5 text-purple-500" />
      case "program":
        return <Star className="h-5 w-5 text-amber-500" />
      default:
        return <Mail className="h-5 w-5 text-gray-500" />
    }
  }
  
  // Get color for priority
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-gray-100 text-gray-800 hover:bg-gray-200 border-gray-200"
      case "medium":
        return "bg-gray-100 text-gray-800 hover:bg-gray-200 border-gray-200"
      case "low":
        return "bg-gray-100 text-gray-800 hover:bg-gray-200 border-gray-200"
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-200 border-gray-200"
    }
  }
  
  // Get formatted agent name
  const getAgentName = (agent: string) => {
    switch (agent) {
      case "customer-service":
        return "Customer Service Agent"
      case "marketing":
        return "Marketing Agent"
      case "loyalty":
        return "Loyalty Program Agent"
      default:
        return "AI Agent"
    }
  }

  return (
    <div className="container max-w-7xl mx-auto px-4">
      <div className="pt-4"></div>
      <div className="flex flex-col md:flex-row justify-between items-center">
        <div>
          <h2 className="text-xl font-medium flex items-center gap-2">
            <GradientText>Agent</GradientText> Inbox
          </h2>
        </div>
        
        <div className="flex items-center gap-4">
          <Button size="sm" className="gap-2 h-8">
            <CheckCircle className="h-4 w-4" />
            Approve All
          </Button>
        </div>
      </div>
      
      <div className="mt-4">
        <div style={{
          width: "100vw",
          position: "relative",
          left: "50%",
          right: "50%",
          marginLeft: "-50vw",
          marginRight: "-50vw",
          height: "1px",
          backgroundColor: "rgb(229, 231, 235)"
        }}></div>
      </div>
      
      <div className="mt-6">
      <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6">
          <TabsTrigger value="all" className="gap-2">
            <Clock className="h-4 w-4" />
            All Actions
          </TabsTrigger>
          <TabsTrigger value="high" className="gap-2">
            <AlertCircle className="h-4 w-4" />
            High Priority
          </TabsTrigger>
          <TabsTrigger value="email" className="gap-2">
            <Mail className="h-4 w-4" />
            Email Responses
          </TabsTrigger>
          <TabsTrigger value="offer" className="gap-2">
            <Package className="h-4 w-4" />
            Customer Offers
          </TabsTrigger>
          <TabsTrigger value="program" className="gap-2">
            <Star className="h-4 w-4" />
            Program Updates
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value={activeTab} className="mt-0">
          {filteredActions.length === 0 ? (
            <Card className="rounded-md">
              <CardContent className="pt-10 pb-10 flex flex-col items-center justify-center">
                <Clock className="h-16 w-16 text-gray-300 mb-4" />
                <h3 className="text-xl font-medium text-center mb-2">No actions found</h3>
                <p className="text-sm text-gray-500 text-center max-w-md">
                  There are no pending agent actions that match your current filter. Try changing your filter or check back later.
                </p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 gap-6">
              {filteredActions.map(action => (
                <Card key={action.id} className="rounded-md overflow-hidden">
                  <div className="flex flex-col md:flex-row">
                    {/* Main content */}
                    <div className="flex-1 p-6">
                      <div className="flex flex-col md:flex-row justify-between gap-4 mb-4">
                        <div>
                          <h3 className="text-lg font-medium mb-1 flex items-center gap-2">
                            {action.title}
                            <Badge variant="outline" className={`ml-2 text-xs font-medium ${getPriorityColor(action.priority)}`}>
                              {action.priority.charAt(0).toUpperCase() + action.priority.slice(1)}
                            </Badge>
                          </h3>
                          <p className="text-sm text-gray-500">
                            {action.description}
                          </p>
                        </div>
                        <div className="flex items-center gap-2 md:gap-4">
                          <Button 
                            variant="outline" 
                            size="sm"
                            className="gap-2"
                            onClick={() => viewActionDetails(action)}
                          >
                            <Eye className="h-4 w-4" />
                            View Details
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm"
                            className="gap-2 text-red-600 border-red-200 hover:bg-red-50"
                            onClick={() => handleDecline(action.id)}
                          >
                            <XCircle className="h-4 w-4" />
                            Decline
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm"
                            className="gap-2 text-green-600 border-green-200 hover:bg-gray-50"
                            onClick={() => handleApprove(action.id)}
                          >
                            <CheckCircle className="h-4 w-4" />
                            Approve
                          </Button>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 text-xs text-gray-500">
                        <div>
                          <span>{getAgentName(action.agent)}</span>
                        </div>
                        <span>•</span>
                        <div>
                          <span>{formatTimeAgo(action.timestamp)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
      </div>
      
      {/* Detail Sheet */}
      <Sheet open={isDetailSheetOpen} onOpenChange={setIsDetailSheetOpen}>
        <SheetContent side="right" className="w-full sm:max-w-md md:max-w-xl lg:max-w-2xl overflow-auto">
          {selectedAction && (
            <>
              <SheetHeader className="mb-6">
                <SheetTitle className="flex items-center gap-2 text-lg">
                  {selectedAction.title}
                </SheetTitle>
                <SheetDescription>
                  Suggested by {getAgentName(selectedAction.agent)} {formatTimeAgo(selectedAction.timestamp)}
                </SheetDescription>
              </SheetHeader>
              
              <div className="space-y-6">
                {/* Different content based on action type */}
                {selectedAction.type === "email" && (
                  <div className="space-y-6">
                    <Card className="rounded-md">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-base">Customer Information</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Customer:</span>
                            <span className="text-sm">{selectedAction.content.customerName}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Email:</span>
                            <span className="text-sm">{selectedAction.content.customerEmail}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Subject:</span>
                            <span className="text-sm">{selectedAction.content.subject}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <div>
                      <h4 className="text-sm font-medium mb-2">Customer's Inquiry:</h4>
                      <Card className="rounded-md">
                        <CardContent className="p-4">
                          <p className="text-sm whitespace-pre-line">{selectedAction.content.inquiry}</p>
                        </CardContent>
                      </Card>
                    </div>
                    
                    <div>
                      <h4 className="text-sm font-medium mb-2">Suggested Response:</h4>
                      <Textarea 
                        className="font-mono text-sm min-h-[200px]"
                        value={selectedAction.content.suggestedResponse}
                        readOnly
                      />
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                      <h4 className="text-sm font-medium text-gray-800 mb-2">Agent Notes</h4>
                      <p className="text-sm text-gray-700">
                        This response addresses the customer's questions about international shipping to Canada and sample pack availability. I've included specific details about delivery timeframes and the Coffee Explorer package to provide complete information.
                      </p>
                    </div>
                  </div>
                )}
                
                {selectedAction.type === "offer" && (
                  <div className="space-y-6">
                    <Card className="rounded-md">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-base">Customer Information</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Customer:</span>
                            <span className="text-sm">{selectedAction.content.customerName}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Email:</span>
                            <span className="text-sm">{selectedAction.content.customerEmail}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm font-medium">Last Purchase:</span>
                            <span className="text-sm">{formatTimeAgo(selectedAction.content.lastPurchaseDate)}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <div>
                      <h4 className="text-sm font-medium mb-2">Purchase History:</h4>
                      <Card className="rounded-md">
                        <CardContent className="p-4">
                          <div className="space-y-4">
                            {selectedAction.content.purchaseHistory.map((purchase: any, index: number) => (
                              <div key={index} className="border-b last:border-b-0 pb-3 last:pb-0">
                                <div className="flex justify-between text-sm">
                                  <span className="font-medium">{purchase.date}</span>
                                  <span className="text-green-600">${purchase.amount.toFixed(2)}</span>
                                </div>
                                <div className="text-xs text-gray-500 mt-1">
                                  {purchase.items.join(", ")}
                                </div>
                              </div>
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                    
                    <Card className="rounded-md border-gray-200">
                      <CardHeader className="bg-gray-50 border-b border-gray-100 pb-3">
                        <CardTitle className="text-base text-gray-800">Suggested Offer</CardTitle>
                      </CardHeader>
                      <CardContent className="p-4 space-y-4">
                        <div className="flex justify-between items-center">
                          <span className="text-sm font-medium">Discount:</span>
                          <Badge className="bg-gray-100 text-gray-800 hover:bg-gray-200 border-none">
                            {selectedAction.content.suggestedOffer.discountAmount}% Off
                          </Badge>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Expires:</span>
                          <span className="text-sm">In {selectedAction.content.suggestedOffer.expirationDays} days</span>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium mb-1">Message to Customer:</h5>
                          <p className="text-sm p-2 bg-gray-50 rounded-md border">
                            {selectedAction.content.suggestedOffer.message}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                      <h4 className="text-sm font-medium text-gray-800 mb-2">Agent Analysis</h4>
                      <p className="text-sm text-gray-700">
                        {selectedAction.content.suggestedOffer.reasoning}
                      </p>
                    </div>
                  </div>
                )}
                
                {selectedAction.type === "program" && (
                  <div className="space-y-6">
                    <Card className="rounded-md">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-base">Program Recommendation: {selectedAction.content.programName}</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm mb-4">{selectedAction.content.analysis}</p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                          <div className="bg-gray-50 p-3 rounded-md border">
                            <h5 className="text-xs font-medium text-gray-500 mb-1">CUSTOMER SEGMENT</h5>
                            <p className="text-sm font-medium">{selectedAction.content.customerSegmentSize}</p>
                          </div>
                          <div className="bg-gray-50 p-3 rounded-md border">
                            <h5 className="text-xs font-medium text-gray-500 mb-1">AVERAGE MONTHLY SPEND</h5>
                            <p className="text-sm font-medium">{selectedAction.content.averageSpend}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card className="rounded-md border-gray-200">
                      <CardHeader className="bg-gray-50 border-b border-gray-100 pb-3">
                        <CardTitle className="text-base text-gray-800">
                          Recommendation Details: {selectedAction.content.recommendation.tierName}
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-4 space-y-4">
                        <div>
                          <h5 className="text-sm font-medium mb-2">Qualification Criteria:</h5>
                          <p className="text-sm p-2 bg-gray-50 rounded-md border">
                            {selectedAction.content.recommendation.qualifications}
                          </p>
                        </div>
                        
                        <div>
                          <h5 className="text-sm font-medium mb-2">Benefits:</h5>
                          <ul className="space-y-1">
                            {selectedAction.content.recommendation.benefits.map((benefit: string, index: number) => (
                              <li key={index} className="text-sm flex items-start gap-2">
                                <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                                <span>{benefit}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="bg-gray-50 p-3 rounded-md border border-gray-200">
                            <h5 className="text-xs font-medium text-gray-700 mb-1">EXPECTED RESULTS</h5>
                            <p className="text-sm text-gray-800">{selectedAction.content.recommendation.expectedResults}</p>
                          </div>
                          <div className="bg-gray-50 p-3 rounded-md border border-gray-200">
                            <h5 className="text-xs font-medium text-gray-700 mb-1">IMPLEMENTATION</h5>
                            <p className="text-sm text-gray-800">{selectedAction.content.recommendation.implementationDifficulty}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                )}
              </div>
              
              <SheetFooter className="mt-8 flex gap-2 justify-end">
                <Button 
                  variant="outline" 
                  className="gap-2 text-red-600 border-red-200 hover:bg-red-50"
                  onClick={() => handleDecline(selectedAction.id)}
                >
                  <XCircle className="h-4 w-4" />
                  Decline
                </Button>
                <Button 
                  className="gap-2"
                  onClick={() => handleApprove(selectedAction.id)}
                >
                  <CheckCircle className="h-4 w-4" />
                  Approve Action
                </Button>
              </SheetFooter>
            </>
          )}
        </SheetContent>
      </Sheet>
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, getDoc, setDoc, updateDoc, DocumentData, deleteDoc } from "firebase/firestore"
import { toast } from "@/components/ui/use-toast"
import Link from "next/link"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { generateCodeVerifier, generateCodeChallenge } from "@/lib/pkce"
import { CheckCircle, Globe, BarChart2, MessageSquare, Mail, Phone, Calculator } from "lucide-react"

// Import icons for different POS systems
import { LightspeedIcon } from "@/components/icons/lightspeed-icon"
import { SquareIcon } from "@/components/icons/square-icon"
import { CloverIcon } from "@/components/icons/clover-icon"
import { ShopifyIcon } from "@/components/icons/shopify-icon"
import { GmailIcon } from "@/components/icons/gmail-icon"

// Define integration state type
interface IntegrationState {
  connected: boolean;
  data: DocumentData | null;
}

interface IntegrationsState {
  square: IntegrationState;
  clover: IntegrationState;
  shopify: IntegrationState;
  lightspeed_new: IntegrationState;
  gmail: IntegrationState;
}

export default function IntegrationsPage() {
  const { user } = useAuth()
  const [connecting, setConnecting] = useState<string | null>(null)
  const [integrations, setIntegrations] = useState<IntegrationsState>({
    square: { connected: false, data: null },
    clover: { connected: false, data: null },
    shopify: { connected: false, data: null },
    lightspeed_new: { connected: false, data: null },
    gmail: { connected: false, data: null }
  })
  
  const [refreshing, setRefreshing] = useState(false)
  const [errorDetails, setErrorDetails] = useState<string | null>(null)
  const [configCheckResult, setConfigCheckResult] = useState<any>(null)
  const [checkingConfig, setCheckingConfig] = useState(false)
  
  // Function to check environment configuration
  const checkEnvironmentConfig = async () => {
    try {
      setCheckingConfig(true)
      const response = await fetch('/api/auth/gmail/check-config')
      const data = await response.json()
      setConfigCheckResult(data)
      console.log('Configuration check result:', data)
    } catch (error) {
      console.error('Error checking configuration:', error)
      setConfigCheckResult({ error: 'Failed to check configuration' })
    } finally {
      setCheckingConfig(false)
    }
  }
  
  // Extract error details from URL on component mount
  useEffect(() => {
    // Check for error details in the URL
    const url = new URL(window.location.href)
    const errorParam = url.searchParams.get('error')
    const detailsParam = url.searchParams.get('details')
    
    if (errorParam && detailsParam) {
      console.log(`Integration error detected: ${errorParam}`);
      console.log(`Error details: ${detailsParam}`);
      setErrorDetails(decodeURIComponent(detailsParam));
      
      // Log additional debug information
      console.log('Full URL parameters:');
      url.searchParams.forEach((value, key) => {
        console.log(`- ${key}: ${value}`);
      });
    }
  }, []);
  
  // Function to manually refresh integration status
  const refreshIntegrationStatus = async () => {
    if (!user) {
      toast({
        title: "Error",
        description: "You must be logged in to check integration status",
        variant: "destructive"
      });
      return;
    }

    setRefreshing(true);
    try {
      // Check Square integration status
      const squareDoc = await getDoc(doc(db, `merchants/${user.uid}/integrations/square`));
      const squareConnected = squareDoc.exists() && squareDoc.data()?.connected === true;
      console.log('Square integration status:', squareConnected ? 'Connected' : 'Not connected');

      // Check Lightspeed New integration status
      const lightspeedNewDoc = await getDoc(doc(db, `merchants/${user.uid}/integrations/lightspeed_new`));
      if (lightspeedNewDoc.exists()) {
        const lightspeedNewData = lightspeedNewDoc.data();
        console.log('Lightspeed New integration found:', lightspeedNewData);
        const lightspeedNewConnected = lightspeedNewData?.connected === true;
        console.log('Lightspeed New integration status:', lightspeedNewConnected ? 'Connected' : 'Not connected');
        
        // Check Gmail integration status
        const gmailDoc = await getDoc(doc(db, `merchants/${user.uid}/integrations/gmail`));
        const gmailConnected = gmailDoc.exists() && gmailDoc.data()?.connected === true;
        console.log('Gmail integration status:', gmailConnected ? 'Connected' : 'Not connected');
        
        setIntegrations(prev => ({
          ...prev,
          square: {
            connected: squareConnected,
            data: squareDoc.exists() ? squareDoc.data() : null
          },
          lightspeed_new: {
            connected: lightspeedNewConnected,
            data: lightspeedNewConnected ? lightspeedNewData : null
          },
          gmail: {
            connected: gmailConnected,
            data: gmailDoc.exists() ? gmailDoc.data() : null
          }
        }));
      } else {
        console.log('Lightspeed New integration not found');
        
        // Check Gmail integration status even if Lightspeed is not found
        const gmailDoc = await getDoc(doc(db, `merchants/${user.uid}/integrations/gmail`));
        const gmailConnected = gmailDoc.exists() && gmailDoc.data()?.connected === true;
        console.log('Gmail integration status:', gmailConnected ? 'Connected' : 'Not connected');
        
        setIntegrations(prev => ({
          ...prev,
          square: {
            connected: squareConnected,
            data: squareDoc.exists() ? squareDoc.data() : null
          },
          lightspeed_new: {
            connected: false,
            data: null
          },
          gmail: {
            connected: gmailConnected,
            data: gmailDoc.exists() ? gmailDoc.data() : null
          }
        }));
      }

      toast({
        title: "Success",
        description: "Integration status refreshed successfully"
      });
    } catch (error) {
      console.error('Error refreshing integration status:', error);
      toast({
        title: "Error",
        description: "Failed to refresh integration status",
        variant: "destructive"
      });
    } finally {
      setRefreshing(false);
    }
  };
  
  useEffect(() => {
    // Check if we have existing integrations
    const checkIntegrations = async () => {
      if (!user?.uid) return
      
      try {
        // Check Square integration status
        const squareDoc = await getDoc(doc(db, 'merchants', user.uid, 'integrations', 'square'))
        if (squareDoc.exists() && squareDoc.data().connected) {
          setIntegrations(prev => ({
            ...prev,
            square: { 
              connected: true, 
              data: squareDoc.data() 
            }
          }))
        }
        
        // Check Lightspeed New integration status
        const lightspeedNewDoc = await getDoc(doc(db, 'merchants', user.uid, 'integrations', 'lightspeed_new'))
        if (lightspeedNewDoc.exists() && lightspeedNewDoc.data().connected) {
          console.log('Lightspeed New integration found:', lightspeedNewDoc.data())
          setIntegrations(prev => ({
            ...prev,
            lightspeed_new: { 
              connected: true, 
              data: lightspeedNewDoc.data() 
            }
          }))
        } else {
          console.log('Lightspeed New integration not connected or not found')
        }
        
        // Check Gmail integration status
        const gmailDoc = await getDoc(doc(db, 'merchants', user.uid, 'integrations', 'gmail'))
        if (gmailDoc.exists() && gmailDoc.data().connected) {
          console.log('Gmail integration found:', gmailDoc.data())
          setIntegrations(prev => ({
            ...prev,
            gmail: { 
              connected: true, 
              data: gmailDoc.data() 
            }
          }))
        } else {
          console.log('Gmail integration not connected or not found')
        }
      } catch (error) {
        console.error("Error checking integrations:", error)
      }
    }
    
    checkIntegrations()
  }, [user])

  // Square integration
  const connectSquare = async () => {
    if (!user) return
    
    setConnecting("square")
    
    try {
      // Square OAuth parameters
      const clientId = "sq0idp-4LAqjdrwhjauSthYdTRFtA" // Production application ID
      
      // Store the state in localStorage to verify when the user returns
      const state = Math.random().toString(36).substring(2, 15)
      localStorage.setItem('square_state', state)
      
      // Store the merchant ID in localStorage to associate with the integration
      localStorage.setItem('merchant_id', user.uid)
      
      // Prepare scopes for Square OAuth
      const scopes = [
        'MERCHANT_PROFILE_READ',
        'CUSTOMERS_READ',
        'CUSTOMERS_WRITE',
        'ORDERS_READ',
        'ORDERS_WRITE',
        'PAYMENTS_READ',
        'PAYMENTS_WRITE',
        'ITEMS_READ',
        'ITEMS_WRITE',
        'INVENTORY_READ'
      ].join(' ')
      
      // Build the authorization URL for production
      // Remove redirect_uri parameter as it's configured in the Square Developer Dashboard
      const authUrl = `https://connect.squareup.com/oauth2/authorize?client_id=${encodeURIComponent(clientId)}&scope=${encodeURIComponent(scopes)}&state=${encodeURIComponent(state)}&response_type=code`
      
      console.log("Redirecting to Square authorization URL:", authUrl)
      
      // Redirect to Square authorization page
      window.location.href = authUrl
    } catch (error) {
      console.error("Error connecting to Square:", error)
      toast({
        title: "Connection Failed",
        description: "Failed to connect to Square. Please try again.",
        variant: "destructive"
      })
    } finally {
      setConnecting(null)
    }
  }

  // Disconnect Square
  const disconnectSquare = async () => {
    if (!user) return
    
    try {
      await updateDoc(doc(db, 'merchants', user.uid, 'integrations', 'square'), {
        connected: false
      })
      
      setIntegrations(prev => ({
        ...prev,
        square: { connected: false, data: null }
      }))
      
      toast({
        title: "Disconnected",
        description: "Your Square account has been disconnected."
      })
    } catch (error) {
      console.error("Error disconnecting Square:", error)
      toast({
        title: "Error",
        description: "Failed to disconnect Square. Please try again.",
        variant: "destructive"
      })
    }
  }

  // Lightspeed New integration
  const connectLightspeedNew = async () => {
    try {
      setConnecting("lightspeed_new");
      
      if (!user) {
        toast({
          title: "Error",
          description: "You must be logged in to connect integrations",
          variant: "destructive"
        });
        return;
      }

      // Store the merchant ID in localStorage
      localStorage.setItem("lightspeed_new_merchant_id", user.uid);
      
      // Generate a random state parameter for security
      const state = Math.random().toString(36).substring(2, 15);
      localStorage.setItem("lightspeed_new_state", state);
      
      // Generate code verifier and challenge for PKCE
      const codeVerifier = generateCodeVerifier();
      localStorage.setItem("lightspeed_new_code_verifier", codeVerifier);
      
      const codeChallenge = await generateCodeChallenge(codeVerifier);
      
      // Define the scopes needed for the integration
      // Using employee:all for full access as per documentation
      const scope = "employee:all+employee:register_read";
      
      // Lightspeed New API credentials with fallback value
      const clientId = process.env.NEXT_PUBLIC_LIGHTSPEED_NEW_CLIENT_ID || "0be25ce25b4988b26b5759aecca02248cfe561d7594edd46e7d6807c141ee72e";
      
      // Check if clientId is still undefined despite the fallback
      if (!clientId) {
        console.error("Missing Lightspeed New client ID");
        toast({
          title: "Configuration Error",
          description: "Lightspeed integration is not properly configured. Please contact support.",
          variant: "destructive"
        });
        setConnecting("");
        return;
      }
      
      // Construct the authorization URL as per Lightspeed API documentation
      // Note: redirect_uri is not included as it's configured in the Lightspeed portal
      const authUrl = `https://cloud.lightspeedapp.com/auth/oauth/authorize?response_type=code&client_id=${clientId}&scope=${encodeURIComponent(scope)}&state=${state}&code_challenge=${codeChallenge}&code_challenge_method=S256`;
      
      console.log("Redirecting to Lightspeed New authorization URL:", authUrl);
      
      // Redirect to the authorization URL
      window.location.href = authUrl;
    } catch (error) {
      console.error("Error connecting to Lightspeed New:", error);
      toast({
        title: "Error",
        description: "Failed to connect to Lightspeed New",
        variant: "destructive"
      });
      setConnecting("");
    }
  };

  const disconnectLightspeedNew = async () => {
    try {
      setConnecting("lightspeed_new");
      
      if (!user) {
        toast({
          title: "Error",
          description: "You must be logged in to disconnect integrations",
          variant: "destructive"
        });
        return;
      }

      // Delete the integration from Firestore
      const integrationRef = doc(db, `merchants/${user.uid}/integrations/lightspeed_new`);
      await deleteDoc(integrationRef);
      
      // Update local state
      setIntegrations(prev => ({
        ...prev,
        lightspeed_new: {
          connected: false,
          data: null
        }
      }));
      
      toast({
        title: "Success",
        description: "Lightspeed New disconnected successfully"
      });
    } catch (error) {
      console.error("Error disconnecting Lightspeed New:", error);
      toast({
        title: "Error",
        description: "Failed to disconnect Lightspeed New",
        variant: "destructive"
      });
    } finally {
      setConnecting("");
    }
  };

  // Gmail integration – always go through the backend connect route so that the
  // `state` parameter is consistently the merchantId expected by the callback.
  const connectGmail = () => {
    if (!user?.uid) return

    setConnecting("gmail")

    try {
      // Simply hit our server-side connect endpoint – it does all the heavy lifting
      // (building the Google OAuth URL, enforcing scopes, etc.) and guarantees the
      // `state` value matches the merchantId.
      window.location.href = `/api/auth/gmail/connect?merchantId=${user.uid}`
    } catch (error) {
      console.error("Error redirecting to Gmail connect route:", error)
      toast({
        title: "Connection Failed",
        description: "Failed to initiate Gmail connection. Please try again.",
        variant: "destructive",
      })
      setConnecting(null)
    }
  }

  // Disconnect Gmail
  const disconnectGmail = async () => {
    if (!user) return
    
    try {
      // Delete the integration from Firestore
      const integrationRef = doc(db, `merchants/${user.uid}/integrations/gmail`);
      await deleteDoc(integrationRef);
      
      // Update local state
      setIntegrations(prev => ({
        ...prev,
        gmail: { connected: false, data: null }
      }))
      
      toast({
        title: "Disconnected",
        description: "Your Gmail account has been disconnected."
      })
    } catch (error) {
      console.error("Error disconnecting Gmail:", error)
      toast({
        title: "Error",
        description: "Failed to disconnect Gmail. Please try again.",
        variant: "destructive"
      })
    }
  }

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Integrations"
        >
          <Button 
            variant="outline" 
            size="sm" 
            className="h-8"
            onClick={refreshIntegrationStatus}
            disabled={refreshing}
          >
            {refreshing ? (
              <>
                <svg className="mr-2 h-4 w-4 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Refreshing...
              </>
            ) : (
              <>
                <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh Status
              </>
            )}
          </Button>
        </PageHeader>
        
        {/* Error Details Display */}
        {errorDetails && (
          <div className="mb-6 p-4 border border-red-200 rounded-md bg-red-50">
            <div className="flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <h3 className="text-sm font-medium text-red-800">Integration Error</h3>
            </div>
            <div className="text-sm text-red-700">
              <p className="mb-2">There was an error configuring the integration:</p>
              <pre className="p-2 bg-white border border-red-100 rounded overflow-x-auto text-xs">{errorDetails}</pre>
              <div className="mt-3 text-xs">
                <p>Please ensure all required environment variables are set correctly.</p>
                <p className="mt-1">For Gmail integration, make sure <code className="bg-white px-1 py-0.5 rounded">GMAIL_CLIENT_ID</code> and <code className="bg-white px-1 py-0.5 rounded">GMAIL_CLIENT_SECRET</code> are properly configured on the server.</p>
              </div>
              
              <div className="mt-4 flex items-center space-x-3">
                <button 
                  className="text-xs px-2 py-1 bg-red-100 hover:bg-red-200 text-red-800 rounded"
                  onClick={checkEnvironmentConfig}
                  disabled={checkingConfig}
                >
                  {checkingConfig ? 'Checking...' : 'Check Server Configuration'}
                </button>
                <button 
                  className="text-red-800 text-xs underline"
                  onClick={() => {
                    setErrorDetails(null)
                    setConfigCheckResult(null)
                  }}
                >
                  Dismiss
                </button>
              </div>
              
              {/* Configuration Check Results */}
              {configCheckResult && (
                <div className="mt-4 p-2 bg-white border border-red-100 rounded text-xs">
                  <h4 className="font-medium mb-1">Environment Check Results:</h4>
                  {configCheckResult.error ? (
                    <p className="text-red-600">{configCheckResult.error}</p>
                  ) : (
                    <>
                      <p>Environment: <span className="font-mono">{configCheckResult.environment}</span></p>
                      <p className="mt-1">
                        Status: {configCheckResult.configCheck?.allConfigured 
                          ? <span className="text-green-600">All configured</span> 
                          : <span className="text-red-600">Missing variables</span>}
                      </p>
                      
                      {configCheckResult.configCheck?.missingVariables?.length > 0 && (
                        <div className="mt-1">
                          <p>Missing variables:</p>
                          <ul className="list-disc list-inside ml-2 mt-1">
                            {configCheckResult.configCheck.missingVariables.map((v: string) => (
                              <li key={v} className="font-mono">{v}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {configCheckResult.configCheck?.variables && (
                        <div className="mt-2">
                          <p>Variable status:</p>
                          <div className="mt-1 grid grid-cols-2 gap-1">
                            {Object.entries(configCheckResult.configCheck.variables)
                              .filter(([key]) => !key.includes('VALUE') && !key.includes('PREFIX'))
                              .map(([key, value]: [string, any]) => (
                                <div key={key} className="font-mono">
                                  {key}: <span className={value ? "text-green-600" : "text-red-600"}>{value ? "✓" : "✗"}</span>
                                </div>
                              ))}
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
          {/* Gmail Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <img src="/gmail.png" alt="Gmail" className="w-8 h-8 object-contain" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Gmail</CardTitle>
                      <CardDescription>Email Integration</CardDescription>
                    </div>
                    {integrations.gmail.connected && (
                      <CheckCircle className="h-5 w-5 ml-2 text-green-500" />
                    )}
                  </div>
                </div>
                <Button 
                  variant={integrations.gmail.connected ? "outline" : "default"}
                  className="rounded-md"
                  onClick={integrations.gmail.connected ? disconnectGmail : connectGmail}
                  disabled={connecting === "gmail"}
                >
                  {connecting === "gmail" ? "Connecting..." : 
                  integrations.gmail.connected ? "Disconnect" : "Connect"}
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Connect your Gmail account to enable automated email sending and communication with your customers.
                </p>
                {integrations.gmail.connected && integrations.gmail.data?.connectedAt && (
                  <p className="text-xs text-muted-foreground mt-2">
                    Connected on {new Date(integrations.gmail.data.connectedAt.toDate()).toLocaleDateString()} at {new Date(integrations.gmail.data.connectedAt.toDate()).toLocaleTimeString()}
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
          
          {/* Lightspeed Retail Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <img src="/lslogo.png" alt="Lightspeed" className="w-8 h-8 object-contain" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Lightspeed Retail</CardTitle>
                      <CardDescription>Point of Sale Integration</CardDescription>
                    </div>
                    {integrations.lightspeed_new.connected && (
                      <CheckCircle className="h-5 w-5 ml-2 text-green-500" />
                    )}
                  </div>
                </div>
                <Button 
                  variant={integrations.lightspeed_new.connected ? "outline" : "default"}
                  className="rounded-md"
                  onClick={integrations.lightspeed_new.connected ? disconnectLightspeedNew : connectLightspeedNew}
                  disabled={connecting === "lightspeed_new"}
                >
                  {connecting === "lightspeed_new" ? "Connecting..." : 
                  integrations.lightspeed_new.connected ? "Disconnect" : "Connect"}
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Connect to Lightspeed Retail POS (R-Series) for advanced inventory and customer management.
                </p>
                {integrations.lightspeed_new.connected && integrations.lightspeed_new.data?.connectedAt && (
                  <p className="text-xs text-muted-foreground mt-2">
                    Connected on {new Date(integrations.lightspeed_new.data.connectedAt.toDate()).toLocaleDateString()} at {new Date(integrations.lightspeed_new.data.connectedAt.toDate()).toLocaleTimeString()}
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
          
          {/* Square Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <img src="/square.png" alt="Square" className="w-8 h-8 object-contain" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Square</CardTitle>
                      <CardDescription>Point of Sale Integration</CardDescription>
                    </div>
                    {integrations.square.connected && (
                      <CheckCircle className="h-5 w-5 ml-2 text-green-500" />
                    )}
                  </div>
                </div>
                <Button 
                  variant={integrations.square.connected ? "outline" : "default"}
                  className="rounded-md"
                  onClick={integrations.square.connected ? disconnectSquare : connectSquare}
                  disabled={connecting === "square"}
                >
                  {connecting === "square" ? "Connecting..." : 
                  integrations.square.connected ? "Disconnect" : "Connect"}
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Sync customer data, transactions, and inventory with your Square account for a seamless integration.
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Google Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <Globe className="h-6 w-6 text-blue-500" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Google</CardTitle>
                      <CardDescription>Business & Analytics Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "Google integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Connect with Google services including Google Analytics, Google Business Profile, and more.
                </p>
              </div>
            </CardContent>
          </Card>
          
          {/* Lightspeed Restaurant Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <img src="/lslogo.png" alt="Lightspeed Restaurant" className="w-8 h-8 object-contain" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Lightspeed Restaurant</CardTitle>
                      <CardDescription>Restaurant POS Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "Lightspeed Restaurant integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Connect to Lightspeed Restaurant POS for specialized restaurant management and customer loyalty.
                </p>
              </div>
            </CardContent>
          </Card>
          
          {/* HubSpot Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <BarChart2 className="h-6 w-6 text-orange-500" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">HubSpot</CardTitle>
                      <CardDescription>CRM Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "HubSpot integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Sync customer data with HubSpot CRM for enhanced marketing, sales, and customer service.
                </p>
              </div>
            </CardContent>
          </Card>
          
          {/* Mailchimp Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <Mail className="h-6 w-6 text-yellow-500" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Mailchimp</CardTitle>
                      <CardDescription>Email Marketing Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "Mailchimp integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Sync contacts and create targeted email campaigns through Mailchimp integration.
                </p>
              </div>
            </CardContent>
          </Card>
          
          {/* Twilio Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <Phone className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Twilio</CardTitle>
                      <CardDescription>SMS & Voice Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "Twilio integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Enable SMS notifications, appointment reminders, and communication with your customers.
                </p>
              </div>
            </CardContent>
          </Card>
          
          {/* Xero Integration Card */}
          <Card className="rounded-md">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center">
                    <Calculator className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="flex items-center">
                    <div>
                      <CardTitle className="text-base font-medium">Xero</CardTitle>
                      <CardDescription>Accounting Integration</CardDescription>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="default"
                  className="rounded-md"
                  onClick={() => toast({
                    title: "Coming Soon",
                    description: "Xero integration will be available soon",
                  })}
                >
                  Connect
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div>
                <p className="text-sm text-muted-foreground">
                  Sync financial data with Xero for streamlined accounting and financial management.
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import React, { useState, useEffect, useRef, useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  ArrowRight, 
  ArrowUp, 
  ArrowDown, 
  Users, 
  Gift, 
  Zap, 
  ShoppingCart, 
  Calendar,
  PlusCircle,
  Coffee,
  DollarSign,
  Clock,
  Star,
  ChevronRight,
  BarChart as BarChartIcon,
  Eye,
  Server,
  Ticket,
  Lightbulb,
  PowerOff,
  MessageSquare,
  Settings,
  Sparkles,
  CheckCircle,
  ChevronDown,
  Layers,
  LineChart,
  Percent,
  Inbox,
  Check as CheckIcon,
  Bell,
  AlertCircle,
  Minimize2,
  Maximize2,
  X
} from "lucide-react"
import { useRouter, useSearchParams } from "next/navigation"
import { cn } from "@/lib/utils"
import { format, formatDistanceToNow } from "date-fns"
import Link from "next/link"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, setDoc, getDoc, collection, query, orderBy, limit, getDocs, where, Timestamp, onSnapshot } from "firebase/firestore"
import { toast } from "@/components/ui/use-toast"
import { TapAiButton } from "@/components/tap-ai-button"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { BannerPreview, BannerStyle, BannerVisibility } from "@/components/banner-preview"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { CreateRewardDialog } from "@/components/create-reward-dialog"
import { 
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetClose,
  SheetTrigger
} from "@/components/ui/sheet"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Checkbox } from "@/components/ui/checkbox"
import { BasicRewardWizard } from "@/components/basic-reward-wizard"
import { CreateRewardSheet } from "@/components/create-reward-sheet"
import { IntroductoryRewardSheet } from "@/components/introductory-reward-sheet"
import { 
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command"
import {
  AtSign,
  Instagram as InstagramIcon,
  Mail,
  Search,
  SendHorizontal,
  Globe,
  Smartphone,
  XCircle
} from "lucide-react"
import Image from "next/image" // Add this import at the top of the file with other imports
import { getGmailMessages, getGmailMessage, GmailMessage, GmailFullMessage } from '@/lib/gmail-api'
import ReactMarkdown from 'react-markdown'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import remarkGfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import { TapAgentSheet } from "@/components/tap-agent-sheet"

// Add custom animation for the popup
const customAnimationStyles = `
  @keyframes slideInUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .animate-slideInUp {
    animation: slideInUp 0.3s ease-out forwards;
  }
`;

type TimeframeType = "today" | "yesterday" | "7days" | "30days"

// Add a gradient text component for Tap Agent branding
const GradientText = ({ children }: { children: React.ReactNode }) => {
  return (
    <span className="bg-gradient-to-r from-blue-500 to-orange-500 bg-clip-text text-transparent font-semibold">
      {children}
    </span>
  );
};

export default function DashboardPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { user } = useAuth()
  const [timeframe, setTimeframe] = useState<TimeframeType>("today")
  const [initialLoading, setInitialLoading] = useState(true)
  const [metricsLoading, setMetricsLoading] = useState(false)
  const [activityLoading, setActivityLoading] = useState(false)
  const [rewardsLoading, setRewardsLoading] = useState(false)
  const [recentActivity, setRecentActivity] = useState<any[]>([])
  const [popularRewards, setPopularRewards] = useState<any[]>([])
  const [activeBanners, setActiveBanners] = useState<any[]>([])
  const [scheduledBanners, setScheduledBanners] = useState<any[]>([])
  const [metricsType, setMetricsType] = useState<"consumer" | "platform">("platform")
  const [tapAgentMetrics, setTapAgentMetrics] = useState({
    lastRun: null as Date | null,
    rewardsCreated: 0,
    bannersCreated: 0,
    impressions: 0,
    clicks: 0,
    redemptions: 0,
    loading: true
  })
  const [metrics, setMetrics] = useState({
    totalCustomers: 0,
    activeCustomers: 0,
    customerGrowth: 0,
    totalPointsIssued: 0,
    redemptionRate: 0,
    avgOrderValue: 0,
    totalTransactions: 0,
    totalRedemptions: 0,
    activeRewards: 0,
    totalBannerImpressions: 0,
    totalStoreViews: 0,
    totalRewardViews: 0,
    customersWithRedeemableRewards: 0,
    customersWithoutRedeemableRewards: 0
  })
  const [histogramData, setHistogramData] = useState<any[]>([])
  const [chartTimeframe, setChartTimeframe] = useState<"7days" | "30days" | "90days">("30days")
  const [chartLoading, setChartLoading] = useState(false)
  const [chartReady, setChartReady] = useState(false)
  const [insightDialogOpen, setInsightDialogOpen] = useState(false)
  const [insightLoading, setInsightLoading] = useState(false)
  const [insightData, setInsightData] = useState<any>(null)
  const [insightError, setInsightError] = useState<string | null>(null)
  const [topViewingCustomers, setTopViewingCustomers] = useState<any[]>([])
  const [topCustomersLoading, setTopCustomersLoading] = useState(false)
  const [isRewardDialogOpen, setIsRewardDialogOpen] = useState(false)
  const [selectedCustomer, setSelectedCustomer] = useState<{id: string, name: string} | null>(null)
  const [isSetupWizardOpen, setIsSetupWizardOpen] = useState(false)
  const [isIntroductoryRewardSheetOpen, setIsIntroductoryRewardSheetOpen] = useState(false)
  const [setupChecklist, setSetupChecklist] = useState({
    tapAgent: false,
    banner: false,
    membershipLevels: false,
    pointsRule: false,
    posIntegration: false,
    openBanking: false,
    customReward: false,
    introductoryReward: false
  })
  const [commandInput, setCommandInput] = useState("")
  const [showIntegrations, setShowIntegrations] = useState(false)
  const [selectedIntegrations, setSelectedIntegrations] = useState<{id: string, name: string, icon: React.ReactNode}[]>([])
  const [cursorPosition, setCursorPosition] = useState(0)
  const inputRef = useRef<HTMLInputElement>(null)
  const dropdownRef = useRef<HTMLDivElement>(null)
  const [isTapAgentSheetOpen, setIsTapAgentSheetOpen] = useState(false)
  const [runDailySummary, setRunDailySummary] = useState(false)
  
  // New states for Daily Summary functionality
  const [isDailySummaryLoading, setIsDailySummaryLoading] = useState(false)
  const [dailySummaryGmailResponse, setDailySummaryGmailResponse] = useState<string | null>(null)
  const [dailySummaryLightspeedResponse, setDailySummaryLightspeedResponse] = useState<string | null>(null)
  const [showDailySummaryPopup, setShowDailySummaryPopup] = useState(false)
  const [isPopupExpanded, setIsPopupExpanded] = useState(false)
  
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current && 
        !dropdownRef.current.contains(event.target as Node) &&
        inputRef.current && 
        !inputRef.current.contains(event.target as Node)
      ) {
        setShowIntegrations(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [setShowIntegrations]);
  
  // Add a new state for processing status
  const [processingIntegrations, setProcessingIntegrations] = useState<Record<string, boolean>>({})
  const [isSummarizeInboxSheetOpen, setIsSummarizeInboxSheetOpen] = useState(false)
  const [inboxSummaryTimeframe, setInboxSummaryTimeframe] = useState<"1day" | "2day" | "3day" | "7day">("1day")
  const [inboxSummaryLoading, setInboxSummaryLoading] = useState(false)
  const [inboxSummaryResult, setInboxSummaryResult] = useState<string | null>(null)
  const [inboxSummaryError, setInboxSummaryError] = useState<string | null>(null)
  const [emails, setEmails] = useState<GmailMessage[]>([])
  const [loading, setLoading] = useState(true)
  const [isConnected, setIsConnected] = useState(false)
  const [connectionError, setConnectionError] = useState<string | null>(null)
  const [selectedEmail, setSelectedEmail] = useState<GmailMessage | null>(null)
  const [emailContent, setEmailContent] = useState<GmailFullMessage | null>(null)
  const [emailSheetOpen, setEmailSheetOpen] = useState(false)
  const [loadingEmail, setLoadingEmail] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [refreshing, setRefreshing] = useState(false)
  const [readStatusMap, setReadStatusMap] = useState<Record<string, boolean>>({})
  const [gmailQueryResponse, setGmailQueryResponse] = useState<string | null>(null)
  const [gmailQueryLoading, setGmailQueryLoading] = useState(false)
  const [showDebugInfo, setShowDebugInfo] = useState(false)
  
  // Lightspeed integration states
  const [lightspeedQueryResponse, setLightspeedQueryResponse] = useState<string | null>(null)
  const [lightspeedQueryLoading, setLightspeedQueryLoading] = useState(false)
  
  // Define a type for loading stages
  type LoadingStageType = "processing" | "finding" | "generating";
  
  const [loadingStage, setLoadingStage] = useState<LoadingStageType>("processing")
  const [debugResponse, setDebugResponse] = useState<string | null>(null)
  
  // Use refs for the timeouts to be able to clear them when needed
  const findingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const generatingTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  // Add Tap Loyalty state variables
  const [tapQueryResponse, setTapQueryResponse] = useState<string | null>(null)
  const [tapQueryLoading, setTapQueryLoading] = useState(false)

  // Add state variable for the AI assistant response
  const [assistantResponse, setAssistantResponse] = useState<string | null>(null)
  const [assistantLoading, setAssistantLoading] = useState(false)

  const getDateRange = (tf: TimeframeType): { start: Date; end: Date } => {
    const now = new Date()
    const end = new Date(now) // Create a copy of now for end date
    
    switch (tf) {
      case "today":
        const start = new Date(now)
        start.setHours(0, 0, 0, 0)
        return { start, end }
        
      case "yesterday":
        const yesterdayStart = new Date(now)
        yesterdayStart.setDate(yesterdayStart.getDate() - 1)
        yesterdayStart.setHours(0, 0, 0, 0)
        
        const yesterdayEnd = new Date(yesterdayStart)
        yesterdayEnd.setHours(23, 59, 59, 999)
        
        return { start: yesterdayStart, end: yesterdayEnd }
        
      case "7days":
        const weekStart = new Date(now)
        weekStart.setDate(weekStart.getDate() - 7)
        weekStart.setHours(0, 0, 0, 0)
        return { start: weekStart, end }
        
      case "30days":
        const monthStart = new Date(now)
        monthStart.setDate(monthStart.getDate() - 30)
        monthStart.setHours(0, 0, 0, 0)
        return { start: monthStart, end }
        
      default:
        // Default to today
        const defaultStart = new Date(now)
        defaultStart.setHours(0, 0, 0, 0)
        return { start: defaultStart, end }
    }
  }

  useEffect(() => {
    const fetchRecentActivity = async () => {
      if (!user?.uid) return
      
      try {
        setActivityLoading(true)
        
        // Debug transactions query
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const transactionsQuery = query(
          transactionsRef,
          orderBy('createdAt', 'desc'),
          limit(5)
        )
        console.log('Fetching transactions from:', `merchants/${user.uid}/transactions`)
        
        // Update redemptions query to use top-level collection
        const redemptionsRef = collection(db, 'redemptions')
        const redemptionsQuery = query(
          redemptionsRef,
          where('merchantId', '==', user.uid),
          orderBy('redemptionDate', 'desc'),
          limit(5)
        )
        
        console.log('Fetching redemptions for merchant:', user.uid)
        
        const [transactionsSnapshot, redemptionsSnapshot] = await Promise.all([
          getDocs(transactionsQuery),
          getDocs(redemptionsQuery)
        ])
        
        // Log raw redemptions data
        console.log('Raw redemptions data:', redemptionsSnapshot.docs.map(doc => ({
          id: doc.id,
          data: doc.data()
        })))
        
        // Get unique customer IDs from both transactions and redemptions
        const customerIds = new Set([
          ...transactionsSnapshot.docs.map(doc => {
            const data = doc.data()
            return data.customerId
          }),
          ...redemptionsSnapshot.docs.map(doc => {
            const data = doc.data()
            return data.customerId
          })
        ])
        
        // Fetch customer data for each unique customer ID
        const customerData: Record<string, { name: string, profilePicture?: string }> = {}
        await Promise.all(
          Array.from(customerIds).map(async (customerId) => {
            if (customerId) {
              // Change to top-level customers collection
              const customerDoc = await getDoc(doc(db, 'customers', customerId))
              console.log('Raw customer data:', customerDoc.data())
              if (customerDoc.exists()) {
                const data = customerDoc.data()
                customerData[customerId] = {
                  name: data.fullName || 'Unknown Customer',
                  // Use the correct field from customers collection
                  profilePicture: data.profilePictureUrl || null
                }
                console.log('Processed customer:', customerId, customerData[customerId])
              }
            }
          })
        )
        
        // Convert transactions to activity format with type safety
        const transactionActivity = transactionsSnapshot.docs.map(doc => {
          const data = doc.data() as {
            type?: string
            customerId?: string
            createdAt?: { toDate(): Date }
            amount?: number
            status?: string
          }
          
          return {
            id: doc.id,
            type: "transaction",
            displayName: data.type || "purchase",
            customer: {
              id: data.customerId || '',
              name: customerData[data.customerId || '']?.name || "Unknown Customer",
              profilePicture: customerData[data.customerId || '']?.profilePicture
            },
            timestamp: data.createdAt?.toDate() || new Date(),
            amount: data.amount || 0,
            status: data.status || "completed"
          }
        })
        
        // Convert redemptions to activity format with type safety
        const redemptionActivity = redemptionsSnapshot.docs.map(doc => {
          const data = doc.data() as {
            customerId?: string
            merchantId: string
            pointsUsed: number
            redemptionDate: { toDate(): Date }
            redemptionId: string
            rewardId: string
            rewardName: string
            status: string
          }
          
          return {
            id: doc.id,
            type: "redemption",
            displayName: data.rewardName || "Unknown Reward",
            customer: {
              id: data.customerId || '',
              name: customerData[data.customerId || '']?.name || "Unknown Customer",
              profilePicture: customerData[data.customerId || '']?.profilePicture
            },
            timestamp: data.redemptionDate?.toDate() || new Date(),
            points: data.pointsUsed || 0,
            status: data.status || "completed",
            rewardName: data.rewardName,
            rewardId: data.rewardId,
          }
        })
        
        // Log processed redemption activity
        console.log('Processed redemption activity:', redemptionActivity)
        
        // Combine and sort by timestamp
        const combinedActivity = [...transactionActivity, ...redemptionActivity]
          .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
          .slice(0, 5) // Keep only the 5 most recent activities
        
        console.log('Final combined activity:', combinedActivity)
        
        setRecentActivity(combinedActivity)
        
      } catch (error) {
        console.error('Error in fetchRecentActivity:', error)
        toast({
          title: "Error",
          description: "Failed to load recent activity. Please refresh the page.",
          variant: "destructive"
        })
      } finally {
        setActivityLoading(false)
        setInitialLoading(false)
      }
    }
    
    if (user?.uid) {
      fetchRecentActivity()
    }
  }, [user?.uid])

  useEffect(() => {
    const fetchPopularRewards = async () => {
      if (!user?.uid) return
      
      try {
        setRewardsLoading(true)
        const { start, end } = getDateRange(timeframe)
        
        // Create a query to get all rewards for the merchant
        const rewardsQuery = query(
          collection(db, 'merchants', user.uid, 'rewards'),
          orderBy('redemptionCount', 'desc'),
          where('lastRedeemedAt', '>=', start),
          where('lastRedeemedAt', '<=', end),
          limit(3)
        )
        
        // Get the rewards documents
        const rewardsSnapshot = await getDocs(rewardsQuery)
        
        // Map the documents to our rewards format
        const rewardsData = rewardsSnapshot.docs.map(doc => {
          const data = doc.data()
          return {
            id: doc.id,
            name: data.rewardName || 'Unnamed Reward',
            rewardName: data.rewardName || 'Unnamed Reward',
            redemptionCount: data.redemptionCount || 0,
            impressions: data.impressions || 0,
            pointsCost: data.pointsCost || 0,
            type: data.type || 'item',
            programtype: data.programtype || null,
            conversionRate: data.conversionRate || 0,
            lastRedeemedAt: data.lastRedeemedAt?.toDate() || null
          }
        })
        
        console.log('Fetched rewards data:', rewardsData)
        
        // Set the rewards data directly, without using dummy data
        setPopularRewards(rewardsData)
        
      } catch (error) {
        console.error('Error fetching popular rewards:', error)
        toast({
          title: "Error",
          description: "Failed to load popular rewards. Please refresh the page.",
          variant: "destructive"
        })
      } finally {
        setRewardsLoading(false)
      }
    }
    
    if (user?.uid) {
      fetchPopularRewards()
    }
  }, [user?.uid, timeframe])

  useEffect(() => {
    const fetchBanners = async () => {
      if (!user?.uid) return
      
      try {
        // Fetch active and scheduled banners
        const activeBannersQuery = query(
          collection(db, 'merchants', user.uid, 'banners'),
          where('scheduled', '==', true),
          where('isActive', '==', true),
          orderBy('createdAt', 'desc')
        )
        
        // Fetch scheduled but not yet active banners
        const scheduledBannersQuery = query(
          collection(db, 'merchants', user.uid, 'banners'),
          where('scheduled', '==', true),
          where('isActive', '==', false),
          orderBy('createdAt', 'desc')
        )
        
        const [activeBannersSnapshot, scheduledBannersSnapshot] = await Promise.all([
          getDocs(activeBannersQuery),
          getDocs(scheduledBannersQuery)
        ])
        
        // Process banners with the same mapping function
        const processBannerData = (doc: any) => {
          const data = doc.data()
          return {
            id: doc.id,
            title: data.title || '',
            description: data.description || '',
            buttonText: data.buttonText,
            color: data.color ?? "#0ea5e9",
            style: data.style?.toLowerCase() || 'light',
            styleType: data.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                       data.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                       data.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                       BannerStyle.LIGHT,
            merchantName: data.merchantName ?? "My Store",
            visibilityType: BannerVisibility.ALL,
            isActive: data.isActive,
            impressions: data.impressions || 0
          }
        }

        setActiveBanners(activeBannersSnapshot.docs.map(processBannerData))
        setScheduledBanners(scheduledBannersSnapshot.docs.map(processBannerData))
        
      } catch (error) {
        console.error('Error fetching banners:', error)
        toast({
          title: "Error",
          description: "Failed to load banners. Please refresh the page.",
          variant: "destructive"
        })
      }
    }
    
    if (user?.uid) {
      fetchBanners()
    }
  }, [user?.uid])

  useEffect(() => {
    const fetchMetrics = async () => {
      if (!user?.uid) return
      
      try {
        setMetricsLoading(true)
        const { start, end } = getDateRange(timeframe)
        
        // Fetch total customers
        const customersRef = collection(db, 'customers')
        const customersQuery = query(
          customersRef,
          where('merchantId', '==', user.uid)
        )
        const customersSnapshot = await getDocs(customersQuery)
        const totalCustomers = customersSnapshot.docs.length
        
        // Calculate active customers (had a transaction in the last 30 days)
        const thirtyDaysAgo = new Date()
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
        
        // Get all transactions in the last 30 days
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const recentTransactionsQuery = query(
          transactionsRef,
          where('createdAt', '>=', thirtyDaysAgo)
        )
        const recentTransactionsSnapshot = await getDocs(recentTransactionsQuery)
        
        // Get unique customer IDs from recent transactions
        const activeCustomerIds = new Set()
        recentTransactionsSnapshot.docs.forEach(doc => {
          const data = doc.data()
          if (data.customerId) {
            activeCustomerIds.add(data.customerId)
          }
        })
        const activeCustomers = activeCustomerIds.size
        
        // Calculate customers with redeemable rewards (customers with points >= minimum reward threshold)
        const minPointsForReward = 100 // Adjust this based on your reward system
        let customersWithRedeemableRewards = 0
        let customersWithoutRedeemableRewards = 0
        
        customersSnapshot.docs.forEach(doc => {
          const data = doc.data()
          if (data.points && data.points >= minPointsForReward) {
            customersWithRedeemableRewards++
          } else {
            customersWithoutRedeemableRewards++
          }
        })
        
        // Fetch total points issued
        const transactionsQuery = query(
          transactionsRef,
          where('merchantId', '==', user.uid),
          where('createdAt', '>=', start),
          where('createdAt', '<=', end)
        )
        const transactionsSnapshot = await getDocs(transactionsQuery)
        const totalPointsIssued = transactionsSnapshot.docs.reduce((total, doc) => total + (doc.data().amount || 0), 0)
        
        // Fetch store views
        const storeViewsRef = collection(db, 'merchants', user.uid, 'storeViews')
        const storeViewsQuery = query(storeViewsRef)
        const storeViewsSnapshot = await getDocs(storeViewsQuery)
        const totalStoreViews = storeViewsSnapshot.docs.length
        
        // Calculate customer growth
        const customersRef2 = collection(db, 'customers')
        const customersQuery2 = query(
          customersRef2,
          where('merchantId', '==', user.uid),
          where('createdAt', '<', start)
        )
        const customersSnapshot2 = await getDocs(customersQuery2)
        const previousTotalCustomers = customersSnapshot2.docs.length
        const customerGrowth = ((totalCustomers - previousTotalCustomers) / previousTotalCustomers) * 100
        
        // Fetch active rewards from the correct path
        const rewardsRef = collection(db, 'merchants', user.uid, 'rewards')
        const activeRewardsQuery = query(
          rewardsRef,
          where('isActive', '==', true)
        )
        const activeRewardsSnapshot = await getDocs(activeRewardsQuery)
        const activeRewards = activeRewardsSnapshot.docs.length
        
        // Calculate total reward views by summing impressions from all rewards
        const allRewardsQuery = query(rewardsRef)
        const allRewardsSnapshot = await getDocs(allRewardsQuery)
        const totalRewardViews = allRewardsSnapshot.docs.reduce(
          (total, doc) => total + (doc.data().impressions || 0), 
          0
        )
        
        // Fetch banner impressions from the correct path
        const bannersRef = collection(db, 'merchants', user.uid, 'banners')
        const bannersQuery = query(bannersRef)
        const bannersSnapshot = await getDocs(bannersQuery)
        const totalBannerImpressions = bannersSnapshot.docs.reduce(
          (total, doc) => total + (doc.data().impressions || 0), 
          0
        )
        
        // Fetch average order value
        const totalAmount = transactionsSnapshot.docs.reduce((total, doc) => total + (doc.data().amount || 0), 0)
        const avgOrderValue = totalAmount / totalCustomers
        
        // Fetch redemptions data
        const redemptionsRef = collection(db, 'redemptions')
        const redemptionsQuery = query(
          redemptionsRef,
          where('merchantId', '==', user.uid)
        )
        const redemptionsSnapshot = await getDocs(redemptionsQuery)
        const totalRedemptions = redemptionsSnapshot.docs.length
        
        // Update metrics state with all values
        setMetrics({
          totalCustomers,
          activeCustomers,
          customerGrowth,
          totalPointsIssued,
          totalStoreViews,
          avgOrderValue,
          totalTransactions: transactionsSnapshot.docs.length,
          totalRedemptions,
          redemptionRate: 0,
          activeRewards,
          totalBannerImpressions,
          totalRewardViews,
          customersWithRedeemableRewards,
          customersWithoutRedeemableRewards
        })
      } catch (error) {
        console.error('Error fetching metrics:', error)
        toast({
          title: "Error",
          description: "Failed to load metrics. Please refresh the page.",
          variant: "destructive"
        })
      } finally {
        setMetricsLoading(false)
      }
    }
    
    if (user?.uid) {
      fetchMetrics()
    }
  }, [user?.uid, timeframe])

  useEffect(() => {
    const fetchHistogramData = async () => {
      if (!user?.uid) return
      
      try {
        // Set chart loading to true and chart ready to false
        setChartLoading(true)
        setChartReady(false)
        
        // Get date range based on selected timeframe
        const end = new Date()
        const start = new Date()
        
        // Set the start date based on the selected timeframe
        if (chartTimeframe === "7days") {
          start.setDate(start.getDate() - 7)
        } else if (chartTimeframe === "30days") {
          start.setDate(start.getDate() - 30)
        } else if (chartTimeframe === "90days") {
          start.setDate(start.getDate() - 90)
        }
        
        // Create an array of all dates in the selected timeframe
        const days = chartTimeframe === "7days" ? 7 : chartTimeframe === "30days" ? 30 : 90;
        const dateArray = Array.from({ length: days }, (_, i) => {
          const date = new Date()
          date.setDate(date.getDate() - (days - 1) + i)
          return {
            date: format(date, 'MMM dd'),
            fullDate: date,
            transactions: 0,
            redemptions: 0
          }
        })
        
        // Fetch transactions for the selected timeframe
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const transactionsQuery = query(
          transactionsRef,
          where('createdAt', '>=', start),
          where('createdAt', '<=', end),
          orderBy('createdAt', 'asc')
        )
        
        // Fetch redemptions for the selected timeframe
        const redemptionsRef = collection(db, 'redemptions')
        const redemptionsQuery = query(
          redemptionsRef,
          where('merchantId', '==', user.uid),
          where('redemptionDate', '>=', start),
          where('redemptionDate', '<=', end),
          orderBy('redemptionDate', 'asc')
        )
        
        const [transactionsSnapshot, redemptionsSnapshot] = await Promise.all([
          getDocs(transactionsQuery),
          getDocs(redemptionsQuery)
        ])
        
        console.log(`Found ${transactionsSnapshot.docs.length} transactions and ${redemptionsSnapshot.docs.length} redemptions`);
        
        // Process transactions data
        transactionsSnapshot.docs.forEach(doc => {
          const data = doc.data()
          if (data.createdAt) {
            const transactionDate = data.createdAt.toDate()
            const dateStr = format(transactionDate, 'MMM dd')
            
            // Find the matching date in our array and increment the transactions count
            const dateEntry = dateArray.find(d => d.date === dateStr)
            if (dateEntry) {
              dateEntry.transactions += 1
            }
          }
        })
        
        // Process redemptions data
        redemptionsSnapshot.docs.forEach(doc => {
          const data = doc.data()
          if (data.redemptionDate) {
            const redemptionDate = data.redemptionDate.toDate()
            const dateStr = format(redemptionDate, 'MMM dd')
            
            // Find the matching date in our array and increment the redemptions count
            const dateEntry = dateArray.find(d => d.date === dateStr)
            if (dateEntry) {
              dateEntry.redemptions += 1
            }
          }
        })
        
        // Set the histogram data
        setHistogramData(dateArray)
        
        // Short delay before showing the chart to ensure smooth transition
        setTimeout(() => {
          setChartLoading(false)
          setChartReady(true)
        }, 300)
        
      } catch (error) {
        console.error('Error fetching histogram data:', error)
        toast({
          title: "Error",
          description: "Failed to load chart data. Please refresh the page.",
          variant: "destructive"
        })
        setChartLoading(false)
      }
    }
    
    if (user?.uid) {
      fetchHistogramData()
    }
    
    // Reset chart ready state when timeframe changes
    return () => {
      setChartReady(false)
    }
  }, [user?.uid, chartTimeframe])

  useEffect(() => {
    const fetchTopViewingCustomers = async () => {
      if (!user?.uid) return
      
      try {
        setTopCustomersLoading(true)
        // Fetch store views
        const storeViewsRef = collection(db, 'merchants', user.uid, 'storeViews')
        const storeViewsQuery = query(storeViewsRef, orderBy('timestamp', 'desc'), limit(20))
        const storeViewsSnapshot = await getDocs(storeViewsQuery)
        
        // Count views by customer
        const customerViewCounts: Record<string, {count: number, lastView: Date}> = {}
        
        storeViewsSnapshot.docs.forEach(doc => {
          const data = doc.data()
          if (data.customerId) {
            if (!customerViewCounts[data.customerId]) {
              customerViewCounts[data.customerId] = {
                count: 0,
                lastView: data.timestamp?.toDate() || new Date()
              }
            }
            customerViewCounts[data.customerId].count++
          }
        })
        
        // Convert to array and sort by count
        const sortedCustomers = Object.entries(customerViewCounts)
          .map(([customerId, data]) => ({
            id: customerId,
            viewCount: data.count,
            lastView: data.lastView,
            name: 'Loading...',
            email: '',
            pointsBalance: 0
          }))
          .sort((a, b) => b.viewCount - a.viewCount)
          .slice(0, 5)
        
        // Fetch customer details
        const enhancedCustomers = await Promise.all(
          sortedCustomers.map(async (customer) => {
            try {
              const customerDoc = await getDoc(doc(db, 'customers', customer.id))
              if (customerDoc.exists()) {
                const data = customerDoc.data()
                return {
                  ...customer,
                  name: data.fullName || data.name || 'Unknown Customer',
                  email: data.email || '',
                  pointsBalance: data.pointsBalance || 0
                }
              }
              return customer
            } catch (error) {
              console.error('Error fetching customer details:', error)
              return customer
            }
          })
        )
        
        setTopViewingCustomers(enhancedCustomers)
        
      } catch (error) {
        console.error('Error fetching top viewing customers:', error)
      } finally {
        setTopCustomersLoading(false)
      }
    }
    
    if (user?.uid) {
      fetchTopViewingCustomers()
    }
  }, [user?.uid, timeframe])

  const fetchMerchantInsights = async () => {
    if (!user?.uid) {
      toast({
        title: "Error",
        description: "User ID not found. Please log in again.",
        variant: "destructive"
      })
      return
    }

    console.log("Fetching merchant insights for user:", user.uid);
    
    try {
      setInsightLoading(true);
      setInsightError(null);
      setInsightDialogOpen(true);
      console.log("Dialog opened:", insightDialogOpen);

      // Call the actual Cloud Function URL
      const response = await fetch('https://merchantinsightanalysis-galv2k5a4q-uc.a.run.app', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ merchantId: user.uid }),
      });

      console.log("Response status:", response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error("Error response:", errorText);
        throw new Error(`Failed to fetch insights: ${response.status} ${errorText}`);
      }

      const data = await response.json();
      console.log("Received data:", data);
      console.log("Data type:", typeof data);
      console.log("Insights type:", data.insights ? typeof data.insights : "undefined");
      console.log("Recommendations type:", data.recommendations ? typeof data.recommendations : "undefined");
      setInsightData(data);
      setInsightLoading(false);
      
    } catch (error) {
      console.error('Error fetching merchant insights:', error);
      setInsightError(error instanceof Error ? error.message : 'An unknown error occurred');
      toast({
        title: "Error",
        description: "Failed to fetch merchant insights. Please try again.",
        variant: "destructive"
      });
      setInsightLoading(false);
    }
  }

  // Format date for display
  const formatDate = (date: Date) => {
    return format(date, "MMM d, yyyy")
  }
  
  // Format time ago
  const formatTimeAgo = (date: Date) => {
    return formatDistanceToNow(date, { addSuffix: true })
  }

  // Safely render HTML content
  const renderHtml = (htmlContent: string | null) => {
    if (!htmlContent) return null;
    
    try {
      // Sanitize the HTML content to prevent XSS attacks
      // Note: In a production environment, you should use a proper HTML sanitizer library
      
      // Add additional spacing to HTML elements to improve readability
      const enhancedHtmlContent = htmlContent
        .replace(/<p>/g, '<p class="my-3">')
        .replace(/<ul>/g, '<ul class="my-3 list-disc pl-5">')
        .replace(/<ol>/g, '<ol class="my-3 list-decimal pl-5">')
        .replace(/<li>/g, '<li class="my-1">')
        .replace(/<h3>/g, '<h3 class="text-base font-semibold my-3">')
        .replace(/<h4>/g, '<h4 class="text-sm font-semibold my-2">');
      
      return (
        <div 
          className="prose prose-slate max-w-none prose-headings:font-semibold prose-h1:text-xl prose-h2:text-lg prose-h3:text-base prose-h3:font-bold prose-p:my-3 prose-p:leading-relaxed prose-li:my-1 prose-li:leading-relaxed prose-table:border-collapse prose-th:bg-gray-50 prose-th:p-2 prose-th:font-semibold prose-td:p-2 prose-td:border prose-td:border-gray-200 space-y-4"
          dangerouslySetInnerHTML={{ __html: enhancedHtmlContent }} 
        />
      );
    } catch (error) {
      console.error('Error rendering HTML:', error);
      return (
        <div className="p-4 border border-red-200 rounded bg-red-50 text-red-800">
          <p className="font-medium">Error rendering content</p>
          <p className="text-sm mt-1">There was a problem displaying this content.</p>
        </div>
      );
    }
  };
  
  // Process API responses to handle both Markdown and HTML content
  const processApiResponse = (response: string | null) => {
    if (!response) return null;
    
    try {
      // Check if the response is a JSON string containing HTML in an "answer" field
      if (response.includes('"answer":')) {
        try {
          const jsonResponse = JSON.parse(response);
          if (jsonResponse.answer && typeof jsonResponse.answer === 'string') {
            // If the answer field contains HTML, return it directly
            return jsonResponse.answer;
          }
        } catch (jsonError) {
          console.error('Error parsing JSON response:', jsonError);
          // Continue with other checks if JSON parsing fails
        }
      }
      
      // Check if the response is wrapped in code blocks and remove them
      if (response.includes('```')) {
        // Handle code blocks with language specifiers
        if (response.includes('```html')) {
          // This is explicitly marked as HTML
          return response.replace(/```html\n/g, '').replace(/```$/g, '');
        } else if (response.includes('```markdown')) {
          // This is explicitly marked as Markdown
          return response.replace(/```markdown\n/g, '').replace(/```$/g, '');
        } else {
          // Generic code block
          return response.replace(/```\w*\n/g, '').replace(/```$/g, '');
        }
      }
      
      // Check if the response is HTML by looking for common HTML tags
      const htmlPattern = /<(html|body|div|h[1-6]|p|ul|ol|li|table|tr|th|td|a|img|span|strong|em|b)[\s>]/i;
      if (htmlPattern.test(response.trim().substring(0, 100))) {
        // It's likely HTML content
        return response;
      }
      
      // Default - just return the response as is
      return response;
    } catch (error) {
      console.error('Error processing API response:', error);
      // Return the original response if there's an error
      return response;
    }
  }

  // Custom tooltip component for the chart
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-3 border border-gray-200 rounded-lg shadow-sm" style={{ fontFamily: 'SF Pro Display, -apple-system, BlinkMacSystemFont, sans-serif' }}>
          <p className="text-sm font-medium mb-1">{label}</p>
          {payload.map((entry: any, index: number) => (
            <div key={`item-${index}`} className="flex items-center gap-2 text-sm">
              <div 
                className="h-3 w-3 rounded-sm" 
                style={{ backgroundColor: entry.color }}
              />
              <span className="font-medium">{entry.name}:</span>
              <span>{entry.value}</span>
            </div>
          ))}
        </div>
      );
    }
    return null;
  };

  // Custom legend component
  const CustomLegend = (props: any) => {
    const { payload } = props;
    
    return (
      <div className="flex justify-center gap-6 mt-2" style={{ fontFamily: 'SF Pro Display, -apple-system, BlinkMacSystemFont, sans-serif' }}>
        {payload.map((entry: any, index: number) => (
          <div key={`item-${index}`} className="flex items-center gap-1.5">
            <div 
              className="h-3 w-3 rounded-sm" 
              style={{ backgroundColor: entry.color }}
            />
            <span className="text-sm font-medium">{entry.value}</span>
          </div>
        ))}
      </div>
    );
  };

  // Handle OAuth callbacks
  useEffect(() => {
    const handleOAuthCallback = async () => {
      if (!searchParams) return
      
      // Get parameters from URL
      const code = searchParams.get('code')
      const state = searchParams.get('state')
      
      console.log('OAuth callback detected:', { hasCode: !!code, hasState: !!state, hasUser: !!user })
      console.log('URL parameters:', { code: code?.substring(0, 20) + '...', state })
      console.log('Current path:', window.location.pathname)
      
      if (!code || !state || !user) return
      
      // Check if it's a Square callback
      const storedSquareState = localStorage.getItem('square_state')
      console.log('Checking Square state:', { storedState: storedSquareState, urlState: state, match: state === storedSquareState })
      
      if (state === storedSquareState) {
        console.log('Square OAuth callback confirmed')
        try {
          // Get merchant ID from localStorage
          const merchantId = localStorage.getItem('merchant_id')
          console.log('Merchant ID from localStorage:', merchantId)
          
          if (!merchantId) {
            console.error('Missing merchant ID in localStorage')
            throw new Error('Missing merchant ID')
          }
          
          console.log('Exchanging code for token...')
          // Exchange code for token
          const response = await fetch('/api/oauth/square', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              code,
              state,
              merchantId
            })
          })
          
          console.log('Token exchange response status:', response.status)
          const data = await response.json()
          console.log('Token exchange response data:', data)
          
          if (data.success) {
            console.log('Square connection successful')
            toast({
              title: "Success!",
              description: "Your Square account has been connected.",
            })
          } else {
            console.error('Square connection failed:', data.error, data.details)
            throw new Error(data.error || 'Failed to connect Square account')
          }
          
          // Clear state from localStorage
          localStorage.removeItem('square_state')
          localStorage.removeItem('merchant_id')
          
          // Redirect to integrations page
          console.log('Redirecting to integrations page')
          router.push('/integrations')
        } catch (error) {
          console.error('Error handling Square callback:', error)
          toast({
            title: "Connection Failed",
            description: "We couldn't connect your Square account. Please try again.",
            variant: "destructive"
          })
        }
      } 
      // Check if it's a Lightspeed New callback
      else if (state === localStorage.getItem('lightspeed_new_state')) {
        console.log('Lightspeed New OAuth callback confirmed')
        try {
          // Get merchant ID and code verifier from localStorage
          const merchantId = localStorage.getItem('lightspeed_new_merchant_id')
          const codeVerifier = localStorage.getItem('lightspeed_new_code_verifier')
          
          console.log('Merchant ID from localStorage:', merchantId)
          console.log('Code verifier exists:', !!codeVerifier)
          console.log('Code verifier length:', codeVerifier ? codeVerifier.length : 0)
          
          if (!merchantId) {
            console.error('Missing merchant ID in localStorage')
            throw new Error('Missing merchant ID')
          }
          
          if (!codeVerifier) {
            console.error('Missing code verifier in localStorage')
            throw new Error('Missing code verifier')
          }
          
          console.log('Exchanging code for token...')
          // Exchange code for token - POST method for more reliable handling
          const response = await fetch('/api/lightspeed/new', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              code,
              merchantId,
              state,
              codeVerifier
            })
          })
          
          console.log('Token exchange response status:', response.status)
          const data = await response.json()
          console.log('Token exchange response data:', data)
          
          if (data.success) {
            console.log('Lightspeed New connection successful')
            toast({
              title: "Success!",
              description: "Your Lightspeed account has been connected.",
            })
            
            // Refresh the page or update the state to show the connected status
            // This ensures the UI shows the updated connection status
            setTimeout(() => {
              window.location.href = '/integrations';
            }, 1500)
          } else {
            console.error('Lightspeed New connection failed:', data.error, data.details)
            throw new Error(data.error || 'Failed to connect Lightspeed account')
          }
          
          // Clear state from localStorage
          localStorage.removeItem('lightspeed_new_state')
          localStorage.removeItem('lightspeed_new_merchant_id')
          localStorage.removeItem('lightspeed_new_code_verifier')
        } catch (error) {
          console.error('Error handling Lightspeed New callback:', error)
          toast({
            title: "Connection Failed",
            description: "We couldn't connect your Lightspeed account. Please try again.",
            variant: "destructive"
          })
          
          // Clear state from localStorage even on error
          localStorage.removeItem('lightspeed_new_state')
          localStorage.removeItem('lightspeed_new_merchant_id')
          localStorage.removeItem('lightspeed_new_code_verifier')
          
          // Redirect to integrations page even on error
          setTimeout(() => {
            window.location.href = '/integrations';
          }, 2000)
        }
      } else if (code && state) {
        // If we have code and state but no matching stored state, log this information
        console.log('OAuth callback received but no matching state found in localStorage', {
          availableLocalStorageKeys: Object.keys(localStorage),
          squareStateExists: !!localStorage.getItem('square_state'),
          lightspeedNewStateExists: !!localStorage.getItem('lightspeed_new_state'),
          lightspeedNewState: localStorage.getItem('lightspeed_new_state')
        })
      }
    }
    
    // Only run the callback handler if we have query parameters that look like an OAuth callback
    if (searchParams && (searchParams.get('code') || searchParams.get('state'))) {
      console.log('OAuth callback parameters detected in URL')
      handleOAuthCallback()
    }
  }, [searchParams, user, router])

  // Add function to fetch setup status
  useEffect(() => {
    const fetchSetupStatus = async () => {
      if (!user?.uid) return
      
      try {
        // Check Tap Agent setup
        const tapAgentRef = doc(db, 'agents', user.uid)
        const tapAgentDoc = await getDoc(tapAgentRef)
        
        // Check banner creation
        const bannersRef = collection(db, 'merchants', user.uid, 'banners')
        const bannersSnapshot = await getDocs(bannersRef)
        
        // Check membership levels
        const membershipLevelsRef = collection(db, 'merchants', user.uid, 'membershipLevels')
        const membershipLevelsSnapshot = await getDocs(membershipLevelsRef)
        
        // Check points rules
        const pointsRulesRef = collection(db, 'merchants', user.uid, 'pointsRules')
        const pointsRulesSnapshot = await getDocs(pointsRulesRef)
        
        // Check POS integration
        const integrationsRef = doc(db, 'merchants', user.uid, 'integrations', 'square')
        const integrationsDoc = await getDoc(integrationsRef)
        
        // Check open banking
        const openBankingRef = doc(db, 'merchants', user.uid, 'integrations', 'openBanking')
        const openBankingDoc = await getDoc(openBankingRef)
        
        // Check custom rewards
        const rewardsRef = collection(db, 'merchants', user.uid, 'rewards')
        const rewardsSnapshot = await getDocs(rewardsRef)
        
        // Check introductory reward
        const merchantRef = doc(db, 'merchants', user.uid)
        const merchantDoc = await getDoc(merchantRef)
        const merchantData = merchantDoc.data()
        
        setSetupChecklist({
          tapAgent: tapAgentDoc.exists(),
          banner: bannersSnapshot.docs.length > 0,
          membershipLevels: membershipLevelsSnapshot.docs.length > 0,
          pointsRule: pointsRulesSnapshot.docs.length > 0,
          posIntegration: integrationsDoc.exists() && integrationsDoc.data()?.connected === true,
          openBanking: openBankingDoc.exists() && openBankingDoc.data()?.connected === true,
          customReward: rewardsSnapshot.docs.length > 0,
          introductoryReward: merchantData?.hasIntroductoryReward === true
        })
        
      } catch (error) {
        console.error('Error fetching setup status:', error)
      }
    }
    
    if (user?.uid && isSetupWizardOpen) {
      fetchSetupStatus()
    }
  }, [user?.uid, isSetupWizardOpen])

  // Add function to handle checkbox changes
  const handleChecklistChange = (key: keyof typeof setupChecklist) => {
    setSetupChecklist(prev => ({
      ...prev,
      [key]: !prev[key]
    }))
  }

  // Add a new function to fetch Tap Agent metrics
  useEffect(() => {
    const fetchTapAgentMetrics = async () => {
      if (!user?.uid) return;
      
      try {
        setTapAgentMetrics(prev => ({ ...prev, loading: true }));
        
        // Check if the agent is configured
        const agentDocRef = doc(db, 'agents', user.uid);
        const agentDoc = await getDoc(agentDocRef);
        
        if (!agentDoc.exists()) {
          setTapAgentMetrics(prev => ({ 
            ...prev, 
            loading: false,
            lastRun: null
          }));
          return;
        }
        
        const agentData = agentDoc.data();
        
        // Get rewards created by Tap Agent
        const agentRewardsQuery = query(
          collection(db, 'merchants', user.uid, 'rewards'),
          where('createdBy', '==', 'tapAgent')
        );
        const agentRewardsSnapshot = await getDocs(agentRewardsQuery);
        
        // Get banners created by Tap Agent
        const agentBannersQuery = query(
          collection(db, 'merchants', user.uid, 'banners'),
          where('createdBy', '==', 'tapAgent')
        );
        const agentBannersSnapshot = await getDocs(agentBannersQuery);
        
        // Get redemptions for agent-created rewards
        const agentRewardIds = agentRewardsSnapshot.docs.map(doc => doc.id);
        
        let totalRedemptions = 0;
        let totalImpressions = 0;
        let totalClicks = 0;
        
        // Sum up metrics from agent-created rewards
        agentRewardsSnapshot.docs.forEach(doc => {
          const data = doc.data();
          totalRedemptions += data.redemptionCount || 0;
          totalImpressions += data.impressions || 0;
          totalClicks += data.clicks || 0;
        });
        
        // Sum up metrics from agent-created banners
        agentBannersSnapshot.docs.forEach(doc => {
          const data = doc.data();
          totalImpressions += data.impressions || 0;
          totalClicks += data.clicks || 0;
        });
        
        setTapAgentMetrics({
          lastRun: agentData.lastActive?.toDate() || new Date(),
          rewardsCreated: agentRewardsSnapshot.docs.length,
          bannersCreated: agentBannersSnapshot.docs.length,
          impressions: totalImpressions,
          clicks: totalClicks,
          redemptions: totalRedemptions,
          loading: false
        });
        
      } catch (error) {
        console.error('Error fetching Tap Agent metrics:', error);
        setTapAgentMetrics(prev => ({ ...prev, loading: false }));
      }
    };
    
    if (user?.uid) {
      fetchTapAgentMetrics();
    }
  }, [user?.uid]);

  // Available integrations for the command box
  const availableIntegrations = [
    { id: "mailchimp", name: "MailChimp", icon: <Mail className="h-4 w-4 text-red-500" /> },
    { id: "instagram", name: "Instagram", icon: <Image src="/insta.webp" width={16} height={16} alt="Instagram" className="h-4 w-4 object-contain" /> },
    { id: "google", name: "Google", icon: <Globe className="h-4 w-4 text-blue-500" /> },
    { id: "gmail", name: "Gmail", icon: <Image src="/gmail.png" width={16} height={16} alt="Gmail" className="h-4 w-4 object-contain" /> },
    { id: "lightspeed", name: "Lightspeed", icon: <Image src="/lslogo.png" width={16} height={16} alt="Lightspeed" className="h-4 w-4 object-contain" /> },
    { id: "tap", name: "Tap Loyalty", icon: <Image src="/taplogo.png" width={16} height={16} alt="Tap Loyalty" className="h-4 w-4 object-contain" /> },
  ]

  // Handle selecting an integration from the dropdown
  const handleSelectIntegration = (integration: typeof availableIntegrations[0]) => {
    setSelectedIntegrations([...selectedIntegrations, integration])
    
    // Replace the @ symbol and any text after it up to cursor position with nothing
    const atIndex = commandInput.lastIndexOf('@', cursorPosition)
    if (atIndex !== -1) {
      const newInput = 
        commandInput.substring(0, atIndex) + 
        commandInput.substring(cursorPosition)
      setCommandInput(newInput)
    }
    
    setShowIntegrations(false)
    
    // Focus back on input
    setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus()
      }
    }, 0)
  }

  // Handle input changes for the command box
  const handleCommandInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setCommandInput(value)
    setCursorPosition(e.target.selectionStart || 0)
    
    // Check if we should show the integrations dropdown
    const lastAtIndex = value.lastIndexOf('@', e.target.selectionStart || 0)
    const hasAtBeforeCursor = lastAtIndex !== -1
    const nextCharAfterAt = lastAtIndex < value.length - 1 ? value[lastAtIndex + 1] : null
    
    // Only show dropdown if @ is the last character or followed by text (not space)
    if (hasAtBeforeCursor && (!nextCharAfterAt || nextCharAfterAt !== ' ')) {
      const textAfterAt = value.substring(lastAtIndex + 1, e.target.selectionStart || value.length)
      
      // If there's no text after @ or the text after @ doesn't contain spaces, show integrations
      if (!textAfterAt.includes(' ')) {
        setShowIntegrations(true)
      } else {
        setShowIntegrations(false)
      }
    } else {
      setShowIntegrations(false)
    }
  }

  // Handle removing a selected integration
  const removeIntegration = (id: string) => {
    setSelectedIntegrations(selectedIntegrations.filter(i => i.id !== id))
  }

  // Handle sending the command
  const handleSendCommand = async () => {
    if (commandInput.trim() || selectedIntegrations.length > 0) {
      console.log("Sending command:", {
        text: commandInput,
        integrations: selectedIntegrations
      })
      
      // Set processing state for all selected integrations
      const newProcessingState: Record<string, boolean> = {}
      selectedIntegrations.forEach(integration => {
        newProcessingState[integration.id] = true
      })
      setProcessingIntegrations(newProcessingState)
      
      // Check if Gmail is one of the selected integrations
      const gmailIntegration = selectedIntegrations.find(integration => integration.id === "gmail")
      // Check if Lightspeed is one of the selected integrations
      const lightspeedIntegration = selectedIntegrations.find(integration => integration.id === "lightspeed")
      // Check if Tap Loyalty is one of the selected integrations
      const tapIntegration = selectedIntegrations.find(integration => integration.id === "tap")
      
      // If there are no selected integrations but we have command input, use the default AI assistant
      if (selectedIntegrations.length === 0 && commandInput.trim()) {
        try {
          setAssistantLoading(true)
          
          // Make API call to chatMerchant function
          const response = await fetch(
            `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/chatMerchant`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              merchantId: user?.uid,
              prompt: commandInput.trim()
            }),
          });
          
          // Get the response
          const rawResponse = await response.text();
          console.log("Raw AI Assistant response:", rawResponse);
          
          try {
            const data = JSON.parse(rawResponse);
            console.log("AI Assistant response parsed:", data);
            
            // Set debug response for inspection
            setDebugResponse(rawResponse);
            
            // Check for multiple possible response formats
            if (data?.answer) {
              // This is the expected format from chatMerchant: {"answer":"response text"}
              setAssistantResponse(data.answer);
              
              toast({
                title: "AI Assistant Response",
                description: "Your question has been answered",
                variant: "default"
              });
            } else if (data?.success && data?.summary) {
              setAssistantResponse(data.summary);
              
              toast({
                title: "AI Assistant Response",
                description: "Your question has been answered",
                variant: "default"
              });
            } else if (data?.success && data?.answer) {
              setAssistantResponse(data.answer);
              
              toast({
                title: "AI Assistant Response",
                description: "Your question has been answered",
                variant: "default"
              });
            } else if (data?.result?.summary) {
              setAssistantResponse(data.result.summary);
              
              toast({
                title: "AI Assistant Response",
                description: "Your question has been answered",
                variant: "default"
              });
            } else if (data?.summary) {
              setAssistantResponse(data.summary);
              
              toast({
                title: "AI Assistant Response",
                description: "Your question has been answered",
                variant: "default"
              });
            } else if (data?.error) {
              toast({
                title: "AI Assistant Error",
                description: data.error,
                variant: "destructive"
              });
            } else {
              // No recognizable format - display what we received for debugging
              console.error("Unrecognized response format:", data);
              setAssistantResponse(`The AI Assistant returned data in an unexpected format. Please check with your developer.\n\nReceived: ${JSON.stringify(data, null, 2)}`);
              
              toast({
                title: "Unexpected Response Format",
                description: "The response format wasn't recognized, but we've displayed what we received",
                variant: "destructive"
              });
            }
          } catch (e) {
            console.error("Error parsing AI Assistant response:", e);
            toast({
              title: "Error Processing Response",
              description: "Could not process the AI Assistant response",
              variant: "destructive"
            });
          }
        } catch (error) {
          console.error("Error querying AI Assistant:", error);
          toast({
            title: "AI Assistant Query Failed",
            description: error instanceof Error ? error.message : "Unknown error occurred",
            variant: "destructive"
          });
        } finally {
          setAssistantLoading(false);
        }
      }
      
      if (gmailIntegration && commandInput.trim()) {
        try {
          setGmailQueryLoading(true)
          
          // Clear the "processing..." indicator immediately when loading starts
          setProcessingIntegrations(prev => ({
            ...prev,
            [gmailIntegration.id]: false
          }))
          
          // Make API call to questionGmailHttp function
          const response = await fetch(
            `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/questionGmailHttp`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              merchantId: user?.uid,
              prompt: commandInput.trim()
            }),
          });
          
          // Get the response
          const rawResponse = await response.text();
          console.log("Raw Gmail API response:", rawResponse);
          
          try {
            const data = JSON.parse(rawResponse);
            console.log("Gmail API response parsed:", data);
            
            // Set debug response for inspection
            setDebugResponse(rawResponse);
            
            // Check for multiple possible response formats
            if (data?.success && data?.summary) {
              // Format: { success: true, summary: "..." }
              setGmailQueryResponse(data.summary);
              
              toast({
                title: "Gmail Query Completed",
                description: "Gmail query has been processed successfully",
                variant: "default"
              });
            } else if (data?.success && data?.answer) {
              // Format: { success: true, answer: "..." }
              setGmailQueryResponse(data.answer);
              
              toast({
                title: "Gmail Query Completed",
                description: "Gmail query has been processed successfully",
                variant: "default"
              });
            } else if (data?.result?.summary) {
              // Format: { result: { summary: "..." } }
              setGmailQueryResponse(data.result.summary);
              
              toast({
                title: "Gmail Query Completed",
                description: "Gmail query has been processed successfully",
                variant: "default"
              });
            } else if (data?.summary) {
              // Format: { summary: "..." }
              setGmailQueryResponse(data.summary);
              
              toast({
                title: "Gmail Query Completed",
                description: "Gmail query has been processed successfully",
                variant: "default"
              });
            } else if (data?.error) {
              // Format: { error: "..." }
              toast({
                title: "Gmail Query Error",
                description: data.error,
                variant: "destructive"
              });
            } else {
              // No recognizable format - display what we received for debugging
              console.error("Unrecognized response format:", data);
              setGmailQueryResponse(`The Gmail API returned data in an unexpected format. Please check with your developer.\n\nReceived: ${JSON.stringify(data, null, 2)}`);
              
              toast({
                title: "Unexpected Response Format",
                description: "The response format wasn't recognized, but we've displayed what we received",
                variant: "destructive"
              });
            }
          } catch (e) {
            console.error("Error parsing Gmail API response:", e);
            toast({
              title: "Error Processing Response",
              description: "Could not process the Gmail query response",
              variant: "destructive"
            });
          }
        } catch (error) {
          console.error("Error querying Gmail:", error);
          toast({
            title: "Gmail Query Failed",
            description: error instanceof Error ? error.message : "Unknown error occurred",
            variant: "destructive"
          });
        } finally {
          setGmailQueryLoading(false);
          // Immediately remove the "processing..." indicator for Gmail
          if (gmailIntegration) {
            setProcessingIntegrations(prev => ({
              ...prev,
              [gmailIntegration.id]: false
            }));
          }
        }
      }
      
      // Handle Lightspeed integration
      if (lightspeedIntegration && commandInput.trim()) {
        try {
          setLightspeedQueryLoading(true);
          
          // Clear the "processing..." indicator immediately when loading starts
          setProcessingIntegrations(prev => ({
            ...prev,
            [lightspeedIntegration.id]: false
          }))
          
          // Make API call to questionLsHttp function
          const response = await fetch(
            `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/questionLsHttp`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              merchantId: user?.uid,
              prompt: commandInput.trim(),
              days: 30 // Default to 30 days of data
            }),
          });
          
          // Get the response
          const rawResponse = await response.text();
          console.log("Raw Lightspeed API response:", rawResponse);
          
          try {
            const data = JSON.parse(rawResponse);
            console.log("Lightspeed API response parsed:", data);
            
            // Set debug response for inspection
            setDebugResponse(rawResponse);
            
            // Check for multiple possible response formats
            if (data?.success && data?.summary) {
              // Format: { success: true, summary: "..." }
              setLightspeedQueryResponse(data.summary);
              
              toast({
                title: "Lightspeed Query Completed",
                description: "Lightspeed query has been processed successfully",
                variant: "default"
              });
            } else if (data?.success && data?.answer) {
              // Format: { success: true, answer: "..." }
              setLightspeedQueryResponse(data.answer);
              
              toast({
                title: "Lightspeed Query Completed",
                description: "Lightspeed query has been processed successfully",
                variant: "default"
              });
            } else if (data?.result?.summary) {
              // Format: { result: { summary: "..." } }
              setLightspeedQueryResponse(data.result.summary);
              
              toast({
                title: "Lightspeed Query Completed",
                description: "Lightspeed query has been processed successfully",
                variant: "default"
              });
            } else if (data?.summary) {
              // Format: { summary: "..." }
              setLightspeedQueryResponse(data.summary);
              
              toast({
                title: "Lightspeed Query Completed",
                description: "Lightspeed query has been processed successfully",
                variant: "default"
              });
            } else if (data?.error) {
              // Format: { error: "..." }
              toast({
                title: "Lightspeed Query Error",
                description: data.error,
                variant: "destructive"
              });
            } else {
              // No recognizable format - display what we received for debugging
              console.error("Unrecognized response format:", data);
              setLightspeedQueryResponse(`The Lightspeed API returned data in an unexpected format. Please check with your developer.\n\nReceived: ${JSON.stringify(data, null, 2)}`);
              
              toast({
                title: "Unexpected Response Format",
                description: "The response format wasn't recognized, but we've displayed what we received",
                variant: "destructive"
              });
            }
          } catch (e) {
            console.error("Error parsing Lightspeed API response:", e);
            toast({
              title: "Error Processing Response",
              description: "Could not process the Lightspeed query response",
              variant: "destructive"
            });
          }
        } catch (error) {
          console.error("Error querying Lightspeed:", error);
          toast({
            title: "Lightspeed Query Failed",
            description: error instanceof Error ? error.message : "Unknown error occurred",
            variant: "destructive"
          });
        } finally {
          setLightspeedQueryLoading(false);
          // Immediately remove the "processing..." indicator for Lightspeed
          if (lightspeedIntegration) {
            setProcessingIntegrations(prev => ({
              ...prev,
              [lightspeedIntegration.id]: false
            }));
          }
        }
      }
      
      // Handle Tap Loyalty integration
      if (tapIntegration && commandInput.trim()) {
        try {
          setTapQueryLoading(true);
          
          // Clear the "processing..." indicator immediately when loading starts
          setProcessingIntegrations(prev => ({
            ...prev,
            [tapIntegration.id]: false
          }))
          
          // Make API call to questionTapHttp function
          const response = await fetch(
            `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/questionTap`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              merchantId: user?.uid,
              prompt: commandInput.trim()
            }),
          });
          
          // Get the response
          const rawResponse = await response.text();
          console.log("Raw Tap Loyalty API response:", rawResponse);
          
          try {
            const data = JSON.parse(rawResponse);
            console.log("Tap Loyalty API response parsed:", data);
            
            // Set debug response for inspection
            setDebugResponse(rawResponse);
            
            // Check for multiple possible response formats
            if (data?.success && data?.summary) {
              // Format: { success: true, summary: "..." }
              setTapQueryResponse(data.summary);
              
              toast({
                title: "Tap Loyalty Query Completed",
                description: "Tap Loyalty query has been processed successfully",
                variant: "default"
              });
            } else if (data?.success && data?.answer) {
              // Format: { success: true, answer: "..." }
              setTapQueryResponse(data.answer);
              
              toast({
                title: "Tap Loyalty Query Completed",
                description: "Tap Loyalty query has been processed successfully",
                variant: "default"
              });
            } else if (data?.result?.summary) {
              // Format: { result: { summary: "..." } }
              setTapQueryResponse(data.result.summary);
              
              toast({
                title: "Tap Loyalty Query Completed",
                description: "Tap Loyalty query has been processed successfully",
                variant: "default"
              });
            } else if (data?.summary) {
              // Format: { summary: "..." }
              setTapQueryResponse(data.summary);
              
              toast({
                title: "Tap Loyalty Query Completed",
                description: "Tap Loyalty query has been processed successfully",
                variant: "default"
              });
            } else if (data?.error) {
              // Format: { error: "..." }
              toast({
                title: "Tap Loyalty Query Error",
                description: data.error,
                variant: "destructive"
              });
            } else {
              // No recognizable format - display what we received for debugging
              console.error("Unrecognized response format:", data);
              setTapQueryResponse(`The Tap Loyalty API returned data in an unexpected format. Please check with your developer.\n\nReceived: ${JSON.stringify(data, null, 2)}`);
              
              toast({
                title: "Unexpected Response Format",
                description: "The response format wasn't recognized, but we've displayed what we received",
                variant: "destructive"
              });
            }
          } catch (e) {
            console.error("Error parsing Tap Loyalty API response:", e);
            toast({
              title: "Error Processing Response",
              description: "Could not process the Tap Loyalty query response",
              variant: "destructive"
            });
          }
        } catch (error) {
          console.error("Error querying Tap Loyalty:", error);
          toast({
            title: "Tap Loyalty Query Failed",
            description: error instanceof Error ? error.message : "Unknown error occurred",
            variant: "destructive"
          });
        } finally {
          setTapQueryLoading(false);
          // Immediately remove the "processing..." indicator for Tap Loyalty
          if (tapIntegration) {
            setProcessingIntegrations(prev => ({
              ...prev,
              [tapIntegration.id]: false
            }));
          }
        }
      }
      
      // Process other integrations
      selectedIntegrations.forEach(integration => {
        if (integration.id !== "gmail" && integration.id !== "lightspeed" && integration.id !== "tap") { // Skip integrations we already handled
          // Random timeout for other integrations
          const timeout = 4000 + Math.random() * 3000
        
          setTimeout(() => {
            setProcessingIntegrations(prev => ({
              ...prev,
              [integration.id]: false
            }))
            
            toast({
              title: `${integration.name} workflow complete`,
              description: "The integration task has finished successfully",
            })
          }, timeout)
        }
      })
      
      // Reset input field immediately after sending
      setCommandInput("")
      
      // After all processing is done, reset the integrations
      // Keep the integrations that need to show responses
      if (!gmailIntegration && !lightspeedIntegration && !tapIntegration) {
        const maxProcessingTime = 7500 
      setTimeout(() => {
        setSelectedIntegrations([])
        setProcessingIntegrations({})
      }, maxProcessingTime)
      }
    }
  }

  // Function to call Firebase function for email summary
  const summarizeEmails = async (days: number) => {
    // Clear any previous timeouts
    if (findingTimeoutRef.current) clearTimeout(findingTimeoutRef.current);
    if (generatingTimeoutRef.current) clearTimeout(generatingTimeoutRef.current);
    
    setInboxSummaryLoading(true);
    setInboxSummaryResult(null);
    setInboxSummaryError(null);
    setLoadingStage("processing");
    
    try {
      console.log(`Summarizing emails for the last ${days} days`);
      
      // Set timeouts for the loading stages
      findingTimeoutRef.current = setTimeout(() => {
        console.log("Changing loading stage to finding");
        setLoadingStage("finding");
      }, 4000); // 4 seconds
      
      generatingTimeoutRef.current = setTimeout(() => {
        console.log("Changing loading stage to generating");
        setLoadingStage("generating");
      }, 8000); // 8 seconds
      
      // Call the API to summarize emails with correct parameter format
      const response = await fetch(
        `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/summarizeEmailsHttp`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          merchantId: user?.uid,
          days: days
        }),
      });
      
      // Save the raw response for debugging
      const rawResponse = await response.text();
      setDebugResponse(rawResponse);
      
      // Parse the response
      let data;
      try {
        data = JSON.parse(rawResponse);
        console.log("API response:", data);
      } catch (e) {
        console.error("Error parsing API response:", e);
        throw new Error(`Invalid response format: ${rawResponse}`);
      }
      
      // Extract the summary from the response
      if (data?.result?.summary) {
        setInboxSummaryResult(data.result.summary);
      } else {
        throw new Error("No summary found in the response");
      }
    } catch (error) {
      console.error("Error summarizing emails:", error);
      setInboxSummaryError(`Failed to summarize emails: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      // Clear any pending timeouts
      if (findingTimeoutRef.current) clearTimeout(findingTimeoutRef.current);
      if (generatingTimeoutRef.current) clearTimeout(generatingTimeoutRef.current);
      
      setInboxSummaryLoading(false);
    }
  };

  // Function to handle summarize button click
  const handleSummarizeInbox = () => {
    setIsSummarizeInboxSheetOpen(true)
  }

  // Function to handle summary timeframe selection and submit
  const handleSummarizeSubmit = () => {
    let days = 1
    if (inboxSummaryTimeframe === '3day') days = 3
    if (inboxSummaryTimeframe === '7day') days = 7
    
    summarizeEmails(days)
  }

  // Add notification listener
  useEffect(() => {
    if (!user?.uid) return;
    
    // Create a reference to the merchant's notifications collection
    const notifsRef = collection(db, 'merchants', user.uid, 'notifs');
    
    // Create a query to get the latest notifications
    const notifsQuery = query(notifsRef, orderBy('createdAt', 'desc'));
    
    // Set up the real-time listener
    const unsubscribe = onSnapshot(notifsQuery, (snapshot) => {
      // Check for added documents
      snapshot.docChanges().forEach((change) => {
        if (change.type === 'added') {
          // Get the notification data
          const notifData = change.doc.data();
          
          // Check if this is a new notification (created in the last 10 seconds)
          const notifTime = notifData.createdAt?.toDate() || new Date();
          const isRecent = (new Date().getTime() - notifTime.getTime()) < 10000; // 10 seconds
          
          // Only show toast for new notifications
          if (isRecent) {
            // Get notification type prefix
            let prefix = "📣 ";
            switch(notifData.type) {
              case 'success':
                prefix = "✅ ";
                break;
              case 'error':
                prefix = "⚠️ ";
                break;
              case 'reward':
                prefix = "🎁 ";
                break;
              case 'transaction':
                prefix = "🛒 ";
                break;
              case 'insight':
                prefix = "💡 ";
                break;
            }
            
            // Display the notification using toast
            toast({
              title: `${prefix}${notifData.title || "New Notification"}`,
              description: notifData.description || "",
              variant: notifData.type === "error" ? "destructive" : 
                      notifData.type === "success" ? "default" : 
                      "default",
              duration: 5000, // 5 seconds
              action: notifData.link ? (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    router.push(notifData.link);
                  }}
                >
                  View
                </Button>
              ) : undefined
            });
            
            // Play a sound if notification has high priority
            if (notifData.priority === 'high') {
              const audio = new Audio('/notification-sound.mp3');
              audio.play().catch(err => console.error('Error playing notification sound:', err));
            }
          }
        }
      });
    }, (error) => {
      console.error("Error listening to notifications:", error);
    });
    
    // Clean up the listener when the component unmounts
    return () => unsubscribe();
  }, [user?.uid, router]);

  // Function to fetch daily summaries
  const fetchDailySummaries = async () => {
    setIsDailySummaryLoading(true);
    setDailySummaryGmailResponse(null);
    setDailySummaryLightspeedResponse(null);
    
    try {
      // Fetch Gmail summary
      const gmailPrompt = "Summarize my emails from the past day";
      const gmailResponse = await fetch(
        `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/questionGmailHttp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          merchantId: user?.uid,
          prompt: gmailPrompt
        }),
      });
      
      // Process Gmail response
      const gmailRawResponse = await gmailResponse.text();
      let gmailSummary = null;
      try {
        const gmailData = JSON.parse(gmailRawResponse);
        if (gmailData?.success && gmailData?.summary) {
          gmailSummary = gmailData.summary;
        } else if (gmailData?.success && gmailData?.answer) {
          gmailSummary = gmailData.answer;
        } else if (gmailData?.result?.summary) {
          gmailSummary = gmailData.result.summary;
        } else if (gmailData?.summary) {
          gmailSummary = gmailData.summary;
        }
      } catch (error) {
        console.error("Error parsing Gmail API response:", error);
      }
      
      // Fetch Lightspeed summary
      const lightspeedPrompt = "Analyze yesterday's sales data and provide a summary";
      const lightspeedResponse = await fetch(
        `https://us-central1-tap-loyalty-fb6d0.cloudfunctions.net/questionLsHttp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          merchantId: user?.uid,
          prompt: lightspeedPrompt,
          days: 30
        }),
      });
      
      // Process Lightspeed response
      const lightspeedRawResponse = await lightspeedResponse.text();
      let lightspeedSummary = null;
      try {
        const lightspeedData = JSON.parse(lightspeedRawResponse);
        if (lightspeedData?.success && lightspeedData?.summary) {
          lightspeedSummary = lightspeedData.summary;
        } else if (lightspeedData?.success && lightspeedData?.answer) {
          lightspeedSummary = lightspeedData.answer;
        } else if (lightspeedData?.result?.summary) {
          lightspeedSummary = lightspeedData.result.summary;
        } else if (lightspeedData?.summary) {
          lightspeedSummary = lightspeedData.summary;
        }
      } catch (error) {
        console.error("Error parsing Lightspeed API response:", error);
      }
      
      // Update state with responses
      setDailySummaryGmailResponse(gmailSummary);
      setDailySummaryLightspeedResponse(lightspeedSummary);
      
      // Show popup with results
      setShowDailySummaryPopup(true);
      
      // Remove success toast notification
    } catch (error) {
      console.error("Error fetching daily summaries:", error);
      toast({
        title: "Error",
        description: "Failed to fetch daily summaries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsDailySummaryLoading(false);
    }
  };

  if (initialLoading) {
    return (
      <PageTransition>
        <div className="container mx-auto p-4">
          <div className="max-w-7xl mx-auto space-y-8">
            {/* Empty state instead of spinner */}
          </div>
        </div>
      </PageTransition>
    )
  }

  return (
    <PageTransition>
      <style dangerouslySetInnerHTML={{ __html: customAnimationStyles }} />
      <div className="p-6 py-4">
        <div className="space-y-6">
          {/* Welcome Section with Timeframe Tabs */}
          <div>
            <style jsx>{`
              .full-width-divider {
                width: 100vw;
                position: relative;
                left: 50%;
                right: 50%;
                margin-left: -50vw;
                margin-right: -50vw;
                height: 1px;
                background-color: rgb(229, 231, 235);
              }
            `}</style>
            <PageHeader
              title="Welcome back"
            >
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  className="h-8 gap-1 border-[#007AFF] hover:bg-[#007AFF]/5 text-xs px-2 py-0"
                  onClick={fetchDailySummaries}
                  disabled={isDailySummaryLoading}
                >
                  {isDailySummaryLoading ? (
                    <>
                      <div className="h-3 w-3 rounded-full border-2 border-blue-500 border-t-transparent animate-spin" />
                      <GradientText>Processing...</GradientText>
                    </>
                  ) : (
                    <>
                      <Calendar className="h-3 w-3 text-blue-500" />
                      <GradientText>Daily Summary</GradientText>
                    </>
                  )}
                </Button>
              <Button 
                variant="outline" 
                size="sm"
                className="h-8 gap-1 border-blue-200 text-blue-700 hover:bg-blue-50 hover:text-blue-800 text-xs px-2 py-0"
                onClick={() => setIsSetupWizardOpen(true)}
              >
                <PlusCircle className="h-3 w-3" />
                Setup Wizard
              </Button>
              </div>
            </PageHeader>

            {/* Update the tabs layout to be side-by-side with a separator */}
            <div className="flex items-center gap-4">
              {/* Metrics type tabs */}
              <Tabs 
                defaultValue="platform" 
                className="flex-shrink-0"
                onValueChange={(value) => setMetricsType(value as "consumer" | "platform")}
              >
                <TabsList>
                  <TabsTrigger value="platform" className="flex items-center gap-2 data-[state=active]:text-blue-600">
                    <Server className="h-4 w-4" />
                    <span>Platform Metrics</span>
                  </TabsTrigger>
                  <TabsTrigger value="consumer" className="flex items-center gap-2 data-[state=active]:text-blue-600">
                    <Users className="h-4 w-4" />
                    <span>Consumer Metrics</span>
                  </TabsTrigger>
                </TabsList>
              </Tabs>
              
              {/* Vertical separator */}
              <div className="h-8 w-px bg-gray-200"></div>
              
              {/* Date range tabs */}
              <Tabs 
                defaultValue="today"
                value={timeframe}
                onValueChange={(value) => setTimeframe(value as TimeframeType)}
              >
                <TabsList>
                  <TabsTrigger value="today" className="data-[state=active]:text-blue-600">Today</TabsTrigger>
                  <TabsTrigger value="yesterday" className="data-[state=active]:text-blue-600">Yesterday</TabsTrigger>
                  <TabsTrigger value="7days" className="data-[state=active]:text-blue-600">Last 7 Days</TabsTrigger>
                  <TabsTrigger value="30days" className="data-[state=active]:text-blue-600">Last 30 Days</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </div>

          {/* Tap Agent Button - Removed */}

          {/* Gmail Query Response */}
          {gmailQueryResponse && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center gap-2">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                    <Image src="/gmail.png" width={16} height={16} alt="Gmail" className="h-4 w-4 object-contain" />
                  </div>
                  <h3 className="text-sm font-medium text-gray-900">Gmail Response</h3>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="h-7 text-xs"
                    onClick={() => setShowDebugInfo(!showDebugInfo)}
                  >
                    {showDebugInfo ? "Hide Debug" : "Show Debug"}
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-7 w-7 p-0 rounded-full"
                    onClick={() => {
                      setGmailQueryResponse(null);
                      setDebugResponse(null);
                      setShowDebugInfo(false);
                      // Also remove the Gmail integration from selected integrations
                      setSelectedIntegrations(selectedIntegrations.filter(i => i.id !== "gmail"));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <div className="prose prose-sm max-w-none overflow-auto max-h-[600px] font-sf-pro">
                {(() => {
                  // Process the response first
                  const processedResponse = processApiResponse(gmailQueryResponse);
                  
                  // Check if the processed response is HTML
                  if (typeof processedResponse === 'string' && 
                      processedResponse.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i)) {
                    return renderHtml(processedResponse);
                  } 
                  
                  // Otherwise render as Markdown
                  return (
                    <ReactMarkdown 
                      className="prose prose-slate 
                        prose-p:text-gray-700 prose-p:mb-4
                        prose-h1:text-transparent prose-h1:bg-clip-text prose-h1:bg-gradient-to-r prose-h1:from-[#007AFF] prose-h1:to-[#00C6FF] prose-h1:text-2xl prose-h1:font-bold prose-h1:mt-6 prose-h1:mb-4
                        prose-h2:text-transparent prose-h2:bg-clip-text prose-h2:bg-gradient-to-r prose-h2:from-[#007AFF] prose-h2:to-[#00C6FF] prose-h2:text-xl prose-h2:font-bold prose-h2:mt-5 prose-h2:mb-3
                        prose-h3:text-transparent prose-h3:bg-clip-text prose-h3:bg-gradient-to-r prose-h3:from-[#007AFF] prose-h3:to-[#00C6FF] prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-4 prose-h3:mb-2
                        prose-a:text-[#007AFF] 
                        prose-strong:font-semibold prose-strong:text-gray-900 
                        prose-ul:my-4 prose-ul:pl-5 prose-ul:space-y-2 
                        prose-ol:my-4 prose-ol:pl-5 prose-ol:space-y-2
                        prose-li:my-0.5 prose-li:pl-1.5
                        prose-hr:border-gray-200 prose-hr:my-4 prose-hr:border-dashed
                        font-sf-pro [&_.html-content_h1]:text-transparent [&_.html-content_h1]:bg-clip-text [&_.html-content_h1]:bg-gradient-to-r [&_.html-content_h1]:from-[#007AFF] [&_.html-content_h1]:to-[#00C6FF] [&_.html-content_h1]:text-2xl [&_.html-content_h1]:font-bold [&_.html-content_h1]:mt-6 [&_.html-content_h1]:mb-4
                        [&_.html-content_h2]:text-transparent [&_.html-content_h2]:bg-clip-text [&_.html-content_h2]:bg-gradient-to-r [&_.html-content_h2]:from-[#007AFF] [&_.html-content_h2]:to-[#00C6FF] [&_.html-content_h2]:text-xl [&_.html-content_h2]:font-bold [&_.html-content_h2]:mt-5 [&_.html-content_h2]:mb-3
                        [&_.html-content_h3]:text-transparent [&_.html-content_h3]:bg-clip-text [&_.html-content_h3]:bg-gradient-to-r [&_.html-content_h3]:from-[#007AFF] [&_.html-content_h3]:to-[#00C6FF] [&_.html-content_h3]:text-lg [&_.html-content_h3]:font-semibold [&_.html-content_h3]:mt-4 [&_.html-content_h3]:mb-2
                        [&_.html-content_p]:text-gray-700 [&_.html-content_p]:mb-4
                        [&_.html-content_a]:text-[#007AFF]
                        [&_.html-content_ul]:my-4 [&_.html-content_ul]:pl-5 [&_.html-content_ul]:space-y-2
                        [&_.html-content_ol]:my-4 [&_.html-content_ol]:pl-5 [&_.html-content_ol]:space-y-2
                        [&_.html-content_li]:my-0.5 [&_.html-content_li]:pl-1.5"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        hr: () => <div className="my-5 border-t border-gray-100" />,
                        table: ({ children }) => <table className="border-collapse w-full my-4">{children}</table>,
                        th: ({ children }) => <th className="border border-gray-200 bg-gray-50 px-3 py-2 text-left font-medium text-gray-700">{children}</th>,
                        td: ({ children }) => <td className="border border-gray-200 px-3 py-2">{children}</td>,
                        pre: ({ children }) => <pre className="bg-gray-50 p-3 rounded-md overflow-auto text-sm my-4">{children}</pre>,
                        code: ({ children }) => <code className="bg-gray-50 p-1 rounded text-sm font-mono text-purple-600">{children}</code>
                      }}
                    >
                      {processedResponse}
                    </ReactMarkdown>
                  );
                })()}
              </div>
              
              {/* Show debug response */}
              {showDebugInfo && debugResponse && (
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <div className="bg-gray-50 p-3 rounded-md">
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Raw Response:</h4>
                    <pre className="text-xs overflow-auto bg-gray-100 p-2 rounded whitespace-pre-wrap">
                      {debugResponse}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Show debug response */}
          {showDebugInfo && debugResponse && (
            <div className="mt-4 pt-4 border-t border-gray-100">
              <div className="bg-gray-50 p-3 rounded-md">
                <h4 className="text-xs font-medium text-gray-700 mb-1">Raw Response:</h4>
                <pre className="text-xs overflow-auto bg-gray-100 p-2 rounded whitespace-pre-wrap">
                  {debugResponse}
                </pre>
              </div>
            </div>
          )}
          
          {/* Gmail Query Loading */}
          {gmailQueryLoading && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex items-start gap-3">
                <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                  <Image src="/gmail.png" width={16} height={16} alt="Gmail" className="h-4 w-4 object-contain" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-sm font-medium text-gray-900">Processing Gmail Query</h3>
                    <div className="h-4 w-4 rounded-full border-2 border-gray-200 border-t-gray-600 animate-spin"></div>
                  </div>
                  <p className="text-sm text-gray-500">Analyzing your emails...</p>
                </div>
              </div>
            </div>
          )}
          
          {/* Lightspeed Query Response */}
          {lightspeedQueryResponse && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center gap-2">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                    <Image src="/lslogo.png" width={16} height={16} alt="Lightspeed" className="h-4 w-4 object-contain" />
                  </div>
                  <h3 className="text-sm font-medium text-gray-900">Lightspeed Response</h3>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="h-7 text-xs"
                    onClick={() => setShowDebugInfo(!showDebugInfo)}
                  >
                    {showDebugInfo ? "Hide Debug" : "Show Debug"}
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-7 w-7 p-0 rounded-full"
                    onClick={() => {
                      setLightspeedQueryResponse(null);
                      setDebugResponse(null);
                      setShowDebugInfo(false);
                      // Also remove the Lightspeed integration from selected integrations
                      setSelectedIntegrations(selectedIntegrations.filter(i => i.id !== "lightspeed"));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <div className="prose prose-sm max-w-none overflow-auto max-h-[600px] font-sf-pro">
                {(() => {
                  // Process the response first
                  const processedResponse = processApiResponse(lightspeedQueryResponse);
                  
                  // Check if the processed response is HTML
                  if (typeof processedResponse === 'string' && 
                      processedResponse.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i)) {
                    return renderHtml(processedResponse);
                  } 
                  
                  // Otherwise render as Markdown
                  return (
                    <ReactMarkdown 
                      className="prose prose-slate 
                        prose-p:text-gray-700 prose-p:mb-4
                        prose-h1:text-transparent prose-h1:bg-clip-text prose-h1:bg-gradient-to-r prose-h1:from-[#007AFF] prose-h1:to-[#00C6FF] prose-h1:text-2xl prose-h1:font-bold prose-h1:mt-6 prose-h1:mb-4
                        prose-h2:text-transparent prose-h2:bg-clip-text prose-h2:bg-gradient-to-r prose-h2:from-[#007AFF] prose-h2:to-[#00C6FF] prose-h2:text-xl prose-h2:font-bold prose-h2:mt-5 prose-h2:mb-3
                        prose-h3:text-transparent prose-h3:bg-clip-text prose-h3:bg-gradient-to-r prose-h3:from-[#007AFF] prose-h3:to-[#00C6FF] prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-4 prose-h3:mb-2
                        prose-a:text-[#007AFF] 
                        prose-strong:font-semibold prose-strong:text-gray-900 
                        prose-ul:my-4 prose-ul:pl-5 prose-ul:space-y-2 
                        prose-ol:my-4 prose-ol:pl-5 prose-ol:space-y-2
                        prose-li:my-0.5 prose-li:pl-1.5
                        prose-hr:border-gray-200 prose-hr:my-4 prose-hr:border-dashed
                        font-sf-pro [&_.html-content_h1]:text-transparent [&_.html-content_h1]:bg-clip-text [&_.html-content_h1]:bg-gradient-to-r [&_.html-content_h1]:from-[#007AFF] [&_.html-content_h1]:to-[#00C6FF] [&_.html-content_h1]:text-2xl [&_.html-content_h1]:font-bold [&_.html-content_h1]:mt-6 [&_.html-content_h1]:mb-4
                        [&_.html-content_h2]:text-transparent [&_.html-content_h2]:bg-clip-text [&_.html-content_h2]:bg-gradient-to-r [&_.html-content_h2]:from-[#007AFF] [&_.html-content_h2]:to-[#00C6FF] [&_.html-content_h2]:text-xl [&_.html-content_h2]:font-bold [&_.html-content_h2]:mt-5 [&_.html-content_h2]:mb-3
                        [&_.html-content_h3]:text-transparent [&_.html-content_h3]:bg-clip-text [&_.html-content_h3]:bg-gradient-to-r [&_.html-content_h3]:from-[#007AFF] [&_.html-content_h3]:to-[#00C6FF] [&_.html-content_h3]:text-lg [&_.html-content_h3]:font-semibold [&_.html-content_h3]:mt-4 [&_.html-content_h3]:mb-2
                        [&_.html-content_p]:text-gray-700 [&_.html-content_p]:mb-4
                        [&_.html-content_a]:text-[#007AFF]
                        [&_.html-content_ul]:my-4 [&_.html-content_ul]:pl-5 [&_.html-content_ul]:space-y-2
                        [&_.html-content_ol]:my-4 [&_.html-content_ol]:pl-5 [&_.html-content_ol]:space-y-2
                        [&_.html-content_li]:my-0.5 [&_.html-content_li]:pl-1.5"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        hr: () => <div className="my-5 border-t border-gray-100" />,
                        table: ({ children }) => <table className="border-collapse w-full my-4">{children}</table>,
                        th: ({ children }) => <th className="border border-gray-200 bg-gray-50 px-3 py-2 text-left font-medium text-gray-700">{children}</th>,
                        td: ({ children }) => <td className="border border-gray-200 px-3 py-2">{children}</td>,
                        pre: ({ children }) => <pre className="bg-gray-50 p-3 rounded-md overflow-auto text-sm my-4">{children}</pre>,
                        code: ({ children }) => <code className="bg-gray-50 p-1 rounded text-sm font-mono text-purple-600">{children}</code>
                      }}
                    >
                      {processedResponse}
                    </ReactMarkdown>
                  );
                })()}
              </div>
              
              {/* Show debug response */}
              {showDebugInfo && debugResponse && (
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <div className="bg-gray-50 p-3 rounded-md">
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Raw Response:</h4>
                    <pre className="text-xs overflow-auto bg-gray-100 p-2 rounded whitespace-pre-wrap">
                      {debugResponse}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Lightspeed Query Loading */}
          {lightspeedQueryLoading && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex items-start gap-3">
                <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                  <Image src="/lslogo.png" width={16} height={16} alt="Lightspeed" className="h-4 w-4 object-contain" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-sm font-medium text-gray-900">Processing Lightspeed Query</h3>
                    <div className="h-4 w-4 rounded-full border-2 border-gray-200 border-t-gray-600 animate-spin"></div>
                  </div>
                  <p className="text-sm text-gray-500">Analyzing your data...</p>
                </div>
              </div>
            </div>
          )}
          
          {/* Tap Loyalty Query Response */}
          {tapQueryResponse && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center gap-2">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                    <Image src="/taplogo.png" width={16} height={16} alt="Tap Loyalty" className="h-4 w-4 object-contain" />
                  </div>
                  <h3 className="text-sm font-medium text-gray-900">Tap Loyalty Response</h3>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="h-7 text-xs"
                    onClick={() => setShowDebugInfo(!showDebugInfo)}
                  >
                    {showDebugInfo ? "Hide Debug" : "Show Debug"}
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-7 w-7 p-0 rounded-full"
                    onClick={() => {
                      setTapQueryResponse(null);
                      setDebugResponse(null);
                      setShowDebugInfo(false);
                      // Also remove the Tap Loyalty integration from selected integrations
                      setSelectedIntegrations(selectedIntegrations.filter(i => i.id !== "tap"));
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <div className="prose prose-sm max-w-none overflow-auto max-h-[600px] font-sf-pro">
                {(() => {
                  // Process the response first
                  const processedResponse = processApiResponse(tapQueryResponse);
                  
                  // Check if the processed response is HTML
                  if (typeof processedResponse === 'string' && 
                      processedResponse.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i)) {
                    return renderHtml(processedResponse);
                  } 
                  
                  // Otherwise render as Markdown
                  return (
                    <ReactMarkdown 
                      className="prose prose-slate 
                        prose-p:text-gray-700 prose-p:mb-4
                        prose-h1:text-transparent prose-h1:bg-clip-text prose-h1:bg-gradient-to-r prose-h1:from-[#007AFF] prose-h1:to-[#00C6FF] prose-h1:text-2xl prose-h1:font-bold prose-h1:mt-6 prose-h1:mb-4
                        prose-h2:text-transparent prose-h2:bg-clip-text prose-h2:bg-gradient-to-r prose-h2:from-[#007AFF] prose-h2:to-[#00C6FF] prose-h2:text-xl prose-h2:font-bold prose-h2:mt-5 prose-h2:mb-3
                        prose-h3:text-transparent prose-h3:bg-clip-text prose-h3:bg-gradient-to-r prose-h3:from-[#007AFF] prose-h3:to-[#00C6FF] prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-4 prose-h3:mb-2
                        prose-a:text-[#007AFF] 
                        prose-strong:font-semibold prose-strong:text-gray-900 
                        prose-ul:my-4 prose-ul:pl-5 prose-ul:space-y-2 
                        prose-ol:my-4 prose-ol:pl-5 prose-ol:space-y-2
                        prose-li:my-0.5 prose-li:pl-1.5
                        prose-hr:border-gray-200 prose-hr:my-4 prose-hr:border-dashed
                        font-sf-pro [&_.html-content_h1]:text-transparent [&_.html-content_h1]:bg-clip-text [&_.html-content_h1]:bg-gradient-to-r [&_.html-content_h1]:from-[#007AFF] [&_.html-content_h1]:to-[#00C6FF] [&_.html-content_h1]:text-2xl [&_.html-content_h1]:font-bold [&_.html-content_h1]:mt-6 [&_.html-content_h1]:mb-4
                        [&_.html-content_h2]:text-transparent [&_.html-content_h2]:bg-clip-text [&_.html-content_h2]:bg-gradient-to-r [&_.html-content_h2]:from-[#007AFF] [&_.html-content_h2]:to-[#00C6FF] [&_.html-content_h2]:text-xl [&_.html-content_h2]:font-bold [&_.html-content_h2]:mt-5 [&_.html-content_h2]:mb-3
                        [&_.html-content_h3]:text-transparent [&_.html-content_h3]:bg-clip-text [&_.html-content_h3]:bg-gradient-to-r [&_.html-content_h3]:from-[#007AFF] [&_.html-content_h3]:to-[#00C6FF] [&_.html-content_h3]:text-lg [&_.html-content_h3]:font-semibold [&_.html-content_h3]:mt-4 [&_.html-content_h3]:mb-2
                        [&_.html-content_p]:text-gray-700 [&_.html-content_p]:mb-4
                        [&_.html-content_a]:text-[#007AFF]
                        [&_.html-content_ul]:my-4 [&_.html-content_ul]:pl-5 [&_.html-content_ul]:space-y-2
                        [&_.html-content_ol]:my-4 [&_.html-content_ol]:pl-5 [&_.html-content_ol]:space-y-2
                        [&_.html-content_li]:my-0.5 [&_.html-content_li]:pl-1.5"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        hr: () => <div className="my-5 border-t border-gray-100" />,
                        table: ({ children }) => <table className="border-collapse w-full my-4">{children}</table>,
                        th: ({ children }) => <th className="border border-gray-200 bg-gray-50 px-3 py-2 text-left font-medium text-gray-700">{children}</th>,
                        td: ({ children }) => <td className="border border-gray-200 px-3 py-2">{children}</td>,
                        pre: ({ children }) => <pre className="bg-gray-50 p-3 rounded-md overflow-auto text-sm my-4">{children}</pre>,
                        code: ({ children }) => <code className="bg-gray-50 p-1 rounded text-sm font-mono text-purple-600">{children}</code>
                      }}
                    >
                      {processedResponse}
                    </ReactMarkdown>
                  );
                })()}
              </div>
              
              {/* Show debug response */}
              {showDebugInfo && debugResponse && (
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <div className="bg-gray-50 p-3 rounded-md">
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Raw Response:</h4>
                    <pre className="text-xs overflow-auto bg-gray-100 p-2 rounded whitespace-pre-wrap">
                      {debugResponse}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Tap Loyalty Query Loading */}
          {tapQueryLoading && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex items-start gap-3">
                <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                  <Image src="/taplogo.png" width={16} height={16} alt="Tap Loyalty" className="h-4 w-4 object-contain" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-sm font-medium text-gray-900">Processing Tap Loyalty Query</h3>
                    <div className="h-4 w-4 rounded-full border-2 border-gray-200 border-t-gray-600 animate-spin"></div>
                  </div>
                  <p className="text-sm text-gray-500">Analyzing your query...</p>
                </div>
              </div>
            </div>
          )}
          
          {/* AI Assistant Response */}
          {assistantResponse && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center gap-2">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-blue-100">
                    <Sparkles className="h-4 w-4 text-blue-600" />
                  </div>
                  <h3 className="text-sm font-medium text-gray-900">AI Assistant</h3>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="h-7 text-xs"
                    onClick={() => setShowDebugInfo(!showDebugInfo)}
                  >
                    {showDebugInfo ? "Hide Debug" : "Show Debug"}
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-7 w-7 p-0 rounded-full"
                    onClick={() => {
                      setAssistantResponse(null);
                      setDebugResponse(null);
                      setShowDebugInfo(false);
                    }}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <div className="prose prose-sm max-w-none overflow-auto max-h-[600px] font-sf-pro">
                {(() => {
                  // Process the response first
                  const processedResponse = processApiResponse(assistantResponse);
                  
                  // Check if the processed response is HTML
                  if (typeof processedResponse === 'string' && 
                      processedResponse.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i)) {
                    return renderHtml(processedResponse);
                  } 
                  
                  // Otherwise render as Markdown
                  return (
                    <ReactMarkdown 
                      className="prose prose-slate 
                        prose-p:text-gray-700 prose-p:mb-4
                        prose-h1:text-transparent prose-h1:bg-clip-text prose-h1:bg-gradient-to-r prose-h1:from-[#007AFF] prose-h1:to-[#00C6FF] prose-h1:text-2xl prose-h1:font-bold prose-h1:mt-6 prose-h1:mb-4
                        prose-h2:text-transparent prose-h2:bg-clip-text prose-h2:bg-gradient-to-r prose-h2:from-[#007AFF] prose-h2:to-[#00C6FF] prose-h2:text-xl prose-h2:font-bold prose-h2:mt-5 prose-h2:mb-3
                        prose-h3:text-transparent prose-h3:bg-clip-text prose-h3:bg-gradient-to-r prose-h3:from-[#007AFF] prose-h3:to-[#00C6FF] prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-4 prose-h3:mb-2
                        prose-a:text-[#007AFF] 
                        prose-strong:font-semibold prose-strong:text-gray-900 
                        prose-ul:my-4 prose-ul:pl-5 prose-ul:space-y-2 
                        prose-ol:my-4 prose-ol:pl-5 prose-ol:space-y-2
                        prose-li:my-0.5 prose-li:pl-1.5
                        prose-hr:border-gray-200 prose-hr:my-4 prose-hr:border-dashed
                        font-sf-pro [&_.html-content_h1]:text-transparent [&_.html-content_h1]:bg-clip-text [&_.html-content_h1]:bg-gradient-to-r [&_.html-content_h1]:from-[#007AFF] [&_.html-content_h1]:to-[#00C6FF] [&_.html-content_h1]:text-2xl [&_.html-content_h1]:font-bold [&_.html-content_h1]:mt-6 [&_.html-content_h1]:mb-4
                        [&_.html-content_h2]:text-transparent [&_.html-content_h2]:bg-clip-text [&_.html-content_h2]:bg-gradient-to-r [&_.html-content_h2]:from-[#007AFF] [&_.html-content_h2]:to-[#00C6FF] [&_.html-content_h2]:text-xl [&_.html-content_h2]:font-bold [&_.html-content_h2]:mt-5 [&_.html-content_h2]:mb-3
                        [&_.html-content_h3]:text-transparent [&_.html-content_h3]:bg-clip-text [&_.html-content_h3]:bg-gradient-to-r [&_.html-content_h3]:from-[#007AFF] [&_.html-content_h3]:to-[#00C6FF] [&_.html-content_h3]:text-lg [&_.html-content_h3]:font-semibold [&_.html-content_h3]:mt-4 [&_.html-content_h3]:mb-2
                        [&_.html-content_p]:text-gray-700 [&_.html-content_p]:mb-4
                        [&_.html-content_a]:text-[#007AFF]
                        [&_.html-content_ul]:my-4 [&_.html-content_ul]:pl-5 [&_.html-content_ul]:space-y-2
                        [&_.html-content_ol]:my-4 [&_.html-content_ol]:pl-5 [&_.html-content_ol]:space-y-2
                        [&_.html-content_li]:my-0.5 [&_.html-content_li]:pl-1.5"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        hr: () => <div className="my-5 border-t border-gray-100" />,
                        table: ({ children }) => <table className="border-collapse w-full my-4">{children}</table>,
                        th: ({ children }) => <th className="border border-gray-200 bg-gray-50 px-3 py-2 text-left font-medium text-gray-700">{children}</th>,
                        td: ({ children }) => <td className="border border-gray-200 px-3 py-2">{children}</td>,
                        pre: ({ children }) => <pre className="bg-gray-50 p-3 rounded-md overflow-auto text-sm my-4">{children}</pre>,
                        code: ({ children }) => <code className="bg-gray-50 p-1 rounded text-sm font-mono text-purple-600">{children}</code>
                      }}
                    >
                      {processedResponse}
                    </ReactMarkdown>
                  );
                })()}
              </div>
              
              {/* Show debug response */}
              {showDebugInfo && debugResponse && (
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <div className="bg-gray-50 p-3 rounded-md">
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Raw Response:</h4>
                    <pre className="text-xs overflow-auto bg-gray-100 p-2 rounded whitespace-pre-wrap">
                      {debugResponse}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* AI Assistant Loading */}
          {assistantLoading && (
            <div className="mt-3 bg-white border border-gray-200 shadow-sm rounded-lg p-5 animate-slowFadeIn">
              <div className="flex items-start gap-3">
                <div className="flex items-center justify-center h-6 w-6 rounded-md bg-blue-100">
                  <Sparkles className="h-4 w-4 text-blue-600" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-sm font-medium text-gray-900">AI Assistant Processing</h3>
                    <div className="h-4 w-4 rounded-full border-2 border-gray-200 border-t-gray-600 animate-spin"></div>
                  </div>
                  <p className="text-sm text-gray-500">Thinking about your question...</p>
                </div>
              </div>
            </div>
          )}
          
          {/* Metrics section - wrapped in proper Tabs component */}
          <Tabs defaultValue="platform" value={metricsType as string}>
            <TabsContent value="platform" className="mt-0">
              <div className="grid grid-cols-4 gap-4">
                {/* First card: Active Rewards */}
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Active Rewards</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.activeRewards}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Gift className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                {/* Second card: Total Reward Views */}
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Total Reward Views</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.totalRewardViews}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Eye className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                {/* Third card: Total Points Issued */}
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Total Points Issued</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.totalPointsIssued}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Zap className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                {/* Fourth card: Store Views */}
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Store Views</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.totalStoreViews}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Eye className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="consumer" className="mt-0">
              <div className="grid grid-cols-4 gap-4">
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Active Customers</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.activeCustomers}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Users className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Total Transactions</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.totalTransactions}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <ShoppingCart className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Total Redemptions</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">{metrics.totalRedemptions}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <Gift className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="rounded-lg border border-gray-200">
                  <CardContent className="p-3">
                    <div className="flex justify-between">
                      <div className="space-y-0.5">
                        <p className="text-sm font-medium text-gray-500">Avg Order Value</p>
                        {metricsLoading ? (
                          <div className="h-6 w-12 bg-gray-200 animate-pulse rounded"></div>
                        ) : (
                          <div className="text-lg font-semibold">${metrics.avgOrderValue}</div>
                        )}
                      </div>
                      <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                        <DollarSign className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>

          {/* Activity Overview and Recent Activity in a side-by-side layout */}
          <div className="grid grid-cols-12 gap-6">
            {/* Activity Overview Graph - Takes slightly less width */}
            <Card className="col-span-7 rounded-lg border border-gray-200 overflow-hidden">
              <CardHeader className="py-3 px-6 bg-gray-50 border-b border-gray-100 flex flex-row justify-between items-center rounded-t-lg">
                <div>
                  <CardTitle className="text-base font-medium text-gray-900">Activity Overview</CardTitle>
                  <p className="text-sm text-gray-500 mt-0.5">Transactions and redemptions over time</p>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className={cn(
                      "h-8 text-xs",
                      chartTimeframe === "7days" && "bg-blue-50 text-blue-600 border-blue-200"
                    )}
                    onClick={() => setChartTimeframe("7days")}
                  >
                    7 Days
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className={cn(
                      "h-8 text-xs",
                      chartTimeframe === "30days" && "bg-blue-50 text-blue-600 border-blue-200"
                    )}
                    onClick={() => setChartTimeframe("30days")}
                  >
                    30 Days
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className={cn(
                      "h-8 text-xs",
                      chartTimeframe === "90days" && "bg-blue-50 text-blue-600 border-blue-200"
                    )}
                    onClick={() => setChartTimeframe("90days")}
                  >
                    90 Days
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="p-6">
                {chartLoading ? (
                  <div className="flex items-center justify-center h-[300px]">
                    <div className="h-8 w-8 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                  </div>
                ) : chartReady ? (
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={histogramData}>
                        <CartesianGrid strokeDasharray="3 3" vertical={false} />
                        <XAxis 
                          dataKey="date" 
                          tick={{ fontSize: 12, fontFamily: 'SF Pro Display, -apple-system, BlinkMacSystemFont, sans-serif' }} 
                          tickLine={false}
                          axisLine={{ stroke: '#E5E7EB' }}
                        />
                        <YAxis 
                          tick={{ fontSize: 12, fontFamily: 'SF Pro Display, -apple-system, BlinkMacSystemFont, sans-serif' }} 
                          tickLine={false}
                          axisLine={{ stroke: '#E5E7EB' }}
                        />
                        <Tooltip content={<CustomTooltip />} />
                        <Legend content={<CustomLegend />} />
                        <Bar dataKey="transactions" name="Transactions" fill="#3B82F6" radius={[4, 4, 0, 0]} />
                        <Bar dataKey="redemptions" name="Redemptions" fill="#8B5CF6" radius={[4, 4, 0, 0]} />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-[300px] text-center">
                    <BarChartIcon className="h-12 w-12 text-muted-foreground mb-4" />
                    <p className="text-muted-foreground">No activity data available</p>
                    <p className="text-sm text-muted-foreground mt-1">Start recording transactions to see data</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Recent Activity - Takes slightly more width */}
            <Card className="col-span-5 rounded-lg border border-gray-200 overflow-hidden shadow-sm">
              <CardHeader className="py-4 px-6 bg-gradient-to-r from-blue-50 to-white border-b border-gray-100 flex flex-row justify-between items-center">
                <div>
                  <CardTitle className="text-base font-medium text-gray-900 flex items-center gap-2">
                    <Clock className="h-4 w-4 text-blue-500" />
                    Recent Activity
                  </CardTitle>
                  <p className="text-sm text-gray-500 mt-0.5">Latest transactions and redemptions</p>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  className="text-blue-600 hover:text-blue-700 hover:bg-blue-50/50 h-8 px-3 ml-auto border-blue-200"
                  asChild
                >
                  <Link href="/store/activity" className="flex items-center gap-1">
                    View all
                    <ChevronRight className="h-3 w-3" />
                  </Link>
                </Button>
              </CardHeader>
              <CardContent className="p-0">
                {activityLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="h-6 w-6 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                  </div>
                ) : recentActivity.length === 0 ? (
                  <div className="py-8 text-center">
                    <div className="bg-gray-50 rounded-full h-16 w-16 flex items-center justify-center mx-auto mb-3">
                      <Clock className="h-8 w-8 text-gray-300" />
                    </div>
                    <p className="text-sm font-medium text-gray-700">No recent activity</p>
                    <p className="text-xs text-gray-500 mt-1">Transactions and redemptions will appear here</p>
                  </div>
                ) : (
                  <div>
                    {recentActivity.map((activity, index) => (
                      <div 
                        key={activity.id} 
                        className={`px-6 py-3.5 hover:bg-blue-50/30 transition-colors ${
                          index !== recentActivity.length - 1 ? 'border-b border-gray-100' : ''
                        }`}
                      >
                        <div className="flex items-center gap-4">
                          {/* Left side - Customer Avatar */}
                          <div className="flex-shrink-0">
                            <div className={`h-10 w-10 rounded-full ${
                              activity.type === "transaction" ? 'bg-blue-50' : 'bg-purple-50'
                            } flex items-center justify-center overflow-hidden shadow-sm`}>
                              {activity.customer?.profilePicture ? (
                                <img 
                                  src={activity.customer.profilePicture} 
                                  alt={activity.customer.name}
                                  className="h-full w-full object-cover"
                                  onError={() => {/* error handling */}}
                                />
                              ) : activity.type === "transaction" ? (
                                <ShoppingCart className="h-5 w-5 text-blue-500" />
                              ) : (
                                <Gift className="h-5 w-5 text-purple-500" />
                              )}
                            </div>
                          </div>

                          {/* Right side - Activity Details - More Compact */}
                          <div className="flex-1 min-w-0 flex items-center justify-between">
                            <div>
                              <p className="font-medium text-sm text-gray-900">{activity.customer.name}</p>
                              <div className="flex items-center gap-2 text-xs text-gray-500 mt-0.5">
                                {activity.type === "transaction" ? (
                                  <span className="px-1.5 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full border border-blue-100 flex items-center">
                                    <ShoppingCart className="h-3 w-3 mr-1" />
                                    Purchase
                                  </span>
                                ) : (
                                  <span className="px-1.5 py-0.5 bg-purple-50 text-purple-700 text-xs rounded-full border border-purple-100 flex items-center">
                                    <Gift className="h-3 w-3 mr-1" />
                                    Redemption
                                  </span>
                                )}
                                <span className="text-gray-400">&bull;</span>
                                <span>{formatTimeAgo(activity.timestamp)}</span>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className={`text-sm font-medium ${
                                activity.type === "transaction" ? 'text-blue-600' : 'text-purple-600'
                              }`}>
                                {activity.type === "transaction" 
                                  ? `$${activity.amount.toFixed(2)}` 
                                  : `${activity.points} pts`}
                              </p>
                              {activity.type !== "transaction" && (
                                <p className="text-xs text-gray-500 mt-0.5">
                                  {activity.rewardName}
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Top Viewing Customers and Popular Rewards */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Top Viewing Customers card */}
            <Card className="rounded-lg border border-gray-200 overflow-hidden shadow-sm">
              <CardHeader className="py-4 px-6 bg-gradient-to-r from-indigo-50 to-white border-b border-gray-100 flex flex-row justify-between items-center">
                <div>
                  <CardTitle className="text-base font-medium text-gray-900 flex items-center gap-2">
                    <Users className="h-4 w-4 text-indigo-500" />
                    Top Store Visitors
                  </CardTitle>
                  <p className="text-sm text-gray-500 mt-0.5">Customers who view your store most frequently</p>
                </div>
              </CardHeader>
              <CardContent className="p-0">
                {topCustomersLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="h-6 w-6 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                  </div>
                ) : topViewingCustomers.length === 0 ? (
                  <div className="py-8 text-center">
                    <div className="bg-gray-50 rounded-full h-16 w-16 flex items-center justify-center mx-auto mb-3">
                      <Users className="h-8 w-8 text-gray-300" />
                    </div>
                    <p className="text-sm font-medium text-gray-700">No visitor data available</p>
                    <p className="text-xs text-gray-500 mt-1">Customer visits will appear here</p>
                  </div>
                ) : (
                  <div>
                    {topViewingCustomers.map((customer, index) => (
                      <div 
                        key={customer.id} 
                        className={`px-6 py-3.5 hover:bg-indigo-50/30 transition-colors ${
                          index !== topViewingCustomers.length - 1 ? 'border-b border-gray-100' : ''
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-4">
                            <div className="h-10 w-10 rounded-full bg-indigo-50 flex items-center justify-center shadow-sm">
                              <Users className="h-5 w-5 text-indigo-500" />
                            </div>
                            <div>
                              <p className="font-medium text-sm text-gray-900">{customer.name}</p>
                              <div className="flex items-center gap-2 text-xs text-gray-500 mt-0.5">
                                <span className="px-1.5 py-0.5 bg-indigo-50 text-indigo-700 text-xs rounded-full border border-indigo-100 flex items-center">
                                  <Eye className="h-3 w-3 mr-1" />
                                  {customer.viewCount} views
                                </span>
                                <span className="text-gray-400">&bull;</span>
                                <span>Last visit: {formatDistanceToNow(customer.lastView, { addSuffix: true })}</span>
                              </div>
                            </div>
                          </div>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            className="h-8 gap-1 border-indigo-200 text-indigo-700 hover:bg-indigo-50 hover:text-indigo-800"
                            onClick={() => {
                              setSelectedCustomer({
                                id: customer.id,
                                name: customer.name
                              })
                              setIsRewardDialogOpen(true)
                            }}
                          >
                            <Gift className="h-3.5 w-3.5" />
                            Create Reward
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Popular Rewards card */}
            <Card className="rounded-lg border border-gray-200 overflow-hidden shadow-sm">
              <CardHeader className="py-4 px-6 bg-gradient-to-r from-purple-50 to-white border-b border-gray-100 flex flex-row justify-between items-center">
                <div>
                  <CardTitle className="text-base font-medium text-gray-900 flex items-center gap-2">
                    <Gift className="h-4 w-4 text-purple-500" />
                    Popular Rewards
                  </CardTitle>
                  <p className="text-sm text-gray-500 mt-0.5">Most redeemed rewards by customers</p>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  className="text-purple-600 hover:text-purple-700 hover:bg-purple-50/50 h-8 px-3 ml-auto border-purple-200"
                  asChild
                >
                  <Link href="/store/rewards" className="flex items-center gap-1">
                    View all
                    <ChevronRight className="h-3 w-3" />
                  </Link>
                </Button>
              </CardHeader>
              <CardContent className="p-0">
                {rewardsLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="h-6 w-6 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                  </div>
                ) : popularRewards.length === 0 ? (
                  <div className="py-8 text-center">
                    <div className="bg-gray-50 rounded-full h-16 w-16 flex items-center justify-center mx-auto mb-3">
                      <Gift className="h-8 w-8 text-gray-300" />
                    </div>
                    <p className="text-sm font-medium text-gray-700">No rewards data available</p>
                    <p className="text-xs text-gray-500 mt-1">Popular rewards will appear here</p>
                  </div>
                ) : (
                  <div>
                    {popularRewards.map((reward, index) => (
                      <div 
                        key={reward.id} 
                        className={`px-6 py-3.5 hover:bg-purple-50/30 transition-colors ${
                          index !== popularRewards.length - 1 ? 'border-b border-gray-100' : ''
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-4">
                            <div className={`h-10 w-10 rounded-full flex items-center justify-center shadow-sm
                              ${reward.programtype === 'coffee' ? 'bg-blue-50' : 
                                reward.programtype === 'voucher' ? 'bg-green-50' : 'bg-purple-50'}`}>
                              {reward.programtype === 'coffee' ? (
                                <Coffee className="h-5 w-5 text-blue-600" />
                              ) : reward.programtype === 'voucher' ? (
                                <Ticket className="h-5 w-5 text-green-600" />
                              ) : (
                                <Gift className="h-5 w-5 text-purple-500" />
                              )}
                            </div>
                            <div>
                              <div className="flex items-center gap-2">
                                <p className="font-medium text-sm text-gray-900">{reward.rewardName}</p>
                                {reward.programtype === 'coffee' && (
                                  <span className="px-1.5 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full border border-blue-100 flex items-center">
                                    <Coffee className="h-3 w-3 mr-1" />
                                    Coffee Card
                                  </span>
                                )}
                                {reward.programtype === 'voucher' && (
                                  <span className="px-1.5 py-0.5 bg-green-50 text-green-700 text-xs rounded-full border border-green-100 flex items-center">
                                    <Ticket className="h-3 w-3 mr-1" />
                                    Voucher
                                  </span>
                                )}
                              </div>
                              <div className="flex items-center gap-2 text-xs text-gray-500 mt-0.5">
                                <span className="px-1.5 py-0.5 bg-purple-50 text-purple-700 text-xs rounded-full border border-purple-100">
                                  {reward.pointsCost} points
                                </span>
                                <span className="text-gray-400">&bull;</span>
                                <div className="flex items-center gap-1">
                                  <Eye className="h-3 w-3 text-gray-400" />
                                  <span>{reward.impressions || 0}</span>
                                </div>
                                {reward.lastRedeemedAt && (
                                  <>
                                    <span className="text-gray-400">&bull;</span>
                                    <div className="flex items-center gap-1">
                                      <Clock className="h-3 w-3 text-gray-400" />
                                      <span>{formatDistanceToNow(reward.lastRedeemedAt, { addSuffix: true })}</span>
                                    </div>
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <p className="text-sm font-medium text-purple-600">{reward.redemptionCount} redeemed</p>
                            <div className="flex items-center justify-end gap-1 text-xs mt-0.5">
                              {reward.trend === "up" ? (
                                <ArrowUp className="h-3 w-3 text-green-500" />
                              ) : (
                                <ArrowDown className="h-3 w-3 text-red-500" />
                              )}
                              <span className={reward.trend === "up" ? "text-green-500" : "text-red-500"}>
                                {reward.changePercentage}%
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Tap Agent Summary Section */}
          <Separator className="my-6" />
          <div className="space-y-4">
            <div className="flex justify-between items-center mb-2">
              <div>
                <h2 className="text-lg font-medium flex items-center gap-2">
                  <span className="bg-gradient-to-r from-blue-500 to-orange-500 bg-clip-text text-transparent font-semibold">
                    Tap Agent
                  </span> 
                  Summary
                </h2>
                <p className="text-sm text-gray-500">Intelligent loyalty assistant performance</p>
              </div>
              <div className="flex items-center gap-2">
                <Button 
                  variant="outline"
                  size="sm"
                  className="h-8 gap-2 border-blue-200 text-blue-700 hover:bg-blue-50 hover:text-blue-800"
                  asChild
                >
                  <Link href="/tap-agent/setup">
                    <ArrowRight className="h-4 w-4" />
                    Manage Tap Agent
                  </Link>
                </Button>
              </div>
            </div>
            
            <Card className="border-gray-200 overflow-hidden">
              <CardContent className="p-6">
                {tapAgentMetrics.loading ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="h-6 w-6 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                  </div>
                ) : !tapAgentMetrics.lastRun ? (
                  <div className="py-6 text-center">
                    <div className="bg-gray-50 rounded-full h-16 w-16 flex items-center justify-center mx-auto mb-3">
                      <Zap className="h-8 w-8 text-gray-300" />
                    </div>
                    <p className="text-sm font-medium text-gray-700">Tap Agent not configured</p>
                    <p className="text-xs text-gray-500 mt-1 mb-4">Configure your intelligent assistant to automate reward creation</p>
                    <Button asChild>
                      <Link href="/tap-agent/setup">Configure Tap Agent</Link>
                    </Button>
                  </div>
                ) : (
                  <>
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center gap-3">
                        <div className="h-12 w-12 rounded-full bg-gradient-to-r from-blue-500 to-orange-500 flex items-center justify-center text-white">
                          <Zap className="h-6 w-6" />
                        </div>
                        <div>
                          <h3 className="font-medium">Tap Agent Status</h3>
                          <p className="text-sm text-gray-500 flex items-center gap-1">
                            <Clock className="h-3.5 w-3.5" />
                            Last active: {formatDistanceToNow(tapAgentMetrics.lastRun, { addSuffix: true })}
                          </p>
                        </div>
                      </div>
                      <Badge className="bg-green-100 text-green-800 border-green-200">Active</Badge>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      {/* Content Creation */}
                      <div className="space-y-4">
                        <h4 className="text-sm font-medium text-gray-500">Content Creation</h4>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                                <Gift className="h-4 w-4 text-blue-500" />
                              </div>
                              <span className="text-sm">Rewards Created</span>
                            </div>
                            <span className="font-medium">{tapAgentMetrics.rewardsCreated}</span>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center">
                                <svg className="h-4 w-4 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
                                </svg>
                              </div>
                              <span className="text-sm">Banners Created</span>
                            </div>
                            <span className="font-medium">{tapAgentMetrics.bannersCreated}</span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Engagement */}
                      <div className="space-y-4">
                        <h4 className="text-sm font-medium text-gray-500">Engagement</h4>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-purple-50 flex items-center justify-center">
                                <Eye className="h-4 w-4 text-purple-500" />
                              </div>
                              <span className="text-sm">Total Impressions</span>
                            </div>
                            <span className="font-medium">{tapAgentMetrics.impressions}</span>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-purple-50 flex items-center justify-center">
                                <ArrowRight className="h-4 w-4 text-purple-500" />
                              </div>
                              <span className="text-sm">Total Clicks</span>
                            </div>
                            <span className="font-medium">{tapAgentMetrics.clicks}</span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Conversions */}
                      <div className="space-y-4">
                        <h4 className="text-sm font-medium text-gray-500">Conversions</h4>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-green-50 flex items-center justify-center">
                                <Gift className="h-4 w-4 text-green-500" />
                              </div>
                              <span className="text-sm">Reward Redemptions</span>
                            </div>
                            <span className="font-medium">{tapAgentMetrics.redemptions}</span>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="flex items-center gap-2">
                              <div className="h-8 w-8 rounded-full bg-green-50 flex items-center justify-center">
                                <ArrowUp className="h-4 w-4 text-green-500" />
                              </div>
                              <span className="text-sm">Conversion Rate</span>
                            </div>
                            <span className="font-medium">
                              {tapAgentMetrics.impressions > 0 
                                ? Math.round((tapAgentMetrics.redemptions / tapAgentMetrics.impressions) * 100) 
                                : 0}%
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Live and Scheduled Banners Section */}
          {(activeBanners.length > 0 || scheduledBanners.length > 0) && (
            <div className="space-y-4">
              <div className="flex justify-between items-center mb-2">
                <div>
                  <h2 className="text-lg font-medium flex items-center gap-2">
                    <svg className="h-5 w-5 text-teal-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
                    </svg>
                    Banners
                  </h2>
                  <p className="text-sm text-gray-500">Your active and scheduled banners</p>
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline"
                    size="sm"
                    className="h-8 gap-2 border-teal-200 text-teal-700 hover:bg-teal-50 hover:text-teal-800"
                    onClick={() => router.push('/store/banner?tab=scheduled')}
                  >
                    <Clock className="h-4 w-4" />
                    View Schedule
                  </Button>
                  <Button 
                    variant="outline"
                    size="sm"
                    className="h-8 gap-2 border-teal-200 text-teal-700 hover:bg-teal-50 hover:text-teal-800"
                    asChild
                  >
                    <Link href="/store/banner">
                      Manage banners
                    </Link>
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Live Banners First */}
                {activeBanners.map((banner) => (
                  <div key={banner.id} className="flex flex-col bg-white rounded-lg overflow-hidden border border-gray-200 shadow-sm transition-shadow hover:shadow-md">
                    <div className="relative">
                      <div className="absolute top-3 right-3 z-10 flex gap-2">
                        <div className="bg-green-100 text-green-800 text-xs px-2.5 py-1 rounded-full flex items-center shadow-sm">
                          <Eye className="h-3 w-3 mr-1" />
                          Live
                        </div>
                        <div className="bg-blue-50 text-blue-700 text-xs px-2.5 py-1 rounded-full flex items-center shadow-sm">
                          <Eye className="h-3 w-3 mr-1" />
                          {banner.impressions || 0} views
                        </div>
                      </div>
                      
                      <div className="rounded-lg overflow-hidden">
                        <BannerPreview {...banner} />
                      </div>
                      
                      <div className="p-3 bg-gradient-to-b from-white to-gray-50 border-t border-gray-100">
                        <h3 className="font-medium text-sm truncate">{banner.title}</h3>
                        <p className="text-xs text-gray-500 mt-1 truncate">{banner.description}</p>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Then Scheduled Banners */}
                {scheduledBanners.map((banner) => (
                  <div key={banner.id} className="flex flex-col bg-white rounded-lg overflow-hidden border border-gray-200 shadow-sm transition-shadow hover:shadow-md">
                    <div className="relative">
                      <div className="absolute top-3 right-3 z-10 flex gap-2">
                        <div className="bg-blue-100 text-blue-800 text-xs px-2.5 py-1 rounded-full flex items-center shadow-sm">
                          <Clock className="h-3 w-3 mr-1" />
                          Scheduled
                        </div>
                        <div className="bg-blue-50 text-blue-700 text-xs px-2.5 py-1 rounded-full flex items-center shadow-sm">
                          <Eye className="h-3 w-3 mr-1" />
                          {banner.impressions || 0} views
                        </div>
                      </div>
                      
                      <div className="rounded-lg overflow-hidden">
                        <BannerPreview {...banner} />
                      </div>
                      
                      <div className="p-3 bg-gradient-to-b from-white to-gray-50 border-t border-gray-100">
                        <h3 className="font-medium text-sm truncate">{banner.title}</h3>
                        <p className="text-xs text-gray-500 mt-1 truncate">{banner.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Setup Wizard Sheet */}
      <Sheet open={isSetupWizardOpen} onOpenChange={setIsSetupWizardOpen}>
        <SheetContent className="w-full sm:max-w-md overflow-y-auto flex flex-col">
          <div className="flex-none">
            <SheetHeader className="pb-4">
              <SheetTitle className="text-xl">
                Setup Wizard
              </SheetTitle>
              <SheetDescription>
                Complete these steps to get the most out of your loyalty platform
              </SheetDescription>
            </SheetHeader>
            <Separator className="my-4" />
          </div>
          
          <ScrollArea className="flex-grow pr-4">
            <div className="space-y-6">
              {/* Tap Agent Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="tap-agent-checkbox" 
                      checked={setupChecklist.tapAgent} 
                      onCheckedChange={() => handleChecklistChange('tapAgent')}
                    />
                    <label htmlFor="tap-agent-checkbox" className="text-base font-medium cursor-pointer">
                      Set up <GradientText>Tap Agent</GradientText>
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/tap-agent">Set up</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Tap Agent uses AI to create personalized rewards for your customers based on their preferences and purchase history. 
                    It automatically manages your loyalty program, increasing customer engagement and retention.
                  </p>
                </div>
              </div>

              {/* Banner Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="banner-checkbox" 
                      checked={setupChecklist.banner} 
                      onCheckedChange={() => handleChecklistChange('banner')}
                    />
                    <label htmlFor="banner-checkbox" className="text-base font-medium cursor-pointer">
                      Create a Banner
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/store/banner">Create</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Banners allow you to promote special offers, events, or announcements to your customers 
                    when they visit your digital storefront.
                  </p>
                </div>
              </div>

              {/* Membership Levels Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="membership-levels-checkbox" 
                      checked={setupChecklist.membershipLevels} 
                      onCheckedChange={() => handleChecklistChange('membershipLevels')}
                    />
                    <label htmlFor="membership-levels-checkbox" className="text-base font-medium cursor-pointer">
                      Set Membership Levels
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/store/membership">Set up</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Create tiered membership levels to reward your most loyal customers with exclusive benefits 
                    and encourage customers to increase their engagement with your business.
                  </p>
                </div>
              </div>

              {/* Points Rule Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="points-rule-checkbox" 
                      checked={setupChecklist.pointsRule} 
                      onCheckedChange={() => handleChecklistChange('pointsRule')}
                    />
                    <label htmlFor="points-rule-checkbox" className="text-base font-medium cursor-pointer">
                      Create Points Rule
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/store/points">Create</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Define how customers earn points with your business. Set point values for purchases, 
                    referrals, social media engagement, and more.
                  </p>
                </div>
              </div>

              {/* POS Integration Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="pos-integration-checkbox" 
                      checked={setupChecklist.posIntegration} 
                      onCheckedChange={() => handleChecklistChange('posIntegration')}
                    />
                    <label htmlFor="pos-integration-checkbox" className="text-base font-medium cursor-pointer">
                      Integrate POS System
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/integrations">Connect</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Connect your Square or Lightspeed point-of-sale system to automatically track customer 
                    purchases and award points for transactions.
                  </p>
                </div>
              </div>

              {/* Open Banking Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="open-banking-checkbox" 
                      checked={setupChecklist.openBanking} 
                      onCheckedChange={() => handleChecklistChange('openBanking')}
                    />
                    <label htmlFor="open-banking-checkbox" className="text-base font-medium cursor-pointer">
                      Set up Open Banking
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/integrations/banking">Connect</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Connect your financial accounts to get deep financial analytics and insights about your 
                    business performance and customer behavior.
                  </p>
                </div>
              </div>

              {/* Introductory Reward Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="introductory-reward-checkbox" 
                      checked={setupChecklist.introductoryReward} 
                      onCheckedChange={() => handleChecklistChange('introductoryReward')}
                    />
                    <label htmlFor="introductory-reward-checkbox" className="text-base font-medium cursor-pointer">
                      Create Introductory Reward
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="#" onClick={(e) => {
                      e.preventDefault();
                      setIsSetupWizardOpen(false);
                      // Use a small timeout to allow the setup wizard to close first
                      setTimeout(() => {
                        setIsIntroductoryRewardSheetOpen(true);
                      }, 100);
                    }}>Create</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Offer a special welcome gift to first-time customers, funded by Tap Loyalty. This helps attract new customers to your business.
                  </p>
                </div>
              </div>

              {/* Custom Reward Section */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="custom-reward-checkbox" 
                      checked={setupChecklist.customReward} 
                      onCheckedChange={() => handleChecklistChange('customReward')}
                    />
                    <label htmlFor="custom-reward-checkbox" className="text-base font-medium cursor-pointer">
                      Create Custom Reward
                    </label>
                  </div>
                  <Button variant="link" size="sm" asChild>
                    <Link href="/store/rewards/new">Create</Link>
                  </Button>
                </div>
                <div className="pl-6">
                  <p className="text-sm text-muted-foreground">
                    Design personalized rewards that resonate with your customers and align with your brand. 
                    Custom rewards can increase redemption rates and customer satisfaction.
                  </p>
                </div>
              </div>
            </div>
          </ScrollArea>
          
          <div className="flex-none pt-4 mt-4 border-t">
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setIsSetupWizardOpen(false)}>
                Close
              </Button>
              <Button 
                variant="default"
                disabled={!Object.values(setupChecklist).every(Boolean)}
              >
                {Object.values(setupChecklist).every(Boolean) ? 
                  "All steps completed!" : 
                  `${Object.values(setupChecklist).filter(Boolean).length}/${Object.values(setupChecklist).length} completed`}
              </Button>
            </div>
          </div>
        </SheetContent>
      </Sheet>

      {/* Alternative to Dialog - Simple conditional rendering */}
      {insightDialogOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-amber-500" />
                Business Insights
              </h2>
              <button 
                onClick={() => setInsightDialogOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>
            
            <p className="text-sm text-gray-500 mb-4">
              AI-powered analysis of your business performance
            </p>
            
            {insightLoading ? (
              <div className="flex flex-col items-center justify-center py-8">
                <div className="h-8 w-8 rounded-full border-2 border-primary border-t-transparent animate-spin mb-4"></div>
                <p className="text-sm text-muted-foreground">Analyzing your business data...</p>
              </div>
            ) : insightError ? (
              <div className="py-6">
                <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
                  <p className="text-red-800 text-sm">{insightError}</p>
                </div>
                <Button 
                  variant="outline" 
                  onClick={() => fetchMerchantInsights()} 
                  className="w-full"
                >
                  Try Again
                </Button>
              </div>
            ) : insightData ? (
              <div className="space-y-4 py-2">
                {/* Summary */}
                {insightData.summary && (
                  <div className="bg-blue-50 border border-blue-100 rounded-md p-4">
                    <h3 className="font-medium text-blue-800 mb-1">Summary</h3>
                    <p className="text-sm text-blue-700">{insightData.summary}</p>
                  </div>
                )}
                
                {/* Insights List */}
                {insightData.insights && Array.isArray(insightData.insights) && insightData.insights.length > 0 && (
                  <div className="space-y-3">
                    <h3 className="font-medium">Key Insights</h3>
                    <div className="space-y-2">
                      {insightData.insights.map((insight: string, index: number) => (
                        <div key={index} className="flex gap-2 items-start">
                          <div className="h-5 w-5 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-0.5">
                            <span className="text-green-700 text-xs font-medium">{index + 1}</span>
                          </div>
                          <p className="text-sm">{insight}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* If insights is a string instead of an array */}
                {insightData.insights && typeof insightData.insights === 'string' && (
                  <div className="space-y-3">
                    <h3 className="font-medium">Key Insights</h3>
                    <div className="bg-green-50 border border-green-100 rounded-md p-4">
                      <p className="text-sm text-green-700">{insightData.insights}</p>
                    </div>
                  </div>
                )}
                
                {/* Recommendations - also add Array check */}
                {insightData.recommendations && Array.isArray(insightData.recommendations) && insightData.recommendations.length > 0 && (
                  <div className="space-y-3">
                    <h3 className="font-medium">Recommendations</h3>
                    <div className="space-y-2">
                      {insightData.recommendations.map((rec: string, index: number) => (
                        <div key={index} className="flex gap-2 items-start">
                          <div className="h-5 w-5 rounded-full bg-amber-100 flex items-center justify-center flex-shrink-0 mt-0.5">
                            <Star className="h-3 w-3 text-amber-600" />
                          </div>
                          <p className="text-sm">{rec}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* If recommendations is a string instead of an array */}
                {insightData.recommendations && typeof insightData.recommendations === 'string' && (
                  <div className="space-y-3">
                    <h3 className="font-medium">Recommendations</h3>
                    <div className="bg-amber-50 border border-amber-100 rounded-md p-4">
                      <p className="text-sm text-amber-700">{insightData.recommendations}</p>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="py-6 text-center">
                <p className="text-sm text-muted-foreground">No insights available</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Create Reward Dialog */}
      <CreateRewardSheet
        open={isRewardDialogOpen}
        onOpenChange={setIsRewardDialogOpen}
        customerId={selectedCustomer?.id}
        customerName={selectedCustomer?.name}
      />

      {/* Introductory Reward Sheet */}
      <IntroductoryRewardSheet
        open={isIntroductoryRewardSheetOpen}
        onOpenChange={setIsIntroductoryRewardSheetOpen}
      />

      {/* Summarize Inbox Sheet */}
      <Sheet open={isSummarizeInboxSheetOpen} onOpenChange={setIsSummarizeInboxSheetOpen}>
        <SheetContent className="sm:max-w-lg w-full overflow-y-auto flex flex-col">
          <div className="flex-none">
            <SheetHeader className="pb-4">
              <SheetTitle className="text-xl flex items-center gap-2">
                <Inbox className="h-5 w-5 text-indigo-500" />
                Summarize Inbox
              </SheetTitle>
              <SheetDescription>
                Get an AI-powered summary of your email inbox
              </SheetDescription>
            </SheetHeader>
            <Separator className="my-4" />
          </div>

          <div className="flex-grow">
            {!inboxSummaryLoading && !inboxSummaryResult ? (
              <div className="space-y-6">
                <div className="space-y-3">
                  <h3 className="text-sm font-medium">Select time range</h3>
                  <div className="flex gap-3">
                    <Button
                      variant={inboxSummaryTimeframe === "1day" ? "default" : "outline"}
                      className={inboxSummaryTimeframe === "1day" ? "bg-indigo-600 hover:bg-indigo-700" : ""}
                      onClick={() => setInboxSummaryTimeframe("1day")}
                    >
                      1 Day
                    </Button>
                    <Button
                      variant={inboxSummaryTimeframe === "3day" ? "default" : "outline"}
                      className={inboxSummaryTimeframe === "3day" ? "bg-indigo-600 hover:bg-indigo-700" : ""}
                      onClick={() => setInboxSummaryTimeframe("3day")}
                    >
                      3 Days
                    </Button>
                    <Button
                      variant={inboxSummaryTimeframe === "7day" ? "default" : "outline"}
                      className={inboxSummaryTimeframe === "7day" ? "bg-indigo-600 hover:bg-indigo-700" : ""}
                      onClick={() => setInboxSummaryTimeframe("7day")}
                    >
                      7 Days
                    </Button>
                  </div>
                </div>

                <div className={`p-4 border-b border-gray-100 ${isPopupExpanded ? 'px-6' : ''}`}>
                  <div className="flex items-start gap-3">
                    <Lightbulb className="h-5 w-5 text-indigo-500 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-indigo-800">
                      <p className="font-medium mb-1">How it works</p>
                      <p className="text-indigo-700">
                        This feature uses AI to analyze your recent emails and provide a concise summary of important messages, trends, and actions required. Select a time range to begin.
                      </p>
                    </div>
                  </div>
                </div>

                {inboxSummaryError && (
                  <div className="p-4 bg-red-50 rounded-lg border border-red-100">
                    <div className="flex items-start gap-3">
                      <XCircle className="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5" />
                      <div className="text-sm text-red-800">
                        <p className="font-medium mb-1">Error</p>
                        <p className="text-red-700">{inboxSummaryError}</p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="flex justify-end">
                  <Button onClick={handleSummarizeSubmit} className="bg-[#007AFF] hover:bg-[#0062CC]">
                    Generate Summary
                  </Button>
                </div>
              </div>
            ) : inboxSummaryLoading ? (
              <div className="flex flex-col">
                <div className="flex items-start mb-8">
                  <div className="relative mr-3">
                    <div className="h-5 w-5 rounded-full border-2 border-gray-200 border-t-gray-600 animate-spin"></div>
                  </div>
                  
                  <div className="h-5 flex items-center">
                    {loadingStage === "processing" && (
                      <p className="text-sm text-gray-500 animate-pulse">
                        Processing...
                      </p>
                    )}
                    
                    {loadingStage === "finding" && (
                      <p className="text-sm text-[#007AFF] animate-pulse">
                        Searching emails...
                      </p>
                    )}
                    
                    {loadingStage === "generating" && (
                      <p className="text-sm text-[#007AFF] animate-pulse">
                        Generating summary...
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="flex-1 min-h-[300px] flex items-center justify-center text-sm text-gray-400">
                  <p>Preparing your inbox summary...</p>
                </div>
              </div>
            ) : (
              <div className="space-y-6 animate-fadeIn">
                <div className="bg-white border border-gray-200 shadow-sm rounded-lg p-6">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-medium text-gray-900">Email Summary</h3>
                    <div className="text-xs text-gray-500">
                      powered by <GradientText>Tap Agent</GradientText>
                    </div>
                  </div>
                  <div className="prose prose-sm max-w-none font-sf-pro">
                    {inboxSummaryResult && (
                      <div>
                        {/* Process the content to enhance numbered sections */}
                        {inboxSummaryResult?.split('\n').map((line, index) => {
                          // Match lines that start with a number followed by a period
                          const headerMatch = line.match(/^(\d+)\.\s+(.+)$/);
                          
                          if (headerMatch) {
                            // This is a numbered section header - style it prominently
                            return (
                              <div 
                                key={index} 
                                className="mt-8 mb-4 first:mt-2 pb-1 border-b border-gray-100"
                              >
                                <h3 className="text-xl font-bold bg-gradient-to-r from-[#007AFF] to-[#00C6FF] bg-clip-text text-transparent">
                                  {line}
                                </h3>
                              </div>
                            );
                          }
                          
                          // Regular content - render with ReactMarkdown
                          return (
                            <div key={index} className="mb-4">
                              <ReactMarkdown 
                                className="prose prose-slate 
                                prose-p:text-gray-700 prose-p:mb-4
                                prose-h1:text-transparent prose-h1:bg-clip-text prose-h1:bg-gradient-to-r prose-h1:from-[#007AFF] prose-h1:to-[#00C6FF] prose-h1:text-2xl prose-h1:font-bold prose-h1:mt-6 prose-h1:mb-4
                                prose-h2:text-transparent prose-h2:bg-clip-text prose-h2:bg-gradient-to-r prose-h2:from-[#007AFF] prose-h2:to-[#00C6FF] prose-h2:text-xl prose-h2:font-bold prose-h2:mt-5 prose-h2:mb-3
                                prose-h3:text-transparent prose-h3:bg-clip-text prose-h3:bg-gradient-to-r prose-h3:from-[#007AFF] prose-h3:to-[#00C6FF] prose-h3:text-lg prose-h3:font-semibold prose-h3:mt-4 prose-h3:mb-2
                                prose-a:text-[#007AFF] 
                                prose-strong:font-semibold prose-strong:text-gray-900 
                                prose-ul:my-4 prose-ul:pl-5 prose-ul:space-y-2 
                                prose-ol:my-4 prose-ol:pl-5 prose-ol:space-y-2
                                prose-li:my-0.5 prose-li:pl-1.5
                                prose-hr:border-gray-200 prose-hr:my-4 prose-hr:border-dashed
                                font-sf-pro [&_.html-content_h1]:text-transparent [&_.html-content_h1]:bg-clip-text [&_.html-content_h1]:bg-gradient-to-r [&_.html-content_h1]:from-[#007AFF] [&_.html-content_h1]:to-[#00C6FF] [&_.html-content_h1]:text-2xl [&_.html-content_h1]:font-bold [&_.html-content_h1]:mt-6 [&_.html-content_h1]:mb-4
                                [&_.html-content_h2]:text-transparent [&_.html-content_h2]:bg-clip-text [&_.html-content_h2]:bg-gradient-to-r [&_.html-content_h2]:from-[#007AFF] [&_.html-content_h2]:to-[#00C6FF] [&_.html-content_h2]:text-xl [&_.html-content_h2]:font-bold [&_.html-content_h2]:mt-5 [&_.html-content_h2]:mb-3
                                [&_.html-content_h3]:text-transparent [&_.html-content_h3]:bg-clip-text [&_.html-content_h3]:bg-gradient-to-r [&_.html-content_h3]:from-[#007AFF] [&_.html-content_h3]:to-[#00C6FF] [&_.html-content_h3]:text-lg [&_.html-content_h3]:font-semibold [&_.html-content_h3]:mt-4 [&_.html-content_h3]:mb-2
                                [&_.html-content_p]:text-gray-700 [&_.html-content_p]:mb-4
                                [&_.html-content_a]:text-[#007AFF]
                                [&_.html-content_ul]:my-4 [&_.html-content_ul]:pl-5 [&_.html-content_ul]:space-y-2
                                [&_.html-content_ol]:my-4 [&_.html-content_ol]:pl-5 [&_.html-content_ol]:space-y-2
                                [&_.html-content_li]:my-0.5 [&_.html-content_li]:pl-1.5"
                                remarkPlugins={[remarkGfm]}
                                rehypePlugins={[rehypeRaw]}
                                components={{
                                  pre: ({ children }) => (
                                    <pre className="bg-gray-50 p-3 rounded-md overflow-auto text-sm my-4">{children}</pre>
                                  ),
                                  code: ({ children }) => (
                                    <code className="bg-gray-50 p-1 rounded text-sm font-mono text-purple-600">{children}</code>
                                  )
                                }}
                              >
                                {processApiResponse(line)}
                              </ReactMarkdown>
                            </div>
                          );
                        })}
                      </div>
                    )}
                  </div>
                </div>
                
                {/* For debugging - show full API response */}
                {debugResponse && (
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-5 mt-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">API Response (Debug)</h4>
                    <pre className="text-xs overflow-auto bg-gray-100 p-3 rounded">
                      {debugResponse}
                    </pre>
                  </div>
                )}
                
                <div className="flex justify-between">
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      setInboxSummaryResult(null)
                      setInboxSummaryError(null)
                    }}
                  >
                    Generate New Summary
                  </Button>
                  <Button 
                    variant="default"
                    className="bg-[#007AFF] hover:bg-[#0062CC]"
                    onClick={() => setIsSummarizeInboxSheetOpen(false)}
                  >
                    Close
                  </Button>
                </div>
              </div>
            )}
          </div>
        </SheetContent>
      </Sheet>

      {/* Tap Agent Sheet - Without daily summary functionality */}
      <TapAgentSheet 
        open={isTapAgentSheetOpen}
        onOpenChange={setIsTapAgentSheetOpen}
      />

      {/* Daily Summary Popup */}
      {showDailySummaryPopup && (dailySummaryGmailResponse || dailySummaryLightspeedResponse) && (
        <div className={`fixed ${isPopupExpanded ? 'top-0 bottom-0 right-0 w-[35%] rounded-l-lg rounded-r-none border-r-0 h-full' : 'bottom-6 right-6 w-96 rounded-lg h-auto'} z-50 bg-white shadow-xl border border-gray-200 overflow-hidden animate-slideInUp transition-all duration-300 ease-in-out flex flex-col`}>
          <div className="p-4 border-b border-gray-200 flex justify-between items-center bg-white flex-shrink-0">
            <div className="flex flex-col">
              <h3 className="text-sm font-semibold flex items-center gap-2">
                <Calendar className="h-4 w-4 text-blue-500" />
                <GradientText>Daily Summary</GradientText>
              </h3>
              <p className="text-xs text-gray-500 mt-0.5 ml-6">Powered by Tap Agent</p>
            </div>
            <div className="flex items-center gap-2">
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-7 w-7 p-0 rounded-full hover:bg-white/50"
                onClick={() => setIsPopupExpanded(!isPopupExpanded)}
                title={isPopupExpanded ? "Collapse" : "Expand"}
              >
                {isPopupExpanded ? (
                  <Minimize2 className="h-4 w-4 text-gray-500" />
                ) : (
                  <Maximize2 className="h-4 w-4 text-gray-500" />
                )}
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-7 w-7 p-0 rounded-full hover:bg-white/50"
                onClick={() => setShowDailySummaryPopup(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <div className={`overflow-y-auto ${isPopupExpanded ? 'max-h-[calc(100vh-120px)]' : 'max-h-[70vh]'} flex-grow`}>
            {dailySummaryGmailResponse && (
              <div className={`p-4 border-b border-gray-100 ${isPopupExpanded ? 'px-6' : ''}`}>
                <div className="flex items-center gap-2 mb-3">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                    <Image src="/gmail.png" width={16} height={16} alt="Gmail" className="h-4 w-4 object-contain" />
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">Email Summary</h4>
                </div>
                <div className="prose prose-sm max-w-none text-gray-700 text-sm space-y-4 mt-2">
                  {processApiResponse(dailySummaryGmailResponse)?.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i) ? 
                    renderHtml(processApiResponse(dailySummaryGmailResponse)) :
                    <ReactMarkdown 
                      className="text-gray-700 text-sm leading-relaxed space-y-4"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        p: ({children}) => <p className="my-3">{children}</p>,
                        ul: ({children}) => <ul className="my-3 list-disc pl-5">{children}</ul>,
                        ol: ({children}) => <ol className="my-3 list-decimal pl-5">{children}</ol>,
                        li: ({children}) => <li className="my-1">{children}</li>,
                        h3: ({children}) => <h3 className="text-base font-semibold my-3">{children}</h3>,
                        h4: ({children}) => <h4 className="text-sm font-semibold my-2">{children}</h4>
                      }}
                    >
                      {processApiResponse(dailySummaryGmailResponse) || ""}
                    </ReactMarkdown>
                  }
                </div>
              </div>
            )}
            
            {dailySummaryLightspeedResponse && (
              <div className={`p-4 ${isPopupExpanded ? 'px-6' : ''}`}>
                <div className="flex items-center gap-2 mb-3">
                  <div className="flex items-center justify-center h-6 w-6 rounded-md bg-gray-100">
                    <Image src="/lslogo.png" width={16} height={16} alt="Lightspeed" className="h-4 w-4 object-contain" />
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">Sales Summary</h4>
                </div>
                <div className="prose prose-sm max-w-none text-gray-700 text-sm space-y-4 mt-2">
                  {processApiResponse(dailySummaryLightspeedResponse)?.trim().match(/<(html|body|div|h[1-6]|p|ul|ol|li|table|a|img|span|strong|em|b)[\s>]/i) ? 
                    renderHtml(processApiResponse(dailySummaryLightspeedResponse)) :
                    <ReactMarkdown 
                      className="text-gray-700 text-sm leading-relaxed space-y-4"
                      remarkPlugins={[remarkGfm]}
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        p: ({children}) => <p className="my-3">{children}</p>,
                        ul: ({children}) => <ul className="my-3 list-disc pl-5">{children}</ul>,
                        ol: ({children}) => <ol className="my-3 list-decimal pl-5">{children}</ol>,
                        li: ({children}) => <li className="my-1">{children}</li>,
                        h3: ({children}) => <h3 className="text-base font-semibold my-3">{children}</h3>,
                        h4: ({children}) => <h4 className="text-sm font-semibold my-2">{children}</h4>
                      }}
                    >
                      {processApiResponse(dailySummaryLightspeedResponse) || ""}
                    </ReactMarkdown>
                  }
                </div>
              </div>
            )}
          </div>
          <div className="p-3 bg-gray-50 border-t border-gray-200 flex justify-end flex-shrink-0">
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowDailySummaryPopup(false)}
            >
              Close
            </Button>
          </div>
        </div>
      )}
    </PageTransition>
  )
}

// Sample data
const recentSignups = [
  {
    id: "cust1",
    name: "Emma Wilson",
    email: "emma.wilson@example.com",
    signupDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2)
  },
  {
    id: "cust2",
    name: "James Miller",
    email: "james.miller@example.com",
    signupDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5)
  },
  {
    id: "cust3",
    name: "Olivia Davis",
    email: "olivia.davis@example.com",
    signupDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7)
  },
  {
    id: "cust4",
    name: "Noah Garcia",
    email: "noah.garcia@example.com",
    signupDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10)
  }
]

const rewardPerformance = [
  {
    id: "rew1",
    name: "Free Coffee",
    redemptionCount: 342,
    pointsCost: 100,
    type: "item",
    conversionRate: 78,
    trend: "up",
    changePercentage: 12
  },
  {
    id: "rew2",
    name: "10% Off Next Purchase",
    redemptionCount: 215,
    pointsCost: 200,
    type: "discount",
    conversionRate: 65,
    trend: "down",
    changePercentage: 3
  },
  {
    id: "rew3",
    name: "Buy 10 Get 1 Free",
    redemptionCount: 187,
    pointsCost: 0,
    type: "program",
    conversionRate: 92,
    trend: "up",
    changePercentage: 8
  }
] "use client"

import { Card } from "@/components/ui/card"
import { 
  Sparkles, 
  MessageSquare, 
  Settings, 
  ImagePlus, 
  Repeat,
  ArrowRight
} from "lucide-react"
import { cn } from "@/lib/utils"

const createActions = [
  {
    title: "Individual Reward",
    description: "Create a one-time reward for your customers",
    icon: Sparkles,
    href: "/dashboard/create/reward",
    color: "blue"
  },
  {
    title: "Recurring Reward",
    description: "Set up rewards that repeat on a schedule",
    icon: Repeat,
    href: "/dashboard/create/recurring",
    color: "purple"
  },
  {
    title: "Broadcast Message",
    description: "Send updates to all your customers",
    icon: MessageSquare,
    href: "/dashboard/create/broadcast",
    color: "green"
  },
  {
    title: "Homepage Banner",
    description: "Update your store's featured content",
    icon: ImagePlus,
    href: "/dashboard/create/banner",
    color: "orange"
  },
  {
    title: "Point Rule",
    description: "Configure earning and redemption rules",
    icon: Settings,
    href: "/dashboard/create/rules",
    color: "red"
  }
]

export default function CreatePage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-semibold tracking-tight">Create</h1>
        <p className="text-sm text-muted-foreground mt-1">
          Choose what you'd like to create for your loyalty program.
        </p>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {createActions.map((action) => (
          <Card 
            key={action.title}
            className="p-6 hover:border-[#007AFF] hover:shadow-sm cursor-pointer transition-all group relative overflow-hidden"
            onClick={() => window.location.href = action.href}
          >
            <div className="absolute inset-0 bg-gradient-to-br from-[#007AFF]/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
            <div className="relative">
              <div className="flex items-start justify-between">
                <div className="space-y-4">
                  <div className="h-12 w-12 rounded-full bg-[#007AFF]/10 flex items-center justify-center">
                    <action.icon className="h-6 w-6 text-[#007AFF]" />
                  </div>
                  <div>
                    <h3 className="font-medium text-lg mb-1">{action.title}</h3>
                    <p className="text-sm text-muted-foreground">
                      {action.description}
                    </p>
                  </div>
                </div>
                <ArrowRight className="h-5 w-5 text-muted-foreground group-hover:text-[#007AFF] transition-colors" />
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  )
} "use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"

export default function IntegrationsRedirect() {
  const router = useRouter()
  
  useEffect(() => {
    router.replace("/dashboard/integrations")
  }, [router])

  return null
} "use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { getAIResponse } from "@/lib/openai"

export default function AiTestPage() {
  const [input, setInput] = useState("")
  const [response, setResponse] = useState("")
  const [loading, setLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || loading) return

    setLoading(true)
    try {
      const aiResponse = await getAIResponse(input)
      setResponse(aiResponse)
    } catch (error) {
      console.error("Error:", error)
      setResponse("Error: Failed to get AI response")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="container max-w-2xl py-12">
      <h1 className="text-2xl font-bold mb-6">OpenAI API Test</h1>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Ask something..."
          disabled={loading}
        />
        <Button type="submit" disabled={loading}>
          {loading ? "Loading..." : "Send"}
        </Button>
      </form>
      
      {response && (
        <div className="mt-6 p-4 border rounded-md bg-gray-50">
          <h2 className="font-semibold mb-2">Response:</h2>
          <p className="whitespace-pre-wrap">{response}</p>
        </div>
      )}
    </div>
  )
} "use client"

import { useState } from 'react'
import { callOpenAI } from '@/lib/assistant'
import { useAuth } from '@/contexts/auth-context'

export default function OpenAITestPage() {
  const [result, setResult] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const { user } = useAuth()

  const testOpenAI = async () => {
    if (!user) {
      setError('You must be logged in to test OpenAI')
      return
    }

    setLoading(true)
    setError(null)
    
    try {
      // Test a simple OpenAI API call
      const models = await callOpenAI('models.list', {})
      setResult(models)
    } catch (err) {
      console.error('Error testing OpenAI:', err)
      setError(err instanceof Error ? err.message : String(err))
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">OpenAI API Test</h1>
      
      <button 
        onClick={testOpenAI}
        disabled={loading || !user}
        className="px-4 py-2 bg-blue-500 text-white rounded disabled:bg-gray-400 mb-4"
      >
        {loading ? 'Testing...' : 'Test OpenAI API'}
      </button>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <p className="font-bold">Error</p>
          <p>{error}</p>
        </div>
      )}
      
      {result && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold mb-2">Result:</h2>
          <pre className="bg-gray-100 p-4 rounded overflow-auto max-h-96">
            {JSON.stringify(result, null, 2)}
          </pre>
        </div>
      )}
    </div>
  )
} "use client"

import { useEffect, useState, useRef } from "react"
import { db } from "@/lib/firebase"
import { collection, query, orderBy, getDocs, Timestamp, addDoc, serverTimestamp, doc, updateDoc, deleteDoc, getDoc, DocumentData, QueryDocumentSnapshot } from "firebase/firestore"
import { getStorage, ref, getDownloadURL, uploadBytesResumable } from "firebase/storage"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Search, Calendar, Tag, Clock, FileText, Filter, ChevronDown, Eye, ArrowRight, LayoutGrid, MessageSquare, Gift, Plus, FileUp, Inbox, FileImage, FilePlus, FileQuestion, Check, Loader2, Image as ImageIcon, File as FileIcon, ChevronLeft, ChevronRight as ChevronRightIcon, ZoomIn, ZoomOut, Download, CornerDownLeft, File, ChevronRight, MoreVertical, PlusCircle, PlusIcon, Upload, X } from "lucide-react"
import { format, isValid, formatRelative } from "date-fns"
import { Skeleton } from "@/components/ui/skeleton"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { DashboardLayout } from "@/components/dashboard-layout"
import { cn } from "@/lib/utils"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/contexts/auth-context"
import { Avatar, AvatarImage } from "@/components/ui/avatar"
import { 
  AlertDialog, 
  AlertDialogAction, 
  AlertDialogCancel, 
  AlertDialogContent, 
  AlertDialogDescription, 
  AlertDialogFooter, 
  AlertDialogHeader, 
  AlertDialogTitle
} from "@/components/ui/alert-dialog"
import { 
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command"
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import 'react-pdf/dist/esm/Page/TextLayer.css';
import { AnimatedCheckbox, ConnectionButton } from "@/components/ui/checkbox"

pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;

// Define the Note interface
interface Note {
  id: string;
  title: string;
  summary: string;
  rawText: string;
  tags: string[];
  areaId: string;
  areaTitle: string;
  categoryId: string;
  categoryTitle: string;
  createdAt: Date;
  reminderTime: Date | null;
  reminderSent: boolean;
  type: "note" | "invoice" | "other" | "pdf" | "image";
  fileUrl?: string;
  fileType?: string;
  fileName?: string;
  contentType?: string;
  vectorStored?: boolean; // Indicates if the document is stored in vector database
}

// Knowledge chat response interface
interface KnowledgeChatResponse {
  answer: string;
  sources: string[];
  metadata: {
    contextCount: number;
    query: string;
  };
}

export default function NotesPage() {
  const { user } = useAuth();
  const [notes, setNotes] = useState<Note[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedArea, setSelectedArea] = useState<string | null>(null);
  const [areas, setAreas] = useState<{id: string, title: string}[]>([]);
  const [activeTab, setActiveTab] = useState("all");
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);
  const [csAgentSelected, setCsAgentSelected] = useState(false);
  const [rewardAgentSelected, setRewardAgentSelected] = useState(false);
  const [animatingCs, setAnimatingCs] = useState(false);
  const [animatingReward, setAnimatingReward] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [deletingFile, setDeletingFile] = useState(false);
  const [searchMode, setSearchMode] = useState<"filter" | "semantic">("filter");
  
  // Semantic search state
  const [semanticSearchQuery, setSemanticSearchQuery] = useState("");
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [searchResults, setSearchResults] = useState<{title: string; summary: string; type: string}[]>([
    { title: "Invoice April 2023", summary: "Contains payment details and due dates", type: "invoice" },
    { title: "Client meeting notes", summary: "Discussion about payment schedules", type: "note" },
    { title: "Quarterly budget", summary: "Financial projections and expense tracking", type: "other" }
  ]);
  
  // Knowledge chat state
  const [isLoadingKnowledgeChat, setIsLoadingKnowledgeChat] = useState(false);
  const [knowledgeChatResponse, setKnowledgeChatResponse] = useState<KnowledgeChatResponse | null>(null);
  const [showKnowledgeChatResponse, setShowKnowledgeChatResponse] = useState(false);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  
  // Title editing state
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState("");
  const titleInputRef = useRef<HTMLInputElement>(null);
  const listTitleInputRef = useRef<HTMLInputElement>(null);
  
  // Upload dialog state
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadFile, setUploadFile] = useState<File | null>(null);
  const [uploadTitle, setUploadTitle] = useState("");
  const [uploadSummary, setUploadSummary] = useState("");
  const [uploadTags, setUploadTags] = useState("");
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // PDF Viewer state
  const [numPages, setNumPages] = useState<number | null>(null);
  const [pdfScale, setPdfScale] = useState(1.0);
  const pdfViewerContainerRef = useRef<HTMLDivElement>(null);
  
  // Document type selector state
  const [isUpdatingDocType, setIsUpdatingDocType] = useState(false);
  
  // Add a state for PDF blob at the beginning of the component
  const [currentPdfUrl, setCurrentPdfUrl] = useState<string | null>(null);
  const [pdfLoading, setPdfLoading] = useState(false);
  
  // Safe date formatting function
  const safeFormatDate = (date: Date | null, formatString: string): string => {
    if (!date || !isValid(date)) {
      return "Invalid date";
    }
    try {
      return format(date, formatString);
    } catch (error) {
      console.error("Error formatting date:", error);
      return "Invalid date";
    }
  };
  
  // Fetch notes from Firestore
  const fetchNotes = async () => {
    if (!user || !user.uid) {
      setLoading(false);
      setNotes([]);
      return;
    }
    
    try {
      setLoading(true);
      const notesRef = collection(db, `customers/${user.uid}/ThoughtsX`);
      const notesQuery = query(notesRef, orderBy("createdAt", "desc"));
      const querySnapshot = await getDocs(notesQuery);
      
      const notesData: Note[] = [];
      const areasMap = new Map<string, string>();
      
      // Create an array of promises to check vector storage status
      const notesWithStatusPromises = querySnapshot.docs.map(async (docSnapshot: QueryDocumentSnapshot<DocumentData>) => {
        const data = docSnapshot.data();
        
        // Convert Firestore timestamp to Date, with proper checks
        const createdAt = data.createdAt && typeof data.createdAt.toDate === 'function' 
          ? data.createdAt.toDate() 
          : new Date();
        
        // Handle reminderTime safely
        let reminderTime: Date | null = null;
        if (data.reminderTime) {
          if (data.reminderTime.toDate) {
            reminderTime = data.reminderTime.toDate();
          } else if (data.reminderTime instanceof Date) {
            reminderTime = data.reminderTime;
          } else if (typeof data.reminderTime === 'string') {
            reminderTime = new Date(data.reminderTime);
          } else if (typeof data.reminderTime === 'number') {
            reminderTime = new Date(data.reminderTime);
          }
        }
      
        // Assign a type based on some criteria (for demo purposes)
        // In a real app, this would come from the data
        let noteType = data.type || "other";
        const fileName = data.fileName || "";
        const fileTypeFromData = data.fileType || fileName.split('.').pop()?.toLowerCase() || '';

        if (!data.type) { // Only override if type isn't explicitly set
          if (fileTypeFromData === 'pdf') {
            noteType = fileName.toLowerCase().includes('invoice') ? "invoice" : "pdf";
          } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileTypeFromData)) {
            noteType = "image";
          } else if (['doc', 'docx', 'txt', 'md'].includes(fileTypeFromData)) {
            noteType = "note";
          } else if (fileName) { // If there is a filename but type is unknown
             noteType = "other"; // or a more generic 'file' type
          }
        }
        
        // Check vector database status if document has a file
        let vectorStored = false;
        if (fileName) {
          try {
            // Check if the document exists in the merchants/merchantId/documents collection
            const vectorDocRef = doc(db, `merchants/${user.uid}/documents`, fileName);
            const vectorDoc = await getDoc(vectorDocRef);
            // If document exists and has status field, check if it's stored
            if (vectorDoc.exists()) {
              const vectorData = vectorDoc.data() as Record<string, any>;
              vectorStored = vectorData.status === 'stored' || vectorData.status === 'processed';
            }
          } catch (error) {
            console.error("Error checking vector status:", error);
          }
        }
        
        const note: Note = {
          id: docSnapshot.id,
          title: data.title || "Untitled",
          summary: data.summary || "",
          rawText: data.rawText || "",
          tags: data.tags || [],
          areaId: data.areaId || "",
          areaTitle: data.areaTitle || "Uncategorized",
          categoryId: data.categoryId || "",
          categoryTitle: data.categoryTitle || "General",
          createdAt,
          reminderTime,
          reminderSent: data.reminderSent || false,
          type: noteType as Note['type'],
          fileUrl: data.fileUrl || "",
          fileType: fileTypeFromData,
          fileName: fileName,
          contentType: data.contentType || "",
          vectorStored
        };
        
        // Collect unique areas
        if (data.areaId && data.areaTitle) {
          areasMap.set(data.areaId, data.areaTitle);
        }
        
        return note;
      });
      
      // Wait for all status checks to complete
      const resolvedNotes = await Promise.all(notesWithStatusPromises);
      notesData.push(...resolvedNotes);
      
      // Convert areas map to array
      const areasArray = Array.from(areasMap).map(([id, title]) => ({ id, title }));
      
      setNotes(notesData);
      setAreas(areasArray);
    
    // Set the first note as selected by default if available
    if (notesData.length > 0 && !selectedNote) {
      setSelectedNote(notesData[0]);
    } else if (notesData.length === 0) {
      setSelectedNote(null);
    }
    } catch (error) {
      console.error("Error fetching notes:", error);
      toast({
        title: "Error",
        description: "Failed to load notes. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    if (user && user.uid) {
    fetchNotes();
    }
  }, [user]);
  
  useEffect(() => {
    if (selectedNote && selectedNote.type === 'pdf') {
      setNumPages(null); // Reset numPages when a new PDF is selected
    } 
  }, [selectedNote]);
  
  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadFile(file);
      
      // Auto-fill title with filename (without extension)
      const fileName = file.name.split('.').slice(0, -1).join('.');
      setUploadTitle(fileName);
    }
  };
  
  function onDocumentLoadSuccess({ numPages: nextNumPages }: { numPages: number }) {
    setNumPages(nextNumPages);
  }

  // Add a helper function to fetch PDFs with proper CORS handling
  const fetchPdfAsDataUrl = async (url: string): Promise<string> => {
    setPdfLoading(true);
    try {
      // Create a new URL with a proxy service that handles CORS
      // For development purposes, you can use a CORS proxy service
      // In production, this should be replaced with your own proxy or Firebase function
      const corsAnywhereUrl = `https://cors-anywhere.herokuapp.com/${url}`;
      
      const response = await fetch(corsAnywhereUrl);
      if (!response.ok) throw new Error(`Failed to fetch PDF: ${response.status}`);
      
      const blob = await response.blob();
      return URL.createObjectURL(blob);
    } catch (error) {
      console.error("Error fetching PDF:", error);
      toast({
        title: "PDF Error",
        description: "CORS issue detected. Try downloading the file instead or open in a new tab.",
        variant: "destructive"
      });
      throw error;
    } finally {
      setPdfLoading(false);
    }
  };
}"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/contexts/auth-context"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { doc, getDoc } from "firebase/firestore"
import { db } from "@/lib/firebase"

export default function TestSquarePage() {
  const { user } = useAuth()
  const [code, setCode] = useState("")
  const [state, setState] = useState("")
  const [merchantId, setMerchantId] = useState("")
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<any>(null)
  const [squareIntegration, setSquareIntegration] = useState<any>(null)
  const [loadingIntegration, setLoadingIntegration] = useState(false)

  useEffect(() => {
    if (user?.uid) {
      setMerchantId(user.uid)
    }
  }, [user])

  const handleTestTokenExchange = async () => {
    if (!code || !state || !merchantId) {
      toast({
        title: "Missing Information",
        description: "Please provide code, state, and merchant ID",
        variant: "destructive"
      })
      return
    }

    setLoading(true)
    setResult(null)

    try {
      const response = await fetch('/api/oauth/square', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code,
          state,
          merchantId
        })
      })

      const data = await response.json()
      setResult(data)

      if (data.success) {
        toast({
          title: "Success!",
          description: "Token exchange successful and data stored in Firestore",
        })
      } else {
        toast({
          title: "Error",
          description: data.error || "Failed to exchange token",
          variant: "destructive"
        })
      }
    } catch (error) {
      setResult({ error: error instanceof Error ? error.message : String(error) })
      toast({
        title: "Error",
        description: "An unexpected error occurred",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const checkSquareIntegration = async () => {
    if (!user?.uid) {
      toast({
        title: "Not Authenticated",
        description: "Please log in first",
        variant: "destructive"
      })
      return
    }

    setLoadingIntegration(true)
    setSquareIntegration(null)

    try {
      const docRef = doc(db, 'merchants', user.uid, 'integrations', 'square')
      const docSnap = await getDoc(docRef)

      if (docSnap.exists()) {
        const data = docSnap.data()
        // Mask sensitive data
        const maskedData = {
          ...data,
          accessToken: data.accessToken ? `${data.accessToken.substring(0, 5)}...` : null,
          refreshToken: data.refreshToken ? `${data.refreshToken.substring(0, 5)}...` : null,
        }
        setSquareIntegration(maskedData)
        toast({
          title: "Integration Found",
          description: "Square integration exists in Firestore",
        })
      } else {
        setSquareIntegration({ notFound: true })
        toast({
          title: "Not Found",
          description: "No Square integration found in Firestore",
          variant: "destructive"
        })
      }
    } catch (error) {
      setSquareIntegration({ error: error instanceof Error ? error.message : String(error) })
      toast({
        title: "Error",
        description: "Failed to check integration status",
        variant: "destructive"
      })
    } finally {
      setLoadingIntegration(false)
    }
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Square Integration Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Manual Token Exchange */}
        <Card>
          <CardHeader>
            <CardTitle>Test Token Exchange</CardTitle>
            <CardDescription>
              Manually test the Square OAuth token exchange
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="code">Authorization Code</Label>
              <Input
                id="code"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder="sq0cgp-..."
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="state">State</Label>
              <Input
                id="state"
                value={state}
                onChange={(e) => setState(e.target.value)}
                placeholder="State parameter"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="merchantId">Merchant ID</Label>
              <Input
                id="merchantId"
                value={merchantId}
                onChange={(e) => setMerchantId(e.target.value)}
                placeholder="Your Firebase user ID"
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button 
              onClick={handleTestTokenExchange} 
              disabled={loading}
              className="w-full"
            >
              {loading ? "Processing..." : "Test Token Exchange"}
            </Button>
          </CardFooter>
        </Card>

        {/* Check Integration Status */}
        <Card>
          <CardHeader>
            <CardTitle>Check Integration Status</CardTitle>
            <CardDescription>
              Check if Square integration exists in Firestore
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-500 mb-4">
              Click the button below to check if your Square integration is properly stored in Firestore.
            </p>
          </CardContent>
          <CardFooter>
            <Button 
              onClick={checkSquareIntegration} 
              disabled={loadingIntegration || !user}
              className="w-full"
            >
              {loadingIntegration ? "Checking..." : "Check Integration Status"}
            </Button>
          </CardFooter>
        </Card>
      </div>

      {/* Results Display */}
      {(result || squareIntegration) && (
        <div className="mt-6 space-y-6">
          {result && (
            <Card>
              <CardHeader>
                <CardTitle>Token Exchange Result</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  readOnly
                  className="font-mono h-48"
                  value={JSON.stringify(result, null, 2)}
                />
              </CardContent>
            </Card>
          )}

          {squareIntegration && (
            <Card>
              <CardHeader>
                <CardTitle>Integration Status</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  readOnly
                  className="font-mono h-48"
                  value={JSON.stringify(squareIntegration, null, 2)}
                />
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  )
} "use client"

import { useEffect, useState } from "react"
import { useParams, useRouter } from "next/navigation"
import { db } from "@/lib/firebase"
import { doc, getDoc, collection, getDocs, query, where } from "firebase/firestore"
import { useAuth } from "@/contexts/auth-context"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Clock, DollarSign, Calendar, Users } from "lucide-react"
import { formatDate } from '@/lib/date-utils'

interface PointsRule {
  id: string
  name: string
  pointsmultiplier: number
  conditions?: Array<{
    type: string
    startTime?: any
    endTime?: any
    amount?: number
    days?: string[]
  }>
  createdAt: any
  merchantId: string
}

interface Transaction {
  id: string
  amount: number
  pointsEarned: number
  customerId: string
  customerName?: string
  createdAt: any
  ruleId: string
}

export default function RuleDetailsPage() {
  const { id } = useParams()
  const router = useRouter()
  const { user } = useAuth()
  const [rule, setRule] = useState<PointsRule | null>(null)
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchRuleAndTransactions() {
      if (!user?.uid || !id) return

      try {
        setLoading(true)
        // Fetch rule details
        const ruleDoc = await getDoc(doc(db, 'merchants', user.uid, 'pointsRules', id as string))
        
        if (!ruleDoc.exists()) {
          setError('Rule not found')
          return
        }

        const ruleData = { id: ruleDoc.id, ...ruleDoc.data() } as PointsRule
        setRule(ruleData)

        // Fetch transactions that used this rule
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const q = query(transactionsRef, where('ruleId', '==', id))
        const transactionsSnapshot = await getDocs(q)
        
        const transactionsData = transactionsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as Transaction[]
        
        setTransactions(transactionsData)
      } catch (error) {
        console.error('Error fetching rule details:', error)
        setError('Failed to load rule details')
      } finally {
        setLoading(false)
      }
    }

    fetchRuleAndTransactions()
  }, [id, user?.uid])

  if (loading) {
    return <div className="p-8 text-center">Loading...</div>
  }

  if (error || !rule) {
    return <div className="p-8 text-center text-red-500">{error}</div>
  }

  return (
    <div className="p-4">
      <div className="max-w-[1200px] mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.back()}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Button>
            <h1 className="text-2xl font-semibold">{rule.name}</h1>
            <Badge className="bg-green-50 text-green-700">
              Active
            </Badge>
          </div>
        </div>

        {/* Rule Details */}
        <Card className="p-6">
          <div className="space-y-6">
            <div>
              <h2 className="text-lg font-medium mb-4">Rule Details</h2>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-500">Points Multiplier</p>
                  <p className="text-lg font-medium">{rule.pointsmultiplier}x</p>
                </div>
                {rule.conditions?.find(c => c.type === 'minimumSpend') && (
                  <div>
                    <p className="text-sm text-gray-500">Minimum Spend</p>
                    <p className="text-lg font-medium">
                      ${rule.conditions.find(c => c.type === 'minimumSpend')?.amount}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Conditions */}
            {rule.conditions && rule.conditions.length > 0 && (
              <div>
                <h3 className="text-sm font-medium mb-3">Conditions</h3>
                <div className="space-y-3">
                  {rule.conditions.map((condition, index) => (
                    <div key={index} className="flex items-center gap-2">
                      {condition.type === 'timeOfDay' && (
                        <>
                          <Clock className="h-4 w-4 text-gray-500" />
                          <span className="text-sm">
                            Available from {formatDate(condition.startTime)} to {formatDate(condition.endTime)}
                          </span>
                        </>
                      )}
                      {condition.type === 'daysOfWeek' && (
                        <>
                          <Calendar className="h-4 w-4 text-gray-500" />
                          <span className="text-sm">
                            Available on {condition.days?.join(', ')}
                          </span>
                        </>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </Card>

        {/* Transactions Table */}
        <div>
          <h2 className="text-lg font-medium mb-4">Transactions</h2>
          <Card>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b bg-gray-50">
                    <th className="text-left p-4 text-sm font-medium text-gray-500">Date</th>
                    <th className="text-left p-4 text-sm font-medium text-gray-500">Customer</th>
                    <th className="text-right p-4 text-sm font-medium text-gray-500">Amount</th>
                    <th className="text-right p-4 text-sm font-medium text-gray-500">Points Earned</th>
                  </tr>
                </thead>
                <tbody className="divide-y">
                  {transactions.map(transaction => (
                    <tr key={transaction.id} className="hover:bg-gray-50">
                      <td className="p-4 text-sm">{formatDate(transaction.createdAt)}</td>
                      <td className="p-4 text-sm">{transaction.customerName || 'Unknown Customer'}</td>
                      <td className="p-4 text-sm text-right">${transaction.amount.toFixed(2)}</td>
                      <td className="p-4 text-sm text-right">{transaction.pointsEarned}</td>
                    </tr>
                  ))}
                  {transactions.length === 0 && (
                    <tr>
                      <td colSpan={4} className="p-4 text-center text-sm text-gray-500">
                        No transactions found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      </div>
    </div>
  )
} "use client"

import { redirect } from 'next/navigation'
import { useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/contexts/auth-context"

// Add this function to safely handle Firestore timestamps or ISO strings
const safelyGetDate = (dateField: any): Date => {
  if (!dateField) return new Date();
  
  try {
    // If it's a Firestore timestamp with toDate method
    if (typeof dateField.toDate === 'function') {
      return dateField.toDate();
    }
    // If it's an ISO string
    else if (typeof dateField === 'string') {
      return new Date(dateField);
    }
    // If it's already a Date
    else if (dateField instanceof Date) {
      return dateField;
    }
    // Fallback
    else {
      return new Date();
    }
  } catch (error) {
    console.error("Error parsing date:", error);
    return new Date();
  }
};

export default function Home() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { user } = useAuth()
  
  useEffect(() => {
    // Check if this is an OAuth callback
    const code = searchParams?.get('code')
    const state = searchParams?.get('state')
    
    if (code && state && user) {
      console.log('OAuth callback detected on root page:', { hasCode: true, hasState: true, hasUser: true })
      console.log('OAuth parameters:', { 
        codePrefix: code.substring(0, 20) + '...', 
        state,
        userUid: user.uid 
      })
      
      // Function to handle Lightspeed OAuth callback
      const handleLightspeedCallback = async () => {
        try {
          console.log('Lightspeed OAuth callback detected, processing...')
          
          const merchantId = localStorage.getItem('lightspeed_new_merchant_id')
          const codeVerifier = localStorage.getItem('lightspeed_new_code_verifier')
          
          console.log('Retrieved from localStorage:', { 
            merchantId, 
            hasCodeVerifier: !!codeVerifier,
            codeVerifierLength: codeVerifier ? codeVerifier.length : 0,
            storedState: localStorage.getItem('lightspeed_new_state')
          })
          
          if (!merchantId || !codeVerifier) {
            throw new Error(`Missing required data: merchantId=${!!merchantId}, codeVerifier=${!!codeVerifier}`)
          }
          
          // Show a toast to indicate we're processing
          toast({
            title: "Processing",
            description: "Connecting your Lightspeed account...",
          })
          
          console.log('Sending token exchange request...')
          console.log('Request payload:', {
            code: code?.substring(0, 20) + '...',
            merchantId,
            state,
            codeVerifierLength: codeVerifier.length
          })
          
          // Process the Lightspeed callback with await to ensure it completes
          try {
            const response = await fetch('/api/lightspeed/new', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                code,
                merchantId,
                state,
                codeVerifier
              })
            })
            
            console.log('Token exchange response status:', response.status)
            console.log('Token exchange response headers:', Object.fromEntries([...response.headers.entries()]))
            
            const text = await response.text()
            console.log('Raw response text:', text)
            
            let data
            try {
              data = JSON.parse(text)
              console.log('Token exchange response data:', data)
            } catch (parseError) {
              console.error('Error parsing JSON response:', parseError)
              console.log('Response was not JSON, using text response instead')
              data = { success: false, error: 'Invalid JSON response', rawText: text }
            }
            
            if (data.success) {
              console.log('Lightspeed connection successful!')
              toast({
                title: "Success!",
                description: "Your Lightspeed account has been connected."
              })
              
              // Clear localStorage items
              localStorage.removeItem('lightspeed_new_state')
              localStorage.removeItem('lightspeed_new_merchant_id')
              localStorage.removeItem('lightspeed_new_code_verifier')
              
              // Redirect to integrations page after a longer delay to ensure data is saved
              console.log('Redirecting to integrations page...')
              setTimeout(() => {
                router.push('/integrations')
              }, 3000)
            } else {
              console.error('Lightspeed connection failed:', data.error, data.details)
              throw new Error(data.error || 'Failed to connect Lightspeed account')
            }
          } catch (fetchError) {
            console.error('Fetch operation failed:', fetchError)
            throw fetchError
          }
        } catch (error) {
          console.error('Error processing Lightspeed callback:', error)
          toast({
            title: "Connection Failed",
            description: "We couldn't connect your Lightspeed account. Please try again."
          })
          
          // Clear localStorage items even on error
          localStorage.removeItem('lightspeed_new_state')
          localStorage.removeItem('lightspeed_new_merchant_id')
          localStorage.removeItem('lightspeed_new_code_verifier')
          
          // Redirect to dashboard
          setTimeout(() => {
            router.push('/dashboard')
          }, 3000)
        }
      }
      
      // Check if it's a Lightspeed callback by looking at the stored state
      if (state === localStorage.getItem('lightspeed_new_state')) {
        console.log('===== LIGHTSPEED CALLBACK STATE MATCH =====');
        console.log('URL state:', state);
        console.log('localStorage state:', localStorage.getItem('lightspeed_new_state'));
        
        // Checking everything in localStorage
        console.log('All localStorage items:', Object.keys(localStorage).reduce<Record<string, string | null>>((obj, key) => {
          obj[key] = localStorage.getItem(key);
          return obj;
        }, {}));
        
        handleLightspeedCallback();
        return; // Prevent immediate redirect
      } else if (state && localStorage.getItem('lightspeed_new_state')) {
        console.log('===== LIGHTSPEED CALLBACK STATE MISMATCH =====');
        console.log('URL state:', state);
        console.log('localStorage state:', localStorage.getItem('lightspeed_new_state'));
      }
      
      // Function to handle Square OAuth callback
      const handleSquareCallback = async () => {
        try {
          console.log('Square OAuth callback detected, processing...')
          
          const merchantId = localStorage.getItem('merchant_id')
          
          console.log('Retrieved from localStorage:', { 
            merchantId,
            storedState: localStorage.getItem('square_state')
          })
          
          if (!merchantId) {
            throw new Error('Missing merchantId in localStorage')
          }
          
          // Show a toast to indicate we're processing
          toast({
            title: "Processing",
            description: "Connecting your Square account...",
          })
          
          console.log('Sending token exchange request...')
          // Process the Square callback with await to ensure it completes
          const response = await fetch('/api/oauth/square', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              code,
              state,
              merchantId
            })
          })
          
          console.log('Token exchange response status:', response.status)
          const data = await response.json()
          console.log('Token exchange response data:', data)
          
          if (data.success) {
            console.log('Square connection successful!')
            toast({
              title: "Success!",
              description: "Your Square account has been connected."
            })
            
            // Clear localStorage items
            localStorage.removeItem('square_state')
            localStorage.removeItem('merchant_id')
            
            // Redirect to integrations page after a longer delay to ensure data is saved
            console.log('Redirecting to integrations page...')
            setTimeout(() => {
              router.push('/integrations')
            }, 3000)
          } else {
            console.error('Square connection failed:', data.error, data.details)
            throw new Error(data.error || 'Failed to connect Square account')
          }
        } catch (error) {
          console.error('Error processing Square callback:', error)
          toast({
            title: "Connection Failed",
            description: "We couldn't connect your Square account. Please try again."
          })
          
          // Clear localStorage items even on error
          localStorage.removeItem('square_state')
          localStorage.removeItem('merchant_id')
          
          // Redirect to dashboard
          setTimeout(() => {
            router.push('/dashboard')
          }, 3000)
        }
      }
      
      // Check if it's a Square callback
      if (state === localStorage.getItem('square_state')) {
        handleSquareCallback()
        return // Prevent immediate redirect
      }
      
      console.log('OAuth callback detected but no matching state found in localStorage', {
        availableLocalStorageKeys: Object.keys(localStorage),
        squareStateExists: !!localStorage.getItem('square_state'),
        lightspeedNewStateExists: !!localStorage.getItem('lightspeed_new_state'),
        lightspeedNewState: localStorage.getItem('lightspeed_new_state')
      })
    }
    
    // If not an OAuth callback or already processed, redirect to dashboard
    router.push('/dashboard')
  }, [searchParams, router, user])
  
  // Show a loading state
  return (
    <div className="flex items-center justify-center h-screen">
      <div className="text-center">
        <div className="h-8 w-8 rounded-full border-2 border-primary border-t-transparent animate-spin mx-auto mb-4"></div>
        <p>Redirecting...</p>
      </div>
    </div>
  )
}
"use client"

import { useState, useEffect } from "react"
import { CreateSheet } from "@/components/create-sheet"
import { useRouter } from "next/navigation"
import { PageTransition } from "@/components/page-transition"

export default function CreatePage() {
  const router = useRouter()
  const [createSheetOpen, setCreateSheetOpen] = useState(true)

  // When the sheet is closed, redirect to dashboard
  useEffect(() => {
    if (!createSheetOpen) {
      router.push('/dashboard')
    }
  }, [createSheetOpen, router])
  
  return (
    <PageTransition>
      <div>
        <CreateSheet 
          open={createSheetOpen} 
          onOpenChange={setCreateSheetOpen}
        />
      </div>
    </PageTransition>
  )
} import { LoginForm } from "@/components/login-form"
import { PageTransition } from "@/components/page-transition"

export default function LoginPage() {
  return (
    <PageTransition>
      <div className="min-h-screen w-full bg-gray-50">
        <div className="p-4">
          <div className="flex items-center gap-2">
            <img 
              src="/logo.png" 
              alt="Tap Loyalty Logo" 
              className="w-8 h-8 rounded-lg object-cover"
            />
            <h1 className="text-2xl">
              <span className="text-[#007AFF] font-extrabold">Tap</span>{" "}
              <span className="font-semibold">Loyalty</span>
            </h1>
          </div>
        </div>
        
        <div className="flex min-h-[calc(100vh-80px)] w-full items-center justify-center p-6 md:p-10">
          <div className="w-full max-w-sm">
            <LoginForm />
          </div>
        </div>
      </div>
    </PageTransition>
  )
} "use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/contexts/auth-context"
import { useMerchant } from "@/hooks/use-merchant"
import axios from "axios"
import {
  Mail,
  Users,
  FileText,
  Send,
  Clock,
  BarChart2,
  Settings,
  Plus,
  RefreshCw,
  AlertCircle,
  CheckCircle2,
  Loader2
} from "lucide-react"
import { fetchMerchantCustomers, fetchTemplates, getMerchantCampaignReports } from "@/services/mailchimp"

// Mailchimp API configuration
const API_KEY = '47fbae78b915abaa7956de0baf066b4b-us9';
const SERVER_PREFIX = 'us9';
const BASE_URL = `https://${SERVER_PREFIX}.api.mailchimp.com/3.0`;

export default function EmailPage() {
  const router = useRouter()
  const { toast } = useToast()
  const { user } = useAuth()
  const { merchant } = useMerchant()
  const [activeTab, setActiveTab] = useState("templates")
  const [isConnected, setIsConnected] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const [isLoadingTemplates, setIsLoadingTemplates] = useState(true)
  const [customers, setCustomers] = useState([])
  const [templates, setTemplates] = useState([])
  const [campaigns, setCampaigns] = useState([])
  const [isSyncing, setIsSyncing] = useState(false)

  // Load templates
  useEffect(() => {
    const loadTemplates = async () => {
      if (!user?.uid) return
      
      try {
        setIsLoadingTemplates(true)
        
        // For demo purposes, we'll use sample templates with placeholder images
        setTimeout(() => {
          const sampleTemplates = [
            {
              id: "template-1",
              name: "Welcome Email",
              category: "Onboarding",
              preview_image: null
            },
            {
              id: "template-2",
              name: "Monthly Newsletter",
              category: "Newsletters",
              preview_image: null
            },
            {
              id: "template-3",
              name: "Special Offer",
              category: "Promotions",
              preview_image: null
            },
            {
              id: "template-4",
              name: "Product Announcement",
              category: "Marketing",
              preview_image: null
            }
          ];
          
          setTemplates(sampleTemplates);
          setIsLoadingTemplates(false);
        }, 1000);
        
      } catch (error) {
        console.error("Error loading templates:", error)
        setIsLoadingTemplates(false)
        toast({
          title: "Error",
          description: "Failed to load email templates. Please try again.",
          variant: "destructive",
        })
      }
    }
    
    loadTemplates()
  }, [user, toast])

  // Load merchant data
  useEffect(() => {
    const loadMerchantData = async () => {
      if (!user?.uid || !merchant?.id) return
      
      try {
        // No need to set loading state here since we're initializing with false
        // Just simulate loading data
        // In a real implementation, you would fetch this data from your Mailchimp service
        
        // For now, we'll just set some dummy data
        setCustomers([])
        setCampaigns([])
      } catch (error) {
        console.error("Error loading merchant data:", error)
        toast({
          title: "Error",
          description: "Failed to load email marketing data. Please try again.",
          variant: "destructive",
        })
      }
    }
    
    loadMerchantData()
  }, [user, merchant, toast])

  // Function to sync customers
  const syncCustomers = async () => {
    if (!merchant?.id) return
    
    try {
      setIsSyncing(true)
      toast({
        title: "Syncing Customers",
        description: "Please wait while we sync your customers...",
      })
      
      // In a real implementation, you would call your syncCustomersToMailchimp function
      // For now, we'll simulate a sync
      setTimeout(() => {
        setIsSyncing(false)
        toast({
          title: "Sync Complete",
          description: "Your customers have been synced successfully.",
          variant: "success",
        })
      }, 2000)
    } catch (error) {
      console.error("Error syncing customers:", error)
      setIsSyncing(false)
      toast({
        title: "Sync Failed",
        description: "Failed to sync customers. Please try again.",
        variant: "destructive",
      })
    }
  }

  // Loading state - only show if explicitly loading
  if (isLoading) {
    return (
      <div className="p-6 flex items-center justify-center h-[70vh]">
        <div className="flex flex-col items-center">
          <Loader2 className="h-8 w-8 text-blue-500 animate-spin mb-4" />
          <p className="text-gray-500">Loading email marketing dashboard...</p>
        </div>
      </div>
    )
  }

  // Main email dashboard
  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Email Marketing</h1>
          <p className="text-gray-500 mt-2">
            Create and manage email campaigns for your customers
          </p>
        </div>
        
        <Button onClick={() => router.push('/email/create')}>
          <Plus className="h-4 w-4 mr-2" />
          Create Campaign
        </Button>
      </div>
      
      <Tabs defaultValue="templates" value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid grid-cols-5 w-full max-w-3xl">
          <TabsTrigger value="campaigns" className="flex items-center gap-2">
            <Mail className="h-4 w-4" />
            <span className="hidden sm:inline">Campaigns</span>
          </TabsTrigger>
          <TabsTrigger value="templates" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            <span className="hidden sm:inline">Templates</span>
          </TabsTrigger>
          <TabsTrigger value="audiences" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            <span className="hidden sm:inline">Audiences</span>
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <BarChart2 className="h-4 w-4" />
            <span className="hidden sm:inline">Reports</span>
          </TabsTrigger>
          <TabsTrigger value="settings" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            <span className="hidden sm:inline">Settings</span>
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="campaigns" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Campaigns</CardTitle>
              <CardDescription>
                Create and manage your email marketing campaigns
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-50 rounded-lg p-8 text-center">
                <Mail className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">No campaigns yet</h3>
                <p className="text-gray-500 mb-6 max-w-md mx-auto">
                  Create your first email campaign to start connecting with your customers
                </p>
                <Button onClick={() => router.push('/email/create')}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create Campaign
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="templates" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Templates</CardTitle>
              <CardDescription>
                Browse and use pre-designed email templates
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isLoadingTemplates ? (
                <div className="flex items-center justify-center p-8">
                  <Loader2 className="h-8 w-8 text-blue-500 animate-spin mb-4" />
                  <p className="text-gray-500 ml-3">Loading templates...</p>
                </div>
              ) : templates.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {templates.map(template => (
                    <div key={template.id} className="border rounded-md overflow-hidden hover:shadow-md transition-shadow">
                      <div className="bg-gray-50 p-3 border-b flex items-center justify-between">
                        <div>
                          <h3 className="font-medium text-sm">{template.name}</h3>
                          <p className="text-xs text-gray-500">{template.category}</p>
                        </div>
                      </div>
                      <div className="p-4 bg-white">
                        <div className="aspect-video bg-gray-100 rounded-md flex flex-col items-center justify-center p-8">
                          <FileText className="h-16 w-16 text-gray-400 mb-2" />
                          <p className="text-sm text-gray-500 text-center">
                            {template.name} template
                          </p>
                        </div>
                      </div>
                      <div className="p-3 border-t bg-white">
                        <Button 
                          variant="outline" 
                          className="w-full text-sm"
                          onClick={() => router.push(`/email/create?template=${template.id}`)}
                        >
                          Use Template
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="bg-gray-50 rounded-lg p-8 text-center">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No templates available</h3>
                  <p className="text-gray-500 mb-6 max-w-md mx-auto">
                    There are currently no email templates available.
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="audiences" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Customer Audience</CardTitle>
                <CardDescription>
                  Manage your customer email list
                </CardDescription>
              </div>
              <Button 
                variant="outline" 
                size="sm" 
                className="gap-1"
                onClick={syncCustomers}
                disabled={isSyncing}
              >
                {isSyncing ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Syncing...
                  </>
                ) : (
                  <>
                    <RefreshCw className="h-4 w-4" />
                    Sync Customers
                  </>
                )}
              </Button>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-50 rounded-lg p-8 text-center">
                <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">Your Customer List</h3>
                <p className="text-gray-500 mb-6 max-w-md mx-auto">
                  Your customers are automatically synced with our email system. Click "Sync Customers" to update the list.
                </p>
                <div className="flex items-center justify-center gap-2">
                  <div className="bg-blue-50 text-blue-600 px-3 py-1 rounded-full text-sm font-medium">
                    0 Active Subscribers
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="reports" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Campaign Reports</CardTitle>
              <CardDescription>
                View performance metrics for your email campaigns
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-50 rounded-lg p-8 text-center">
                <BarChart2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">No reports available</h3>
                <p className="text-gray-500 mb-6 max-w-md mx-auto">
                  Send your first campaign to start collecting performance data
                </p>
                <Button onClick={() => router.push('/email/create')}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create Campaign
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Settings</CardTitle>
              <CardDescription>
                Manage your email marketing settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center p-4 bg-green-50 rounded-lg">
                <CheckCircle2 className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <p className="font-medium">Email Marketing Enabled</p>
                  <p className="text-sm text-gray-500">Your account is ready to send email campaigns</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-lg font-medium">Default Settings</h3>
                <div className="grid gap-2">
                  <Label htmlFor="default-from-name">Default From Name</Label>
                  <Input 
                    id="default-from-name" 
                    placeholder="Your Business Name"
                    defaultValue={merchant?.merchantName || ""}
                  />
                </div>
                
                <div className="grid gap-2">
                  <Label htmlFor="default-from-email">Default From Email</Label>
                  <Input 
                    id="default-from-email" 
                    type="email"
                    placeholder="hello@taployalty.com"
                    defaultValue="hello@taployalty.com"
                    disabled
                  />
                  <p className="text-xs text-muted-foreground">
                    All emails are sent through the TapLoyalty email system
                  </p>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-end">
              <Button>Save Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import { ArrowLeft, Send, Save, Eye, Users, Clock, FileText, Loader2, Upload, X, Mail } from "lucide-react"
import { useAuth } from "@/contexts/auth-context"
import { useMerchant } from "@/hooks/use-merchant"
import { Checkbox } from "@/components/ui/checkbox"
import { EmailTemplatePreview } from "@/components/email-template-preview"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { 
  CustomDialog as Dialog,
  CustomDialogContent as DialogContent,
  CustomDialogDescription as DialogDescription,
  CustomDialogHeader as DialogHeader,
  CustomDialogTitle as DialogTitle
} from "@/components/custom-dialog"
import React from "react"

export default function CreateEmailCampaign() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { toast } = useToast()
  const { user } = useAuth()
  const { merchant } = useMerchant()
  const [isLoading, setIsLoading] = useState(false)
  const [isFetchingTemplates, setIsFetchingTemplates] = useState(true)
  const [templates, setTemplates] = useState([])
  const [showPreview, setShowPreview] = useState(false)
  
  // Form state
  const [campaignName, setCampaignName] = useState("")
  const [subject, setSubject] = useState("")
  const [fromName, setFromName] = useState(merchant?.merchantName || "")
  const [fromEmail] = useState("tom@lidgett.net") // Use a valid email address
  const [template, setTemplate] = useState("")
  const [audience, setAudience] = useState("all")
  const [selectedTemplate, setSelectedTemplate] = useState(null)
  const [emailContent, setEmailContent] = useState("")
  
  // Template-specific customization fields
  const [templateCustomization, setTemplateCustomization] = useState({
    // Newsletter template fields
    newsletterDate: "June 2023",
    eventTitle: "Summer Kickoff Party",
    eventDate: "June 15th",
    eventRsvpDate: "June 10th",
    offerTitle: "Summer Sale",
    offerDescription: "25% off all seasonal items",
    offerSecondary: "Buy one, get one 50% off on selected products",
    storeUpdate1: "We've extended our weekend hours for the summer season!",
    storeUpdate2: "New location opening next month - stay tuned for details.",
    
    // Special offer template fields
    promoTitle: "FLASH SALE",
    promoDiscount: "30% off",
    promoCode: "FLASH30",
    promoExpiry: "June 30, 2023",
    
    // Product announcement template fields
    productName: "The Ultimate Widget Pro",
    productTagline: "Redesigned. Reimagined. Revolutionary.",
    productFeature1: "2x faster performance",
    productFeature2: "Enhanced user interface",
    productFeature3: "Longer battery life",
    productFeature4: "Advanced security features",
    productLaunchDate: "July 1st",
    
    // Welcome template fields
    welcomeDiscount: "10% off",
    welcomeCode: "WELCOME10"
  })
  
  // Update a specific field in the template customization
  const updateTemplateField = (field, value) => {
    setTemplateCustomization(prev => ({
      ...prev,
      [field]: value
    }))
  }
  
  // Get template ID from URL if present
  useEffect(() => {
    const templateId = searchParams.get('template')
    if (templateId) {
      setTemplate(templateId)
    }
  }, [searchParams])
  
  // Fetch templates on load
  useEffect(() => {
    const loadTemplates = async () => {
      if (!user?.uid) return
      
      try {
        setIsFetchingTemplates(true)
        
        // For demo purposes, we'll use sample templates
        setTimeout(() => {
          const sampleTemplates = [
            {
              id: "template-1",
              name: "Welcome Email",
              category: "Onboarding"
            },
            {
              id: "template-2",
              name: "Monthly Newsletter",
              category: "Newsletters"
            },
            {
              id: "template-3",
              name: "Special Offer",
              category: "Promotions"
            },
            {
              id: "template-4",
              name: "Product Announcement",
              category: "Marketing"
            }
          ];
          
          setTemplates(sampleTemplates);
          setIsFetchingTemplates(false);
        }, 1000);
        
      } catch (error) {
        console.error("Error loading templates:", error)
        setIsFetchingTemplates(false)
        toast({
          title: "Error",
          description: "Failed to load email templates. Please try again.",
          variant: "destructive",
        })
      }
    }
    
    loadTemplates()
  }, [user, toast])
  
  // Update selected template when template ID changes
  useEffect(() => {
    if (template && templates.length > 0) {
      const selected = templates.find(t => t.id === template);
      console.log("Selected template:", selected);
      setSelectedTemplate(selected)
    } else {
      setSelectedTemplate(null)
    }
  }, [template, templates])
  
  // Update the renderTemplateCustomizationFields function to include all template types
  const renderTemplateCustomizationFields = () => {
    if (!selectedTemplate) return null;
    
    switch(selectedTemplate.id) {
      case "template-1": // Welcome Email
        return (
          <div className="mt-4 border rounded p-4">
            <h3 className="font-medium mb-3">Welcome Email Customization</h3>
            <div className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="welcome-discount">Welcome Discount</Label>
                <Input 
                  id="welcome-discount" 
                  value={templateCustomization.welcomeDiscount}
                  onChange={(e) => updateTemplateField('welcomeDiscount', e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="welcome-code">Discount Code</Label>
                <Input 
                  id="welcome-code" 
                  value={templateCustomization.welcomeCode}
                  onChange={(e) => updateTemplateField('welcomeCode', e.target.value)}
                />
              </div>
            </div>
          </div>
        );
        
      case "template-2": // Monthly Newsletter
        return (
          <div className="mt-4 border rounded p-4">
            <h3 className="font-medium mb-3">Newsletter Customization</h3>
            <div className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="newsletter-date">Newsletter Date</Label>
                <Input 
                  id="newsletter-date" 
                  value={templateCustomization.newsletterDate}
                  onChange={(e) => updateTemplateField('newsletterDate', e.target.value)}
                />
              </div>
              
              <div className="border-t pt-4 mt-2">
                <h4 className="font-medium mb-2">Events Section</h4>
                <div className="space-y-3">
                  <div className="grid gap-2">
                    <Label htmlFor="event-title">Event Title</Label>
                    <Input 
                      id="event-title" 
                      value={templateCustomization.eventTitle}
                      onChange={(e) => updateTemplateField('eventTitle', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="event-date">Event Date</Label>
                    <Input 
                      id="event-date" 
                      value={templateCustomization.eventDate}
                      onChange={(e) => updateTemplateField('eventDate', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="event-rsvp">RSVP By</Label>
                    <Input 
                      id="event-rsvp" 
                      value={templateCustomization.eventRsvpDate}
                      onChange={(e) => updateTemplateField('eventRsvpDate', e.target.value)}
                    />
                  </div>
                </div>
              </div>
              
              <div className="border-t pt-4 mt-2">
                <h4 className="font-medium mb-2">Offers Section</h4>
                <div className="space-y-3">
                  <div className="grid gap-2">
                    <Label htmlFor="offer-title">Offer Title</Label>
                    <Input 
                      id="offer-title" 
                      value={templateCustomization.offerTitle}
                      onChange={(e) => updateTemplateField('offerTitle', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="offer-desc">Offer Description</Label>
                    <Input 
                      id="offer-desc" 
                      value={templateCustomization.offerDescription}
                      onChange={(e) => updateTemplateField('offerDescription', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="offer-secondary">Secondary Offer</Label>
                    <Input 
                      id="offer-secondary" 
                      value={templateCustomization.offerSecondary}
                      onChange={(e) => updateTemplateField('offerSecondary', e.target.value)}
                    />
                  </div>
                </div>
              </div>
              
              <div className="border-t pt-4 mt-2">
                <h4 className="font-medium mb-2">Store Updates</h4>
                <div className="space-y-3">
                  <div className="grid gap-2">
                    <Label htmlFor="update1">Update 1</Label>
                    <Input 
                      id="update1" 
                      value={templateCustomization.storeUpdate1}
                      onChange={(e) => updateTemplateField('storeUpdate1', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="update2">Update 2</Label>
                    <Input 
                      id="update2" 
                      value={templateCustomization.storeUpdate2}
                      onChange={(e) => updateTemplateField('storeUpdate2', e.target.value)}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
        
      case "template-3": // Special Offer
        return (
          <div className="mt-4 border rounded p-4">
            <h3 className="font-medium mb-3">Special Offer Customization</h3>
            <div className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="promo-title">Promotion Title</Label>
                <Input 
                  id="promo-title" 
                  value={templateCustomization.promoTitle}
                  onChange={(e) => updateTemplateField('promoTitle', e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="promo-discount">Discount Amount</Label>
                <Input 
                  id="promo-discount" 
                  value={templateCustomization.promoDiscount}
                  onChange={(e) => updateTemplateField('promoDiscount', e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="promo-code">Promo Code</Label>
                <Input 
                  id="promo-code" 
                  value={templateCustomization.promoCode}
                  onChange={(e) => updateTemplateField('promoCode', e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="promo-expiry">Expiration Date</Label>
                <Input 
                  id="promo-expiry" 
                  value={templateCustomization.promoExpiry}
                  onChange={(e) => updateTemplateField('promoExpiry', e.target.value)}
                />
              </div>
            </div>
          </div>
        );
        
      case "template-4": // Product Announcement
        return (
          <div className="mt-4 border rounded p-4">
            <h3 className="font-medium mb-3">Product Announcement Customization</h3>
            <div className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="product-name">Product Name</Label>
                <Input 
                  id="product-name" 
                  value={templateCustomization.productName}
                  onChange={(e) => updateTemplateField('productName', e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="product-tagline">Product Tagline</Label>
                <Input 
                  id="product-tagline" 
                  value={templateCustomization.productTagline}
                  onChange={(e) => updateTemplateField('productTagline', e.target.value)}
                />
              </div>
              
              <div className="border-t pt-4 mt-2">
                <h4 className="font-medium mb-2">Product Features</h4>
                <div className="space-y-3">
                  <div className="grid gap-2">
                    <Label htmlFor="product-feature1">Feature 1</Label>
                    <Input 
                      id="product-feature1" 
                      value={templateCustomization.productFeature1}
                      onChange={(e) => updateTemplateField('productFeature1', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="product-feature2">Feature 2</Label>
                    <Input 
                      id="product-feature2" 
                      value={templateCustomization.productFeature2}
                      onChange={(e) => updateTemplateField('productFeature2', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="product-feature3">Feature 3</Label>
                    <Input 
                      id="product-feature3" 
                      value={templateCustomization.productFeature3}
                      onChange={(e) => updateTemplateField('productFeature3', e.target.value)}
                    />
                  </div>
                  
                  <div className="grid gap-2">
                    <Label htmlFor="product-feature4">Feature 4</Label>
                    <Input 
                      id="product-feature4" 
                      value={templateCustomization.productFeature4}
                      onChange={(e) => updateTemplateField('productFeature4', e.target.value)}
                    />
                  </div>
                </div>
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="product-launch">Launch Date</Label>
                <Input 
                  id="product-launch" 
                  value={templateCustomization.productLaunchDate}
                  onChange={(e) => updateTemplateField('productLaunchDate', e.target.value)}
                />
              </div>
            </div>
          </div>
        );
        
      default:
        return null;
    }
  };
  
  // Handle save draft
  const handleSaveDraft = () => {
    toast({
      title: "Campaign Saved",
      description: "Your campaign has been saved as a draft.",
    })
  }
  
  // Add to the component state
  const [audienceTab, setAudienceTab] = useState("segments")
  const [customEmails, setCustomEmails] = useState("")
  const [importedFile, setImportedFile] = useState(null)
  const [quickAddEmail, setQuickAddEmail] = useState("")
  const [emailInputMethod, setEmailInputMethod] = useState("manual")
  
  // Add a function to handle file import
  const handleFileImport = (e) => {
    const file = e.target.files[0]
    if (!file) return
    
    // Only accept CSV or TXT files
    if (file.type !== "text/csv" && file.type !== "text/plain") {
      toast({
        title: "Invalid file type",
        description: "Please upload a CSV or TXT file",
        variant: "destructive",
      })
      return
    }
    
    setImportedFile(file)
    
    // Read the file
    const reader = new FileReader()
    reader.onload = (event) => {
      try {
        const content = event.target.result
        // Simple parsing - assuming one email per line
        const emails = content.toString().split(/[\r\n,]+/).filter(email => 
          email.trim() && email.includes('@')
        )
        
        if (emails.length === 0) {
          toast({
            title: "No valid emails found",
            description: "The file doesn't contain any valid email addresses",
            variant: "destructive",
          })
          setImportedFile(null)
          return
        }
        
        setCustomEmails(emails.join('\n'))
        toast({
          title: "File imported successfully",
          description: `${emails.length} email addresses imported`,
        })
      } catch (error) {
        console.error("Error parsing file:", error)
        toast({
          title: "Error importing file",
          description: "There was a problem reading the file",
          variant: "destructive",
        })
        setImportedFile(null)
      }
    }
    
    reader.readAsText(file)
  }
  
  // Function to clear imported file
  const clearImportedFile = () => {
    setImportedFile(null)
    setCustomEmails("")
  }
  
  // Add this function to handle quick adding of emails
  const handleQuickAddEmail = () => {
    if (!quickAddEmail || !quickAddEmail.includes('@')) return;
    
    // Add the email to the list
    const newEmails = customEmails 
      ? customEmails + '\n' + quickAddEmail 
      : quickAddEmail;
    
    setCustomEmails(newEmails);
    setQuickAddEmail(""); // Clear the input
    
    toast({
      title: "Email added",
      description: `${quickAddEmail} has been added to your recipient list`,
    });
  }
  
  // Add these state variables
  const [showSendConfirmation, setShowSendConfirmation] = useState(false)
  const [showDebugInfo, setShowDebugInfo] = useState(false)
  const [debugLogs, setDebugLogs] = useState([])
  const [sendingStatus, setSendingStatus] = useState({ success: 0, failed: 0, total: 0 })
  const [campaignResult, setCampaignResult] = useState(null);
  
  // Add a ref to track the element that had focus before opening the dialog
  const previousFocusRef = React.useRef<HTMLElement | null>(null);
  
  // Add this function to add debug logs
  const addDebugLog = (message, type = "info") => {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0]
    setDebugLogs(prev => [...prev, { timestamp, message, type }])
  }
  
  // Update the handleSendCampaign function
  const handleSendCampaign = async () => {
    // Reset debug logs
    setDebugLogs([])
    setShowDebugInfo(true)
    addDebugLog("Starting campaign send process...", "info")
    
    if (!campaignName || !subject || !fromName || !selectedTemplate) {
      addDebugLog("Missing required fields", "error")
      toast({
        title: "Missing information",
        description: "Please fill in all required fields",
        variant: "destructive",
      })
      return
    }
    
    // Check if we have recipients
    if (audienceTab === "custom" && !customEmails.trim()) {
      addDebugLog("No recipients specified", "error")
      toast({
        title: "No recipients",
        description: "Please add at least one email address",
        variant: "destructive",
      })
      return
    }
    
    // Show confirmation dialog
    setShowSendConfirmation(true)
  }
  
  // Update the fetch with timeout function to handle network errors better
  const fetchWithTimeout = async (url, options, timeout = 30000) => {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    
    try {
      // Log the request
      console.log(`Fetching ${url} with timeout ${timeout}ms`);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      clearTimeout(id);
      
      // Check if the response is empty
      const text = await response.text();
      console.log(`Received response from ${url}: ${text.substring(0, 100)}...`);
      
      if (!text) {
        throw new Error('Empty response from server');
      }
      
      // Try to parse as JSON
      try {
        return { 
          response, 
          data: JSON.parse(text),
          ok: response.ok
        };
      } catch (e) {
        return { 
          response, 
          text, 
          ok: response.ok,
          parseError: e
        };
      }
    } catch (error) {
      clearTimeout(id);
      console.error(`Fetch error for ${url}:`, error);
      
      if (error.name === 'AbortError') {
        throw new Error(`Request to ${url} timed out after ${timeout}ms`);
      }
      
      // Add more context to the error
      error.message = `Network error when fetching ${url}: ${error.message}`;
      throw error;
    }
  };
  
  // Add this function to check campaign status
  const checkCampaignStatus = async (campaignId) => {
    try {
      addDebugLog(`Checking status of campaign ${campaignId}...`, "info");
      
      const response = await fetch(`/api/email/check-campaign-status?id=${campaignId}`);
      const result = await response.json();
      
      if (result.success) {
        const status = result.campaign.status;
        addDebugLog(`Campaign status: ${status}`, "info");
        
        if (status === 'sent' || status === 'sending') {
          addDebugLog("✓ Campaign is being sent!", "success");
          return true;
        } else {
          addDebugLog(`⚠️ Campaign is not being sent (status: ${status})`, "warning");
          
          // Provide guidance based on status
          if (status === 'save') {
            addDebugLog("The campaign was created but not sent. This could be due to:", "info");
            addDebugLog("1. The audience has no subscribers", "info");
            addDebugLog("2. The campaign failed compliance checks", "info");
            addDebugLog("3. The Mailchimp API call to send the campaign failed", "info");
          } else if (status === 'schedule') {
            addDebugLog("The campaign is scheduled to be sent later", "info");
          } else if (status === 'paused') {
            addDebugLog("The campaign is paused", "info");
          }
          
          return false;
        }
      } else {
        addDebugLog(`Error checking campaign status: ${result.error}`, "error");
        return false;
      }
    } catch (error) {
      addDebugLog(`Error checking campaign status: ${error.message}`, "error");
      return false;
    }
  };
  
  // Add this function to make a direct API call to Mailchimp
  const sendDirectToMailchimp = async (payload) => {
    try {
      addDebugLog("Attempting direct Mailchimp API call...", "info");
      
      // Get the API key and server prefix from environment variables
      const apiKey = process.env.NEXT_PUBLIC_MAILCHIMP_API_KEY;
      const serverPrefix = process.env.NEXT_PUBLIC_MAILCHIMP_SERVER_PREFIX;
      
      if (!apiKey || !serverPrefix) {
        addDebugLog("Missing Mailchimp credentials in client environment", "error");
        return false;
      }
      
      // Create a campaign directly
      const createResponse = await fetch(`https://${serverPrefix}.api.mailchimp.com/3.0/campaigns`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Basic ${btoa(`anystring:${apiKey}`)}`
        },
        body: JSON.stringify({
          type: "regular",
          recipients: {
            list_id: process.env.NEXT_PUBLIC_MAILCHIMP_AUDIENCE_ID
          },
          settings: {
            subject_line: payload.subject,
            title: payload.campaignName,
            from_name: payload.fromName,
            reply_to: payload.fromEmail
          }
        })
      });
      
      const createResult = await createResponse.json();
      
      if (!createResponse.ok) {
        addDebugLog(`Error creating campaign directly: ${createResult.detail || 'Unknown error'}`, "error");
        return false;
      }
      
      const campaignId = createResult.id;
      addDebugLog(`Campaign created directly with ID: ${campaignId}`, "success");
      
      // Set the campaign content
      const contentResponse = await fetch(`https://${serverPrefix}.api.mailchimp.com/3.0/campaigns/${campaignId}/content`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Basic ${btoa(`anystring:${apiKey}`)}`
        },
        body: JSON.stringify({
          html: payload.emailContent
        })
      });
      
      const contentResult = await contentResponse.json();
      
      if (!contentResponse.ok) {
        addDebugLog(`Error setting campaign content: ${contentResult.detail || 'Unknown error'}`, "error");
        return false;
      }
      
      addDebugLog("Campaign content set successfully", "success");
      
      // Send the campaign
      const sendResponse = await fetch(`https://${serverPrefix}.api.mailchimp.com/3.0/campaigns/${campaignId}/actions/send`, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${btoa(`anystring:${apiKey}`)}`
        }
      });
      
      if (!sendResponse.ok) {
        const sendError = await sendResponse.json();
        addDebugLog(`Error sending campaign: ${sendError.detail || 'Unknown error'}`, "error");
        return false;
      }
      
      addDebugLog("Campaign sent successfully via direct API call", "success");
      return true;
    } catch (error) {
      addDebugLog(`Error in direct Mailchimp API call: ${error.message}`, "error");
      return false;
    }
  };
  
  // Add this function to check audience size before sending
  const checkAudienceBeforeSending = async () => {
    try {
      addDebugLog("Checking audience size before sending...", "info");
      
      const response = await fetch('/api/email/check-audience-size');
      const result = await response.json();
      
      if (result.success) {
        addDebugLog(`✓ Audience has ${result.audience.memberCount} subscribers`, "success");
        return true;
      } else {
        addDebugLog(`✗ ${result.error}`, "error");
        
        if (result.details) {
          addDebugLog(`Details: ${result.details}`, "error");
        }
        
        if (result.solution) {
          addDebugLog(`Solution: ${result.solution}`, "info");
        }
        
        toast({
          title: "Error",
          description: result.error,
          variant: "destructive",
        });
        
        return false;
      }
    } catch (error) {
      addDebugLog(`✗ Error checking audience: ${error.message}`, "error");
      return false;
    }
  };
  
  // Update the confirmSendCampaign function to check audience size first
  const confirmSendCampaign = async () => {
    try {
      setIsLoading(true);
      addDebugLog("Sending campaign...", "info");
      setShowDebugInfo(true);
      
      // Check audience size first
      const audienceOk = await checkAudienceBeforeSending();
      if (!audienceOk) {
        addDebugLog("Cannot send campaign: audience check failed", "error");
        setIsLoading(false);
        return;
      }
      
      // Prepare the request payload
      const payload = {
        campaignName,
        subject,
        fromName,
        fromEmail,
        templateId: template,
        emailContent,
        customization: templateCustomization,
        audienceType: audienceTab,
        customEmails: audienceTab === "custom" ? customEmails.split('\n').filter(email => email.trim()) : []
      };
      
      addDebugLog(`Sending request to API...`, "info");
      addDebugLog(`Payload: ${JSON.stringify(payload, null, 2)}`, "data");
      
      try {
        const result = await fetchWithTimeout('/api/email/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        }, 60000); // 60 second timeout
        
        if (result.parseError) {
          addDebugLog(`Error parsing JSON response: ${result.parseError.message}`, "error");
          addDebugLog(`Raw API response: ${result.text}`, "data");
          throw new Error(`Invalid JSON response from server: ${result.text.substring(0, 100)}...`);
        }
        
        if (!result.ok) {
          // Handle error response
          addDebugLog(`API Error: ${result.data.error}`, "error");
          
          // Store the result
          setCampaignResult(result.data);
          
          // Add more detailed debugging information
          if (result.data.details) {
            addDebugLog(`Details: ${result.data.details}`, "error");
          }
          
          // Show solution if available
          if (result.data.solution) {
            addDebugLog(`Suggested solution: ${result.data.solution}`, "info");
          }
          
          // If we have a campaign ID, it means the campaign was created but not sent
          if (result.data.campaignId) {
            addDebugLog(`Campaign ID: ${result.data.campaignId} (created but not sent)`, "info");
            
            if (result.data.campaignStatus) {
              addDebugLog(`Campaign status: ${result.data.campaignStatus}`, "info");
            }
            
            addDebugLog("You can check this campaign in your Mailchimp dashboard", "info");
            
            // Add a link to view the campaign in Mailchimp
            const serverPrefix = result.data.serverPrefix || process.env.MAILCHIMP_SERVER_PREFIX;
            if (serverPrefix) {
              const mailchimpUrl = `https://${serverPrefix}.admin.mailchimp.com/campaigns/edit?id=${result.data.campaignId.replace('campaign_', '')}`;
              addDebugLog(`Mailchimp URL: ${mailchimpUrl}`, "info");
            }
          }
          
          // If we have checklist items, show them
          if (result.data.checklistItems) {
            addDebugLog("Campaign checklist issues:", "error");
            result.data.checklistItems.forEach(item => {
              addDebugLog(`- ${item.type}: ${item.details}`, item.type === "error" ? "error" : "info");
            });
          }
          
          // Add common reasons for this error
          addDebugLog("\nCommon reasons for 'Campaign was created but could not be sent':", "info");
          addDebugLog("1. No subscribers in your audience", "info");
          addDebugLog("2. Missing physical address (required by anti-spam laws)", "info");
          addDebugLog("3. Missing unsubscribe link (required by anti-spam laws)", "info");
          addDebugLog("4. Campaign content doesn't meet Mailchimp requirements", "info");
          addDebugLog("5. Your Mailchimp account may have billing or compliance issues", "info");
          
          throw new Error(result.data.error || "Failed to send campaign");
        }
        
        // Handle success response
        addDebugLog(`Campaign created successfully! ID: ${result.data.campaignId}`, "success");
        
        // Store the result
        setCampaignResult(result.data);
        
        if (result.data.simulated) {
          addDebugLog("Note: This was a simulated send (not a real email)", "info");
        } else {
          // Check if the campaign was actually sent
          setTimeout(async () => {
            const wasSent = await checkCampaignStatus(result.data.campaignId);
            
            if (!wasSent) {
              addDebugLog("Attempting to view campaign in Mailchimp...", "info");
              const serverPrefix = process.env.MAILCHIMP_SERVER_PREFIX;
              if (serverPrefix) {
                const mailchimpUrl = `https://${serverPrefix}.admin.mailchimp.com/campaigns/edit?id=${result.data.campaignId.replace('campaign_', '')}`;
                addDebugLog(`Mailchimp URL: ${mailchimpUrl}`, "info");
                addDebugLog("You may need to manually send the campaign from the Mailchimp dashboard", "info");
              }
            }
          }, 3000); // Wait 3 seconds before checking status
        }
        
        setSendingStatus(prev => ({
          ...prev,
          success: prev.success + 1,
          total: prev.total + 1
        }));
        
        toast({
          title: "Success",
          description: "Campaign sent successfully!",
          variant: "default",
        });
        
      } catch (fetchError) {
        addDebugLog(`Network error: ${fetchError.message}`, "error");
        addDebugLog("Attempting fallback method...", "info");
        
        // Try the direct API call as a fallback
        const fallbackSuccess = await sendDirectToMailchimp(payload);
        
        if (fallbackSuccess) {
          addDebugLog("Fallback method succeeded!", "success");
          toast({
            title: "Success",
            description: "Campaign sent successfully via fallback method",
            variant: "default",
          });
        } else {
          addDebugLog("Fallback method failed", "error");
          toast({
            title: "Error",
            description: "Failed to send campaign via all methods",
            variant: "destructive",
          });
        }
      }
      
    } catch (error) {
      console.error("Error sending campaign:", error);
    } finally {
      setIsLoading(false);
      setShowSendConfirmation(false);
    }
  };
  
  // Add this function to your component
  const checkMailchimpConnection = async () => {
    addDebugLog("Testing Mailchimp connection...", "info");
    setShowDebugInfo(true);
    
    try {
      // First check environment variables
      const envResponse = await fetch('/api/email/debug-env');
      const envData = await envResponse.json();
      
      addDebugLog("Environment check:", "info");
      addDebugLog(JSON.stringify(envData.environment, null, 2), "data");
      
      // Then test the actual Mailchimp connection
      const response = await fetch('/api/email/test-mailchimp');
      const result = await response.json();
      
      if (result.success) {
        addDebugLog("✓ Mailchimp connection successful!", "success");
        addDebugLog(`Account: ${result.account.name} (${result.account.email})`, "info");
        addDebugLog(`Campaigns: ${result.campaignCount}`, "info");
        addDebugLog(`Audiences: ${result.audienceCount}`, "info");
        
        if (result.audiences && result.audiences.length > 0) {
          addDebugLog("Available audiences:", "info");
          result.audiences.forEach(audience => {
            addDebugLog(`- ${audience.name} (ID: ${audience.id}) - ${audience.memberCount} members`, "info");
          });
        }
      } else {
        addDebugLog("✗ Mailchimp connection failed", "error");
        addDebugLog(`Error: ${result.error}`, "error");
        if (result.details) {
          addDebugLog(`Details: ${result.details}`, "error");
        }
      }
    } catch (error) {
      addDebugLog("✗ Error testing Mailchimp connection", "error");
      addDebugLog(`Error: ${error.message}`, "error");
    }
  };
  
  // Add this function to show common solutions
  const showCommonSolutions = () => {
    addDebugLog("Common Mailchimp Connection Issues:", "info");
    addDebugLog("1. Server prefix format: Should be just the prefix (e.g., 'us19'), not the full domain", "info");
    addDebugLog("2. API key: Make sure it's a valid API key with proper permissions", "info");
    addDebugLog("3. Audience ID: Verify this matches an actual audience in your Mailchimp account", "info");
    addDebugLog("4. Environment variables: Restart your Next.js server after changing .env.local", "info");
    addDebugLog("5. Simulation mode: Set SIMULATE_MAILCHIMP=false to use real Mailchimp API", "info");
    
    addDebugLog("\nTo find your server prefix:", "info");
    addDebugLog("- Look at your Mailchimp URL, e.g., https://us19.admin.mailchimp.com", "info");
    addDebugLog("- The prefix is the part between 'https://' and '.admin.mailchimp.com' (in this example, 'us19')", "info");
    
    addDebugLog("\nTo find your Audience ID:", "info");
    addDebugLog("- Go to Audience → Settings → Audience name and defaults", "info");
    addDebugLog("- Look for 'Audience ID' near the top of the page", "info");
  };
  
  // Add this function to check for common Mailchimp issues
  const checkCommonMailchimpIssues = async () => {
    addDebugLog("Checking for common Mailchimp issues...", "info");
    setShowDebugInfo(true);
    
    try {
      // First check environment variables
      const envResponse = await fetch('/api/email/debug-env');
      const envData = await envResponse.json();
      
      if (!envData.environment.HAS_MAILCHIMP_API_KEY || !envData.environment.MAILCHIMP_SERVER_PREFIX) {
        addDebugLog("✗ Missing Mailchimp credentials", "error");
        return;
      }
      
      // Then test the Mailchimp connection
      const response = await fetch('/api/email/test-mailchimp');
      const result = await response.json();
      
      if (!result.success) {
        addDebugLog("✗ Mailchimp connection failed", "error");
        return;
      }
      
      // Check if there are any audiences
      if (result.audienceCount === 0) {
        addDebugLog("✗ No audiences found in your Mailchimp account", "error");
        addDebugLog("Solution: Create an audience in Mailchimp first", "info");
        return;
      }
      
      // Check if the configured audience exists and has subscribers
      const configuredAudienceId = envData.environment.MAILCHIMP_AUDIENCE_ID;
      const audience = result.audiences.find(a => a.id === configuredAudienceId);
      
      if (!audience) {
        addDebugLog(`✗ Configured audience ID (${configuredAudienceId}) not found`, "error");
        addDebugLog("Solution: Update your MAILCHIMP_AUDIENCE_ID in .env.local", "info");
        return;
      }
      
      if (audience.memberCount === 0) {
        addDebugLog("✗ Your audience has no subscribers", "error");
        addDebugLog("Solution: Add at least one subscriber to your audience", "info");
        return;
      }
      
      // All checks passed
      addDebugLog("✓ All basic Mailchimp checks passed!", "success");
      addDebugLog("If you're still having issues sending campaigns, check the Mailchimp dashboard for more details", "info");
      
    } catch (error) {
      addDebugLog("✗ Error checking Mailchimp issues", "error");
      addDebugLog(`Error: ${error.message}`, "error");
    }
  };
  
  // Add this function to check the Mailchimp audience
  const checkMailchimpAudience = async () => {
    addDebugLog("Checking Mailchimp audience...", "info");
    setShowDebugInfo(true);
    
    try {
      const response = await fetch('/api/email/check-audience');
      const result = await response.json();
      
      if (result.success) {
        addDebugLog(`Audience: ${result.audience.name} (ID: ${result.audience.id})`, "info");
        addDebugLog(`Member count: ${result.audience.memberCount}`, "info");
        
        if (result.audience.memberCount === 0) {
          addDebugLog("⚠️ Your audience has no subscribers!", "error");
          addDebugLog("This is likely why your campaign cannot be sent.", "error");
          addDebugLog("Solution: Add at least one subscriber to your audience in Mailchimp", "info");
        } else {
          addDebugLog("✓ Your audience has subscribers", "success");
          
          if (result.sampleMembers && result.sampleMembers.length > 0) {
            addDebugLog("Sample subscribers:", "info");
            result.sampleMembers.forEach(member => {
              addDebugLog(`- ${member.email} (${member.status})`, "info");
            });
          }
        }
      } else {
        addDebugLog("✗ Failed to check audience", "error");
        addDebugLog(`Error: ${result.error}`, "error");
        if (result.details) {
          addDebugLog(`Details: ${result.details}`, "error");
        }
      }
    } catch (error) {
      addDebugLog("✗ Error checking audience", "error");
      addDebugLog(`Error: ${error.message}`, "error");
    }
  };
  
  // Add this function to add a test subscriber
  const addTestSubscriber = async () => {
    addDebugLog("Adding test subscriber to Mailchimp audience...", "info");
    setShowDebugInfo(true);
    
    try {
      const response = await fetch('/api/email/ensure-test-subscriber');
      const result = await response.json();
      
      if (result.success) {
        addDebugLog("✓ Test subscriber added successfully!", "success");
        addDebugLog(`Email: ${result.subscriber.email}`, "info");
        addDebugLog(`Status: ${result.subscriber.status}`, "info");
        addDebugLog("You should now be able to send campaigns to this audience", "info");
      } else {
        addDebugLog("✗ Failed to add test subscriber", "error");
        addDebugLog(`Error: ${result.error}`, "error");
        if (result.details) {
          addDebugLog(`Details: ${result.details}`, "error");
        }
      }
    } catch (error) {
      addDebugLog("✗ Error adding test subscriber", "error");
      addDebugLog(`Error: ${error.message}`, "error");
    }
  };
  
  // Update this function to try sending via direct API call
  const trySendDirectly = async (campaignId) => {
    try {
      addDebugLog(`Attempting to send campaign ${campaignId} directly...`, "info");
      
      // Show a loading indicator
      setIsLoading(true);
      
      try {
        // Use the new endpoint
        const response = await fetch('/api/email/direct-send-v2', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ campaignId }),
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          addDebugLog(`API error (${response.status}): ${errorText}`, "error");
          throw new Error(`API returned status ${response.status}`);
        }
        
        const responseText = await response.text();
        addDebugLog(`Raw API response: ${responseText}`, "data");
        
        let result;
        try {
          result = JSON.parse(responseText);
        } catch (parseError) {
          addDebugLog(`Error parsing JSON response: ${parseError.message}`, "error");
          throw new Error(`Invalid JSON response from server: ${responseText.substring(0, 100)}...`);
        }
        
        if (result.success) {
          addDebugLog("✓ Direct send request successful!", "success");
          addDebugLog(`Campaign status: ${result.status}`, "info");
          
          if (result.status === 'sending' || result.status === 'sent') {
            addDebugLog("✓ Campaign is being sent!", "success");
            
            toast({
              title: "Success",
              description: "Campaign is being sent!",
              variant: "default",
            });
          } else {
            addDebugLog(`⚠️ Campaign status is ${result.status}, which may indicate it's not being sent yet`, "warning");
            addDebugLog("Check campaign status in a few moments...", "info");
            
            // Check status after a delay
            setTimeout(() => checkCampaignStatus(campaignId), 5000);
          }
        } else {
          addDebugLog(`✗ Direct send failed: ${result.error}`, "error");
          
          if (result.details) {
            addDebugLog(`Details: ${result.details}`, "error");
          }
          
          if (result.checklistItems) {
            addDebugLog("Campaign checklist issues:", "error");
            result.checklistItems.forEach(item => {
              addDebugLog(`- ${item.type}: ${item.details}`, item.type === "error" ? "error" : "info");
            });
          }
          
          toast({
            title: "Error",
            description: result.error || "Failed to send campaign",
            variant: "destructive",
          });
        }
      } catch (fetchError) {
        addDebugLog(`✗ Fetch error: ${fetchError.message}`, "error");
        
        // Try using the Mailchimp API directly
        addDebugLog("Attempting to use Mailchimp API directly...", "info");
        
        // This would require exposing your API key to the client, which is not recommended
        // Instead, suggest using the manual send method
        addDebugLog("⚠️ Direct API access not available in the browser", "warning");
        addDebugLog("Please try the 'Manual Send' button instead", "info");
        
        toast({
          title: "Error",
          description: "API call failed. Try using Manual Send instead.",
          variant: "destructive",
        });
      }
    } catch (error) {
      addDebugLog(`✗ Error in direct send: ${error.message}`, "error");
      
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Add this function to test a simple API call
  const testSimpleApi = async () => {
    try {
      addDebugLog("Testing simple API...", "info");
      setShowDebugInfo(true);
      
      const payload = {
        campaignName: "Test Campaign",
        subject: "Test Subject",
        fromEmail: "test@example.com"
      };
      
      const response = await fetch('/api/email/simple-send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      
      const text = await response.text();
      addDebugLog(`Raw API response: ${text}`, "data");
      
      try {
        const result = JSON.parse(text);
        addDebugLog(`Simple API test ${result.success ? 'succeeded' : 'failed'}`, result.success ? "success" : "error");
        
        if (result.message) {
          addDebugLog(`Message: ${result.message}`, "info");
        }
        
        if (!result.success && result.error) {
          addDebugLog(`Error: ${result.error}`, "error");
        }
      } catch (parseError) {
        addDebugLog(`Error parsing response: ${parseError.message}`, "error");
      }
    } catch (error) {
      addDebugLog(`Error testing simple API: ${error.message}`, "error");
    }
  };
  
  // Add this function to manually create and send a campaign
  const manualSendCampaign = async () => {
    try {
      addDebugLog("Manually creating and sending campaign...", "info");
      setShowDebugInfo(true);
      setIsLoading(true);
      
      // Prepare the request payload
      const payload = {
        campaignName,
        subject,
        fromName,
        fromEmail,
        emailContent: `
          <h1>${subject}</h1>
          <div>${emailContent}</div>
        `
      };
      
      addDebugLog(`Sending request to manual-send API...`, "info");
      
      const response = await fetch('/api/email/manual-send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      
      const responseText = await response.text();
      addDebugLog(`Raw API response: ${responseText}`, "data");
      
      let result;
      try {
        result = JSON.parse(responseText);
      } catch (parseError) {
        addDebugLog(`Error parsing JSON response: ${parseError.message}`, "error");
        throw new Error(`Invalid JSON response from server: ${responseText.substring(0, 100)}...`);
      }
      
      if (result.success) {
        addDebugLog(`✓ Campaign created and sent with ID: ${result.campaignId}`, "success");
        addDebugLog(`Campaign status: ${result.status}`, "info");
        
        setCampaignResult(result);
        
        toast({
          title: "Success",
          description: "Campaign created and sent successfully!",
          variant: "default",
        });
        
        // Check status after a delay
        setTimeout(() => checkCampaignStatus(result.campaignId), 5000);
      } else {
        addDebugLog(`✗ Manual send failed: ${result.error}`, "error");
        
        if (result.details) {
          addDebugLog(`Details: ${result.details}`, "error");
        }
        
        if (result.checklistItems) {
          addDebugLog("Campaign checklist issues:", "error");
          result.checklistItems.forEach(item => {
            addDebugLog(`- ${item.type}: ${item.details}`, item.type === "error" ? "error" : "info");
          });
        }
        
        toast({
          title: "Error",
          description: result.error || "Failed to send campaign",
          variant: "destructive",
        });
      }
    } catch (error) {
      addDebugLog(`✗ Error in manual send: ${error.message}`, "error");
      
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex items-center mb-6">
        <Button 
          variant="ghost" 
          className="gap-1"
          onClick={() => router.push('/email')}
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Email
        </Button>
        <h1 className="text-2xl font-bold ml-4">Create Email Campaign</h1>
      </div>
      <p className="text-gray-500 mb-8">Design and send an email campaign to your customers</p>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Campaign Details</CardTitle>
              <CardDescription>
                Basic information about your email campaign
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="campaign-name">Campaign Name</Label>
                <Input 
                  id="campaign-name" 
                  placeholder="Summer Sale Announcement"
                  value={campaignName}
                  onChange={(e) => setCampaignName(e.target.value)}
                />
                <p className="text-xs text-gray-500">
                  For your reference only, recipients won't see this
                </p>
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="subject">Email Subject</Label>
                <Input 
                  id="subject" 
                  placeholder="Don't Miss Our Summer Sale!"
                  value={subject}
                  onChange={(e) => setSubject(e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="from-name">From Name</Label>
                <Input 
                  id="from-name" 
                  placeholder="Your Business Name"
                  value={fromName}
                  onChange={(e) => setFromName(e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="from-email">From Email</Label>
                <Input 
                  id="from-email" 
                  type="email"
                  value={fromEmail}
                  disabled
                />
                <p className="text-xs text-gray-500">
                  All emails are sent through the TapLoyalty email system
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Email Content</CardTitle>
              <CardDescription>
                Choose a template and customize your email content
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isFetchingTemplates ? (
                <div className="flex items-center justify-center p-8">
                  <Loader2 className="h-8 w-8 text-blue-500 animate-spin" />
                  <p className="text-gray-500 ml-3">Loading templates...</p>
                </div>
              ) : (
                <>
                  <div className="grid gap-2 mb-4">
                    <Label htmlFor="email-template">Email Template</Label>
                    <Select value={template} onValueChange={setTemplate}>
                      <SelectTrigger id="email-template">
                        <SelectValue placeholder="Select a template" />
                      </SelectTrigger>
                      <SelectContent>
                        {templates.map((t) => (
                          <SelectItem key={t.id} value={t.id}>
                            {t.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {selectedTemplate ? (
                    <>
                      <div className="border rounded-md overflow-hidden mb-4">
                        <div className="bg-gray-50 p-3 border-b flex items-center justify-between">
                          <div>
                            <h3 className="font-medium text-sm">{selectedTemplate.name}</h3>
                            <p className="text-xs text-gray-500">{selectedTemplate.category}</p>
                          </div>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => setShowPreview(true)}
                          >
                            <Eye className="h-4 w-4 mr-2" />
                            Preview
                          </Button>
                        </div>
                        <div className="p-4 bg-white">
                          <div className="aspect-video bg-gray-100 rounded-md flex flex-col items-center justify-center p-8">
                            <FileText className="h-16 w-16 text-gray-400 mb-2" />
                            <p className="text-sm text-gray-500 text-center">
                              {selectedTemplate.name} template
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Simple template customization fields */}
                      {renderTemplateCustomizationFields()}
                      
                      <div className="space-y-2 mt-4">
                        <Label htmlFor="email-content">Customize Email Content</Label>
                        <Textarea 
                          id="email-content"
                          placeholder="Add your custom message here..."
                          className="min-h-[200px]"
                          value={emailContent}
                          onChange={(e) => setEmailContent(e.target.value)}
                        />
                        <p className="text-xs text-gray-500">
                          This content will be added to your selected template
                        </p>
                      </div>
                    </>
                  ) : (
                    <div className="bg-gray-50 rounded-lg p-8 text-center">
                      <p className="text-gray-500 mb-4">
                        Select a template to customize your email content
                      </p>
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>
        </div>
        
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Audience</CardTitle>
              <CardDescription>
                Choose who will receive this campaign
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Tabs defaultValue="segments" value={audienceTab} onValueChange={setAudienceTab}>
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="segments">Customer Segments</TabsTrigger>
                  <TabsTrigger value="custom">Custom Email List</TabsTrigger>
                </TabsList>
                
                <TabsContent value="segments" className="space-y-4 pt-2">
                  <div className="grid gap-2">
                    <Label htmlFor="audience">Select Audience</Label>
                    <Select value={audience} onValueChange={setAudience}>
                      <SelectTrigger id="audience">
                        <SelectValue placeholder="Select an audience" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Customers</SelectItem>
                        <SelectItem value="active">Active Customers</SelectItem>
                        <SelectItem value="new">New Customers (Last 30 Days)</SelectItem>
                        <SelectItem value="inactive">Inactive Customers (90+ Days)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="flex items-center p-3 bg-blue-50 rounded-lg">
                    <Users className="h-5 w-5 text-blue-500 mr-3 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium">Estimated Recipients</p>
                      <p className="text-sm text-gray-500">
                        {audience === 'all' ? '25' : 
                         audience === 'active' ? '18' : 
                         audience === 'new' ? '7' : '5'} customers
                      </p>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="custom" className="space-y-4 pt-2">
                  <div className="grid gap-2">
                    <Label htmlFor="custom-emails">Custom Email Recipients</Label>
                    
                    {/* Input method tabs */}
                    <Tabs defaultValue="manual" className="w-full">
                      <TabsList className="grid w-full grid-cols-2 mb-4">
                        <TabsTrigger value="manual">Enter Manually</TabsTrigger>
                        <TabsTrigger value="import">Import File</TabsTrigger>
                      </TabsList>
                      
                      {/* Manual entry tab */}
                      <TabsContent value="manual" className="space-y-4">
                        <div className="grid gap-2">
                          <Label htmlFor="manual-emails">Enter Email Addresses</Label>
                          <Textarea
                            id="manual-emails"
                            placeholder="Enter email addresses, one per line"
                            className="min-h-[150px]"
                            value={customEmails}
                            onChange={(e) => setCustomEmails(e.target.value)}
                          />
                          <p className="text-xs text-gray-500">
                            {customEmails.split('\n').filter(email => email.trim()).length} email addresses
                          </p>
                          <div className="text-xs text-gray-500">
                            <p>Format examples:</p>
                            <p>john@example.com</p>
                            <p>jane@example.com</p>
                          </div>
                        </div>
                      </TabsContent>
                      
                      {/* File import tab */}
                      <TabsContent value="import" className="space-y-4">
                        <div className="flex flex-col gap-4">
                          {!importedFile ? (
                            <div className="border-2 border-dashed rounded-md p-6 text-center">
                              <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                              <p className="text-sm text-gray-500 mb-2">
                                Upload a CSV or TXT file with email addresses
                              </p>
                              <p className="text-xs text-gray-400 mb-4">
                                One email per line or comma-separated
                              </p>
                              <div>
                                <label htmlFor="file-upload" className="cursor-pointer">
                                  <div className="bg-primary text-primary-foreground hover:bg-primary/90 inline-flex h-9 items-center justify-center rounded-md px-4 py-2 text-sm font-medium">
                                    Choose File
                                  </div>
                                  <input
                                    id="file-upload"
                                    type="file"
                                    accept=".csv,.txt"
                                    className="sr-only"
                                    onChange={handleFileImport}
                                  />
                                </label>
                              </div>
                            </div>
                          ) : (
                            <div className="border rounded-md p-4">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center">
                                  <FileText className="h-5 w-5 text-blue-500 mr-2" />
                                  <span className="text-sm font-medium">{importedFile.name}</span>
                                </div>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  onClick={clearImportedFile}
                                  className="h-8 w-8 p-0"
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                              <Textarea
                                id="imported-emails"
                                placeholder="Email addresses from imported file"
                                className="min-h-[150px]"
                                value={customEmails}
                                onChange={(e) => setCustomEmails(e.target.value)}
                              />
                              <p className="text-xs text-gray-500 mt-2">
                                {customEmails.split('\n').filter(email => email.trim()).length} email addresses
                              </p>
                            </div>
                          )}
                        </div>
                      </TabsContent>
                    </Tabs>
                  </div>
                  
                  {/* Email count indicator */}
                  <div className="flex items-center p-3 bg-blue-50 rounded-lg">
                    <Mail className="h-5 w-5 text-blue-500 mr-3 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium">Custom Recipients</p>
                      <p className="text-sm text-gray-500">
                        {customEmails ? 
                          `${customEmails.split('\n').filter(email => email.trim()).length} custom email addresses` : 
                          'No custom emails added yet'}
                      </p>
                    </div>
                  </div>
                  
                  {/* Quick add single email */}
                  <div className="border-t pt-4">
                    <Label htmlFor="quick-add-email" className="mb-2 block">Quick Add Email</Label>
                    <div className="flex gap-2">
                      <Input 
                        id="quick-add-email" 
                        type="email" 
                        placeholder="email@example.com" 
                        className="flex-1"
                        value={quickAddEmail}
                        onChange={(e) => setQuickAddEmail(e.target.value)}
                      />
                      <Button 
                        type="button" 
                        onClick={handleQuickAddEmail}
                        disabled={!quickAddEmail || !quickAddEmail.includes('@')}
                      >
                        Add
                      </Button>
                    </div>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Scheduling</CardTitle>
              <CardDescription>
                Choose when to send your campaign
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <Checkbox id="send-now" checked={true} />
                <Label htmlFor="send-now" className="text-sm font-medium">
                  Send immediately
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox id="send-later" checked={false} />
                <Label htmlFor="send-later" className="text-sm font-medium">
                  Schedule for later
                </Label>
              </div>
              
              <div className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <Clock className="h-5 w-5 text-gray-500" />
                <div className="flex-1">
                  <p className="text-sm font-medium">Send immediately</p>
                  <p className="text-sm text-gray-500">Your campaign will be sent as soon as you click "Send"</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Campaign Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button 
                variant="outline" 
                className="w-full justify-start gap-2"
                onClick={handleSaveDraft}
              >
                <Save className="h-4 w-4" />
                Save as Draft
              </Button>
              
              <Button 
                id="send-campaign-btn"
                className="w-full justify-start gap-2"
                onClick={handleSendCampaign}
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Sending...
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4" />
                    Send Campaign
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Template Preview Modal */}
      <EmailTemplatePreview 
        isOpen={showPreview} 
        onClose={() => setShowPreview(false)} 
        template={selectedTemplate}
        campaignData={{
          subject,
          fromName,
          fromEmail,
          content: emailContent,
          customization: templateCustomization
        }}
      />
      
      {/* Send Confirmation Dialog */}
      <AlertDialog open={showSendConfirmation} onOpenChange={setShowSendConfirmation}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Send Campaign</AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div>
                Are you sure you want to send this campaign? This action cannot be undone.
                
                <div className="mt-4 p-3 bg-gray-50 rounded-md">
                  <div className="font-medium">Campaign Details:</div>
                  <ul className="text-sm mt-2 space-y-1">
                    <li><span className="font-medium">Name:</span> {campaignName}</li>
                    <li><span className="font-medium">Subject:</span> {subject}</li>
                    <li><span className="font-medium">From:</span> {fromName} &lt;{fromEmail}&gt;</li>
                    <li><span className="font-medium">Template:</span> {selectedTemplate?.name}</li>
                    <li>
                      <span className="font-medium">Recipients:</span> {audienceTab === "segments" 
                        ? `${audience === 'all' ? '25' : audience === 'active' ? '18' : audience === 'new' ? '7' : '5'} customers` 
                        : `${customEmails.split('\n').filter(email => email.trim()).length} custom email addresses`}
                    </li>
                  </ul>
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={confirmSendCampaign}>
              Send Campaign
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      
      {/* Debug Panel */}
      <Dialog 
        open={showDebugInfo} 
        onOpenChange={(open) => {
          if (open) {
            // Store the currently focused element before opening the dialog
            previousFocusRef.current = document.activeElement as HTMLElement;
          } else {
            // Restore focus to the previously focused element when closing
            setTimeout(() => {
              if (previousFocusRef.current) {
                previousFocusRef.current.focus();
              } else {
                document.getElementById('send-campaign-btn')?.focus();
              }
            }, 100);
          }
          setShowDebugInfo(open);
        }}
      >
        <DialogContent 
          className="max-w-4xl max-h-[90vh] overflow-y-auto"
          aria-hidden={undefined}
          inert={undefined}
        >
          <DialogHeader>
            <DialogTitle>Email Campaign Debug Information</DialogTitle>
            <DialogDescription>
              Detailed information about the email sending process
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex justify-between items-center mb-4">
            <div className="flex gap-2">
              <Badge variant="outline" className="bg-blue-50">
                Total: {sendingStatus.total}
              </Badge>
              <Badge variant="outline" className="bg-green-50 text-green-700">
                Success: {sendingStatus.success}
              </Badge>
              <Badge variant="outline" className="bg-red-50 text-red-700">
                Failed: {sendingStatus.failed}
              </Badge>
            </div>
            
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setDebugLogs([])}
              disabled={debugLogs.length === 0}
            >
              Clear Logs
            </Button>
          </div>
          
          <ScrollArea className="h-[400px] border rounded-md p-4 bg-black text-white font-mono text-sm">
            {debugLogs.length === 0 ? (
              <div className="text-gray-400 text-center py-8">No logs yet</div>
            ) : (
              <div className="space-y-1">
                {debugLogs.map((log, index) => (
                  <div 
                    key={index} 
                    className={`
                      ${log.type === 'error' ? 'text-red-400' : ''}
                      ${log.type === 'success' ? 'text-green-400' : ''}
                      ${log.type === 'info' ? 'text-blue-400' : ''}
                      ${log.type === 'data' ? 'text-yellow-400 whitespace-pre-wrap' : ''}
                    `}
                  >
                    <span className="text-gray-500">[{log.timestamp}]</span> {log.message}
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>
          
          <div className="flex justify-end mt-4">
            <Button variant="outline" onClick={() => setShowDebugInfo(false)}>
              Close
            </Button>
            {!isLoading && sendingStatus.total > 0 && (
              <Button 
                variant="default" 
                className="ml-2"
                onClick={() => router.push('/email')}
              >
                Go to Campaigns
              </Button>
            )}
          </div>
          
          {/* Add this button to your UI, perhaps in the debug panel or near the send button */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={checkMailchimpConnection}
            className="ml-2"
          >
            Test Mailchimp Connection
          </Button>
          
          {/* Add a button to show common solutions */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={showCommonSolutions}
            className="ml-2"
          >
            Show Common Solutions
          </Button>
          
          {/* Add a button for this function */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={checkCommonMailchimpIssues}
            className="ml-2"
          >
            Check Common Issues
          </Button>
          
          {/* Add a button for this function */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={checkMailchimpAudience}
            className="ml-2"
          >
            Check Audience
          </Button>
          
          {/* Add a button for this function */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={addTestSubscriber}
            className="ml-2"
          >
            Add Test Subscriber
          </Button>
          
          {/* Add a button for this function */}
          {campaignResult && campaignResult.campaignId && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => trySendDirectly(campaignResult.campaignId)}
              className="ml-2"
            >
              Try Direct Send
            </Button>
          )}
          
          {/* Add this button when a campaign ID is available */}
          {campaignResult && campaignResult.campaignId && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => checkCampaignStatus(campaignResult.campaignId)}
              className="ml-2"
            >
              Check Status
            </Button>
          )}
          
          {/* Add a button for this function */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={testSimpleApi}
            className="ml-2"
          >
            Test Simple API
          </Button>
          
          {/* Add a button for this function */}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={manualSendCampaign}
            className="ml-2"
          >
            Manual Send
          </Button>
        </DialogContent>
      </Dialog>
    </div>
  )
} import { OnboardingWizard } from "@/components/onboarding-wizard"

export default function OnboardingPage() {
  return <OnboardingWizard />
} "use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { BarChart, LineChart, PieChart, ArrowUpRight, Download, Filter, Plus, Save, Table as TableIcon, AreaChart, Trash2, Edit, Copy, Eye, EyeOff, Maximize2, HelpCircle, ChevronDown, ChevronUp } from "lucide-react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, query, where, getDocs, orderBy, limit } from "firebase/firestore"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { format } from "date-fns"
import { Calendar, Code } from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import { Badge } from "@/components/ui/badge"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"

// Define metrics array
const metrics = [
  { id: "total_customers", name: "Total Customers", category: "customers" },
  { id: "new_customers", name: "New Customers", category: "customers" },
  { id: "active_customers", name: "Active Customers", category: "customers" },
  { id: "points_issued", name: "Points Issued", category: "points" },
  { id: "points_redeemed", name: "Points Redeemed", category: "points" },
  { id: "rewards_claimed", name: "Rewards Claimed", category: "rewards" },
  { id: "rewards_redeemed", name: "Rewards Redeemed", category: "rewards" }
]

// Add this after the metrics array definition
const dimensions = [
  { id: "day", name: "Day", category: "time" },
  { id: "week", name: "Week", category: "time" },
  { id: "month", name: "Month", category: "time" },
  { id: "quarter", name: "Quarter", category: "time" },
  { id: "year", name: "Year", category: "time" },
  { id: "customer_segment", name: "Customer Segment", category: "customer" },
  { id: "reward_type", name: "Reward Type", category: "reward" },
  { id: "reward_value", name: "Reward Value", category: "reward" },
  { id: "points_threshold", name: "Points Threshold", category: "points" },
  { id: "location", name: "Location", category: "store" }
]

// SQL query templates
const sqlQueryTemplates = {
  customer_growth: `
    SELECT 
      DATE_TRUNC('{time_dimension}', created_at) as period,
      COUNT(DISTINCT customer_id) as total_customers
    FROM customers
    WHERE merchant_id = '{merchant_id}'
    AND created_at BETWEEN '{start_date}' AND '{end_date}'
    GROUP BY period
    ORDER BY period
  `,
  points_activity: `
    SELECT 
      DATE_TRUNC('{time_dimension}', created_at) as period,
      SUM(CASE WHEN type = 'issue' THEN points ELSE 0 END) as points_issued,
      SUM(CASE WHEN type = 'redeem' THEN points ELSE 0 END) as points_redeemed
    FROM points_transactions
    WHERE merchant_id = '{merchant_id}'
    AND created_at BETWEEN '{start_date}' AND '{end_date}'
    GROUP BY period
    ORDER BY period
  `,
  reward_performance: `
    SELECT 
      r.name as reward_name,
      COUNT(rc.id) as times_claimed,
      COUNT(rr.id) as times_redeemed,
      COUNT(rr.id) / NULLIF(COUNT(rc.id), 0) as redemption_rate
    FROM rewards r
    LEFT JOIN reward_claims rc ON r.id = rc.reward_id
    LEFT JOIN reward_redemptions rr ON rc.id = rr.claim_id
    WHERE r.merchant_id = '{merchant_id}'
    AND (rc.created_at BETWEEN '{start_date}' AND '{end_date}' OR rc.created_at IS NULL)
    GROUP BY r.id, r.name
    ORDER BY times_claimed DESC
  `
}

export default function AnalyticsPage() {
  const [activeTab, setActiveTab] = useState("overview")
  const [isLoading, setIsLoading] = useState(true)
  const [analyticsData, setAnalyticsData] = useState({
    totalCustomers: 0,
    activeRewards: 0,
    pointsIssued: 0,
    rewardsRedeemed: 0
  })
  const { user } = useAuth()
  const [isCreatingReport, setIsCreatingReport] = useState(false)
  const [customReports, setCustomReports] = useState([])
  const [dashboards, setDashboards] = useState([
    { 
      id: "default", 
      name: "Default Dashboard", 
      reports: [] 
    }
  ])
  const [activeDashboardId, setActiveDashboardId] = useState("default")
  const [isCreatingDashboard, setIsCreatingDashboard] = useState(false)
  const [newDashboardName, setNewDashboardName] = useState("")
  const [previewReport, setPreviewReport] = useState(null)
  const { toast } = useToast()

  useEffect(() => {
    const fetchAnalyticsData = async () => {
      if (!user?.uid) return
      
      setIsLoading(true)
      try {
        // This would be replaced with actual Firebase queries
        // For now, we'll use mock data
        setTimeout(() => {
          setAnalyticsData({
            totalCustomers: 124,
            activeRewards: 8,
            pointsIssued: 12450,
            rewardsRedeemed: 67
          })
          setIsLoading(false)
        }, 1000)
      } catch (error) {
        console.error("Error fetching analytics data:", error)
        setIsLoading(false)
      }
    }
    
    fetchAnalyticsData()
  }, [user])

  const handleCreateReport = (reportData) => {
    const newReport = {
      id: `report_${Date.now()}`,
      ...reportData
    }
    setCustomReports([...customReports, newReport])
    setIsCreatingReport(false)
  }

  const handleCreateDashboard = () => {
    if (!newDashboardName.trim()) {
      toast({
        title: "Dashboard name required",
        description: "Please provide a name for your dashboard.",
        variant: "destructive"
      })
      return
    }
    
    const newDashboard = {
      id: `dashboard_${Date.now()}`,
      name: newDashboardName,
      reports: []
    }
    
    setDashboards([...dashboards, newDashboard])
    setActiveDashboardId(newDashboard.id)
    setIsCreatingDashboard(false)
    setNewDashboardName("")
    
    toast({
      title: "Dashboard created",
      description: `"${newDashboardName}" has been created successfully.`
    })
  }

  const handleDeleteDashboard = (dashboardId) => {
    if (dashboards.length <= 1) {
      toast({
        title: "Cannot delete dashboard",
        description: "You must have at least one dashboard.",
        variant: "destructive"
      })
      return
    }
    
    setDashboards(dashboards.filter(d => d.id !== dashboardId))
    
    if (activeDashboardId === dashboardId) {
      setActiveDashboardId(dashboards[0].id)
    }
    
    toast({
      title: "Dashboard deleted",
      description: "The dashboard has been deleted."
    })
  }

  const handleAddReportToDashboard = (dashboardId, report) => {
    setDashboards(dashboards.map(dashboard => {
      if (dashboard.id === dashboardId) {
        return {
          ...dashboard,
          reports: [...dashboard.reports, report]
        }
      }
      return dashboard
    }))
    
    toast({
      title: "Report added to dashboard",
      description: `"${report.name}" has been added to the dashboard.`
    })
  }

  const handleRemoveReportFromDashboard = (dashboardId, reportId) => {
    setDashboards(dashboards.map(dashboard => {
      if (dashboard.id === dashboardId) {
        return {
          ...dashboard,
          reports: dashboard.reports.filter(r => r.id !== reportId)
        }
      }
      return dashboard
    }))
    
    toast({
      title: "Report removed",
      description: "The report has been removed from the dashboard."
    })
  }

  const activeDashboard = dashboards.find(d => d.id === activeDashboardId) || dashboards[0]

  const generateMockDataForReport = (report) => {
    const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    
    if (report.type === 'pie') {
      return {
        labels: ['Segment A', 'Segment B', 'Segment C', 'Segment D', 'Segment E'],
        datasets: [{
          label: 'Data',
          data: [25, 20, 30, 15, 10],
          backgroundColor: [
            'rgba(255, 99, 132, 0.5)',
            'rgba(54, 162, 235, 0.5)',
            'rgba(255, 206, 86, 0.5)',
            'rgba(75, 192, 192, 0.5)',
            'rgba(153, 102, 255, 0.5)',
          ],
        }]
      }
    }
    
    return {
      labels,
      datasets: report.metrics.map((metricId, index) => {
        const metric = metrics.find(m => m.id === metricId)
        const colors = [
          'rgba(59, 130, 246, 0.5)', // blue
          'rgba(16, 185, 129, 0.5)', // green
          'rgba(245, 158, 11, 0.5)', // amber
          'rgba(239, 68, 68, 0.5)',  // red
          'rgba(139, 92, 246, 0.5)'  // purple
        ]
        
        return {
          label: metric?.name || metricId,
          data: Array(6).fill(0).map(() => Math.floor(Math.random() * 100)),
          backgroundColor: colors[index % colors.length],
          borderColor: colors[index % colors.length].replace('0.5', '1'),
        }
      })
    }
  }

  function ReportVisualization({ report }) {
    const data = generateMockDataForReport(report)
    
    return (
      <div className="h-full">
        {report.type === 'bar' && (
          <div className="w-full h-full flex items-center justify-center">
            <div className="w-full h-[250px] flex items-end justify-around">
              {data.labels.map((label, i) => (
                <div key={i} className="flex flex-col items-center">
                  {data.datasets.map((dataset, j) => (
                    <div 
                      key={j}
                      className="w-8 mb-1 rounded-t-sm" 
                      style={{ 
                        height: `${(dataset.data[i] / Math.max(...dataset.data)) * 150}px`,
                        backgroundColor: dataset.backgroundColor
                      }}
                    ></div>
                  ))}
                  <span className="text-xs mt-1">{label}</span>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {report.type === 'line' && (
          <div className="w-full h-[250px] flex items-center justify-center">
            <div className="text-sm text-muted-foreground">Line Chart Visualization</div>
          </div>
        )}
        
        {report.type === 'pie' && (
          <div className="w-full h-[250px] flex items-center justify-center">
            <div className="text-sm text-muted-foreground">Pie Chart Visualization</div>
          </div>
        )}
        
        {report.type === 'area' && (
          <div className="w-full h-[250px] flex items-center justify-center">
            <div className="text-sm text-muted-foreground">Area Chart Visualization</div>
          </div>
        )}
        
        {report.type === 'table' && (
          <div className="w-full overflow-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr>
                  <th className="text-left p-2 border-b">Period</th>
                  {data.datasets.map((dataset, i) => (
                    <th key={i} className="text-left p-2 border-b">{dataset.label}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {data.labels.map((label, i) => (
                  <tr key={i} className="hover:bg-muted/50">
                    <td className="p-2 border-b">{label}</td>
                    {data.datasets.map((dataset, j) => (
                      <td key={j} className="p-2 border-b">{dataset.data[i]}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    )
  }

  return (
    <PageTransition>
      <div className="p-6">
        <PageHeader
          title="Analytics"
          subtitle="Track and analyze your business performance"
        >
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              className="h-9"
              onClick={() => {/* Export functionality */}}
            >
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Button 
              size="sm" 
              className="h-9"
              onClick={() => setIsCreatingReport(true)}
            >
              <Plus className="h-4 w-4 mr-2" />
              New Report
            </Button>
          </div>
        </PageHeader>

        <Tabs defaultValue="overview">
          <TabsList className="grid grid-cols-4 mb-6">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
            <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
            <TabsTrigger value="explorer">Data Explorer</TabsTrigger>
          </TabsList>
          
          <TabsContent value="overview" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Customers</CardTitle>
                  <BarChart className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{analyticsData.totalCustomers}</div>
                  <p className="text-xs text-muted-foreground">
                    <span className="text-green-500 inline-flex items-center">
                      <ArrowUpRight className="mr-1 h-3 w-3" />
                      +12%
                    </span>{" "}
                    from last month
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Active Rewards</CardTitle>
                  <PieChart className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{analyticsData.activeRewards}</div>
                  <p className="text-xs text-muted-foreground">
                    <span className="text-green-500 inline-flex items-center">
                      <ArrowUpRight className="mr-1 h-3 w-3" />
                      +2
                    </span>{" "}
                    from last month
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Points Issued</CardTitle>
                  <LineChart className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{analyticsData.pointsIssued.toLocaleString()}</div>
                  <p className="text-xs text-muted-foreground">
                    <span className="text-green-500 inline-flex items-center">
                      <ArrowUpRight className="mr-1 h-3 w-3" />
                      +18%
                    </span>{" "}
                    from last month
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Rewards Redeemed</CardTitle>
                  <BarChart className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{analyticsData.rewardsRedeemed}</div>
                  <p className="text-xs text-muted-foreground">
                    <span className="text-green-500 inline-flex items-center">
                      <ArrowUpRight className="mr-1 h-3 w-3" />
                      +7%
                    </span>{" "}
                    from last month
                  </p>
                </CardContent>
              </Card>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2">
              <Card className="col-span-1">
                <CardHeader>
                  <CardTitle>Customer Growth</CardTitle>
                  <CardDescription>
                    New customers over time
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[300px] flex items-center justify-center border rounded-md bg-muted/10">
                    <p className="text-muted-foreground">Customer growth chart will appear here</p>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="col-span-1">
                <CardHeader>
                  <CardTitle>Reward Redemptions</CardTitle>
                  <CardDescription>
                    Rewards redeemed over time
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[300px] flex items-center justify-center border rounded-md bg-muted/10">
                    <p className="text-muted-foreground">Reward redemptions chart will appear here</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="reports" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Customer Analytics</CardTitle>
                <CardDescription>
                  Detailed insights about your customer base
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[400px] flex items-center justify-center border rounded-md bg-muted/10">
                  <p className="text-muted-foreground">Customer analytics will appear here</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="dashboards" className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <h3 className="text-lg font-medium">Dashboards</h3>
                <Select value={activeDashboardId} onValueChange={setActiveDashboardId}>
                  <SelectTrigger className="w-[200px]">
                    <SelectValue placeholder="Select dashboard" />
                  </SelectTrigger>
                  <SelectContent>
                    {dashboards.map(dashboard => (
                      <SelectItem key={dashboard.id} value={dashboard.id}>
                        {dashboard.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Button variant="outline" size="sm" onClick={() => setIsCreatingDashboard(true)}>
                  <Plus className="h-4 w-4 mr-1" />
                  New Dashboard
                </Button>
              </div>
              <Button onClick={() => setIsCreatingReport(true)}>
                <Plus className="mr-2 h-4 w-4" />
                Create Report
              </Button>
            </div>
            
            {activeDashboard.reports.length === 0 ? (
              <Card>
                <CardContent className="text-center p-8">
                  <h3 className="text-lg font-medium mb-2">No reports in this dashboard</h3>
                  <p className="text-muted-foreground mb-4">
                    Create custom reports to add to this dashboard
                  </p>
                  <Button onClick={() => setIsCreatingReport(true)}>Create Report</Button>
                </CardContent>
              </Card>
            ) : (
              <div className="grid gap-4 md:grid-cols-2">
                {activeDashboard.reports.map(report => (
                  <Card key={report.id} className="group relative">
                    <div className="absolute right-2 top-2 hidden group-hover:flex bg-white/90 rounded-md shadow-sm z-10">
                      <Button variant="ghost" size="icon" onClick={() => setPreviewReport(report)}>
                        <Maximize2 className="h-4 w-4" />
                      </Button>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <ChevronDown className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => {
                            // Edit report logic
                          }}>
                            <Edit className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => {
                            // Duplicate report logic
                          }}>
                            <Copy className="mr-2 h-4 w-4" />
                            Duplicate
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem 
                            onClick={() => handleRemoveReportFromDashboard(activeDashboardId, report.id)}
                            className="text-red-600 focus:bg-red-50 focus:text-red-600"
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Remove
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                    <CardHeader>
                      <CardTitle>{report.name}</CardTitle>
                      <CardDescription>
                        {report.metrics.length} metrics, {report.dimensions.length} dimensions
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="h-[200px]">
                        <ReportVisualization report={report} />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
            
            <Dialog open={isCreatingReport} onOpenChange={setIsCreatingReport}>
              <DialogContent className="sm:max-w-[600px]">
                <DialogHeader>
                  <DialogTitle>Create Custom Report</DialogTitle>
                  <DialogDescription>
                    Select metrics and dimensions to create a custom analytics report
                  </DialogDescription>
                </DialogHeader>
                <ReportBuilder 
                  onSave={(reportData) => {
                    const newReport = {
                      id: `report_${Date.now()}`,
                      ...reportData
                    }
                    setCustomReports([...customReports, newReport])
                    handleAddReportToDashboard(activeDashboardId, newReport)
                    setIsCreatingReport(false)
                  }} 
                  onCancel={() => setIsCreatingReport(false)} 
                />
              </DialogContent>
            </Dialog>
            
            <Dialog open={isCreatingDashboard} onOpenChange={setIsCreatingDashboard}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Create Dashboard</DialogTitle>
                  <DialogDescription>
                    Create a new dashboard to organize your reports
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  <div className="space-y-2">
                    <Label htmlFor="dashboard-name">Dashboard Name</Label>
                    <Input 
                      id="dashboard-name" 
                      value={newDashboardName} 
                      onChange={(e) => setNewDashboardName(e.target.value)} 
                      placeholder="My Dashboard"
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setIsCreatingDashboard(false)}>Cancel</Button>
                  <Button onClick={handleCreateDashboard}>Create</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
            
            <Dialog open={!!previewReport} onOpenChange={() => setPreviewReport(null)}>
              <DialogContent className="sm:max-w-[800px] sm:max-h-[80vh]">
                <DialogHeader>
                  <DialogTitle>{previewReport?.name}</DialogTitle>
                  <DialogDescription>
                    {previewReport?.metrics.length} metrics, {previewReport?.dimensions.length} dimensions
                  </DialogDescription>
                </DialogHeader>
                <div className="h-[500px] overflow-auto">
                  {previewReport && <ReportVisualization report={previewReport} />}
                </div>
              </DialogContent>
            </Dialog>
          </TabsContent>
        </Tabs>
      </div>
    </PageTransition>
  )
}

function ReportBuilder({ onSave, onCancel, initialReport = null }) {
  const [reportName, setReportName] = useState("New Report")
  const [reportType, setReportType] = useState("bar")
  const [selectedMetrics, setSelectedMetrics] = useState([])
  const [selectedDimensions, setSelectedDimensions] = useState([])
  const [showAdvanced, setShowAdvanced] = useState(false)
  const [customSQL, setCustomSQL] = useState("")
  const [dateRange, setDateRange] = useState({ 
    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), 
    to: new Date() 
  })
  const { toast } = useToast()
  const [previewData, setPreviewData] = useState(null)
  
  const chartTypes = [
    { id: "bar", name: "Bar Chart", icon: BarChart },
    { id: "line", name: "Line Chart", icon: LineChart },
    { id: "pie", name: "Pie Chart", icon: PieChart },
    { id: "area", name: "Area Chart", icon: AreaChart },
    { id: "table", name: "Table", icon: TableIcon }
  ]
  
  const handleSave = () => {
    if (!reportName) {
      alert("Please provide a name for your report")
      return
    }
    
    if (selectedMetrics.length === 0) {
      alert("Please select at least one metric")
      return
    }
    
    onSave({
      name: reportName,
      type: reportType,
      metrics: selectedMetrics,
      dimensions: selectedDimensions,
      dateRange,
      customSQL: showAdvanced ? customSQL : null
    })
  }

  const handlePreview = () => {
    if (selectedMetrics.length === 0) {
      toast({
        title: "Select metrics",
        description: "Please select at least one metric to preview the report.",
        variant: "destructive"
      })
      return
    }
    
    // Generate mock data for preview
    const mockData = {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
      datasets: selectedMetrics.map((metricId, index) => {
        const metric = metrics.find(m => m.id === metricId)
        const colors = [
          'rgba(59, 130, 246, 0.5)', // blue
          'rgba(16, 185, 129, 0.5)', // green
          'rgba(245, 158, 11, 0.5)', // amber
          'rgba(239, 68, 68, 0.5)',  // red
          'rgba(139, 92, 246, 0.5)'  // purple
        ]
        
        return {
          label: metric?.name || metricId,
          data: Array(6).fill(0).map(() => Math.floor(Math.random() * 100)),
          backgroundColor: colors[index % colors.length],
          borderColor: colors[index % colors.length].replace('0.5', '1'),
        }
      })
    }
    
    setPreviewData(mockData)
    
    toast({
      title: "Preview generated",
      description: "This is sample data. Real data will be used when the report is saved."
    })
  }
  
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="report-name">Report Name</Label>
          <Input 
            id="report-name" 
            value={reportName} 
            onChange={(e) => setReportName(e.target.value)} 
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="chart-type">Chart Type</Label>
          <Select value={reportType} onValueChange={setReportType}>
            <SelectTrigger id="chart-type">
              <SelectValue placeholder="Select chart type" />
            </SelectTrigger>
            <SelectContent>
              {chartTypes.map(type => (
                <SelectItem key={type.id} value={type.id}>
                  <div className="flex items-center gap-2">
                    <type.icon className="h-4 w-4" />
                    <span>{type.name}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label>Metrics</Label>
          <ScrollArea className="h-[200px] rounded-md border p-4">
            {metrics.map(metric => (
              <div key={metric.id} className="flex items-center space-x-2 py-1">
                <Checkbox 
                  id={`metric-${metric.id}`} 
                  checked={selectedMetrics.includes(metric.id)}
                  onCheckedChange={(checked) => {
                    if (checked) {
                      setSelectedMetrics([...selectedMetrics, metric.id])
                    } else {
                      setSelectedMetrics(selectedMetrics.filter(id => id !== metric.id))
                    }
                  }}
                />
                <label 
                  htmlFor={`metric-${metric.id}`}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {metric.name}
                </label>
              </div>
            ))}
          </ScrollArea>
        </div>
        
        <div className="space-y-2">
          <Label>Dimensions</Label>
          <ScrollArea className="h-[200px] rounded-md border p-4">
            {dimensions.map(dimension => (
              <div key={dimension.id} className="flex items-center space-x-2 py-1">
                <Checkbox 
                  id={`dimension-${dimension.id}`} 
                  checked={selectedDimensions.includes(dimension.id)}
                  onCheckedChange={(checked) => {
                    if (checked) {
                      setSelectedDimensions([...selectedDimensions, dimension.id])
                    } else {
                      setSelectedDimensions(selectedDimensions.filter(id => id !== dimension.id))
                    }
                  }}
                />
                <label 
                  htmlFor={`dimension-${dimension.id}`}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {dimension.name}
                </label>
              </div>
            ))}
          </ScrollArea>
        </div>
      </div>
      
      <div className="space-y-2">
        <Label>Date Range</Label>
        <div className="flex gap-4">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="w-full justify-start text-left font-normal">
                <Calendar className="mr-2 h-4 w-4" />
                {dateRange.from ? format(dateRange.from, "PPP") : "Pick a date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <CalendarComponent
                mode="single"
                selected={dateRange.from}
                onSelect={(date) => setDateRange({ ...dateRange, from: date })}
                initialFocus
              />
            </PopoverContent>
          </Popover>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="w-full justify-start text-left font-normal">
                <Calendar className="mr-2 h-4 w-4" />
                {dateRange.to ? format(dateRange.to, "PPP") : "Pick a date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <CalendarComponent
                mode="single"
                selected={dateRange.to}
                onSelect={(date) => setDateRange({ ...dateRange, to: date })}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>
      
      <Separator />
      
      <div className="flex items-center space-x-2">
        <Switch 
          id="advanced-mode" 
          checked={showAdvanced} 
          onCheckedChange={setShowAdvanced} 
        />
        <Label htmlFor="advanced-mode">Advanced Mode (Custom SQL)</Label>
      </div>
      
      {showAdvanced && (
        <div className="space-y-2">
          <Label htmlFor="custom-sql">Custom SQL Query</Label>
          <div className="relative">
            <textarea
              id="custom-sql"
              value={customSQL}
              onChange={(e) => setCustomSQL(e.target.value)}
              className="min-h-[200px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 font-mono"
              placeholder="SELECT * FROM ..."
            />
            <div className="absolute top-2 right-2">
              <Select 
                onValueChange={(value) => {
                  setCustomSQL(sqlQueryTemplates[value]
                    .replace('{merchant_id}', 'YOUR_MERCHANT_ID')
                    .replace('{time_dimension}', 'month')
                    .replace('{start_date}', format(dateRange.from, 'yyyy-MM-dd'))
                    .replace('{end_date}', format(dateRange.to, 'yyyy-MM-dd'))
                  )
                  toast({
                    title: "SQL template loaded",
                    description: "You can now customize the query to fit your needs."
                  })
                }}
              >
                <SelectTrigger className="h-8 w-[180px]">
                  <SelectValue placeholder="Query templates" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="customer_growth">Customer Growth</SelectItem>
                  <SelectItem value="points_activity">Points Activity</SelectItem>
                  <SelectItem value="reward_performance">Reward Performance</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <p className="text-xs text-muted-foreground">
            Use custom SQL for advanced analytics. Variables: {'{merchant_id}'}, {'{start_date}'}, {'{end_date}'}, {'{time_dimension}'}
          </p>
        </div>
      )}
      
      <div className="space-y-4">
        <Button onClick={handlePreview} variant="outline" className="w-full">
          <Eye className="mr-2 h-4 w-4" />
          Preview Report
        </Button>
        
        {previewData && (
          <div className="border rounded-md p-4 bg-background">
            <h3 className="text-lg font-medium mb-2">{reportName || "Report Preview"}</h3>
            <div className="h-[300px]">
              {reportType === 'bar' && (
                <div className="w-full h-full flex items-center justify-center">
                  <div className="w-full h-[250px] flex items-end justify-around">
                    {previewData.labels.map((label, i) => (
                      <div key={i} className="flex flex-col items-center">
                        {previewData.datasets.map((dataset, j) => (
                          <div 
                            key={j}
                            className="w-8 mb-1 rounded-t-sm" 
                            style={{ 
                              height: `${(dataset.data[i] / Math.max(...dataset.data)) * 150}px`,
                              backgroundColor: dataset.backgroundColor
                            }}
                          ></div>
                        ))}
                        <span className="text-xs mt-1">{label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {reportType === 'line' && (
                <div className="w-full h-[250px] flex items-center justify-center">
                  <div className="text-sm text-muted-foreground">Line Chart Visualization</div>
                </div>
              )}
              
              {reportType === 'pie' && (
                <div className="w-full h-[250px] flex items-center justify-center">
                  <div className="text-sm text-muted-foreground">Pie Chart Visualization</div>
                </div>
              )}
              
              {reportType === 'area' && (
                <div className="w-full h-[250px] flex items-center justify-center">
                  <div className="text-sm text-muted-foreground">Area Chart Visualization</div>
                </div>
              )}
              
              {reportType === 'table' && (
                <div className="w-full overflow-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr>
                        <th className="text-left p-2 border-b">Period</th>
                        {previewData.datasets.map((dataset, i) => (
                          <th key={i} className="text-left p-2 border-b">{dataset.label}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {previewData.labels.map((label, i) => (
                        <tr key={i} className="hover:bg-muted/50">
                          <td className="p-2 border-b">{label}</td>
                          {previewData.datasets.map((dataset, j) => (
                            <td key={j} className="p-2 border-b">{dataset.data[i]}</td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              This is a preview with sample data. Actual data will be used when the report is saved.
            </p>
          </div>
        )}
      </div>
      
      <div className="flex justify-end space-x-2 pt-4">
        <Button variant="outline" onClick={onCancel}>Cancel</Button>
        <Button onClick={handleSave}>
          <Save className="mr-2 h-4 w-4" />
          Save Report
        </Button>
      </div>
    </div>
  )
} "use client"

import { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/auth-context'
import { useSearchParams, useRouter } from 'next/navigation'
import { Loader2, RefreshCcw, Settings, Link, Wallet, X } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import {
  Select,
  SelectContent,
  SelectGroup, 
  SelectItem,
  SelectLabel, 
  SelectTrigger,
  SelectValue 
} from '@/components/ui/select'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { toast } from '@/components/ui/use-toast'
import { PageHeader } from '@/components/page-header'
import { PageTransition } from '@/components/page-transition'

// Import our new components
import OpenBankingConnectCard from '@/components/financials/OpenBankingConnectCard'
import CashFlowOverview from '@/components/financials/CashFlowOverview'
import ExpenseBreakdown from '@/components/financials/ExpenseBreakdown'
import TopVendorsCustomers from '@/components/financials/TopVendorsCustomers'
import BenchmarkComparison from '@/components/financials/BenchmarkComparison'
import SmartRecommendations from '@/components/financials/SmartRecommendations'
import TransactionList from '@/components/financials/TransactionList'

// Define interfaces for our data types
interface BasicMetrics {
  currentBalance: number
  runway: number
  netMonth: number
  totalIncome: number
  totalExpenses: number
  previousPeriodIncomeChange: number
  previousPeriodExpenseChange: number
  netToday: number
  netWeek: number
  burnRate: number
}

interface CashFlowData {
  date: string
  income: number
  expenses: number
  balance: number | null
}

interface WeeklyCashFlowData {
  week: string
  income: number
  expenses: number
  balance: number | null
}

interface MonthlyCashFlowData {
  month: string
  income: number
  expenses: number
  balance: number | null
}

interface CashFlow {
  daily: CashFlowData[]
  weekly: WeeklyCashFlowData[]
  monthly: MonthlyCashFlowData[]
}

interface ExpenseCategory {
  name: string
  value: number
  color?: string
  category?: string
  amount?: number
  percentage?: number
  change?: number
}

interface DetailedExpense {
  category: string
  subcategories?: {
    name: string
    amount: number
    percentage: number
  }[]
  subcategory?: string
  amount?: number
}

interface Expenses {
  categories: ExpenseCategory[]
  detailed: DetailedExpense[]
}

interface Transaction {
  id: string
  date: string
  description: string
  amount: number
  type: string
  category: string
  status: string
  timestamp?: string
  accountId?: string
}

interface Vendor {
  name: string
  amount: number
  transactions: number
  percentage: number
  count?: number
  trend?: number
  type?: string
}

interface Customer {
  name: string
  amount: number
  transactions: number
  percentage: number
  count?: number
  trend?: number
  type?: string
}

interface BenchmarkMetric {
  name: string
  description: string
  yourValue: number
  industryAverage: number
  difference: number
  status: string
  businessValue?: number
  industryBenchmarkRange?: string
  percentile?: number
  isHigherBetter?: boolean
}

interface Benchmark {
  industryName: string
  businessSizeRange: string
  dataSource: string
  lastUpdated: string
  metrics: BenchmarkMetric[]
}

interface Recommendation {
  id: string
  title: string
  description: string
  impact: number
  difficulty: string
  category: string
  actionLink: string
  type?: 'alert' | 'opportunity' | 'success'
  detail?: string
  severity?: 'low' | 'medium' | 'high'
  action?: {
    label: string
    url?: string
  }
  dismissed?: boolean
}

interface FinancialData {
  basicMetrics: BasicMetrics
  cashFlow: CashFlow
  expenses: Expenses
  transactions: Transaction[]
  vendors: {
    top: Vendor[]
  }
  customers: {
    top: Customer[]
  }
  benchmarks: Benchmark
  recommendations: Recommendation[]
  metadata: {
    lastUpdated: string
    currency: string
  }
}

// Import sample data as fallback
import {
  sampleDailyCashFlow,
  sampleWeeklyCashFlow,
  sampleMonthlyCashFlow,
  sampleExpenseCategories,
  sampleDetailedExpenses,
  sampleTransactions,
  sampleTopVendors,
  sampleTopCustomers,
  sampleBenchmarkMetrics,
  sampleRecommendations,
  sampleFinancialMetrics
} from '@/components/financials/utils/data'

// Add this import for type assertions
import type { ComponentProps } from 'react'

// Add these imports to get component prop types
import type SmartRecommendationsType from '@/components/financials/SmartRecommendations'
import type ExpenseBreakdownType from '@/components/financials/ExpenseBreakdown'
import type TopVendorsCustomersType from '@/components/financials/TopVendorsCustomers'
import type BenchmarkComparisonType from '@/components/financials/BenchmarkComparison'
import type TransactionListType from '@/components/financials/TransactionList'

// Define component prop types by inferring from the components
type SmartRecommendationsProps = ComponentProps<typeof SmartRecommendationsType>
type ExpenseBreakdownProps = ComponentProps<typeof ExpenseBreakdownType>
type TopVendorsCustomersProps = ComponentProps<typeof TopVendorsCustomersType>
type BenchmarkComparisonProps = ComponentProps<typeof BenchmarkComparisonType>
type TransactionListProps = ComponentProps<typeof TransactionListType>

export default function FinancialsPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [financialData, setFinancialData] = useState<FinancialData | null>(null)
  const [selectedCurrency, setSelectedCurrency] = useState<string>('USD')
  const [activeSection, setActiveSection] = useState('overview')
  const [connectBankLoading, setConnectBankLoading] = useState(false)
  const [connectDialogOpen, setConnectDialogOpen] = useState(false)
  const [bankConnectForm, setBankConnectForm] = useState({
    mobile: '',
    email: '',
    firstName: ''
  })
  const [lastUpdated, setLastUpdated] = useState<string>('')
  const [error, setError] = useState<string | null>(null)
  const [isRefreshing, setIsRefreshing] = useState(false)
  
  const router = useRouter()
  const { user } = useAuth()
  
  // Get the merchantId from the authenticated user
  const merchantId = user?.uid || ''
  
  // Determine the appropriate currency formatter based on selected currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: selectedCurrency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount)
  }
  
  // Handle dismissing a recommendation
  const handleDismissRecommendation = (id: string) => {
    // In a real app, this would make an API call to dismiss the recommendation
    console.log(`Dismissing recommendation ${id}`)
  }
  
  // Handle form input changes
  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setBankConnectForm(prev => ({
      ...prev,
      [name]: value
    }))
  }
  
  // Function to refresh the financial data
  const refreshFinancialData = async () => {
    if (isRefreshing) return // Prevent multiple refresh calls

    try {
      setIsRefreshing(true)
      await fetchFinancialData()
      
      // Show toast notification on successful refresh
      toast({
        title: "Data Refreshed",
        description: "Financial insights have been updated with the latest data.",
        variant: "default"
      })
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
      
      toast({
        title: "Refresh Failed",
        description: `Could not refresh financial data: ${errorMessage}`,
        variant: "destructive"
      })
    } finally {
      setIsRefreshing(false)
    }
  }
  
  // Handle connecting bank account
  const handleConnectBank = async () => {
    if (!user) {
      console.error("User not authenticated")
      return
    }
    
    try {
      setConnectBankLoading(true)
      
      // Call the Firebase function 'basiqconnect' with form data wrapped in a data object
      const response = await fetch('/api/basiqconnect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: {
            userId: user.uid, // Use the authenticated user's ID
            merchantId: user.uid, // Use the user's ID as the merchantId as well
            mobile: bankConnectForm.mobile,
            email: bankConnectForm.email,
            firstName: bankConnectForm.firstName
          }
        }),
      })
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`)
      }
      
      const responseData = await response.json()
      
      // Log the full response for debugging
      console.log('Full response from basiqconnect:', responseData)
      
      // Close the dialog
      setConnectDialogOpen(false)
      
      // Check for authLink in the nested data object
      const authLink = responseData.data?.authLink
      
      if (authLink) {
        window.open(authLink, '_blank')
      } else {
        // If no authLink is found, show the full response in an alert for debugging
        alert(`No auth link found. Full response: ${JSON.stringify(responseData, null, 2)}`)
        throw new Error('No authentication link received')
      }
    } catch (error: unknown) {
      console.error('Failed to connect bank account:', error)
      // Show error details to the user
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
      alert(`Error connecting bank account: ${errorMessage}`)
    } finally {
      setConnectBankLoading(false)
    }
  }
  
  // Fetch the real financial data from Firestore
  const fetchFinancialData = async () => {
    if (!merchantId) {
      console.error("No merchant ID available")
      setError("Authentication required to view financial data")
      setIsLoading(false)
      return
    }
    
    try {
      setIsLoading(true)
      console.log(`Fetching financial data for merchant: ${merchantId}`)
      
      // Get the financial data from Firestore
      const financialsRef = doc(db, `merchants/${merchantId}/financials/latest`)
      const financialsDoc = await getDoc(financialsRef)
      
      if (financialsDoc.exists()) {
        console.log('Financial data found:', financialsDoc.data())
        const data = financialsDoc.data() as FinancialData
        setFinancialData(data)
        
        // Set the currency from the data if available
        if (data.metadata?.currency) {
          setSelectedCurrency(data.metadata.currency)
        }
        
        // Set the last updated timestamp
        if (data.metadata?.lastUpdated) {
          const lastUpdatedDate = new Date(data.metadata.lastUpdated)
          setLastUpdated(lastUpdatedDate.toLocaleString())
        } else {
          setLastUpdated(new Date().toLocaleString())
        }
        
        setError(null)
      } else {
        console.log('No financial data found')
        // Use sample data as fallback
        setFinancialData(null)
        setError("No financial data available")
        
        // Show a toast notification
        toast({
          title: "No Financial Data",
          description: "Using sample data for demonstration purposes.",
          variant: "default"
        })
      }
    } catch (error: unknown) {
      console.error('Error fetching financial data:', error)
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
      setError(`Error loading financial data: ${errorMessage}`)
      
      // Show a toast notification
      toast({
        title: "Error",
        description: "Failed to load financial data. Using sample data.",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Fetch financial data on component mount
  useEffect(() => {
    fetchFinancialData()
  }, [merchantId])

  // Show loading spinner while data is being fetched
  if (isLoading) {
    return (
      <div className="min-h-screen bg-white">
        <div className="p-6">
          {/* Header with Last Updated and Settings */}
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Financial Insights</h1>
              <p className="text-gray-500 text-sm mt-1">
                Loading financial data...
              </p>
            </div>

            <div className="flex items-center gap-3 mt-4 md:mt-0">
              <Button variant="outline" className="border-0 ring-1 ring-gray-200 bg-white text-gray-400 shadow-sm rounded-xl" disabled>
                <RefreshCcw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
              
              <Button variant="ghost" size="icon" className="text-gray-400" disabled>
                <Settings className="h-5 w-5" />
              </Button>
            </div>
          </div>

          {/* Navigation Tabs */}
          <div className="border-b border-gray-100 mb-8">
            <nav className="flex space-x-8 -mb-px">
              <button
                disabled
                className="py-4 px-1 border-b-2 text-sm font-medium border-blue-600 text-blue-600"
              >
                Overview
              </button>
              <button
                disabled
                className="py-4 px-1 border-b-2 text-sm font-medium border-transparent text-gray-400"
              >
                Expenses
              </button>
              <button
                disabled
                className="py-4 px-1 border-b-2 text-sm font-medium border-transparent text-gray-400"
              >
                Benchmarks
              </button>
              <button
                disabled
                className="py-4 px-1 border-b-2 text-sm font-medium border-transparent text-gray-400"
              >
                Transactions
              </button>
            </nav>
          </div>
          
          {/* Skeleton loaders */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[...Array(4)].map((_, i) => (
              <Card key={i} className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-gray-200 w-full animate-pulse"></div>
                <CardContent className="p-6">
                  <div className="h-4 w-28 bg-gray-200 rounded animate-pulse mb-3"></div>
                  <div className="h-7 w-32 bg-gray-200 rounded animate-pulse"></div>
                  <div className="h-3 w-24 bg-gray-200 rounded animate-pulse mt-3"></div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-8">
            <div className="xl:col-span-2">
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-gray-200 w-full animate-pulse"></div>
                <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                  <div className="h-5 w-24 bg-gray-200 rounded animate-pulse"></div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="flex flex-col space-y-4">
                    <div className="h-5 w-40 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-80 bg-gray-100 rounded animate-pulse"></div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div className="xl:col-span-1">
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)] h-full">
                <div className="h-1 bg-gray-200 w-full animate-pulse"></div>
                <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                  <div className="h-5 w-24 bg-gray-200 rounded animate-pulse"></div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="flex flex-col h-full justify-center space-y-4">
                    <div className="h-16 bg-gray-100 rounded animate-pulse"></div>
                    <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          <div className="mt-8">
            <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
              <div className="h-1 bg-gray-200 w-full animate-pulse"></div>
              <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                <div className="h-5 w-48 bg-gray-200 rounded animate-pulse"></div>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div className="h-5 w-64 bg-gray-200 rounded animate-pulse"></div>
                  <div className="h-24 bg-gray-100 rounded animate-pulse"></div>
                  <div className="h-24 bg-gray-100 rounded animate-pulse"></div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    )
  }

  // Update mapDataForComponents to handle null data properly
  const mapDataForComponents = (data: FinancialData | null) => {
    console.log("mapDataForComponents called with data:", data ? "data exists" : "null data");
    
    if (!data) {
      console.log("Using sample data as fallback");
      // Return default structure with empty arrays to prevent mapping errors
      return {
        basicMetrics: sampleFinancialMetrics,
        cashFlow: {
          daily: sampleDailyCashFlow,
          weekly: sampleWeeklyCashFlow,
          monthly: sampleMonthlyCashFlow
        },
        expenses: {
          categories: sampleExpenseCategories
        },
        mappedDetailedExpenses: sampleDetailedExpenses,
        vendors: {
          top: sampleTopVendors
        },
        customers: {
          top: sampleTopCustomers
        },
        recommendations: sampleRecommendations,
        benchmarks: {
          industryName: "Café & Restaurant",
          businessSizeRange: "$200K-$500K",
          dataSource: "Australian Tax Office industry benchmarks",
          lastUpdated: "July 2023",
          metrics: sampleBenchmarkMetrics
        },
        transactions: sampleTransactions
      };
    }
    
    // Log cash flow data structure received from Firestore
    console.log("CashFlow data from Firestore:", {
      hasCashFlow: !!data.cashFlow,
      dailyLength: data.cashFlow?.daily?.length || 0,
      weeklyLength: data.cashFlow?.weekly?.length || 0,
      monthlyLength: data.cashFlow?.monthly?.length || 0,
      sampleDaily: data.cashFlow?.daily?.[0] || "No data",
    });
    
    // Map the cash flow data from income/expenses to cashIn/cashOut which is what the component expects
    const mappedDailyCashFlow = data.cashFlow?.daily?.map(day => ({
      time: day.date,  // Assuming the date field contains time info for dailyData
      cashIn: day.income,
      cashOut: day.expenses,
      net: day.income - day.expenses
    })) || sampleDailyCashFlow;

    const mappedWeeklyCashFlow = data.cashFlow?.weekly?.map(week => ({
      date: week.week,  // Use 'week' field as the date label
      cashIn: week.income,
      cashOut: week.expenses,
      net: week.income - week.expenses
    })) || sampleWeeklyCashFlow;

    const mappedMonthlyCashFlow = data.cashFlow?.monthly?.map(month => ({
      month: month.month,
      cashIn: month.income,
      cashOut: month.expenses,
      net: month.income - month.expenses
    })) || sampleMonthlyCashFlow;
    
    // Log the mapped cash flow data
    console.log("Mapped cashFlow data:", {
      dailyLength: mappedDailyCashFlow.length,
      weeklyLength: mappedWeeklyCashFlow.length,
      monthlyLength: mappedMonthlyCashFlow.length,
      sampleDaily: mappedDailyCashFlow[0] || "No data",
    });
    
    // Map expense categories to the format expected by the component
    const mappedExpenseCategories = data.expenses?.categories?.map(cat => ({
      name: cat.category || '',
      value: cat.amount || 0,
      color: undefined,
      category: cat.category,
      amount: cat.amount,
      percentage: cat.percentage,
      change: cat.change
    })) || sampleExpenseCategories;
    
    // Map detailed expenses to the format expected by the component
    const mappedDetailedExpenses = data.expenses?.detailed?.flatMap(detail => {
      return (detail.subcategories || []).map(sub => ({
        category: detail.category,
        subcategory: sub.name,
        amount: sub.amount
      }));
    }) || sampleDetailedExpenses;
    
    // Map vendors to the format expected by the component
    const mappedVendors = data.vendors?.top?.map(vendor => ({
      name: vendor.name,
      amount: vendor.amount,
      count: vendor.transactions || 0,
      trend: 0, // Default value if not available
      transactions: vendor.transactions,
      percentage: vendor.percentage
    })) || sampleTopVendors;
    
    // Map customers to the format expected by the component
    const mappedCustomers = data.customers?.top?.map(customer => ({
      name: customer.name,
      amount: customer.amount,
      count: customer.transactions || 0,
      trend: 0, // Default value if not available
      type: '', // Default value if not available
      transactions: customer.transactions,
      percentage: customer.percentage
    })) || sampleTopCustomers;
    
    // Map recommendations to the format expected by the component
    const mappedRecommendations = data.recommendations?.map(rec => ({
      id: rec.id,
      type: (rec.category === 'Cost Reduction' ? 'alert' : 
             rec.category === 'Revenue Opportunity' ? 'opportunity' : 'success') as 'alert' | 'opportunity' | 'success',
      title: rec.title,
      description: rec.description,
      detail: `Impact: ${formatCurrency(rec.impact)}`,
      severity: (rec.difficulty.toLowerCase() as 'low' | 'medium' | 'high') || 'medium',
      action: {
        label: 'View Details',
        url: rec.actionLink
      },
      impact: rec.impact,
      difficulty: rec.difficulty,
      category: rec.category,
      actionLink: rec.actionLink
    })) || sampleRecommendations;
    
    // Map benchmark metrics to the format expected by the component
    const mappedBenchmarkMetrics = data.benchmarks?.metrics?.map(metric => ({
      ...metric,
      businessValue: metric.yourValue,
      industryBenchmarkRange: [metric.industryAverage - 5, metric.industryAverage + 5] as [number, number],
      percentile: metric.status === 'above' ? 75 : metric.status === 'below' ? 25 : 50,
      isHigherBetter: true // Default assumption
    })) || sampleBenchmarkMetrics;
    
    return {
      ...data,
      cashFlow: {
        daily: mappedDailyCashFlow,
        weekly: mappedWeeklyCashFlow,
        monthly: mappedMonthlyCashFlow
      },
      expenses: {
        categories: mappedExpenseCategories as ExpenseBreakdownProps['expenses'],
        detailed: data.expenses?.detailed || [],
      },
      mappedDetailedExpenses: mappedDetailedExpenses as ExpenseBreakdownProps['detailedExpenses'],
      vendors: {
        top: mappedVendors as TopVendorsCustomersProps['topVendors']
      },
      customers: {
        top: mappedCustomers as TopVendorsCustomersProps['topCustomers']
      },
      recommendations: mappedRecommendations as SmartRecommendationsProps['recommendations'],
      benchmarks: {
        ...data.benchmarks,
        industryName: data.benchmarks?.industryName || "Café & Restaurant",
        businessSizeRange: data.benchmarks?.businessSizeRange || "$200K-$500K",
        dataSource: data.benchmarks?.dataSource || "Australian Tax Office industry benchmarks",
        lastUpdated: data.benchmarks?.lastUpdated || "July 2023",
        metrics: mappedBenchmarkMetrics as unknown as BenchmarkComparisonProps['metrics']
      },
      transactions: data.transactions as TransactionListProps['transactions'] || sampleTransactions
    };
  };

  // Update renderActiveSection to use the mapped data
  const renderActiveSection = () => {
    // Map the data for components
    const mappedData = mapDataForComponents(financialData);
    
    // Log information about what's being rendered
    console.log(`Rendering ${activeSection} section with data:`, {
      hasCashFlow: !!mappedData?.cashFlow,
      hasDailyData: !!(mappedData?.cashFlow?.daily?.length),
      hasWeeklyData: !!(mappedData?.cashFlow?.weekly?.length),
      hasMonthlyData: !!(mappedData?.cashFlow?.monthly?.length)
    });
    
    switch (activeSection) {
      case 'overview':
        return (
          <>
            {/* Main Metrics Overview */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-blue-500 w-full"></div>
                <CardContent className="p-6">
                  <h3 className="text-sm font-normal text-gray-500 mb-1">Current Balance</h3>
                  <div className="text-2xl font-medium text-gray-900">
                    {formatCurrency(mappedData?.basicMetrics?.currentBalance || sampleFinancialMetrics.currentBalance)}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    {mappedData?.basicMetrics?.runway?.toFixed(1) || sampleFinancialMetrics.runway} months runway
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-blue-500 w-full"></div>
                <CardContent className="p-6">
                  <h3 className="text-sm font-normal text-gray-500 mb-1">Net Income (Monthly)</h3>
                  <div className="text-2xl font-medium text-gray-900">
                    {formatCurrency(mappedData?.basicMetrics?.netMonth || sampleFinancialMetrics.netMonth)}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    {(mappedData?.basicMetrics?.totalIncome || 0) > (mappedData?.basicMetrics?.totalExpenses || 0) 
                      ? 'Profitable' 
                      : 'Loss-making'} this month
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-blue-500 w-full"></div>
                <CardContent className="p-6">
                  <h3 className="text-sm font-normal text-gray-500 mb-1">Total Income</h3>
                  <div className="text-2xl font-medium text-gray-900">
                    {formatCurrency(mappedData?.basicMetrics?.totalIncome || sampleFinancialMetrics.totalIncome)}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    <span className="text-gray-700">
                      {(mappedData?.basicMetrics?.previousPeriodIncomeChange || 0) >= 0 ? '+' : ''}
                      {(mappedData?.basicMetrics?.previousPeriodIncomeChange || sampleFinancialMetrics.previousPeriodIncomeChange).toFixed(1)}%
                    </span> from last month
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-blue-500 w-full"></div>
                <CardContent className="p-6">
                  <h3 className="text-sm font-normal text-gray-500 mb-1">Total Expenses</h3>
                  <div className="text-2xl font-medium text-gray-900">
                    {formatCurrency(mappedData?.basicMetrics?.totalExpenses || sampleFinancialMetrics.totalExpenses)}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    <span className="text-gray-700">
                      {(mappedData?.basicMetrics?.previousPeriodExpenseChange || 0) >= 0 ? '+' : ''}
                      {(mappedData?.basicMetrics?.previousPeriodExpenseChange || sampleFinancialMetrics.previousPeriodExpenseChange).toFixed(1)}%
                    </span> from last month
                  </p>
                </CardContent>
              </Card>
            </div>
            
            {/* Cash Flow Overview and Connect Bank */}
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 mt-8">
              <div className="xl:col-span-2">
                <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                  <div className="h-1 bg-blue-500 w-full"></div>
                  <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                    <CardTitle className="text-base font-medium text-gray-800">Cash Flow</CardTitle>
                  </CardHeader>
                  <CardContent className="p-6">
                    <div className="overflow-hidden">
                      <CashFlowOverview
                        dailyData={mappedData?.cashFlow?.daily?.length ? mappedData.cashFlow.daily : sampleDailyCashFlow}
                        weeklyData={mappedData?.cashFlow?.weekly?.length ? mappedData.cashFlow.weekly : sampleWeeklyCashFlow}
                        monthlyData={mappedData?.cashFlow?.monthly?.length ? mappedData.cashFlow.monthly : sampleMonthlyCashFlow}
                        currentBalance={mappedData?.basicMetrics?.currentBalance || sampleFinancialMetrics.currentBalance}
                        netToday={mappedData?.basicMetrics?.netToday || sampleFinancialMetrics.netToday}
                        netWeek={mappedData?.basicMetrics?.netWeek || sampleFinancialMetrics.netWeek}
                        netMonth={mappedData?.basicMetrics?.netMonth || sampleFinancialMetrics.netMonth}
                        burnRate={mappedData?.basicMetrics?.burnRate || sampleFinancialMetrics.burnRate}
                        runway={mappedData?.basicMetrics?.runway || sampleFinancialMetrics.runway}
                        formatCurrency={formatCurrency}
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <div className="xl:col-span-1">
                <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)] h-full">
                  <div className="h-1 bg-blue-500 w-full"></div>
                  <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                    <CardTitle className="text-base font-medium text-gray-800">Connect Bank</CardTitle>
                  </CardHeader>
                  <CardContent className="p-6">
                    <div className="flex flex-col h-full justify-center">
                      <p className="text-sm text-gray-600 mb-4">
                        Sync your financial data automatically by securely connecting your business bank accounts.
                      </p>
                      <Button 
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                        onClick={() => setConnectDialogOpen(true)}
                      >
                        <Wallet className="h-4 w-4 mr-2" />
                        Connect Bank Account
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* Smart Recommendations */}
            <div className="mt-8">
              <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
                <div className="h-1 bg-blue-500 w-full"></div>
                <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                  <CardTitle className="text-base font-medium text-gray-800">Financial Recommendations</CardTitle>
                </CardHeader>
                <CardContent className="p-6">
                  <SmartRecommendations
                    recommendations={mappedData?.recommendations || sampleRecommendations as SmartRecommendationsProps['recommendations']}
                    onDismissRecommendation={handleDismissRecommendation}
                    formatCurrency={formatCurrency}
                  />
                </CardContent>
              </Card>
            </div>
          </>
        );
      
      case 'expenses':
        return (
          <>
            <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
              <div className="h-1 bg-blue-500 w-full"></div>
              <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                <CardTitle className="text-base font-medium text-gray-800">Expense Analysis</CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <ExpenseBreakdown
                  expenses={mappedData?.expenses?.categories || sampleExpenseCategories as ExpenseBreakdownProps['expenses']}
                  detailedExpenses={mappedData?.mappedDetailedExpenses || sampleDetailedExpenses as ExpenseBreakdownProps['detailedExpenses']}
                  totalIncome={mappedData?.basicMetrics?.totalIncome || sampleFinancialMetrics.totalIncome}
                  totalExpenses={mappedData?.basicMetrics?.totalExpenses || sampleFinancialMetrics.totalExpenses}
                  previousPeriodIncomeChange={mappedData?.basicMetrics?.previousPeriodIncomeChange || sampleFinancialMetrics.previousPeriodIncomeChange}
                  previousPeriodExpenseChange={mappedData?.basicMetrics?.previousPeriodExpenseChange || sampleFinancialMetrics.previousPeriodExpenseChange}
                  formatCurrency={formatCurrency}
                />
              </CardContent>
            </Card>

            <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)] mt-6">
              <div className="h-1 bg-blue-500 w-full"></div>
              <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
                <CardTitle className="text-base font-medium text-gray-800">Top Vendors & Customers</CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <TopVendorsCustomers
                  topVendors={mappedData?.vendors?.top || sampleTopVendors as TopVendorsCustomersProps['topVendors']}
                  topCustomers={mappedData?.customers?.top || sampleTopCustomers as TopVendorsCustomersProps['topCustomers']}
                  formatCurrency={formatCurrency}
                />
              </CardContent>
            </Card>
          </>
        );
        
      case 'benchmarks':
        return (
          <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
            <div className="h-1 bg-blue-500 w-full"></div>
            <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
              <CardTitle className="text-base font-medium text-gray-800">Industry Benchmarks</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <BenchmarkComparison 
                metrics={mappedData?.benchmarks?.metrics || sampleBenchmarkMetrics as BenchmarkComparisonProps['metrics']}
                industryName={mappedData?.benchmarks?.industryName || "Café & Restaurant"}
                businessSizeRange={mappedData?.benchmarks?.businessSizeRange || "$200K-$500K"}
                dataSource={mappedData?.benchmarks?.dataSource || "Australian Tax Office industry benchmarks"}
                lastUpdated={mappedData?.benchmarks?.lastUpdated || "July 2023"}
                formatCurrency={formatCurrency}
              />
            </CardContent>
          </Card>
        );
        
      case 'transactions':
        return (
          <Card className="bg-white border-0 rounded-xl overflow-hidden ring-1 ring-gray-200 shadow-[0_4px_12px_rgba(0,0,0,0.05)]">
            <div className="h-1 bg-blue-500 w-full"></div>
            <CardHeader className="border-b border-gray-100 py-5 px-6 bg-gray-50">
              <CardTitle className="text-base font-medium text-gray-800">Recent Transactions</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <TransactionList
                transactions={mappedData?.transactions || sampleTransactions as TransactionListProps['transactions']}
                formatCurrency={formatCurrency}
              />
            </CardContent>
          </Card>
        );
        
      default:
        return null;
    }
  };
  
  return (
    <PageTransition>
      <div className="min-h-screen bg-white">
        <div className="p-6 py-4">
          {/* Header with Last Updated and Settings */}
          <PageHeader
            title="Financial Insights"
            subtitle={error ? 
              `Error: ${error}` : 
              `Last updated: ${lastUpdated || new Date().toLocaleString()}`
            }
          >
            <div className="flex items-center gap-3">
              <Select 
                defaultValue={selectedCurrency}
                onValueChange={(value) => setSelectedCurrency(value)}
              >
                <SelectTrigger className="w-[120px] border-0 ring-1 ring-gray-200 bg-white shadow-sm rounded-xl">
                  <SelectValue placeholder="Currency" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectLabel>Currencies</SelectLabel>
                    <SelectItem value="USD">USD ($)</SelectItem>
                    <SelectItem value="EUR">EUR (€)</SelectItem>
                    <SelectItem value="GBP">GBP (£)</SelectItem>
                    <SelectItem value="CAD">CAD ($)</SelectItem>
                    <SelectItem value="AUD">AUD ($)</SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              
              <Button 
                variant="outline" 
                className="border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-xl"
                onClick={refreshFinancialData}
                disabled={isRefreshing}
              >
                {isRefreshing ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Refreshing...
                  </>
                ) : (
                  <>
                    <RefreshCcw className="h-4 w-4 mr-2" />
                    Refresh
                  </>
                )}
              </Button>
              
              <Button variant="ghost" size="icon" className="text-gray-500">
                <Settings className="h-5 w-5" />
              </Button>
            </div>
          </PageHeader>

          {/* Navigation Tabs */}
          <div className="border-b border-gray-100 mb-8">
            <nav className="flex space-x-8 -mb-px">
              <button
                onClick={() => setActiveSection('overview')}
                className={`py-4 px-1 border-b-2 text-sm font-medium ${
                  activeSection === 'overview'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Overview
              </button>
              <button
                onClick={() => setActiveSection('expenses')}
                className={`py-4 px-1 border-b-2 text-sm font-medium ${
                  activeSection === 'expenses'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Expenses
              </button>
              <button
                onClick={() => setActiveSection('benchmarks')}
                className={`py-4 px-1 border-b-2 text-sm font-medium ${
                  activeSection === 'benchmarks'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Benchmarks
              </button>
              <button
                onClick={() => setActiveSection('transactions')}
                className={`py-4 px-1 border-b-2 text-sm font-medium ${
                  activeSection === 'transactions'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Transactions
              </button>
            </nav>
          </div>
          
          {/* Render the active section */}
          {renderActiveSection()}
        </div>
        
        {/* Bank Connection Dialog */}
        <Dialog open={connectDialogOpen} onOpenChange={setConnectDialogOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Connect Bank Account</DialogTitle>
              <DialogDescription>
                Enter your details to securely connect your bank account.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="firstName" className="text-right">
                  First Name
                </Label>
                <Input
                  id="firstName"
                  name="firstName"
                  value={bankConnectForm.firstName}
                  onChange={handleFormChange}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="email" className="text-right">
                  Email
                </Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={bankConnectForm.email}
                  onChange={handleFormChange}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="mobile" className="text-right">
                  Mobile
                </Label>
                <Input
                  id="mobile"
                  name="mobile"
                  value={bankConnectForm.mobile}
                  onChange={handleFormChange}
                  className="col-span-3"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setConnectDialogOpen(false)}>
                Cancel
              </Button>
              <Button 
                onClick={handleConnectBank}
                disabled={connectBankLoading}
              >
                {connectBankLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Connecting...
                  </>
                ) : (
                  'Connect'
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </PageTransition>
  )
} "use client"

import { useState, useEffect, useMemo, useRef, useCallback } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { 
  Search, 
  Filter, 
  Download, 
  Calendar, 
  ArrowDown, 
  ArrowUp, 
  Gift, 
  ShoppingCart, 
  Users,
  MoreHorizontal,
  Eye,
  ChevronDown,
  ChevronUp,
  Zap,
  CalendarIcon,
  DollarSign,
  AlertCircle,
  RefreshCw,
  Loader2,
  Clock,
  CreditCard,
  ShoppingBag,
  User,
  X
} from "lucide-react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, query, getDocs, orderBy, limit, Timestamp, where, doc, getDoc } from "firebase/firestore"
import { format } from "date-fns"
import { cn } from "@/lib/utils"
import { useRouter } from "next/navigation"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"
import { Calendar as UiCalendar } from "@/components/ui/calendar"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

// Define transaction type with Firestore timestamp
interface Transaction {
  id: string
  actualcreatedAt: Timestamp | string
  amount: number
  createdAt: Timestamp | string
  customerId: string
  day: string
  merchantId: string
  merchantName: string
  status: string
  type: string
}

// Add this interface for redemptions
interface Redemption {
  id: string
  customerId: string
  merchantId: string
  pointsUsed: number
  redemptionDate: any
  redemptionId: string
  rewardId: string
  rewardName: string
  status: string
}

// Add a customer interface
interface Customer {
  id: string
  fullName: string
}

// Add a combined activity type to handle both transactions and redemptions
interface CombinedActivity {
  id: string
  type: "transaction" | "redemption"
  date: any // This will store createdAt or redemptionDate
  customerId: string
  displayName: string // For transactions: type, for redemptions: rewardName
  amount: number | string // For transactions: dollar amount, for redemptions: points or "Free"
  status: string
  day?: string // Only for transactions
  originalData: Transaction | Redemption
}

// Add a new interface for Square sales data
interface SquareSale {
  id: string;
  orderId: string;
  locationId: string;
  createdAt: string;
  updatedAt: string;
  state: string;
  totalAmount: number;
  currency: string;
  customerName: string;
  customerId: string | null;
  source: string;
  lineItems: {
    name: string;
    quantity: string;
    unitPrice: number;
    totalPrice: number;
  }[];
}

// Add an interface for Lightspeed sales
interface LightspeedSale {
  saleID: string;
  timeStamp: string;
  discountPercent: string;
  completed: string;
  archived: string;
  voided: string;
  ticketNumber: string;
  calcTotal: string;
  calcSubtotal: string;
  calcTaxable: string;
  calcNonTaxable?: string; // Add this property as optional
  calcTax1: string;
  calcTax2?: string; // Make tax2 optional as well
  total: string;
  displayableTotal: string;
  balance: string;
  customerID: string;
  employeeID: string;
  registerID: string;
  shopID: string;
  isWorkOrder?: string;
  customerName?: string;
  items?: Array<{
    itemID: string;
    description: string;
    unitPrice: string;
    quantity: string;
    extPrice: string;
    name: string;
  }>;
}

// Add interface for Lightspeed Account
interface LightspeedAccount {
  accountID: string;
  name: string;
}

// Add a new interface for daily sales data
interface ProcessedSale extends LightspeedSale {
  // ProcessedSale extends LightspeedSale with any additional fields
  // that might be added during processing
}

type ActivityCategory = "all" | "transactions" | "redemptions" | "sales" | "lightspeed_sales"
type SortField = "createdAt" | "amount" | "status" | "type" | "customerId" | "day" | "saleID" | "timeStamp" | "ticketNumber" | "calcSubtotal" | "calcTax1" | "calcTax2" | "total" | "completed"
type SortDirection = "asc" | "desc"

export default function ActivityPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [redemptions, setRedemptions] = useState<Redemption[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const [activityCategory, setActivityCategory] = useState<ActivityCategory>("all")
  const [sortField, setSortField] = useState<SortField>("createdAt")
  const [sortDirection, setSortDirection] = useState<SortDirection>("desc")
  const [customers, setCustomers] = useState<Record<string, Customer>>({})
  const [showFilters, setShowFilters] = useState(false)
  const [dateFilter, setDateFilter] = useState("all")
  const [statusFilters, setStatusFilters] = useState({
    completed: true,
    pending: true,
    failed: true
  })
  const [typeFilters, setTypeFilters] = useState({
    purchase: true,
    reward: true
  })
  const [amountRange, setAmountRange] = useState([0, 1000])
  const [customDateRange, setCustomDateRange] = useState<{start: Date | undefined, end: Date | undefined}>({
    start: undefined,
    end: undefined
  })
  const [showCustomDateRange, setShowCustomDateRange] = useState(false)
  const [squareSales, setSquareSales] = useState<SquareSale[]>([])
  const [loadingSales, setLoadingSales] = useState(false)
  const [salesError, setSalesError] = useState<string | null>(null)
  const [lightspeedSales, setLightspeedSales] = useState<LightspeedSale[]>([])
  const [loadingLightspeedSales, setLoadingLightspeedSales] = useState(false)
  const [lightspeedError, setLightspeedError] = useState<string | null>(null)
  const [lightspeedAccountInfo, setLightspeedAccountInfo] = useState<LightspeedAccount | null>(null)
  const [selectedLightspeedSale, setSelectedLightspeedSale] = useState<LightspeedSale | null>(null)
  const [isLightspeedDrawerOpen, setIsLightspeedDrawerOpen] = useState(false)
  // Add pagination state variables for Lightspeed sales
  const [hasMoreLightspeedSales, setHasMoreLightspeedSales] = useState(true)
  const [lightspeedPage, setLightspeedPage] = useState(1)
  const [fetchingMoreSales, setFetchingMoreSales] = useState(false)
  const salesListRef = useRef<HTMLDivElement>(null)
  
  useEffect(() => {
    const fetchActivity = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        
        // Fetch transactions (existing code)
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const transactionsQuery = query(transactionsRef, limit(100))
        const transactionsSnapshot = await getDocs(transactionsQuery)
        
        const transactionsData: Transaction[] = []
        transactionsSnapshot.forEach((doc) => {
          transactionsData.push({
            id: doc.id,
            ...doc.data() as Omit<Transaction, 'id'>
          })
        })
        
        setTransactions(transactionsData)
        
        // Fetch redemptions
        const redemptionsRef = collection(db, 'redemptions')
        const redemptionsQuery = query(
          redemptionsRef,
          where('merchantId', '==', user.uid),
          orderBy('redemptionDate', 'desc'),
          limit(100)
        )
        
        const redemptionsSnapshot = await getDocs(redemptionsQuery)
        const redemptionsData: Redemption[] = []
        
        redemptionsSnapshot.forEach((doc) => {
          redemptionsData.push({
            id: doc.id,
            ...doc.data() as Omit<Redemption, 'id'>
          })
        })
        
        setRedemptions(redemptionsData)
        
        // Get unique customer IDs from both transactions and redemptions
        const customerIds = new Set([
          ...transactionsData.map(t => t.customerId),
          ...redemptionsData.map(r => r.customerId)
        ])
        
        // Fetch customer data for each unique customer ID
        const customersData: Record<string, Customer> = {}
        
        for (const customerId of customerIds) {
          if (customerId) {
            const customerRef = doc(db, 'merchants', user.uid, 'customers', customerId)
            const customerSnap = await getDoc(customerRef)
            
            if (customerSnap.exists()) {
              const data = customerSnap.data()
              customersData[customerId] = {
                id: customerId,
                fullName: data.fullName || 'Unknown Customer'
              }
            } else {
              customersData[customerId] = {
                id: customerId,
                fullName: 'Unknown Customer'
              }
            }
          }
        }
        
        setCustomers(customersData)
      } catch (error) {
        console.error("Error fetching activity:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchActivity()
  }, [user])

  // Add a function to apply filters
  const applyFilters = (data: Transaction[] | Redemption[] | CombinedActivity[]) => {
    return data.filter(item => {
      // Apply status filter
      const status = item.status.toLowerCase()
      if (status in statusFilters && !statusFilters[status as keyof typeof statusFilters]) return false

      // Apply type filter for transactions
      if ('type' in item) {
        const type = item.type.toLowerCase()
        if (type in typeFilters && !typeFilters[type as keyof typeof typeFilters]) return false
      }

      // Apply date filter
      const date = 'date' in item ? item.date : 
                  'createdAt' in item ? item.createdAt : 
                  'redemptionDate' in item ? item.redemptionDate : null
      
      if (date) {
        const dateObj = typeof date === 'object' && 'seconds' in date ? 
          new Date(date.seconds * 1000) : 
          typeof date === 'string' ? new Date(date) : null
        
        if (!dateObj) return false
        
        if (dateFilter === "custom") {
          // Handle custom date range
          if (customDateRange.start && !customDateRange.end) {
            // If only start date is set, filter for items on or after start date
            return dateObj >= customDateRange.start
          } else if (!customDateRange.start && customDateRange.end) {
            // If only end date is set, filter for items on or before end date
            const endOfDay = new Date(customDateRange.end)
            endOfDay.setHours(23, 59, 59, 999)
            return dateObj <= endOfDay
          } else if (customDateRange.start && customDateRange.end) {
            // If both dates are set, filter for items between start and end dates
            const endOfDay = new Date(customDateRange.end)
            endOfDay.setHours(23, 59, 59, 999)
            return dateObj >= customDateRange.start && dateObj <= endOfDay
          }
          return true
        } else if (dateFilter !== "all") {
          const now = new Date()
          const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
          const yesterday = new Date(today)
          yesterday.setDate(yesterday.getDate() - 1)
          const thisWeekStart = new Date(today)
          thisWeekStart.setDate(today.getDate() - today.getDay())
          const lastWeekStart = new Date(thisWeekStart)
          lastWeekStart.setDate(lastWeekStart.getDate() - 7)
          const lastWeekEnd = new Date(thisWeekStart)
          lastWeekEnd.setDate(lastWeekEnd.getDate() - 1)
          const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1)
          
          switch (dateFilter) {
            case "today":
              return dateObj >= today
            case "yesterday":
              return dateObj >= yesterday && dateObj < today
            case "thisWeek":
              return dateObj >= thisWeekStart
            case "lastWeek":
              return dateObj >= lastWeekStart && dateObj < thisWeekStart
            case "thisMonth":
              return dateObj >= thisMonthStart
            default:
              return true
          }
        }
      }

      // Apply amount filter
      const amount = 'amount' in item ? Number(item.amount) : 
                    'pointsUsed' in item ? item.pointsUsed : 0
      
      if (typeof amount === 'number' && (amount < amountRange[0] || amount > amountRange[1])) {
        return false
      }

      return true
    })
  }

  // Now define filteredTransactions AFTER applyFilters is defined
  const filteredTransactions = useMemo(() => {
    let filtered = transactions.filter(transaction => {
      const matchesSearch = !searchQuery ? true : (
        (transaction.customerId && transaction.customerId.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (transaction.merchantName && transaction.merchantName.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (transaction.type && transaction.type.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (transaction.status && transaction.status.toLowerCase().includes(searchQuery.toLowerCase()))
      );
      
      const matchesCategory = 
        activityCategory === "all" || 
        (activityCategory === "transactions" && transaction.type.toLowerCase() === "purchase") ||
        (activityCategory === "redemptions" && transaction.type.toLowerCase() === "reward");
      
      return matchesSearch && matchesCategory;
    });
    
    // Apply additional filters
    filtered = applyFilters(filtered) as Transaction[];
    
    // Sort logic
    return filtered.sort((a, b) => {
      // Sort by selected field
      let comparison = 0;
      
      switch (sortField) {
        case "customerId":
          comparison = a.customerId.localeCompare(b.customerId);
          break;
        case "createdAt":
          const dateA = a.createdAt && typeof a.createdAt === 'object' && 'seconds' in a.createdAt 
            ? a.createdAt.seconds * 1000 
            : typeof a.createdAt === 'string' ? new Date(a.createdAt).getTime() : 0;
          
          const dateB = b.createdAt && typeof b.createdAt === 'object' && 'seconds' in b.createdAt 
            ? b.createdAt.seconds * 1000 
            : typeof b.createdAt === 'string' ? new Date(b.createdAt).getTime() : 0;
          
          comparison = dateA - dateB;
          break;
        case "amount":
          comparison = a.amount - b.amount;
          break;
        case "status":
          comparison = a.status.localeCompare(b.status);
          break;
        case "type":
          comparison = a.type.localeCompare(b.type);
          break;
        case "day":
          comparison = a.day ? a.day.localeCompare(b.day || "") : 0;
          break;
        default:
          comparison = 0;
      }
      
      // Apply sort direction
      return sortDirection === "asc" ? comparison : -comparison;
    });
  }, [transactions, searchQuery, activityCategory, sortField, sortDirection, statusFilters, typeFilters, dateFilter, amountRange, customDateRange, showCustomDateRange]);

  // Add a function to filter redemptions based on search and other criteria
  const filteredRedemptions = useMemo(() => {
    if (!redemptions) return []
    
    let result = [...redemptions]
    
    // Apply search filter if any
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      result = result.filter(redemption => 
        redemption.rewardName.toLowerCase().includes(query) ||
        redemption.customerId.toLowerCase().includes(query) ||
        redemption.status.toLowerCase().includes(query)
      )
    }
    
    // Apply category filter
    if (activityCategory !== 'all' && activityCategory !== 'redemptions') {
      return []
    }
    
    // Apply sorting
    result.sort((a, b) => {
      let comparison = 0
      
      switch (sortField) {
        case 'createdAt':
          // For redemptions, use redemptionDate instead of createdAt
          const dateA = a.redemptionDate?.seconds || 0
          const dateB = b.redemptionDate?.seconds || 0
          comparison = dateB - dateA // Default to newest first
          break
        case 'amount':
          // For redemptions, use pointsUsed instead of amount
          comparison = b.pointsUsed - a.pointsUsed
          break
        case 'status':
          comparison = a.status.localeCompare(b.status)
          break
        default:
          comparison = 0
      }
      
      return sortDirection === 'asc' ? -comparison : comparison
    })
    
    return result
  }, [redemptions, searchQuery, activityCategory, sortField, sortDirection])

  // Format date for display - handle both string dates and Firestore timestamps
  const formatDate = (dateValue: Timestamp | string | undefined) => {
    if (!dateValue) return "N/A"
    
    try {
      // Handle Firestore Timestamp
      if (typeof dateValue === 'object' && 'seconds' in dateValue) {
        const date = new Date(dateValue.seconds * 1000)
        return format(date, 'MMM d, yyyy h:mm a')
      }
      
      // Handle string date
      if (typeof dateValue === 'string') {
        const date = new Date(dateValue)
        return format(date, 'MMM d, yyyy h:mm a')
      }
      
      return "Invalid date"
    } catch (e) {
      console.error("Error formatting date:", e)
      return "Invalid date"
    }
  }

  // Get transaction icon based on type
  const getTransactionIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'purchase':
        return <ShoppingCart className="h-4 w-4" />
      case 'reward':
        return <Gift className="h-4 w-4" />
      default:
        return <ArrowUp className="h-4 w-4" />
    }
  }

  // Get transaction status badge
  const getStatusBadge = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 rounded-md">Completed</Badge>
      case 'pending':
        return <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200 rounded-md">Pending</Badge>
      case 'failed':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200 rounded-md">Failed</Badge>
      default:
        return <Badge variant="outline" className="rounded-md">{status}</Badge>
    }
  }

  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortDirection(prev => prev === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("desc")
    }
  }

  const SortButton = ({ field, children }: { field: SortField, children: React.ReactNode }) => (
    <button
      onClick={() => handleSort(field)}
      className="flex items-center gap-1 hover:text-foreground"
    >
      {children}
      {sortField === field && (
        sortDirection === "desc" ? 
          <ChevronDown className="h-4 w-4" /> : 
          <ChevronUp className="h-4 w-4" />
      )}
    </button>
  )

  // Add the combined filtered activity
  const combinedActivity = useMemo(() => {
    if (activityCategory !== "all") return []
    
    // Convert transactions to combined format
    const transactionItems: CombinedActivity[] = filteredTransactions.map(transaction => ({
      id: transaction.id,
      type: "transaction",
      date: transaction.createdAt,
      customerId: transaction.customerId,
      displayName: transaction.type,
      amount: transaction.amount,
      status: transaction.status,
      originalData: transaction
    }))
    
    // Convert redemptions to combined format
    const redemptionItems: CombinedActivity[] = filteredRedemptions.map(redemption => ({
      id: redemption.id,
      type: "redemption",
      date: redemption.redemptionDate,
      customerId: redemption.customerId,
      displayName: redemption.rewardName,
      amount: redemption.pointsUsed === 0 ? "Free" : redemption.pointsUsed,
      status: redemption.status,
      originalData: redemption
    }))
    
    // Combine and sort
    const combined = [...transactionItems, ...redemptionItems]
    
    // Sort by date
    combined.sort((a, b) => {
      const dateA = a.date?.seconds || 0
      const dateB = b.date?.seconds || 0
      return sortDirection === "asc" ? dateA - dateB : dateB - dateA
    })
    
    return combined
  }, [filteredTransactions, filteredRedemptions, activityCategory, sortDirection])

  // Completely revamped PDF export function
  const handleExportPDF = async () => {
    try {
      // First, dynamically import the necessary modules
      const jspdfModule = await import('jspdf');
      const autoTableModule = await import('jspdf-autotable');
      
      // Create a new document
      const doc = new jspdfModule.default();
      
      // Manually add the plugin to the document
      const autoTable = autoTableModule.default;
      
      // Add title
      doc.setFontSize(18);
      doc.text('Activity Report', 14, 22);
      
      // Add date generated
      doc.setFontSize(11);
      doc.text(`Generated: ${format(new Date(), 'MMM d, yyyy h:mm a')}`, 14, 30);
      
      // Determine which data to export based on current tab
      let dataToExport = [];
      let title = '';
      
      if (activityCategory === 'all') {
        title = 'All Activity';
        dataToExport = combinedActivity.map(item => [
          formatDate(item.date),
          customers[item.customerId]?.fullName || 'Unknown Customer',
          item.displayName,
          typeof item.amount === 'number' ? `$${item.amount}` : item.amount,
          item.status
        ]);
      } else if (activityCategory === 'transactions') {
        title = 'Transactions';
        dataToExport = filteredTransactions.map(item => [
          formatDate(item.createdAt),
          customers[item.customerId]?.fullName || 'Unknown Customer',
          item.type,
          `$${item.amount}`,
          item.status
        ]);
      } else {
        title = 'Redemptions';
        dataToExport = filteredRedemptions.map(item => [
          formatDate(item.redemptionDate),
          customers[item.customerId]?.fullName || 'Unknown Customer',
          item.rewardName,
          item.pointsUsed === 0 ? 'Free' : `${item.pointsUsed} points`,
          item.status
        ]);
      }
      
      // Add subtitle with current view
      doc.setFontSize(14);
      doc.text(title, 14, 40);
      
      // Generate table using the imported autoTable function
      autoTable(doc, {
        startY: 45,
        head: [['Date', 'Customer', 'Type', 'Amount', 'Status']],
        body: dataToExport,
        theme: 'grid',
        styles: { fontSize: 10, cellPadding: 3 },
        headStyles: { fillColor: [66, 66, 66] }
      });
      
      // Save the PDF
      doc.save(`activity-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('There was an error generating the PDF. Please try again.');
    }
  };

  // Add a function to handle status filter changes
  const handleStatusFilterChange = (status: string, checked: boolean) => {
    setStatusFilters(prev => ({
      ...prev,
      [status.toLowerCase()]: checked
    }))
  }

  // Add a function to handle type filter changes
  const handleTypeFilterChange = (type: string, checked: boolean) => {
    setTypeFilters(prev => ({
      ...prev,
      [type.toLowerCase()]: checked
    }))
  }

  // Add a function to fetch Square sales
  const fetchSquareSales = async () => {
    if (!user?.uid) return
    
    try {
      setLoadingSales(true)
      setSalesError(null)
      
      const response = await fetch(`/api/square/orders?merchantId=${user.uid}`)
      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch sales data')
      }
      
      if (data.success && Array.isArray(data.orders)) {
        setSquareSales(data.orders)
      } else {
        setSquareSales([])
      }
    } catch (error) {
      console.error('Error fetching Square orders:', error)
      setSalesError(error instanceof Error ? error.message : 'An unknown error occurred')
    } finally {
      setLoadingSales(false)
    }
  }

  // Call fetchSquareSales when the selected tab is "sales"
  useEffect(() => {
    if (activityCategory === 'sales' && user?.uid) {
      fetchSquareSales()
    }
  }, [activityCategory, user?.uid])

  // Add function to fetch Lightspeed account info
  const fetchLightspeedAccountInfo = async () => {
    if (!user?.uid) return
    
    try {
      setLoadingLightspeedSales(true)
      setLightspeedError(null)
      
      // Fetch account info
      const response = await fetch(`/api/lightspeed/account?merchantId=${user.uid}`)
      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch Lightspeed account information')
      }
      
      if (data.success && data.account) {
        setLightspeedAccountInfo(data.account)
        
        // Now fetch the sales data with the account ID
        if (data.account.accountID) {
          fetchLightspeedSales(data.account.accountID)
        }
      } else {
        setLightspeedAccountInfo(null)
        setLightspeedError('No Lightspeed account found or API returned no data')
      }
    } catch (error) {
      console.error('Error fetching Lightspeed account:', error)
      setLightspeedError(error instanceof Error ? error.message : 'An unknown error occurred')
      setLoadingLightspeedSales(false)
    }
  }
  
  // Update the fetchLightspeedSales function to support pagination
  const fetchLightspeedSales = async (accountId: string, isLoadingMore = false) => {
    if (!user?.uid || !accountId) return
    
    try {
      if (!isLoadingMore) {
        setLoadingLightspeedSales(true)
      } else {
        setFetchingMoreSales(true)
      }
      
      // Add page parameter
      const page = isLoadingMore ? lightspeedPage + 1 : 1
      
      // Fetch sales data with pagination
      const response = await fetch(`/api/lightspeed/sales?merchantId=${user.uid}&accountId=${accountId}&pages=${page}`)
      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch Lightspeed sales data')
      }
      
      if (data.success && Array.isArray(data.sales)) {
        // Always trim to the 10 most-recent sales returned by the API
        const limitedSales = data.sales.slice(0, 10)

        if (isLoadingMore) {
          // When we are already loading more, merge but still respect the 10-item cap
          const combined = [...lightspeedSales, ...limitedSales].slice(0, 10)
          setLightspeedSales(combined)
          setLightspeedPage(page)
        } else {
          // Initial load – just keep the 10 most recent
          setLightspeedSales(limitedSales)
          setLightspeedPage(1)
        }

        // We've deliberately capped to 10 items, so don't request further pages
        setHasMoreLightspeedSales(false)
      } else {
        if (!isLoadingMore) {
          setLightspeedSales([])
        }
        setHasMoreLightspeedSales(false)
      }
    } catch (error) {
      console.error('Error fetching Lightspeed sales:', error)
      setLightspeedError(error instanceof Error ? error.message : 'An unknown error occurred')
    } finally {
      if (!isLoadingMore) {
        setLoadingLightspeedSales(false)
      } else {
        setFetchingMoreSales(false)
      }
    }
  }
  
  // Call fetchLightspeedAccountInfo when the selected tab is "lightspeed_sales"
  useEffect(() => {
    if (activityCategory === 'lightspeed_sales' && user?.uid) {
      fetchLightspeedAccountInfo()
    }
  }, [activityCategory, user?.uid])

  // Add function to handle opening the sale details drawer
  const handleViewLightspeedSale = (sale: LightspeedSale) => {
    setSelectedLightspeedSale(sale)
    setIsLightspeedDrawerOpen(true)
  }

  // Add function to handle Lightspeed Sales sorting
  const handleLightspeedSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(prev => prev === "asc" ? "desc" : "asc")
    } else {
      setSortField(field as SortField)
      setSortDirection("desc")
    }
  }

  // Add filter functions to apply the date filters to Lightspeed sales
  const applyLightspeedFilters = useMemo(() => {
    if (!lightspeedSales || lightspeedSales.length === 0) return [];
    
    return lightspeedSales.filter(sale => {
      const saleDate = new Date(sale.timeStamp);
      
      // Apply date filters
      if (dateFilter !== "all") {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        const startOfWeek = new Date(today);
        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
        
        const startOfLastWeek = new Date(startOfWeek);
        startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);
        
        const endOfLastWeek = new Date(startOfWeek);
        endOfLastWeek.setDate(endOfLastWeek.getDate() - 1);
        
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        const startOfLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
        const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
        
        switch (dateFilter) {
          case 'today':
            if (saleDate < today || saleDate >= new Date(today.getTime() + 86400000)) return false;
            break;
          case 'yesterday':
            if (saleDate < yesterday || saleDate >= today) return false;
            break;
          case 'thisWeek':
            if (saleDate < startOfWeek) return false;
            break;
          case 'lastWeek':
            if (saleDate < startOfLastWeek || saleDate >= startOfWeek) return false;
            break;
          case 'thisMonth':
            if (saleDate < startOfMonth) return false;
            break;
          case 'lastMonth':
            if (saleDate < startOfLastMonth || saleDate >= startOfMonth) return false;
            break;
          case 'custom':
            if (customDateRange.start && saleDate < customDateRange.start) return false;
            if (customDateRange.end) {
              const endDateWithTime = new Date(customDateRange.end);
              endDateWithTime.setHours(23, 59, 59, 999);
              if (saleDate > endDateWithTime) return false;
            }
            break;
        }
      }
      
      // Apply search query if present
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return (
          sale.saleID.toLowerCase().includes(query) ||
          sale.ticketNumber.toLowerCase().includes(query) ||
          (sale.customerName && sale.customerName.toLowerCase().includes(query))
        );
      }
      
      return true;
    });
  }, [lightspeedSales, dateFilter, customDateRange.start, customDateRange.end, searchQuery]);

  // Add sorting function for Lightspeed sales
  const sortedLightspeedSales = useMemo(() => {
    if (!applyLightspeedFilters || applyLightspeedFilters.length === 0) return [];
    
    return [...applyLightspeedFilters].sort((a, b) => {
      let valA, valB;
      
      switch (sortField) {
        case 'saleID':
          valA = a.saleID;
          valB = b.saleID;
          break;
        case 'timeStamp':
          valA = new Date(a.timeStamp).getTime();
          valB = new Date(b.timeStamp).getTime();
          break;
        case 'ticketNumber':
          valA = a.ticketNumber;
          valB = b.ticketNumber;
          break;
        case 'total':
          valA = parseFloat(a.total);
          valB = parseFloat(b.total);
          break;
        case 'calcSubtotal':
          valA = parseFloat(a.calcSubtotal);
          valB = parseFloat(b.calcSubtotal);
          break;
        case 'calcTax1':
          valA = parseFloat(a.calcTax1);
          valB = parseFloat(b.calcTax1);
          break;
        case 'completed':
          valA = a.completed === 'true' ? 1 : 0;
          valB = b.completed === 'true' ? 1 : 0;
          break;
        default:
          valA = new Date(a.timeStamp).getTime();
          valB = new Date(b.timeStamp).getTime();
      }
      
      if (sortDirection === 'asc') {
        return valA > valB ? 1 : -1;
      } else {
        return valA < valB ? 1 : -1;
      }
    });
  }, [applyLightspeedFilters, sortField, sortDirection]);

  // Add scroll handler for infinite scrolling
  const handleScroll = useCallback(() => {
    if (
      salesListRef.current &&
      window.innerHeight + window.scrollY >= salesListRef.current.offsetTop + salesListRef.current.clientHeight - 300 &&
      hasMoreLightspeedSales &&
      !fetchingMoreSales &&
      !loadingLightspeedSales &&
      activityCategory === 'lightspeed_sales' &&
      lightspeedAccountInfo?.accountID
    ) {
      fetchLightspeedSales(lightspeedAccountInfo.accountID, true)
    }
  }, [fetchingMoreSales, hasMoreLightspeedSales, lightspeedAccountInfo, loadingLightspeedSales, activityCategory])

  // Add effect for scroll handling
  useEffect(() => {
    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [handleScroll])

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Activity"
        >
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              className="h-8"
              onClick={handleExportPDF}
            >
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="h-8"
              onClick={() => setShowFilters(!showFilters)}
            >
              <Filter className="h-4 w-4 mr-2" />
              Filter
            </Button>
          </div>
        </PageHeader>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Tabs defaultValue="all" className="w-full" onValueChange={(value) => setActivityCategory(value as ActivityCategory)}>
              <TabsList className="mx-auto mb-4">
                <TabsTrigger value="all" className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  All Activity
                </TabsTrigger>
                <TabsTrigger value="transactions" className="flex items-center gap-2">
                  <ShoppingCart className="h-4 w-4" />
                  Transactions
                </TabsTrigger>
                <TabsTrigger value="redemptions" className="flex items-center gap-2">
                  <Gift className="h-4 w-4" />
                  Redemptions
                </TabsTrigger>
                <TabsTrigger value="sales" className="flex items-center gap-2">
                  <DollarSign className="h-4 w-4" />
                  Square Sales
                </TabsTrigger>
                <TabsTrigger value="lightspeed_sales" className="flex items-center gap-2">
                  <DollarSign className="h-4 w-4" />
                  Lightspeed Sales
                </TabsTrigger>
              </TabsList>
              
              <div className="flex flex-wrap items-center justify-between gap-2 mb-4 border-b pb-4">
                <div className="flex flex-wrap items-center gap-2">
                  <Button 
                    variant={dateFilter === "today" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("today")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Today
                  </Button>
                  <Button 
                    variant={dateFilter === "yesterday" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("yesterday")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Yesterday
                  </Button>
                  <Button 
                    variant={dateFilter === "thisWeek" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("thisWeek")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    This Week
                  </Button>
                  <Button 
                    variant={dateFilter === "lastWeek" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("lastWeek")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Last Week
                  </Button>
                  <Button 
                    variant={dateFilter === "thisMonth" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("thisMonth")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    This Month
                  </Button>
                  <Button 
                    variant={dateFilter === "all" ? "secondary" : "outline"} 
                    size="sm"
                    onClick={() => setDateFilter("all")}
                    className="rounded-md"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    All Time
                  </Button>
                </div>
                
                <div className="flex items-center gap-2 mt-2 md:mt-0">
                  <div className="relative w-[250px]">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      type="search"
                      placeholder="Search activity..."
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                  
                  <Popover open={showFilters} onOpenChange={setShowFilters}>
                    <PopoverTrigger asChild>
                      <Button variant="outline" className="gap-1">
                        <Filter className="h-4 w-4" />
                        Filters
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-96 p-4" align="end">
                      <div className="space-y-4">
                        <h4 className="font-medium">Filter Activity</h4>
                        
                        <div className="space-y-2">
                          <Label>Date Range</Label>
                          <Select 
                            value={dateFilter} 
                            onValueChange={(value) => {
                              setDateFilter(value)
                              setShowCustomDateRange(value === "custom")
                            }}
                          >
                            <SelectTrigger className="w-full">
                              <SelectValue placeholder="Select date range" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">All Time</SelectItem>
                              <SelectItem value="today">Today</SelectItem>
                              <SelectItem value="yesterday">Yesterday</SelectItem>
                              <SelectItem value="thisWeek">This Week</SelectItem>
                              <SelectItem value="thisMonth">This Month</SelectItem>
                              <SelectItem value="custom">Custom Range</SelectItem>
                            </SelectContent>
                          </Select>
                          
                          {showCustomDateRange && (
                            <div className="grid grid-cols-2 gap-4 mt-2">
                              <div className="grid gap-1">
                                <Label htmlFor="from">From</Label>
                                <Popover>
                                  <PopoverTrigger asChild>
                                    <Button
                                      id="from"
                                      variant={"outline"}
                                      className={cn(
                                        "w-full justify-start text-left font-normal px-4",
                                        !customDateRange.start && "text-muted-foreground"
                                      )}
                                    >
                                      <CalendarIcon className="mr-2 h-4 w-4" />
                                      {customDateRange.start ? format(customDateRange.start, "PP") : "Pick date"}
                                    </Button>
                                  </PopoverTrigger>
                                  <PopoverContent className="w-auto p-0" align="start">
                                    <UiCalendar
                                      mode="single"
                                      selected={customDateRange.start}
                                      onSelect={(date) => 
                                        setCustomDateRange(prev => ({ ...prev, start: date || undefined }))}
                                      initialFocus
                                    />
                                  </PopoverContent>
                                </Popover>
                              </div>
                              <div className="grid gap-1">
                                <Label htmlFor="to">To</Label>
                                <Popover>
                                  <PopoverTrigger asChild>
                                    <Button
                                      id="to"
                                      variant={"outline"}
                                      className={cn(
                                        "w-full justify-start text-left font-normal px-4",
                                        !customDateRange.end && "text-muted-foreground"
                                      )}
                                    >
                                      <CalendarIcon className="mr-2 h-4 w-4" />
                                      {customDateRange.end ? format(customDateRange.end, "PP") : "Pick date"}
                                    </Button>
                                  </PopoverTrigger>
                                  <PopoverContent className="w-auto p-0" align="start">
                                    <UiCalendar
                                      mode="single"
                                      selected={customDateRange.end}
                                      onSelect={(date) => 
                                        setCustomDateRange(prev => ({ ...prev, end: date || undefined }))}
                                      initialFocus
                                      disabled={(date) => 
                                        customDateRange.start ? date < customDateRange.start : false}
                                    />
                                  </PopoverContent>
                                </Popover>
                              </div>
                            </div>
                          )}
                        </div>
                        
                        <div className="space-y-2">
                          <Label>Status</Label>
                          <div className="flex flex-col gap-2">
                            <div className="flex items-center space-x-2">
                              <Checkbox 
                                id="status-completed" 
                                checked={statusFilters.completed}
                                onCheckedChange={(checked) => 
                                  handleStatusFilterChange('completed', checked as boolean)}
                              />
                              <Label htmlFor="status-completed" className="cursor-pointer">Completed</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox 
                                id="status-pending" 
                                checked={statusFilters.pending}
                                onCheckedChange={(checked) => 
                                  handleStatusFilterChange('pending', checked as boolean)}
                              />
                              <Label htmlFor="status-pending" className="cursor-pointer">Pending</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox 
                                id="status-failed" 
                                checked={statusFilters.failed}
                                onCheckedChange={(checked) => 
                                  handleStatusFilterChange('failed', checked as boolean)}
                              />
                              <Label htmlFor="status-failed" className="cursor-pointer">Failed</Label>
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <Label>Type</Label>
                          <div className="flex flex-col gap-2">
                            <div className="flex items-center space-x-2">
                              <Checkbox 
                                id="type-purchase" 
                                checked={typeFilters.purchase}
                                onCheckedChange={(checked) => 
                                  handleTypeFilterChange('purchase', checked as boolean)}
                              />
                              <Label htmlFor="type-purchase" className="cursor-pointer">Purchase</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox 
                                id="type-reward" 
                                checked={typeFilters.reward}
                                onCheckedChange={(checked) => 
                                  handleTypeFilterChange('reward', checked as boolean)}
                              />
                              <Label htmlFor="type-reward" className="cursor-pointer">Reward</Label>
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <Label>Amount Range</Label>
                          </div>
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="min-amount" className="text-xs">Min ($)</Label>
                              <Input
                                id="min-amount"
                                type="number"
                                min={0}
                                max={1000}
                                value={amountRange[0]}
                                onChange={(e) => setAmountRange([Number(e.target.value), amountRange[1]])}
                              />
                            </div>
                            <div>
                              <Label htmlFor="max-amount" className="text-xs">Max ($)</Label>
                              <Input
                                id="max-amount"
                                type="number"
                                min={0}
                                max={1000}
                                value={amountRange[1]}
                                onChange={(e) => setAmountRange([amountRange[0], Number(e.target.value)])}
                              />
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex justify-between pt-2">
                          <Button 
                            variant="outline" 
                            onClick={() => {
                              setStatusFilters({ completed: true, pending: true, failed: true })
                              setTypeFilters({ purchase: true, reward: true })
                              setDateFilter("all")
                              setAmountRange([0, 1000])
                              setCustomDateRange({ start: undefined, end: undefined })
                              setShowCustomDateRange(false)
                            }}
                          >
                            Reset Filters
                          </Button>
                          <Button onClick={() => setShowFilters(false)}>Apply Filters</Button>
                        </div>
                      </div>
                    </PopoverContent>
                  </Popover>
                </div>
              </div>
              
              <TabsContent value="all" className="space-y-4">
                <Card className="rounded-lg border border-gray-200">
                  <CardHeader className="py-4">
                    <CardTitle>All Activity</CardTitle>
                    <CardDescription>
                      View all transactions and redemptions
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>
                            <SortButton field="createdAt">
                              Date & Time
                            </SortButton>
                          </TableHead>
                          <TableHead className="w-[250px]">
                            <SortButton field="customerId">
                              Customer
                            </SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="type">
                              Type
                            </SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="amount">
                              Amount
                            </SortButton>
                          </TableHead>
                          <TableHead>
                            <SortButton field="status">
                              Status
                            </SortButton>
                          </TableHead>
                          <TableHead className="w-[50px]"></TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {loading ? (
                          <TableRow>
                            <TableCell colSpan={7} className="h-24 text-center">
                              <div className="flex justify-center">
                                <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                              </div>
                            </TableCell>
                          </TableRow>
                        ) : combinedActivity.length === 0 ? (
                          <TableRow>
                            <TableCell colSpan={7} className="h-24 text-center">
                              <div className="flex flex-col items-center justify-center">
                                <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                                  <Zap className="h-6 w-6 text-muted-foreground" />
                                </div>
                                <h3 className="mt-4 text-lg font-medium">
                                  No activity found
                                </h3>
                                <p className="text-sm text-muted-foreground mt-1">
                                  {searchQuery ? "Try adjusting your search query" : 
                                   "No activity records available"}
                                </p>
                              </div>
                            </TableCell>
                          </TableRow>
                        ) : (
                          combinedActivity.map((activity) => (
                            <TableRow key={`${activity.type}-${activity.id}`} className="hover:bg-muted/50">
                              <TableCell>
                                {formatDate(activity.date)}
                              </TableCell>
                              <TableCell>
                                <div className="flex items-center gap-2">
                                  <div className="h-8 w-8 rounded-full bg-muted flex items-center justify-center">
                                    <Users className="h-4 w-4 text-muted-foreground" />
                                  </div>
                                  <span>{customers[activity.customerId]?.fullName || 'Unknown Customer'}</span>
                                </div>
                              </TableCell>
                              <TableCell>
                                {activity.type === "transaction" ? (
                                  <Badge variant="outline" className={cn(
                                    "rounded-md",
                                    activity.displayName.toLowerCase() === "purchase" && "bg-green-50 text-green-700 border-green-200",
                                    activity.displayName.toLowerCase() === "reward" && "bg-purple-50 text-purple-700 border-purple-200"
                                  )}>
                                    <div className="flex items-center gap-1">
                                      {getTransactionIcon(activity.displayName)}
                                      <span className="capitalize">{activity.displayName}</span>
                                    </div>
                                  </Badge>
                                ) : (
                                  <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200 rounded-md">
                                    <div className="flex items-center gap-1">
                                      <Gift className="h-4 w-4" />
                                      <span>{activity.displayName}</span>
                                    </div>
                                  </Badge>
                                )}
                              </TableCell>
                              <TableCell>
                                {activity.type === "transaction" ? (
                                  <div className="inline-block px-3 py-1 rounded-md border border-slate-200 shadow-sm bg-white">
                                    <span className={cn(
                                      activity.displayName.toLowerCase() === "purchase" 
                                        ? "text-emerald-600 font-medium" 
                                        : "text-rose-600 font-medium"
                                    )}>
                                      ${activity.amount}
                                    </span>
                                  </div>
                                ) : (
                                  <div className="inline-block px-3 py-1 rounded-md border border-slate-200 shadow-sm bg-white">
                                    <span className={activity.amount === "Free" 
                                      ? "text-emerald-600 font-medium" 
                                      : "text-indigo-600 font-medium"}>
                                      {activity.amount === "Free" ? "Free" : `${activity.amount} points`}
                                    </span>
                                  </div>
                                )}
                              </TableCell>
                              <TableCell>
                                {getStatusBadge(activity.status)}
                              </TableCell>
                              <TableCell>
                                <div className="flex justify-end">
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" className="h-8 w-8 p-0 rounded-md">
                                        <MoreHorizontal className="h-4 w-4" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end" className="rounded-md">
                                      <DropdownMenuItem onClick={() => 
                                        router.push(activity.type === "transaction" 
                                          ? `/transactions/${activity.id}` 
                                          : `/redemptions/${(activity.originalData as Redemption).redemptionId}`)
                                      }>
                                        <Eye className="h-4 w-4 mr-2" />
                                        View Details
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </div>
                              </TableCell>
                            </TableRow>
                          ))
                        )}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="transactions" className="space-y-4">
                <Card className="rounded-lg border border-gray-200">
                  <CardHeader className="py-4">
                        <CardTitle>Transactions</CardTitle>
                    <CardDescription>
                          View all customer transactions
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("createdAt");
                                    setSortDirection(sortField === "createdAt" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Date & Time
                                  {sortField === "createdAt" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead className="w-[250px]">
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("customerId");
                                    setSortDirection(sortField === "customerId" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Customer
                                  {sortField === "customerId" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("type");
                                    setSortDirection(sortField === "type" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Type
                                  {sortField === "type" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("amount");
                                    setSortDirection(sortField === "amount" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Amount
                                  {sortField === "amount" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("status");
                                    setSortDirection(sortField === "status" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Status
                                  {sortField === "status" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead className="w-[50px]"></TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                          {loading ? (
                              <TableRow>
                                <TableCell colSpan={7} className="h-24 text-center">
                                  <div className="flex justify-center">
                                    <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                                  </div>
                                </TableCell>
                              </TableRow>
                          ) : filteredTransactions.length === 0 ? (
                              <TableRow>
                                <TableCell colSpan={7} className="h-24 text-center">
                                  <div className="flex flex-col items-center justify-center">
                                    <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                                      <ShoppingCart className="h-6 w-6 text-muted-foreground" />
                                    </div>
                                    <h3 className="mt-4 text-lg font-medium">
                                No transactions found
                                    </h3>
                                    <p className="text-sm text-muted-foreground mt-1">
                                      {searchQuery ? "Try adjusting your search query" : 
                                       "No transaction records available"}
                                    </p>
                                  </div>
                                </TableCell>
                              </TableRow>
                          ) : (
                            filteredTransactions.map((transaction) => (
                                <TableRow key={transaction.id} className="hover:bg-muted/50">
                                  <TableCell>
                                  {formatDate(transaction.createdAt)}
                                  </TableCell>
                                  <TableCell>
                                  <div className="flex items-center gap-2">
                                      <div className="h-8 w-8 rounded-full bg-muted flex items-center justify-center">
                                    <Users className="h-4 w-4 text-muted-foreground" />
                                      </div>
                                      <span>{customers[transaction.customerId]?.fullName || 'Unknown Customer'}</span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <Badge variant="outline" className={cn(
                                      "rounded-md",
                                      transaction.type.toLowerCase() === "purchase" && "bg-green-50 text-green-700 border-green-200",
                                      transaction.type.toLowerCase() === "reward" && "bg-purple-50 text-purple-700 border-purple-200"
                                    )}>
                                      <div className="flex items-center gap-1">
                                    {getTransactionIcon(transaction.type)}
                                    <span className="capitalize">{transaction.type}</span>
                                  </div>
                                    </Badge>
                                  </TableCell>
                                  <TableCell>
                                  <div className="inline-block px-3 py-1 rounded-md border border-slate-200 shadow-sm bg-white">
                                      <span className={cn(
                                        transaction.type.toLowerCase() === "purchase" 
                                          ? "text-emerald-600 font-medium" 
                                          : "text-rose-600 font-medium"
                                      )}>
                                        ${transaction.amount}
                                      </span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                  {getStatusBadge(transaction.status)}
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex justify-end">
                                      <DropdownMenu>
                                        <DropdownMenuTrigger asChild>
                                          <Button variant="ghost" className="h-8 w-8 p-0 rounded-md">
                                            <MoreHorizontal className="h-4 w-4" />
                                          </Button>
                                        </DropdownMenuTrigger>
                                        <DropdownMenuContent align="end" className="rounded-md">
                                          <DropdownMenuItem onClick={() => router.push(`/transactions/${transaction.id}`)}>
                                            <Eye className="h-4 w-4 mr-2" />
                                            View Details
                                          </DropdownMenuItem>
                                        </DropdownMenuContent>
                                      </DropdownMenu>
                                    </div>
                                  </TableCell>
                                </TableRow>
                              ))
                            )}
                          </TableBody>
                        </Table>
                  </CardContent>
                </Card>
              </TabsContent>
              
                  <TabsContent value="redemptions" className="space-y-4">
                <Card className="rounded-lg border border-gray-200">
                      <CardHeader className="py-4">
                        <CardTitle>Redemptions</CardTitle>
                    <CardDescription>
                          View all rewards redeemed by your customers
                    </CardDescription>
                  </CardHeader>
                      <CardContent className="p-0">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("createdAt");
                                    setSortDirection(sortField === "createdAt" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Date & Time
                                  {sortField === "createdAt" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead className="w-[250px]">
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("customerId");
                                    setSortDirection(sortField === "customerId" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Customer
                                  {sortField === "customerId" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("type");
                                    setSortDirection(sortField === "type" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Type
                                  {sortField === "type" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("amount");
                                    setSortDirection(sortField === "amount" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Amount
                                  {sortField === "amount" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead>
                                <Button 
                                  variant="ghost" 
                                  onClick={() => {
                                    setSortField("status");
                                    setSortDirection(sortField === "status" && sortDirection === "asc" ? "desc" : "asc");
                                  }}
                                  className="flex items-center gap-1 px-0 font-medium"
                                >
                                  Status
                                  {sortField === "status" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                                  )}
                                </Button>
                              </TableHead>
                              <TableHead className="w-[50px]"></TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {loading ? (
                              <TableRow>
                                <TableCell colSpan={7} className="h-24 text-center">
                                  <div className="flex justify-center">
                                    <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ) : filteredRedemptions.length === 0 ? (
                              <TableRow>
                                <TableCell colSpan={7} className="h-24 text-center">
                                  <div className="flex flex-col items-center justify-center">
                                    <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                                      <Gift className="h-6 w-6 text-muted-foreground" />
                                    </div>
                                    <h3 className="mt-4 text-lg font-medium">
                                      No redemptions found
                                    </h3>
                                    <p className="text-sm text-muted-foreground mt-1">
                                      {searchQuery ? "Try adjusting your search query" : 
                                       "No redemption records available"}
                                    </p>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ) : (
                              filteredRedemptions.map((redemption) => (
                                <TableRow key={redemption.id} className="hover:bg-muted/50">
                                  <TableCell>
                                    {formatDate(redemption.redemptionDate)}
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex items-center gap-2">
                                      <div className="h-8 w-8 rounded-full bg-muted flex items-center justify-center">
                                        <Users className="h-4 w-4 text-muted-foreground" />
                                      </div>
                                      <span>{customers[redemption.customerId]?.fullName || 'Unknown Customer'}</span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200 rounded-md">
                                      <div className="flex items-center gap-1">
                                        <Gift className="h-4 w-4" />
                                        <span>{redemption.rewardName}</span>
                                      </div>
                                    </Badge>
                                  </TableCell>
                                  <TableCell>
                                    <div className="inline-block px-3 py-1 rounded-md border border-slate-200 shadow-sm bg-white">
                                      <span className={redemption.pointsUsed === 0 
                                        ? "text-emerald-600 font-medium" 
                                        : "text-indigo-600 font-medium"}>
                                        {redemption.pointsUsed === 0 ? "Free" : `${redemption.pointsUsed} points`}
                                      </span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    {getStatusBadge(redemption.status)}
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex justify-end">
                                      <DropdownMenu>
                                        <DropdownMenuTrigger asChild>
                                          <Button variant="ghost" className="h-8 w-8 p-0 rounded-md">
                                            <MoreHorizontal className="h-4 w-4" />
                                          </Button>
                                        </DropdownMenuTrigger>
                                        <DropdownMenuContent align="end" className="rounded-md">
                                          <DropdownMenuItem onClick={() => router.push(`/redemptions/${redemption.redemptionId}`)}>
                                            <Eye className="h-4 w-4 mr-2" />
                                            View Details
                                          </DropdownMenuItem>
                                        </DropdownMenuContent>
                                      </DropdownMenu>
                                    </div>
                                  </TableCell>
                                </TableRow>
                              ))
                            )}
                          </TableBody>
                        </Table>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="sales" className="space-y-4">
                <Card className="rounded-lg border border-gray-200">
                  <CardHeader className="pb-3">
                    <CardTitle>Square Sales</CardTitle>
                    <CardDescription>
                      Sales data from your connected Square account
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {loadingSales ? (
                      <div className="flex items-center justify-center py-8">
                        <div className="h-8 w-8 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                      </div>
                    ) : salesError ? (
                      <div className="bg-red-50 border border-red-200 rounded-md p-4 text-center">
                        <p className="text-red-800 mb-2">Failed to load sales data</p>
                        <p className="text-sm text-red-600">{salesError}</p>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={fetchSquareSales} 
                          className="mt-2"
                        >
                          Try Again
                        </Button>
                      </div>
                    ) : squareSales.length === 0 ? (
                      <div className="text-center py-8">
                        <ShoppingCart className="h-12 w-12 mx-auto text-gray-300 mb-2" />
                        <p className="text-gray-500">No sales data available</p>
                        <p className="text-sm text-gray-400 mt-1">
                          {user?.uid ? 'Connect your Square account to see sales data' : 'Please log in to view sales data'}
                        </p>
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Order ID</TableHead>
                              <TableHead>Date</TableHead>
                              <TableHead>Customer</TableHead>
                              <TableHead>Amount</TableHead>
                              <TableHead>Source</TableHead>
                              <TableHead>Status</TableHead>
                              <TableHead>Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {squareSales.map((sale) => (
                              <TableRow key={sale.id}>
                                <TableCell className="font-mono text-xs">{sale.orderId.substring(0, 8)}...</TableCell>
                                <TableCell>{formatDate(sale.createdAt)}</TableCell>
                                <TableCell>{sale.customerName}</TableCell>
                                <TableCell className="font-medium">
                                  {new Intl.NumberFormat('en-US', {
                                    style: 'currency',
                                    currency: sale.currency
                                  }).format(sale.totalAmount)}
                                </TableCell>
                                <TableCell>{sale.source}</TableCell>
                                <TableCell>
                                  <Badge variant="default">
                                    {sale.state}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" size="icon" className="h-8 w-8">
                                        <MoreHorizontal className="h-4 w-4" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                      <DropdownMenuItem onClick={() => console.log('View details', sale)}>
                                        <Eye className="h-4 w-4 mr-2" />
                                        View Details
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="lightspeed_sales" className="space-y-4">
                <Card className="rounded-lg border border-gray-200">
                  <CardHeader className="pb-3">
                    <CardTitle>Lightspeed Sales</CardTitle>
                    <CardDescription>
                      Sales data from your connected Lightspeed account
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {loadingLightspeedSales ? (
                      <div className="flex items-center justify-center py-8">
                        <div className="h-8 w-8 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                      </div>
                    ) : lightspeedError ? (
                      <div className="bg-red-50 border border-red-200 rounded-md p-4 text-center">
                        <AlertCircle className="h-8 w-8 text-red-500 mx-auto mb-2" />
                        <p className="text-red-800 mb-2">Failed to load Lightspeed sales data</p>
                        <p className="text-sm text-red-600">{lightspeedError}</p>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={fetchLightspeedAccountInfo} 
                          className="mt-2"
                        >
                          <RefreshCw className="h-4 w-4 mr-2" />
                          Try Again
                        </Button>
                      </div>
                    ) : lightspeedSales.length === 0 ? (
                      <div className="text-center py-8">
                        <ShoppingCart className="h-12 w-12 mx-auto text-gray-300 mb-2" />
                        <p className="text-gray-500">No Lightspeed sales data available</p>
                        <p className="text-sm text-gray-400 mt-1">
                          {lightspeedAccountInfo ? 'No sales records found in your Lightspeed account' : 'Connect your Lightspeed account to see sales data'}
                        </p>
                        {lightspeedAccountInfo && (
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={fetchLightspeedAccountInfo} 
                            className="mt-4"
                          >
                            <RefreshCw className="h-4 w-4 mr-2" />
                            Refresh Data
                          </Button>
                        )}
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        {lightspeedAccountInfo && (
                          <div className="mb-4 p-3 bg-blue-50 rounded-md border border-blue-200">
                            <p className="text-sm text-blue-700">
                              <span className="font-medium">Account:</span> {lightspeedAccountInfo.name} 
                              <span className="ml-3 font-medium">ID:</span> {lightspeedAccountInfo.accountID}
                            </p>
                          </div>
                        )}
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('saleID')}
                                >
                                  Sale ID
                                  {sortField === "saleID" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead>
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('timeStamp')}
                                >
                                  Date & Time
                                  {sortField === "timeStamp" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead className="hidden md:table-cell">Items</TableHead>
                              <TableHead>
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('ticketNumber')}
                                >
                                  Ticket Number
                                  {sortField === "ticketNumber" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead className="hidden md:table-cell">
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('calcSubtotal')}
                                >
                                  Subtotal
                                  {sortField === "calcSubtotal" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead className="hidden md:table-cell">
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('calcTax1')}
                                >
                                  Tax
                                  {sortField === "calcTax1" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead>
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('total')}
                                >
                                  Total
                                  {sortField === "total" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead>
                                <button 
                                  className="flex items-center hover:text-primary transition-colors"
                                  onClick={() => handleLightspeedSort('completed')}
                                >
                                  Status
                                  {sortField === "completed" && (
                                    sortDirection === "asc" ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                  )}
                                </button>
                              </TableHead>
                              <TableHead>Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {sortedLightspeedSales.map((sale) => (
                              <TableRow 
                                key={sale.saleID} 
                                className="cursor-pointer hover:bg-muted/50"
                                onClick={() => handleViewLightspeedSale(sale)}
                              >
                                <TableCell className="font-mono text-xs">{sale.saleID}</TableCell>
                                <TableCell>{formatDate(sale.timeStamp)}</TableCell>
                                <TableCell className="hidden md:table-cell">
                                  {sale.items && sale.items.length > 0 ? (
                                    <div>
                                      <span className="font-medium">{sale.items[0].name || 'Unnamed Item'}</span>
                                      {sale.items.length > 1 && <span className="text-xs text-muted-foreground ml-2">+{sale.items.length - 1} more</span>}
                                    </div>
                                  ) : (
                                    <span className="text-muted-foreground">No items</span>
                                  )}
                                </TableCell>
                                <TableCell>{sale.ticketNumber}</TableCell>
                                <TableCell className="hidden md:table-cell">${parseFloat(sale.calcSubtotal).toFixed(2)}</TableCell>
                                <TableCell className="hidden md:table-cell">${(parseFloat(sale.calcTax1) + parseFloat(sale.calcTax2 || '0')).toFixed(2)}</TableCell>
                                <TableCell className="font-medium">${parseFloat(sale.total).toFixed(2)}</TableCell>
                                <TableCell>
                                  <Badge 
                                    variant={sale.completed === "true" ? "default" : "outline"}
                                    className={cn(
                                      sale.voided === "true" ? "bg-red-100 text-red-700 border-red-200" : "",
                                      sale.isWorkOrder === "true" ? "bg-blue-100 text-blue-700 border-blue-200" : ""
                                    )}
                                  >
                                    {sale.isWorkOrder === "true" ? "Work Order" : 
                                     sale.voided === "true" ? "Voided" : 
                                     sale.completed === "true" ? "Completed" : "Pending"}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <Button variant="ghost" size="icon" className="h-8 w-8" onClick={(e) => {
                                    e.stopPropagation(); // Prevent row click from triggering
                                    handleViewLightspeedSale(sale);
                                  }}>
                                    <Eye className="h-4 w-4" />
                                  </Button>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>

      {/* Add the slide-out drawer for Lightspeed sale details */}
      <Sheet open={isLightspeedDrawerOpen} onOpenChange={setIsLightspeedDrawerOpen}>
        <SheetContent className="w-full sm:max-w-md overflow-y-auto">
          <SheetHeader className="pb-4">
            <SheetTitle className="flex items-center">
              {selectedLightspeedSale?.isWorkOrder === "true" ? (
                <span className="flex items-center">
                  <AlertCircle className="w-5 h-5 mr-2 text-blue-500" />
                  Work Order #{selectedLightspeedSale?.ticketNumber || selectedLightspeedSale?.saleID}
                </span>
              ) : (
                <span className="flex items-center">
                  <DollarSign className="w-5 h-5 mr-2 text-primary" />
                  Sale #{selectedLightspeedSale?.ticketNumber || selectedLightspeedSale?.saleID}
                </span>
              )}
            </SheetTitle>
            <SheetDescription>
              {selectedLightspeedSale ? formatDate(selectedLightspeedSale.timeStamp) : ''}
            </SheetDescription>
          </SheetHeader>
          <Separator />
          
          {selectedLightspeedSale && (
            <ScrollArea className="h-[calc(100vh-8rem)] py-4">
              <div className="space-y-6">
                {/* Sale Summary section */}
                <div>
                  <h3 className="text-lg font-medium mb-2">Sale Summary</h3>
                  <p className="text-sm text-muted-foreground mb-3">Overview of transaction details</p>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="border rounded-lg p-4 bg-primary/5">
                      <span className="text-sm text-muted-foreground">Total</span>
                      <p className="text-2xl font-bold text-primary">${parseFloat(selectedLightspeedSale.total).toFixed(2)}</p>
                    </div>
                    <div className="border rounded-lg p-4 bg-muted/30">
                      <span className="text-sm text-muted-foreground">Status</span>
                      <div className="mt-2">
                        <Badge 
                          variant={selectedLightspeedSale.completed === "true" ? "default" : "outline"}
                          className={cn(
                            selectedLightspeedSale.voided === "true" ? "bg-red-100 text-red-700 border-red-200" : "",
                            selectedLightspeedSale.isWorkOrder === "true" ? "bg-blue-100 text-blue-700 border-blue-200" : ""
                          )}
                        >
                          {selectedLightspeedSale.isWorkOrder === "true" ? "Work Order" : 
                           selectedLightspeedSale.voided === "true" ? "Voided" : 
                           selectedLightspeedSale.completed === "true" ? "Completed" : "Pending"}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-3 mt-3">
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Subtotal</h4>
                      <p className="text-sm font-medium">${parseFloat(selectedLightspeedSale.calcSubtotal).toFixed(2)}</p>
                    </div>
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Tax</h4>
                      <p className="text-sm font-medium">
                        ${(parseFloat(selectedLightspeedSale.calcTax1) + parseFloat(selectedLightspeedSale.calcTax2 || '0')).toFixed(2)}
                      </p>
                    </div>
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Discount</h4>
                      <p className="text-sm font-medium">
                        {parseFloat(selectedLightspeedSale.discountPercent) > 0 
                          ? `${selectedLightspeedSale.discountPercent}%` 
                          : "None"}
                      </p>
                    </div>
                  </div>
                </div>
                
                <Separator />
                
                {/* Customer Information */}
                <div>
                  <h3 className="text-lg font-medium mb-2">Customer</h3>
                  <div className="border rounded-lg p-4 bg-muted/10">
                    <div className="flex items-center gap-3 mb-2">
                      <div className="h-9 w-9 rounded-full bg-primary/10 flex items-center justify-center">
                        <Users className="h-5 w-5 text-primary/80" />
                      </div>
                      <div>
                        <p className="font-medium">
                          {selectedLightspeedSale.customerName || 'No customer assigned'}
                        </p>
                        <p className="text-xs text-muted-foreground mt-0.5">
                          Customer ID: {selectedLightspeedSale.customerID !== "0" ? selectedLightspeedSale.customerID : "N/A"}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <Separator />
                
                {/* Sale Items section */}
                <div>
                  <h3 className="text-lg font-medium mb-2">Items</h3>
                  <p className="text-sm text-muted-foreground mb-3">Products and services in this sale</p>
                  
                  {selectedLightspeedSale.items && selectedLightspeedSale.items.length > 0 ? (
                    <div className="border rounded-md overflow-hidden">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Item Name</TableHead>
                            <TableHead className="hidden sm:table-cell">Description</TableHead>
                            <TableHead className="text-right">Qty</TableHead>
                            <TableHead className="text-right">Price</TableHead>
                            <TableHead className="text-right">Total</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {selectedLightspeedSale.items.map((item, index) => (
                            <TableRow key={index}>
                              <TableCell className="font-medium">{item.name || 'Unnamed Item'}</TableCell>
                              <TableCell className="hidden sm:table-cell text-muted-foreground text-sm">
                                {item.description || 'No description'}
                              </TableCell>
                              <TableCell className="text-right">{item.quantity}</TableCell>
                              <TableCell className="text-right">${parseFloat(item.unitPrice).toFixed(2)}</TableCell>
                              <TableCell className="text-right font-medium">${parseFloat(item.extPrice).toFixed(2)}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  ) : (
                    <div className="text-center p-6 border rounded-md bg-muted/5">
                      <ShoppingCart className="h-8 w-8 mx-auto text-muted-foreground/60" />
                      <p className="mt-2 text-muted-foreground">No item details available</p>
                    </div>
                  )}
                </div>
                
                <Separator />
                
                {/* Sale Details section */}
                <div>
                  <h3 className="text-lg font-medium mb-2">Additional Details</h3>
                  <p className="text-sm text-muted-foreground mb-3">Reference information</p>
                  
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    <div className="border rounded-lg p-4 space-y-3">
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Sale ID</h4>
                        <p className="text-sm font-mono bg-muted/20 p-1 rounded">{selectedLightspeedSale.saleID}</p>
                      </div>
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Ticket Number</h4>
                        <p className="text-sm">{selectedLightspeedSale.ticketNumber}</p>
                      </div>
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Date & Time</h4>
                        <p className="text-sm">{formatDate(selectedLightspeedSale.timeStamp)}</p>
                      </div>
                    </div>
                    
                    <div className="border rounded-lg p-4 space-y-3">
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Employee ID</h4>
                        <p className="text-sm">{selectedLightspeedSale.employeeID}</p>
                      </div>
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Register ID</h4>
                        <p className="text-sm">{selectedLightspeedSale.registerID}</p>
                      </div>
                      <div>
                        <h4 className="text-xs font-medium text-muted-foreground mb-1">Shop ID</h4>
                        <p className="text-sm">{selectedLightspeedSale.shopID}</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-3 mt-3">
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Completed</h4>
                      <p className="text-sm">
                        {selectedLightspeedSale.completed === "true" ? "Yes" : "No"}
                      </p>
                    </div>
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Voided</h4>
                      <p className="text-sm">
                        {selectedLightspeedSale.voided === "true" ? "Yes" : "No"}
                      </p>
                    </div>
                    <div className="border rounded-lg p-3">
                      <h4 className="text-xs font-medium text-muted-foreground mb-1">Archived</h4>
                      <p className="text-sm">
                        {selectedLightspeedSale.archived === "true" ? "Yes" : "No"}
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Action buttons */}
                <div className="pt-4 mt-2 border-t sticky bottom-0 bg-background z-10">
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      className="flex-1"
                      onClick={() => setIsLightspeedDrawerOpen(false)}
                    >
                      Close
                    </Button>
                    <Button 
                      variant="default" 
                      className="flex-1"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Export
                    </Button>
                  </div>
                </div>
              </div>
            </ScrollArea>
          )}
        </SheetContent>
      </Sheet>
      {/* Add loading indicator for infinite scrolling */}
      {fetchingMoreSales && (
        <div className="py-4 text-center">
          <div className="inline-block h-6 w-6 animate-spin rounded-full border-2 border-primary border-r-transparent"></div>
          <p className="text-sm text-muted-foreground mt-2">Loading more sales...</p>
        </div>
      )}

      {/* Add the ref for the sales list container */}
      <div ref={salesListRef} className="h-4"></div>
    </PageTransition>
  )
} "use client"

import { useState, useEffect, useRef, useCallback } from 'react'
import { useAuth } from '@/contexts/auth-context'
import { getGmailMessages, getGmailMessage, GmailMessage, GmailFullMessage } from '@/lib/gmail-api'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Skeleton } from '@/components/ui/skeleton'
import { useToast } from '@/components/ui/use-toast'
import { formatDistance } from 'date-fns'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetFooter,
  SheetClose,
} from '@/components/ui/sheet'
import {
  AlertCircle,
  Mail,
  MailOpen,
  Paperclip,
  RefreshCw,
  Search,
  ExternalLink,
  MessageSquare,
  User,
  Bell,
  Loader2,
  LogOut,
  Bug,
  Code,
  Wrench,
  CheckCircle,
  XCircle,
  Info,
} from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { db } from '@/lib/firebase'
import { 
  doc, 
  getDoc, 
  collection, 
  writeBatch, 
  query, 
  where, 
  getDocs,
  serverTimestamp,
  updateDoc
} from 'firebase/firestore'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  RadioGroup,
  RadioGroupItem,
} from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useRouter } from 'next/navigation'
import { PageHeader } from "@/components/page-header"

// Custom style for medium rounded cards
const mediumRoundedCard = "rounded-md overflow-hidden";

// Define the response tone options
const RESPONSE_TONES = [
  { id: 'professional', label: 'Professional', description: 'Formal and business-like' },
  { id: 'friendly', label: 'Friendly', description: 'Warm and approachable' },
  { id: 'concise', label: 'Concise', description: 'Brief and to the point' },
  { id: 'detailed', label: 'Detailed', description: 'Thorough and comprehensive' },
  { id: 'empathetic', label: 'Empathetic', description: 'Understanding and supportive' },
];

export default function EmailsPage() {
  const { user } = useAuth()
  const { toast } = useToast()
  const [emails, setEmails] = useState<GmailMessage[]>([])
  const [sentEmails, setSentEmails] = useState<GmailMessage[]>([])
  const [loading, setLoading] = useState(false)
  const [loadingSent, setLoadingSent] = useState(false)
  const [isConnected, setIsConnected] = useState(false)
  const [connectionError, setConnectionError] = useState<string | null>(null)
  const [connectedEmail, setConnectedEmail] = useState<string | null>(null)
  const [selectedEmail, setSelectedEmail] = useState<GmailMessage | null>(null)
  const [emailContent, setEmailContent] = useState<GmailFullMessage | null>(null)
  const [emailSheetOpen, setEmailSheetOpen] = useState(false)
  const [loadingEmail, setLoadingEmail] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [refreshing, setRefreshing] = useState(false)
  const [activeTab, setActiveTab] = useState('inbox')
  const [readStatusMap, setReadStatusMap] = useState<Record<string, boolean>>({})
  const refreshIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const lastFetchTimeRef = useRef<number>(0)
  const lastSentFetchTimeRef = useRef<number>(0)
  
  // New state for customer inquiry detection and response generation
  const [customerInquiryMap, setCustomerInquiryMap] = useState<Record<string, boolean>>({})
  const [responseDialogOpen, setResponseDialogOpen] = useState(false)
  const [selectedTone, setSelectedTone] = useState<string>('professional')
  const [generatedResponse, setGeneratedResponse] = useState<string>('')
  const [generatingResponse, setGeneratingResponse] = useState(false)
  const [customToneDescription, setCustomToneDescription] = useState<string>('')
  const router = useRouter()
  const [showDebugger, setShowDebugger] = useState(false)
  const [debugData, setDebugData] = useState<any>(null)
  const [debugLoading, setDebugLoading] = useState(false)
  const [fixEmailLoading, setFixEmailLoading] = useState(false)
  const [fixEmailResult, setFixEmailResult] = useState<any>(null)
  const [testEmailLoading, setTestEmailLoading] = useState(false)
  const [testEmailResult, setTestEmailResult] = useState<any>(null)

  // Filter emails based on search query
  const filteredEmails = emails.filter(email => {
    const query = searchQuery.toLowerCase()
    return (
      email.subject.toLowerCase().includes(query) ||
      email.from.toLowerCase().includes(query) ||
      email.snippet.toLowerCase().includes(query)
    )
  })

  // Filter sent emails based on search query
  const filteredSentEmails = sentEmails.filter(email => {
    const query = searchQuery.toLowerCase()
    return (
      email.subject.toLowerCase().includes(query) ||
      email.from.toLowerCase().includes(query) ||
      email.snippet.toLowerCase().includes(query)
    )
  })

  // Function to detect if an email is likely a customer inquiry
  const detectCustomerInquiry = (email: GmailMessage): boolean => {
    // Simple heuristic: Check if the email subject or snippet contains keywords
    // related to customer inquiries
    const customerKeywords = [
      'inquiry', 'enquiry', 'question', 'help', 'support', 'purchase', 'order',
      'product', 'service', 'price', 'pricing', 'quote', 'information', 'interested',
      'customer', 'buying', 'availability'
    ];
    
    const content = `${email.subject} ${email.snippet}`.toLowerCase();
    
    // Check if any keyword is present in the content
    return customerKeywords.some(keyword => content.includes(keyword.toLowerCase()));
  };

  // Function to generate response based on selected tone
  const generateResponse = async () => {
    if (!selectedEmail || !emailContent) return;
    
    setGeneratingResponse(true);
    
    try {
      // In a real implementation, this would call an API to generate a response
      // For now, we'll simulate a response based on the selected tone
      
      // Wait for a simulated API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const emailSubject = selectedEmail.subject;
      const senderName = getSenderName(selectedEmail.from).split(' ')[0]; // Get first name
      
      let response = '';
      
      switch (selectedTone) {
        case 'professional':
          response = `Dear ${senderName},\n\nThank you for your email regarding "${emailSubject}". I appreciate you reaching out to us.\n\nWe have reviewed your inquiry and would like to provide you with the following information...\n\nIf you have any further questions, please don't hesitate to contact us.\n\nBest regards,\n[Your Name]\n[Your Company]`;
            break;
        case 'friendly':
          response = `Hi ${senderName}!\n\nThanks so much for getting in touch about "${emailSubject}"! I'm really glad you reached out to us.\n\nI wanted to let you know that...\n\nFeel free to ask if you have any other questions - I'm always happy to help!\n\nCheers,\n[Your Name]\n[Your Company]`;
            break;
        case 'concise':
          response = `Hi ${senderName},\n\nRegarding "${emailSubject}":\n\n- Point 1\n- Point 2\n- Point 3\n\nLet me know if you need anything else.\n\nRegards,\n[Your Name]\n[Your Company]`;
            break;
        case 'detailed':
          response = `Dear ${senderName},\n\nThank you for your email concerning "${emailSubject}". I would like to provide you with a comprehensive response to address all aspects of your inquiry.\n\nFirstly, regarding your main question...\n\nSecondly, you may also be interested to know that...\n\nAdditionally, I've taken the liberty of researching some related information that might be helpful to you...\n\nIf you would like to discuss this further, please don't hesitate to reply to this email or call us at [phone number]. Our support team is available Monday through Friday, 9am to 5pm.\n\nThank you for your interest in our products/services.\n\nSincerely,\n[Your Name]\n[Your Position]\n[Your Company]\n[Contact Information]`;
            break;
        case 'empathetic':
          response = `Dear ${senderName},\n\nI understand how important "${emailSubject}" is to you, and I want to thank you for sharing your concerns with us.\n\nI completely understand where you're coming from, and I want to assure you that...\n\nWe value your feedback and are committed to ensuring your satisfaction.\n\nPlease let me know if there's anything else I can help with.\n\nWarmly,\n[Your Name]\n[Your Company]`;
            break;
          default:
          response = `Dear ${senderName},\n\nThank you for your email regarding "${emailSubject}". We appreciate your interest.\n\n[Your response here]\n\nBest regards,\n[Your Name]\n[Your Company]`;
      }
      
      setGeneratedResponse(response);
    } catch (error) {
      console.error('Error generating response:', error);
        toast({
        title: "Error",
        description: "Failed to generate a response. Please try again.",
        variant: "destructive"
      });
    } finally {
      setGeneratingResponse(false);
    }
  };

  // Function to handle copying the generated response to clipboard
  const copyResponseToClipboard = () => {
    navigator.clipboard.writeText(generatedResponse);
        toast({
      title: "Copied to clipboard",
      description: "Response has been copied to your clipboard.",
          variant: "default",
        });
  };

  // Fetch emails and save to Firestore - core function
  const fetchAndSaveEmails = useCallback(async (showToast = false) => {
    if (!user?.uid) return;

    // Prevent fetching too frequently
    const now = Date.now();
    if (now - lastFetchTimeRef.current < 5000) {
      console.log('Skipping fetch - throttled');
      return;
    }
    lastFetchTimeRef.current = now;

    if (showToast) setRefreshing(true);
    setLoading(true);

    try {
      console.log('Fetching inbox emails for user:', user.uid);
      
      // 1. Get the emails from Gmail API - use INBOX label
      const messages = await getGmailMessages(user.uid, 'INBOX', 50);
      console.log(`Retrieved ${messages.length} emails from Gmail API`);
      
      // 2. Update the state with the fetched emails
      setEmails(messages);
      
      // 3. Detect customer inquiries
      const inquiryMap: Record<string, boolean> = {};
      messages.forEach(email => {
        inquiryMap[email.id] = detectCustomerInquiry(email);
      });
      setCustomerInquiryMap(inquiryMap);
      
      // 4. Save the emails to Firestore
      if (messages.length > 0) {
        try {
          const batch = writeBatch(db);
          const emailsCollection = collection(db, 'merchants', user.uid, 'emails');
          
          // Get existing emails from Firestore to avoid duplicates
          const existingEmailsSet = new Set<string>();
          
          // Process in smaller batches to handle Firestore limitations
          for (let i = 0; i < messages.length; i += 10) {
            const chunk = messages.slice(i, i + 10);
            const chunkIds = chunk.map(email => email.id);
            
            const q = query(emailsCollection, where('id', 'in', chunkIds));
            const querySnapshot = await getDocs(q);
            
            querySnapshot.forEach(doc => {
              existingEmailsSet.add(doc.id);
            });
          }
          
          // Add new emails to batch
          let newEmailsCount = 0;
          
          for (const email of messages) {
            if (!existingEmailsSet.has(email.id)) {
              const emailDoc = doc(emailsCollection, email.id);
              batch.set(emailDoc, {
                id: email.id,
                threadId: email.threadId,
                from: email.from,
                subject: email.subject,
                snippet: email.snippet,
                date: email.date,
                hasAttachments: email.hasAttachments,
                savedAt: serverTimestamp(),
                read: false
              });
              newEmailsCount++;
            }
          }
          
          if (newEmailsCount > 0) {
            await batch.commit();
            console.log(`Successfully saved ${newEmailsCount} new emails to Firestore`);
          } else {
            console.log('No new emails to save to Firestore');
          }
          
          // After saving to Firestore, load read status for all emails
          await loadReadStatus(messages.map(m => m.id));
          
        } catch (firestoreError) {
          console.error('Error saving emails to Firestore:', firestoreError);
        }
      }
      
      if (showToast && messages.length > 0) {
        toast({
          title: "Emails Updated",
          description: `Successfully loaded ${messages.length} emails.`,
          variant: "default",
        });
      }
    } catch (error) {
      console.error('Error fetching emails:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      if (showToast) {
      toast({
        title: "Error Loading Emails",
        description: `Failed to load emails: ${errorMessage}`,
        variant: "destructive",
      });
      }
      
      // Handle authentication errors
      if (errorMessage.includes('401')) {
        setConnectionError('Authentication failed. Please reconnect your Gmail account.');
        setIsConnected(false);
        clearRefreshInterval();
      }
    } finally {
      setLoading(false);
      if (showToast) setRefreshing(false);
    }
  }, [user, toast]);

  // Fetch sent emails and save to Firestore
  const fetchAndSaveSentEmails = useCallback(async (showToast = false) => {
    if (!user?.uid) return;

    // Prevent fetching too frequently
    const now = Date.now();
    if (now - lastSentFetchTimeRef.current < 5000) {
      console.log('Skipping sent emails fetch - throttled');
      return;
    }
    lastSentFetchTimeRef.current = now;

    if (showToast) setRefreshing(true);
    setLoadingSent(true);

    try {
      console.log('Fetching sent emails for user:', user.uid);
      
      // 1. Get the sent email IDs from Gmail API with SENT label
      const messages = await getGmailMessages(user.uid, 'SENT', 50);
      console.log(`Retrieved ${messages.length} sent email IDs from Gmail API`);
      
      // 2. Update the state with the basic email info
      setSentEmails(messages);
      
      // 3. Fetch full content for each sent email and save to Firestore
      if (messages.length > 0) {
        try {
          const sentEmailsCollection = collection(db, 'merchants', user.uid, 'sent_emails');
          
          // Get existing emails from Firestore to avoid duplicates
      const existingEmailsSet = new Set<string>();
      
          // Process in smaller batches to handle Firestore limitations
          for (let i = 0; i < messages.length; i += 10) {
            const chunk = messages.slice(i, i + 10);
            const chunkIds = chunk.map(email => email.id);
            
            const q = query(sentEmailsCollection, where('id', 'in', chunkIds));
        const querySnapshot = await getDocs(q);
            
        querySnapshot.forEach(doc => {
          existingEmailsSet.add(doc.id);
        });
      }
      
          // Add new emails to batch with full content
      let newEmailsCount = 0;
          let processedCount = 0;
          
          // Process emails in smaller batches to avoid rate limiting
          for (let i = 0; i < messages.length; i++) {
            const email = messages[i];
            processedCount++;
            
            // Only fetch full content for emails not already in Firestore
        if (!existingEmailsSet.has(email.id)) {
              try {
                // Fetch full email content
                console.log(`Fetching full content for sent email ${email.id} (${processedCount}/${messages.length})`);
                const fullEmail = await getGmailMessage(user.uid, email.id);
                
                // Save to Firestore with a new batch for each email to avoid memory issues
                const batch = writeBatch(db);
                const emailDoc = doc(sentEmailsCollection, email.id);
          batch.set(emailDoc, {
                  id: email.id,
                  threadId: email.threadId,
                  from: email.from,
                  to: fullEmail.to,
                  subject: email.subject,
                  snippet: email.snippet,
                  date: email.date,
                  hasAttachments: email.hasAttachments,
                  body: {
                    html: fullEmail.body.html,
                    plain: fullEmail.body.plain
                  },
                  attachments: fullEmail.attachments.map(att => ({
                    filename: att.filename,
                    mimeType: att.mimeType,
                    size: att.size,
                    attachmentId: att.attachmentId
                  })),
            savedAt: serverTimestamp(),
                  read: true // Sent emails are always read
          });
                
                await batch.commit();
          newEmailsCount++;
                console.log(`Saved full content for sent email ${email.id}`);
              } catch (emailError) {
                console.error(`Error fetching full content for email ${email.id}:`, emailError);
                // Continue with next email
              }
        }
      }
      
      if (newEmailsCount > 0) {
            console.log(`Successfully saved ${newEmailsCount} new sent emails with full content to Firestore`);
      } else {
            console.log('No new sent emails to save to Firestore');
          }
          
        } catch (firestoreError) {
          console.error('Error saving sent emails to Firestore:', firestoreError);
        }
      }
      
      if (showToast && messages.length > 0) {
        toast({
          title: "Sent Emails Updated",
          description: `Successfully loaded ${messages.length} sent emails.`,
          variant: "default",
        });
      }
    } catch (error) {
      console.error('Error fetching sent emails:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      if (showToast) {
        toast({
          title: "Error Loading Sent Emails",
          description: `Failed to load sent emails: ${errorMessage}`,
          variant: "destructive",
        });
      }
      
      // Handle authentication errors
      if (errorMessage.includes('401')) {
        setConnectionError('Authentication failed. Please reconnect your Gmail account.');
        setIsConnected(false);
        clearRefreshInterval();
      }
    } finally {
      setLoadingSent(false);
      if (showToast) setRefreshing(false);
    }
  }, [user, toast]);

  // Setup refresh interval
  const setupRefreshInterval = useCallback(() => {
    clearRefreshInterval();
    
    // Refresh every 5 minutes (300000 ms)
    refreshIntervalRef.current = setInterval(() => {
      console.log('Refreshing emails (5-minute interval)');
      fetchAndSaveEmails(false); // Don't show toast for background refreshes
      fetchAndSaveSentEmails(false); // Also refresh sent emails
    }, 300000);
    
    console.log('Email refresh interval set up');
  }, [fetchAndSaveEmails, fetchAndSaveSentEmails]);

  // Clear refresh interval
  const clearRefreshInterval = () => {
    if (refreshIntervalRef.current) {
      clearInterval(refreshIntervalRef.current);
      refreshIntervalRef.current = null;
      console.log('Email refresh interval cleared');
    }
  };

  // Check if Gmail is connected
  const checkGmailConnection = useCallback(async () => {
    if (!user?.uid) return false;
    
    try {
      console.log('Checking Gmail connection for user:', user.uid);
      const integrationRef = doc(db, 'merchants', user.uid, 'integrations', 'gmail');
      const integrationDoc = await getDoc(integrationRef);
      
      if (integrationDoc.exists() && integrationDoc.data().connected) {
        console.log('Gmail is connected');
        setIsConnected(true);
        setConnectionError(null);
        
        // Get the connected email address
        const emailAddress = integrationDoc.data().emailAddress;
        if (emailAddress) {
          console.log('Found email address in Firestore:', emailAddress);
          setConnectedEmail(emailAddress);
        } else {
          console.log('No email address found in Firestore, fetching from API...');
          // Fetch email address if not stored
          try {
            const response = await fetch(`/api/auth/gmail/email?merchantId=${user.uid}`);
            if (response.ok) {
              const data = await response.json();
              if (data.emailAddress) {
                setConnectedEmail(data.emailAddress);
                console.log('Email address fetched from API:', data.emailAddress);
              }
            } else {
              console.warn('Failed to fetch email address from API');
            }
          } catch (error) {
            console.error('Error fetching email address:', error);
          }
        }
        
        return true;
      } else {
        console.log('Gmail is not connected');
        setIsConnected(false);
        setConnectedEmail(null);
        
        if (integrationDoc.exists()) {
          setConnectionError('Gmail integration exists but is not properly connected');
        }
        return false;
      }
    } catch (error) {
      console.error('Error checking Gmail connection:', error);
      setIsConnected(false);
      setConnectedEmail(null);
      setConnectionError(`Error checking Gmail connection: ${error instanceof Error ? error.message : String(error)}`);
      return false;
    }
  }, [user]);

  // Handle initial load and user login/logout
  useEffect(() => {
    // First effect runs on component mount and when user changes
    const initialize = async () => {
      // Clear any existing refresh interval first
      clearRefreshInterval();
      
      if (!user?.uid) {
        // User is logged out
        setIsConnected(false);
        return;
      }
      
      // User is logged in - check connection status
      const connected = await checkGmailConnection();
      
      if (connected) {
        console.log('User is logged in and Gmail is connected');
        
        // Immediately fetch emails when component mounts or user logs in
        fetchAndSaveEmails(false);
        fetchAndSaveSentEmails(false);
        
        // Set up regular refresh interval
        setupRefreshInterval();
      } else {
        console.log('User is logged in but Gmail is not connected');
      }
    };
    
    initialize();
    
    // Cleanup function
    return () => {
      clearRefreshInterval();
    };
  }, [user, checkGmailConnection, fetchAndSaveEmails, fetchAndSaveSentEmails, setupRefreshInterval]);

  // Check for query parameters on page load (for OAuth callback responses)
  useEffect(() => {
    const checkQueryParams = async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const error = urlParams.get('error');
      const success = urlParams.get('success');
      
      // Handle success from OAuth flow
      if (success && user?.uid) {
        toast({
          title: "Gmail Connected",
          description: "Your Gmail account was successfully connected.",
          variant: "default",
        });
        
        // Clear the URL parameters
        const url = new URL(window.location.href);
        url.search = '';
        window.history.replaceState({}, '', url);
        
        // Check connection and fetch emails
        const connected = await checkGmailConnection();
        if (connected) {
          fetchAndSaveEmails(false);
          fetchAndSaveSentEmails(false);
          setupRefreshInterval();
        }
      }
      
      // Handle errors from OAuth flow
      if (error) {
        console.error('OAuth error:', error);
        let errorMessage = 'Failed to connect to Gmail';
        
        switch (error) {
          case 'auth_denied':
            errorMessage = 'You denied access to your Gmail account';
            break;
          case 'token_error':
            errorMessage = 'Failed to get access token from Google';
            break;
          case 'config_error':
            errorMessage = 'Server configuration error';
            break;
          case 'missing_params':
            errorMessage = 'Missing parameters in OAuth response';
            break;
          case 'invalid_tokens':
            errorMessage = 'Invalid tokens received from Google';
            break;
          case 'database_error':
            errorMessage = 'Failed to save connection to database';
            break;
          default:
            errorMessage = `Error connecting to Gmail: ${error}`;
        }
        
        toast({
          title: "Gmail Connection Failed",
          description: errorMessage,
          variant: "destructive",
        });
        
        setConnectionError(errorMessage);
      }
    };
    
    checkQueryParams();
  }, [toast, user, checkGmailConnection, fetchAndSaveEmails, fetchAndSaveSentEmails, setupRefreshInterval]);

  // Function to load read status for emails
  const loadReadStatus = async (emailIds: string[]) => {
    if (!user?.uid || !emailIds.length) return;
    
    try {
      console.log('Loading read status for emails');
      const emailsCollection = collection(db, 'merchants', user.uid, 'emails');
      const status: Record<string, boolean> = {};
      
      // Process in chunks of 10 to avoid Firestore limitation on 'in' queries
      const emailIdsChunks = [];
      for (let i = 0; i < emailIds.length; i += 10) {
        emailIdsChunks.push(emailIds.slice(i, i + 10));
      }
      
      for (const chunk of emailIdsChunks) {
        const q = query(emailsCollection, where('id', 'in', chunk));
        const querySnapshot = await getDocs(q);
        
        querySnapshot.forEach(doc => {
          status[doc.id] = doc.data().read === true;
        });
      }
      
      // For emails not found in Firestore, set as unread
      emailIds.forEach(id => {
        if (status[id] === undefined) {
          status[id] = false;
        }
      });
      
      setReadStatusMap(status);
      console.log(`Loaded read status for ${Object.keys(status).length} emails`);
    } catch (error) {
      console.error('Error loading read status:', error);
      // Set all as unread in case of error
      const defaultStatus: Record<string, boolean> = {};
      emailIds.forEach(id => {
        defaultStatus[id] = false;
      });
      setReadStatusMap(defaultStatus);
    }
  };

  // Handle tab change
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    
    // Load sent emails when switching to sent tab
    if (value === 'sent' && sentEmails.length === 0 && !loadingSent && isConnected) {
      fetchAndSaveSentEmails(false);
    }
  };

  // Function to manually refresh emails
  const handleRefresh = () => {
    if (activeTab === 'inbox') {
      fetchAndSaveEmails(true); // Pass true to show toast notifications
    } else if (activeTab === 'sent') {
      fetchAndSaveSentEmails(true);
    }
  };

  // Function to connect Gmail
  const connectGmail = () => {
    if (!user?.uid) {
      toast({
        title: "Error",
        description: "You must be logged in to connect Gmail.",
        variant: "destructive",
      });
      return;
    }
    
    console.log('Connecting Gmail for user:', user.uid);
    window.location.href = `/api/auth/gmail/connect?merchantId=${user.uid}`;
  };

  // Function to view a single email with full content
  const viewEmail = async (email: GmailMessage) => {
    setSelectedEmail(email);
    setEmailSheetOpen(true);
    setLoadingEmail(true);
    
    // Mark as read in the UI immediately
    setReadStatusMap(prev => ({
      ...prev,
      [email.id]: true
    }));
    
    try {
      if (!user?.uid) return;
      
      // Check if this is a sent email (based on active tab)
      if (activeTab === 'sent') {
        console.log('Fetching sent email content from Firestore for:', email.id);
        
        // Try to get the full content from Firestore first
        const sentEmailDoc = doc(db, 'merchants', user.uid, 'sent_emails', email.id);
        const sentEmailSnap = await getDoc(sentEmailDoc);
        
        if (sentEmailSnap.exists() && sentEmailSnap.data().body) {
          // We have the full content in Firestore
          const data = sentEmailSnap.data();
          const fullEmail: GmailFullMessage = {
            id: data.id,
            threadId: data.threadId,
            snippet: data.snippet,
            from: data.from,
            to: data.to || '',
            subject: data.subject,
            date: data.date,
            body: data.body || { html: null, plain: null },
            hasAttachments: data.hasAttachments || false,
            attachments: data.attachments || []
          };
          
          console.log('Sent email content loaded from Firestore');
          setEmailContent(fullEmail);
        } else {
          // If not in Firestore with full content, fetch from Gmail API
          console.log('Sent email full content not found in Firestore, fetching from Gmail API');
          const fullEmail = await getGmailMessage(user.uid, email.id);
          console.log('Sent email content loaded from Gmail API');
          setEmailContent(fullEmail);
          
          // Save the full content to Firestore for future use
          try {
            await updateDoc(sentEmailDoc, {
              to: fullEmail.to,
              body: {
                html: fullEmail.body.html,
                plain: fullEmail.body.plain
              },
              attachments: fullEmail.attachments.map(att => ({
                filename: att.filename,
                mimeType: att.mimeType,
                size: att.size,
                attachmentId: att.attachmentId
              }))
            });
            console.log('Updated sent email in Firestore with full content');
          } catch (updateError) {
            console.error('Error updating sent email with full content:', updateError);
          }
        }
      } else {
        // Regular inbox email - fetch from Gmail API as before
      console.log('Fetching full email content for:', email.id);
      const fullEmail = await getGmailMessage(user.uid, email.id);
      console.log('Email content loaded:', fullEmail.body.html ? 'HTML' : 'Plain Text');
      setEmailContent(fullEmail);
      
      // Mark email as read in Firestore
      try {
        const emailDoc = doc(db, 'merchants', user.uid, 'emails', email.id);
        const docSnap = await getDoc(emailDoc);
        
        if (docSnap.exists() && !docSnap.data().read) {
          // Update the read status
          await updateDoc(emailDoc, {
            read: true,
            readAt: serverTimestamp()
          });
          console.log('Marked email as read in Firestore');
        }
      } catch (readError) {
        console.error('Error marking email as read:', readError);
        // Continue anyway, this is not critical
        }
      }
    } catch (error) {
      console.error('Error fetching full email:', error);
      toast({
        title: "Error",
        description: "Failed to load the complete email content.",
        variant: "destructive"
      });
    } finally {
      setLoadingEmail(false);
    }
  };

  // Function to format the date
  const formatEmailDate = (date: any) => {
    try {
      // Handle Firestore Timestamp
      const dateObj = date?.toDate ? date.toDate() : new Date(date);
      return formatDistance(dateObj, new Date(), { addSuffix: true });
    } catch (error) {
      console.error('Error formatting date:', error);
      return String(date); // Return string representation as fallback
    }
  };

  // Function to get sender name from email
  const getSenderName = (from: string) => {
    // Extract name from "Name <email@example.com>" format
    const matches = from.match(/^([^<]+)/);
    if (matches && matches[1]) {
      return matches[1].trim();
    }
    return from;
  };

  // Create a sanitized HTML content renderer
  const createMarkup = (html: string) => {
    return { __html: html };
  };

  // Function to fetch debug data
  const fetchDebugData = async () => {
    if (!user?.uid) return;
    
    setDebugLoading(true);
    setDebugData(null);
    
    try {
      const response = await fetch(`/api/auth/gmail/debug?merchantId=${user.uid}`);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch debug data');
      }
      
      setDebugData(data);
    } catch (error) {
      console.error('Error fetching debug data:', error);
      toast({
        title: "Debug Error",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive"
      });
    } finally {
      setDebugLoading(false);
    }
  };
  
  // Function to fix missing email
  const fixMissingEmail = async () => {
    if (!user?.uid) return;
    
    setFixEmailLoading(true);
    setFixEmailResult(null);
    
    try {
      const response = await fetch(`/api/auth/gmail/fix-email?merchantId=${user.uid}`);
      const data = await response.json();
      
      setFixEmailResult(data);
      
      if (response.ok && data.success) {
        toast({
          title: "Success",
          description: "Email address has been fixed and saved.",
          variant: "default"
        });
        
        // Update the UI with the new email
        if (data.emailAddress) {
          setConnectedEmail(data.emailAddress);
        }
        
        // Refresh debug data
        fetchDebugData();
      } else {
        throw new Error(data.error || data.message || 'Failed to fix email address');
      }
    } catch (error) {
      console.error('Error fixing email:', error);
      toast({
        title: "Fix Error",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive"
      });
    } finally {
      setFixEmailLoading(false);
    }
  };
  
  // Function to test email fetching methods
  const testEmailFetching = async () => {
    if (!user?.uid) return;
    
    setTestEmailLoading(true);
    setTestEmailResult(null);
    
    try {
      const response = await fetch(`/api/auth/gmail/test-email?merchantId=${user.uid}`);
      const data = await response.json();
      
      setTestEmailResult(data);
      
      if (response.ok && data.success && data.results.bestEmail) {
        toast({
          title: "Email Found",
          description: `Found email: ${data.results.bestEmail}`,
          variant: "default"
        });
      } else {
        toast({
          title: "Email Test Results",
          description: "See the debugger for detailed results.",
          variant: "default"
        });
      }
    } catch (error) {
      console.error('Error testing email fetching:', error);
      toast({
        title: "Test Error",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive"
      });
    } finally {
      setTestEmailLoading(false);
    }
  };
  
  // Initialize debugger when opened
  useEffect(() => {
    if (showDebugger && user?.uid && !debugData) {
      fetchDebugData();
    }
  }, [showDebugger, user?.uid, debugData]);
  
  // Add this after the connection error card
  const renderDebugger = () => {
    return (
      <Dialog open={showDebugger} onOpenChange={setShowDebugger}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Bug className="h-5 w-5" />
              Gmail Integration Debugger
            </DialogTitle>
            <DialogDescription>
              Diagnose and fix issues with your Gmail integration
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Actions */}
            <div className="flex flex-wrap gap-3">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={fetchDebugData}
                disabled={debugLoading}
                className="flex items-center gap-2"
              >
                {debugLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <RefreshCw className="h-4 w-4" />}
                Refresh Debug Data
              </Button>
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={fixMissingEmail}
                disabled={fixEmailLoading}
                className="flex items-center gap-2"
              >
                {fixEmailLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Wrench className="h-4 w-4" />}
                Fix Missing Email
              </Button>
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={testEmailFetching}
                disabled={testEmailLoading}
                className="flex items-center gap-2"
              >
                {testEmailLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Code className="h-4 w-4" />}
                Test Email Fetching
              </Button>
            </div>
            
            {/* Integration Status */}
            {debugData && (
              <div className="space-y-4">
                <div className="border rounded-md p-4">
                  <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                    <Info className="h-5 w-5 text-blue-500" />
                    Integration Status
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Connected:</span>
                          <span className="flex items-center">
                            {debugData.results?.integration?.connected ? 
                              <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                              <XCircle className="h-4 w-4 text-red-500 mr-1" />
                            }
                            {debugData.results?.integration?.connected ? 'Yes' : 'No'}
                          </span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Email Address:</span>
                          <span className="flex items-center">
                            {debugData.results?.integration?.hasEmailAddress ? 
                              <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                              <XCircle className="h-4 w-4 text-red-500 mr-1" />
                            }
                            {debugData.results?.integration?.emailAddress || 'Missing'}
                          </span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Access Token:</span>
                          <span className="flex items-center">
                            {debugData.results?.integration?.hasAccessToken ? 
                              <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                              <XCircle className="h-4 w-4 text-red-500 mr-1" />
                            }
                            {debugData.results?.integration?.hasAccessToken ? 'Present' : 'Missing'}
                          </span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Refresh Token:</span>
                          <span className="flex items-center">
                            {debugData.results?.integration?.hasRefreshToken ? 
                              <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                              <XCircle className="h-4 w-4 text-red-500 mr-1" />
                            }
                            {debugData.results?.integration?.hasRefreshToken ? 'Present' : 'Missing'}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Token Expires In:</span>
                          <span>
                            {debugData.results?.integration?.expiresIn > 0 ? 
                              `${Math.floor(debugData.results.integration.expiresIn / 60)} minutes` : 
                              'Expired'
                            }
                          </span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Connected At:</span>
                          <span>{debugData.results?.integration?.connectedAt || 'Unknown'}</span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Last Updated:</span>
                          <span>{debugData.results?.integration?.lastUpdated || 'Unknown'}</span>
                        </div>
                        
                        <div className="flex justify-between">
                          <span className="text-sm font-medium">Emails Count:</span>
                          <span>{debugData.results?.emails?.count || 0}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Email Tests Results */}
                {testEmailResult && (
                  <div className="border rounded-md p-4">
                    <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                      <Code className="h-5 w-5 text-purple-500" />
                      Email Test Results
                    </h3>
                    
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">Stored Email:</span>
                        <span>
                          {testEmailResult.results.storedEmail || 'None'}
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">Best Email:</span>
                        <span className="font-medium text-green-600">
                          {testEmailResult.results.bestEmail || 'None found'}
                        </span>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {Object.entries(testEmailResult.results.methods || {}).map(([method, result]) => (
                          <div key={method} className="border rounded-md p-3">
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-medium">{method}:</span>
                              <span className="flex items-center">
                                {(result as any).success ? 
                                  <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                                  <XCircle className="h-4 w-4 text-red-500 mr-1" />
                                }
                                {(result as any).success ? 'Success' : 'Failed'}
                              </span>
                            </div>
                            {(result as any).success && (
                              <div className="text-sm">Email: {(result as any).email}</div>
                            )}
                            {!(result as any).success && (result as any).error && (
                              <div className="text-sm text-red-600">{(result as any).error}</div>
                            )}
                            {!(result as any).success && (result as any).reason && (
                              <div className="text-sm text-red-600">{(result as any).reason}</div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Fix Email Results */}
                {fixEmailResult && (
                  <div className={`border rounded-md p-4 ${fixEmailResult.success ? 'bg-green-50' : 'bg-red-50'}`}>
                    <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                      <Wrench className="h-5 w-5 text-blue-500" />
                      Fix Email Results
                    </h3>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">Status:</span>
                        <span className="flex items-center">
                          {fixEmailResult.success ? 
                            <CheckCircle className="h-4 w-4 text-green-500 mr-1" /> : 
                            <XCircle className="h-4 w-4 text-red-500 mr-1" />
                          }
                          {fixEmailResult.success ? 'Success' : 'Failed'}
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">Message:</span>
                        <span>{fixEmailResult.message || fixEmailResult.error}</span>
                      </div>
                      
                      {fixEmailResult.emailAddress && (
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium">Email:</span>
                          <span className="font-medium">{fixEmailResult.emailAddress}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
                
                {/* Raw Debug Data */}
                <div className="border rounded-md p-4">
                  <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                    <Code className="h-5 w-5 text-gray-500" />
                    Raw Debug Data
                  </h3>
                  
                  <pre className="bg-gray-100 p-3 rounded-md overflow-auto max-h-96 text-xs">
                    {JSON.stringify(debugData, null, 2)}
                  </pre>
                </div>
              </div>
            )}
            
            {/* Loading State */}
            {debugLoading && !debugData && (
              <div className="flex flex-col items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-blue-500 mb-4" />
                <p>Loading debug data...</p>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    );
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <PageHeader title="Email Inbox">
        {isConnected ? (
          <div className="flex items-center gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input 
                placeholder="Search emails..." 
                className="pl-10 w-[250px]"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <Button
              variant="outline"
              size="sm"
              className="gap-2 h-8"
              onClick={handleRefresh}
              disabled={refreshing}
            >
              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
              Refresh
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="gap-2 text-blue-600 border-blue-200 hover:bg-blue-50 h-8"
              onClick={() => {
                if (!user?.uid) return;
                router.push('/store/emails/notifications');
              }}
            >
              <Bell className="h-4 w-4" />
              Setup Email Notifications
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="gap-2 text-purple-600 border-purple-200 hover:bg-purple-50 h-8"
              onClick={() => setShowDebugger(true)}
            >
              <Bug className="h-4 w-4" />
              Debug
            </Button>
          </div>
        ) : (
          <div>
            <Button onClick={connectGmail} className="gap-2 h-8">
              <Mail className="h-4 w-4" />
              Connect Gmail
            </Button>
          </div>
        )}
      </PageHeader>

      <p className="text-muted-foreground mb-6">
        {isConnected 
          ? connectedEmail 
            ? `Connected to ${connectedEmail}`
            : "Connected to Gmail" 
          : "Connect your Gmail account to manage customer emails"}
      </p>

      {connectionError && (
        <Card className="mb-6 border-red-200 bg-red-50 rounded-md">
          <CardContent className="pt-6">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5" />
              <div>
                <h3 className="font-medium text-red-800">Connection Error</h3>
                <p className="text-red-700 text-sm mt-1">{connectionError}</p>
                <div className="flex gap-3 mt-3">
                  <Button 
                    variant="destructive" 
                    size="sm"
                    onClick={connectGmail}
                  >
                    Reconnect Gmail
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setShowDebugger(true)}
                  >
                    Debug Connection
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* Render the debugger dialog */}
      {renderDebugger()}

      {!isConnected ? (
        <Card className="rounded-md">
          <CardHeader>
            <CardTitle>Connect your Gmail account</CardTitle>
            <CardDescription>
              Connect your Gmail account to view and manage customer emails directly from the dashboard.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p className="mb-4">
              Connecting your Gmail account allows you to:
            </p>
            <ul className="list-disc pl-5 mb-6 space-y-2">
              <li>View customer emails in one place</li>
              <li>Respond to inquiries faster</li>
              <li>Keep track of important communications</li>
              <li>Never miss a potential customer</li>
            </ul>
          </CardContent>
          <CardFooter>
            <Button onClick={connectGmail} className="gap-2">
              <Mail className="h-4 w-4" />
              Connect Gmail
            </Button>
          </CardFooter>
        </Card>
      ) : (
        <div className="flex flex-col space-y-4">
          <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="inbox">Inbox</TabsTrigger>
              <TabsTrigger value="sent">Sent</TabsTrigger>
              <TabsTrigger value="customer-inquiries">Customer Inquiries</TabsTrigger>
              <TabsTrigger value="important">Important</TabsTrigger>
              <TabsTrigger value="archived">Archived</TabsTrigger>
            </TabsList>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
              {/* Email List Column - Takes 1/3 of the space */}
              <div className="lg:col-span-1 border rounded-md overflow-hidden">
                <TabsContent value="inbox" className="m-0 h-full">
              {loading ? (
                    <div className="divide-y">
                  {[1, 2, 3, 4, 5].map((i) => (
                        <div key={i} className="p-3">
                          <div className="flex justify-between mb-1">
                          <Skeleton className="h-4 w-[120px]" />
                            <Skeleton className="h-4 w-[60px]" />
                        </div>
                          <Skeleton className="h-4 w-[70%] mb-1" />
                        <Skeleton className="h-4 w-full" />
                        </div>
                  ))}
                </div>
              ) : filteredEmails.length > 0 ? (
                    <div className="divide-y max-h-[calc(100vh-250px)] overflow-y-auto">
                  {filteredEmails.map((email) => (
                        <div 
                      key={email.id} 
                          className={`p-3 cursor-pointer hover:bg-gray-50 transition-colors
                            ${selectedEmail?.id === email.id ? 'bg-gray-100' : ''}
                            ${!readStatusMap[email.id] ? 'border-l-4 border-l-primary pl-2' : ''}
                            ${customerInquiryMap[email.id] ? 'border-l-4 border-l-yellow-500 bg-yellow-50 pl-2' : ''}`} 
                      onClick={() => viewEmail(email)}
                    >
                          <div className="flex justify-between items-start">
                            <div className={`text-sm font-medium truncate ${!readStatusMap[email.id] ? 'font-semibold' : ''}`}>
                            {getSenderName(email.from)}
                              {customerInquiryMap[email.id] && (
                                <Badge variant="outline" className="ml-2 bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-yellow-300 text-xs">
                                  <User className="h-2 w-2 mr-1" />
                                  Customer
                                </Badge>
                              )}
                          </div>
                            <div className="text-xs text-muted-foreground whitespace-nowrap ml-2">{formatEmailDate(email.date)}</div>
                        </div>
                          <div className={`text-xs truncate ${!readStatusMap[email.id] ? 'font-semibold' : ''}`}>
                          {email.subject}
                        </div>
                          <div className="text-xs text-muted-foreground truncate">
                            {email.snippet}
                          {email.hasAttachments && (
                              <span className="inline-flex items-center ml-1">
                                <Paperclip className="h-3 w-3 inline" />
                              </span>
                          )}
                        </div>
                        </div>
                  ))}
                </div>
              ) : (
                    <div className="flex flex-col items-center justify-center p-6 h-[300px]">
                    <MailOpen className="h-12 w-12 text-muted-foreground mb-3" />
                    <h3 className="text-lg font-medium mb-2">No emails found</h3>
                    <p className="text-muted-foreground text-center mb-4">
                      {searchQuery 
                        ? `No emails matching "${searchQuery}" were found.` 
                        : "Your inbox is empty or we couldn't fetch your emails."}
                    </p>
                    {searchQuery ? (
                      <Button variant="outline" onClick={() => setSearchQuery('')}>Clear Search</Button>
                    ) : (
                      <Button variant="outline" onClick={handleRefresh}>Refresh</Button>
                    )}
                    </div>
              )}
            </TabsContent>
            
                <TabsContent value="sent" className="m-0 h-full">
                  {loadingSent ? (
                    <div className="divide-y">
                      {[1, 2, 3, 4, 5].map((i) => (
                        <div key={i} className="p-3">
                          <div className="flex justify-between mb-1">
                            <Skeleton className="h-4 w-[120px]" />
                            <Skeleton className="h-4 w-[60px]" />
                          </div>
                          <Skeleton className="h-4 w-[70%] mb-1" />
                          <Skeleton className="h-4 w-full" />
                        </div>
                      ))}
                    </div>
                  ) : filteredSentEmails.length > 0 ? (
                    <div className="divide-y max-h-[calc(100vh-250px)] overflow-y-auto">
                      {filteredSentEmails.map((email) => (
                        <div 
                          key={email.id} 
                          className={`p-3 cursor-pointer hover:bg-gray-50 transition-colors
                            ${selectedEmail?.id === email.id ? 'bg-gray-100' : ''}`}
                          onClick={() => viewEmail(email)}
                        >
                          <div className="flex justify-between items-start">
                            <div className="text-sm font-medium truncate">
                              To: {getSenderName(email.from)}
                            </div>
                            <div className="text-xs text-muted-foreground whitespace-nowrap ml-2">{formatEmailDate(email.date)}</div>
                          </div>
                          <div className="text-xs truncate">
                            {email.subject}
                          </div>
                          <div className="text-xs text-muted-foreground truncate">
                            {email.snippet}
                            {email.hasAttachments && (
                              <span className="inline-flex items-center ml-1">
                                <Paperclip className="h-3 w-3 inline" />
                              </span>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center p-6 h-[300px]">
                  <Mail className="h-12 w-12 text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium mb-2">No sent emails found</h3>
                      <p className="text-muted-foreground text-center mb-4">
                        {searchQuery 
                          ? `No sent emails matching "${searchQuery}" were found.` 
                          : "Your sent folder is empty or we couldn't fetch your sent emails."}
                      </p>
                      {searchQuery ? (
                        <Button variant="outline" onClick={() => setSearchQuery('')}>Clear Search</Button>
                      ) : (
                        <Button variant="outline" onClick={() => fetchAndSaveSentEmails(true)}>Refresh</Button>
                      )}
                    </div>
                  )}
            </TabsContent>
            
                <TabsContent value="customer-inquiries" className="m-0 h-full">
                  {loading ? (
                    <div className="divide-y">
                      {[1, 2, 3, 4, 5].map((i) => (
                        <div key={i} className="p-3">
                          <div className="flex justify-between mb-1">
                            <Skeleton className="h-4 w-[120px]" />
                            <Skeleton className="h-4 w-[60px]" />
                          </div>
                          <Skeleton className="h-4 w-[70%] mb-1" />
                          <Skeleton className="h-4 w-full" />
                        </div>
                      ))}
                    </div>
                  ) : filteredEmails.filter(email => customerInquiryMap[email.id]).length > 0 ? (
                    <div className="divide-y max-h-[calc(100vh-250px)] overflow-y-auto">
                      {filteredEmails
                        .filter(email => customerInquiryMap[email.id])
                        .map((email) => (
                          <div 
                            key={email.id} 
                            className={`p-3 cursor-pointer hover:bg-gray-50 transition-colors
                              ${selectedEmail?.id === email.id ? 'bg-gray-100' : ''}
                              ${!readStatusMap[email.id] ? 'border-l-4 border-l-primary pl-2' : ''}
                              border-l-4 border-l-yellow-500 bg-yellow-50 pl-2`} 
                            onClick={() => viewEmail(email)}
                          >
                            <div className="flex justify-between items-start">
                              <div className={`text-sm font-medium truncate ${!readStatusMap[email.id] ? 'font-semibold' : ''}`}>
                                {getSenderName(email.from)}
                                <Badge variant="outline" className="ml-2 bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-yellow-300 text-xs">
                                  <User className="h-2 w-2 mr-1" />
                                  Customer
                                </Badge>
                              </div>
                              <div className="text-xs text-muted-foreground whitespace-nowrap ml-2">{formatEmailDate(email.date)}</div>
                            </div>
                            <div className={`text-xs truncate ${!readStatusMap[email.id] ? 'font-semibold' : ''}`}>
                              {email.subject}
                            </div>
                            <div className="text-xs text-muted-foreground truncate">
                              {email.snippet}
                              {email.hasAttachments && (
                                <span className="inline-flex items-center ml-1">
                                  <Paperclip className="h-3 w-3 inline" />
                                </span>
                              )}
                            </div>
                          </div>
                        ))}
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center p-6 h-[300px]">
                      <User className="h-12 w-12 text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium mb-2">No customer inquiries found</h3>
                      <p className="text-muted-foreground text-center mb-4">
                        {searchQuery 
                          ? `No customer inquiries matching "${searchQuery}" were found.` 
                          : "No customer inquiries detected in your inbox."}
                      </p>
                      {searchQuery ? (
                        <Button variant="outline" onClick={() => setSearchQuery('')}>Clear Search</Button>
                      ) : (
                        <Button variant="outline" onClick={handleRefresh}>Refresh</Button>
                      )}
                    </div>
                  )}
                </TabsContent>
            
                <TabsContent value="important" className="m-0">
                  <div className="flex flex-col items-center justify-center p-6 h-[300px]">
                  <AlertCircle className="h-12 w-12 text-muted-foreground mb-3" />
                  <h3 className="text-lg font-medium mb-2">Important emails</h3>
                  <p className="text-muted-foreground text-center">
                    This feature is coming soon.
                  </p>
                  </div>
            </TabsContent>
            
                <TabsContent value="archived" className="m-0">
                  <div className="flex flex-col items-center justify-center p-6 h-[300px]">
                  <Mail className="h-12 w-12 text-muted-foreground mb-3" />
                  <h3 className="text-lg font-medium mb-2">Archived emails</h3>
                  <p className="text-muted-foreground text-center">
                    This feature is coming soon.
                  </p>
                  </div>
            </TabsContent>
              </div>
              
              {/* Email Content Column - Takes 2/3 of the space */}
              <div className="lg:col-span-2 border rounded-md overflow-hidden">
                {selectedEmail ? (
                  <div className="h-full flex flex-col">
                    <div className="p-4 border-b">
                      <h2 className="text-xl font-semibold mb-2 flex items-center">
                        {selectedEmail.subject}
                        {customerInquiryMap[selectedEmail.id] && (
                          <Badge variant="outline" className="ml-2 bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-yellow-300">
                            <User className="h-3 w-3 mr-1" />
                            Customer Inquiry
                          </Badge>
                        )}
                      </h2>
                      <div className="flex flex-col md:flex-row md:justify-between gap-2">
                      <div>
                          {activeTab === 'sent' ? (
                            <>
                              <div className="font-medium text-sm">To: {emailContent?.to || 'Loading recipient...'}</div>
                              <div className="text-xs text-muted-foreground">From: {getSenderName(selectedEmail.from)}</div>
                            </>
                          ) : (
                            <div className="font-medium text-sm">From: {getSenderName(selectedEmail.from)}</div>
                          )}
                          {emailContent?.to && activeTab !== 'sent' && (
                            <div className="text-xs text-muted-foreground">To: {emailContent.to}</div>
                          )}
                      </div>
                        <div className="text-sm text-muted-foreground">{formatEmailDate(selectedEmail.date)}</div>
                      </div>
                      <div className="flex gap-2 mt-4">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button 
                              variant="outline" 
                              size="sm"
                              className="border hover:bg-gray-50"
                            >
                              <MessageSquare className="h-3.5 w-3.5 mr-1.5" />
                              <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500 font-medium">
                                Generate Response
                              </span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end" className="w-48">
                            <DropdownMenuItem 
                              onClick={() => {
                                setSelectedTone('professional');
                                setGeneratingResponse(true);
                                generateResponse().then(() => {
                                  setResponseDialogOpen(true);
                                });
                              }}
                              className="cursor-pointer"
                            >
                              Professional
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => {
                                setSelectedTone('friendly');
                                setGeneratingResponse(true);
                                generateResponse().then(() => {
                                  setResponseDialogOpen(true);
                                });
                              }}
                              className="cursor-pointer"
                            >
                              Friendly
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => {
                                setSelectedTone('concise');
                                setGeneratingResponse(true);
                                generateResponse().then(() => {
                                  setResponseDialogOpen(true);
                                });
                              }}
                              className="cursor-pointer"
                            >
                              Concise
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => {
                                setSelectedTone('detailed');
                                setGeneratingResponse(true);
                                generateResponse().then(() => {
                                  setResponseDialogOpen(true);
                                });
                              }}
                              className="cursor-pointer"
                            >
                              Detailed
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => {
                                setSelectedTone('empathetic');
                                setGeneratingResponse(true);
                                generateResponse().then(() => {
                                  setResponseDialogOpen(true);
                                });
                              }}
                              className="cursor-pointer"
                            >
                              Empathetic
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <div className="px-2 py-2">
                              <Input
                                placeholder="Enter custom tone and press Enter..."
                                className="text-sm h-8"
                                value={customToneDescription}
                                onChange={(e) => setCustomToneDescription(e.target.value)}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter' && customToneDescription.trim()) {
                                    setSelectedTone('custom');
                                    setGeneratingResponse(true);
                                    generateResponse().then(() => {
                                      setResponseDialogOpen(true);
                                    });
                                  }
                                }}
                              />
                            </div>
                          </DropdownMenuContent>
                        </DropdownMenu>
                        <Button variant="outline" size="sm" asChild>
                          <a 
                            href={`https://mail.google.com/mail/u/0/#${activeTab === 'sent' ? 'sent' : 'inbox'}/${selectedEmail.id}`} 
                            target="_blank" 
                            rel="noopener noreferrer"
                          >
                            <ExternalLink className="h-3.5 w-3.5 mr-1.5" />
                            Open in Gmail
                          </a>
                        </Button>
                        {activeTab !== 'sent' && (
                          <Button size="sm">
                            Reply
                          </Button>
                        )}
                      </div>
                    </div>
                    
                    <div className="p-4 overflow-auto flex-grow" style={{ maxHeight: 'calc(100vh - 300px)' }}>
                    {loadingEmail ? (
                      <div className="space-y-4">
                        <Skeleton className="h-4 w-full" />
                        <Skeleton className="h-4 w-[90%]" />
                        <Skeleton className="h-4 w-[80%]" />
                        <Skeleton className="h-32 w-full" />
                        <Skeleton className="h-4 w-[70%]" />
                        <Skeleton className="h-4 w-[60%]" />
                      </div>
                    ) : (
                      <div className="prose prose-sm max-w-none dark:prose-invert font-sf-pro">
                        {emailContent?.body.html ? (
                          <div dangerouslySetInnerHTML={createMarkup(emailContent.body.html)} />
                        ) : emailContent?.body.plain ? (
                          <div style={{ whiteSpace: 'pre-wrap' }}>{emailContent.body.plain}</div>
                        ) : (
                          <p className="text-muted-foreground">No content available for this email.</p>
                        )}
                        
                        {emailContent?.hasAttachments && emailContent.attachments.length > 0 && (
                          <div className="mt-6 border-t pt-4">
                            <h4 className="text-sm font-medium mb-2">Attachments ({emailContent.attachments.length})</h4>
                            <div className="flex flex-wrap gap-2">
                              {emailContent.attachments.map((attachment, index) => (
                                <Badge key={index} variant="outline" className="flex items-center gap-1 py-1.5">
                                  <Paperclip className="h-3 w-3" />
                                  <span className="max-w-[150px] truncate">{attachment.filename}</span>
                                  <span className="text-xs text-muted-foreground ml-1">
                                    ({Math.round(attachment.size / 1024)} KB)
                                  </span>
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center p-6 h-[500px]">
                    <Mail className="h-16 w-16 text-muted-foreground mb-4" />
                    <h3 className="text-xl font-medium mb-2">No email selected</h3>
                    <p className="text-muted-foreground text-center">
                      Select an email from the list to view its contents.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </Tabs>
          
          {/* Response generation dialog */}
          <Dialog open={responseDialogOpen} onOpenChange={setResponseDialogOpen}>
            <DialogContent className="sm:max-w-md md:max-w-lg lg:max-w-2xl">
              <DialogHeader>
                <DialogTitle>
                  {selectedTone === 'custom' ? `Custom Response (${customToneDescription})` : 'Generated Email Response'}
                </DialogTitle>
                <DialogDescription>
                  {selectedTone === 'custom' 
                    ? 'Response generated with your custom tone'
                    : `Response generated with ${RESPONSE_TONES.find(t => t.id === selectedTone)?.label.toLowerCase()} tone`}
                </DialogDescription>
              </DialogHeader>
              
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="response">
                    {selectedTone === 'custom' ? 'Your Custom Response' : 'Generated Response'}
                  </Label>
                  <Textarea
                    id="response"
                    rows={12}
                    value={generatedResponse}
                    onChange={(e) => setGeneratedResponse(e.target.value)}
                    placeholder="Your generated response will appear here..."
                    className="font-mono text-sm"
                  />
                </div>
              </div>
              
              <DialogFooter>
                <Button variant="outline" onClick={() => setResponseDialogOpen(false)}>
                  Cancel
                </Button>
                <Button 
                  onClick={copyResponseToClipboard} 
                  disabled={!generatedResponse}
                  className="border hover:bg-gray-50"
                >
                  <span className={`bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500 font-medium ${!generatedResponse ? 'opacity-50' : ''}`}>
                    Copy to Clipboard
                  </span>
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      )}
    </div>
  );
} "use client"

import { useState, useEffect, useRef } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"
import { 
  Search, 
  Filter, 
  Plus, 
  MoreHorizontal, 
  Gift, 
  Coffee,
  Tag,
  Ticket,
  Award,
  Zap,
  Edit,
  Trash,
  Eye,
  ArrowUpDown,
  ChevronDown,
  ChevronUp,
  Clock,
  User,
  Users,
  Mic,
  MicOff,
  X,
  Sparkles,
  HelpCircle,
  Package,
  DollarSign,
  Download
} from "lucide-react"
import { useRouter } from "next/navigation"
import { cn } from "@/lib/utils"
import { format, formatDistanceToNow } from "date-fns"
import Link from "next/link"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, getDocs, query, where, orderBy, doc, updateDoc, deleteDoc, getDoc } from "firebase/firestore"
import { toast } from "@/components/ui/use-toast"
import { safelyGetDate } from "@/lib/utils"
import { TapAiDialog } from "@/components/tap-ai-dialog"
import { getAIResponse } from "@/lib/openai"
import { CreateRewardDialog } from "@/components/create-reward-dialog"
import { Card as ShadcnCard } from "@/components/ui/card"
import { 
  getOrCreateAssistant, 
  createThread, 
  addMessage, 
  runAssistant 
} from "@/lib/assistant"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { IntroductoryRewardDialog } from "@/components/introductory-reward-dialog"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { RewardDetailSheet } from "@/components/reward-detail-sheet"

// Types
type RewardCategory = "all" | "individual" | "customer-specific" | "programs" | "agent"
type SortField = "rewardName" | "type" | "pointsCost" | "redemptionCount" | "redeemableCustomers" | "impressions" | "createdAt" | "lastRedeemed" | "isActive"
type SortDirection = "asc" | "desc"

interface Reward {
  id: string
  rewardName: string
  description: string
  type: string
  programtype?: string
  category: "individual" | "customer-specific" | "program" | "agent"
  pointsCost: number
  redemptionCount: number
  status: "active" | "inactive" | "draft"
  createdAt: Date
  updatedAt: Date
  imageUrl?: string
  punchCount?: number
  expiryDays?: number
  customerIds?: string[]
  rewardVisibility?: string
  conditions?: any[]
  limitations?: any[]
  hasActivePeriod: boolean
  activePeriod: {
    startDate: string
    endDate: string
  }
  isActive: boolean
  lastRedeemed?: Date | null
  programName?: string
  impressions?: number
  redeemableCustomers: number
}

// Add a nicer loading state to the rewards page

// First, let's create a skeleton loader component for the table view
const TableSkeleton = () => (
  <div className="animate-pulse animate-in fade-in duration-500">
    <div className="h-10 bg-gray-100 rounded-md mb-4 w-1/3"></div>
    <div className="border rounded-md overflow-hidden">
      <div className="bg-gray-50 p-4 flex space-x-4">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="h-8 bg-gray-100 rounded-md flex-1"></div>
        ))}
      </div>
      {[...Array(5)].map((_, i) => (
        <div key={i} className="border-t p-4">
          <div className="flex items-center space-x-4">
            <div className="h-10 w-10 bg-gray-100 rounded-md"></div>
            <div className="flex-1 space-y-2">
              <div className="h-4 bg-gray-100 rounded w-3/4"></div>
              <div className="h-3 bg-gray-100 rounded w-1/2"></div>
            </div>
            <div className="h-6 w-16 bg-gray-100 rounded-md"></div>
            <div className="h-6 w-16 bg-gray-100 rounded-md"></div>
            <div className="h-6 w-16 bg-gray-100 rounded-md"></div>
            <div className="h-6 w-16 bg-gray-100 rounded-md"></div>
            <div className="h-8 w-8 bg-gray-100 rounded-md"></div>
          </div>
        </div>
      ))}
    </div>
  </div>
);

// Create a skeleton loader for the card view
const CardSkeleton = () => (
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 animate-in fade-in duration-500">
    {[...Array(6)].map((_, i) => (
      <div key={i} className="border rounded-lg overflow-hidden animate-pulse">
        <div className="p-4">
          <div className="flex justify-between items-start mb-4">
            <div className="h-6 w-24 bg-gray-100 rounded-md"></div>
            <div className="h-6 w-16 bg-gray-100 rounded-md"></div>
          </div>
          <div className="h-5 bg-gray-100 rounded w-3/4 mb-2"></div>
          <div className="h-4 bg-gray-100 rounded w-full mb-1"></div>
          <div className="h-4 bg-gray-100 rounded w-2/3"></div>
        </div>
        <div className="border-t p-4">
          <div className="flex justify-between">
            <div className="space-y-2">
              <div className="h-4 bg-gray-100 rounded w-20"></div>
              <div className="h-5 bg-gray-100 rounded w-16"></div>
            </div>
            <div className="space-y-2">
              <div className="h-4 bg-gray-100 rounded w-20"></div>
              <div className="h-5 bg-gray-100 rounded w-16"></div>
            </div>
          </div>
        </div>
        <div className="border-t p-4 flex justify-between">
          <div className="h-9 w-28 bg-gray-100 rounded-md"></div>
          <div className="h-9 w-9 bg-gray-100 rounded-md"></div>
        </div>
      </div>
    ))}
  </div>
);

// Helper function to get the appropriate icon for reward type
const getRewardTypeIcon = (type: string) => {
  switch (type?.toLowerCase()) {
    case 'coffee':
      return <Coffee className="h-5 w-5 text-amber-600" />;
    case 'ticket':
      return <Ticket className="h-5 w-5 text-purple-600" />;
    case 'discount':
      return <Tag className="h-5 w-5 text-green-600" />;
    case 'gift':
      return <Gift className="h-5 w-5 text-red-600" />;
    default:
      return <Gift className="h-5 w-5 text-blue-600" />;
  }
};

// Add a function to count redeemable rewards by customers
const fetchRedeemableCount = async (rewardId: string, merchantId: string) => {
  console.log(`Fetching redeemable count for reward ${rewardId}`);
  
  try {
    // Step 1: Get all customers for this merchant
    const merchantCustomersRef = collection(db, 'merchants', merchantId, 'customers');
    const merchantCustomersSnapshot = await getDocs(merchantCustomersRef);
    
    console.log(`Found ${merchantCustomersSnapshot.size} merchant customers`);
    
    // Keep track of customers with redeemable status
    let redeemableCount = 0;
    let processedCustomers = 0;
    
    // Step 2: For each customer, check if they have this reward as redeemable
    for (const customerDoc of merchantCustomersSnapshot.docs) {
      const customerId = customerDoc.id;
      processedCustomers++;
      
      // Step 3: Check the redeemable status in the top-level customer rewards collection
      const customerRewardRef = doc(db, 'customers', customerId, 'rewards', rewardId);
      const customerRewardSnap = await getDoc(customerRewardRef);
      
      if (customerRewardSnap.exists()) {
        const rewardData = customerRewardSnap.data();
        if (rewardData.redeemable === true) {
          redeemableCount++;
          console.log(`Customer ${customerId} has reward ${rewardId} redeemable`);
        }
      }
      
      // Add debug logging for every 10 customers
      if (processedCustomers % 10 === 0) {
        console.log(`Processed ${processedCustomers}/${merchantCustomersSnapshot.size} customers, found ${redeemableCount} redeemable`);
      }
    }
    
    console.log(`Total redeemable count for reward ${rewardId}: ${redeemableCount}`);
    return redeemableCount;
  } catch (error) {
    console.error(`Error fetching redeemable count for reward ${rewardId}:`, error);
    return 0;
  }
};

export default function RewardsPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [rewards, setRewards] = useState<Reward[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [rewardCategory, setRewardCategory] = useState<RewardCategory>("all")
  const [sortField, setSortField] = useState<SortField>("rewardName")
  const [sortDirection, setSortDirection] = useState<SortDirection>("asc")
  const [loading, setLoading] = useState(true)
  const [aiDialogOpen, setAiDialogOpen] = useState(false)
  const [voiceCommandResult, setVoiceCommandResult] = useState<any>(null)
  const [createRewardDialogOpen, setCreateRewardDialogOpen] = useState(false)
  const [createRewardData, setCreateRewardData] = useState<any>(null)
  const [previewReward, setPreviewReward] = useState<any>(null)
  const [showFilters, setShowFilters] = useState(false)
  const [statusFilters, setStatusFilters] = useState({
    active: true,
    inactive: true
  })
  const [typeFilters, setTypeFilters] = useState({
    coffee: true,
    discount: true,
    gift: true,
    ticket: true,
    other: true
  })
  const [pointsCostRange, setPointsCostRange] = useState([0, 500])
  const [dateFilter, setDateFilter] = useState("all")
  const [customDateRange, setCustomDateRange] = useState<{start: Date | undefined, end: Date | undefined}>({
    start: undefined,
    end: undefined
  })
  const [showCustomDateRange, setShowCustomDateRange] = useState(false)
  const [rewardToDelete, setRewardToDelete] = useState<string | null>(null)
  const [isIntroRewardDialogOpen, setIsIntroRewardDialogOpen] = useState(false)
  const [hasIntroReward, setHasIntroReward] = useState(false)
  const [isConfirmDeleteProgramOpen, setIsConfirmDeleteProgramOpen] = useState(false)
  const [programToDelete, setProgramToDelete] = useState<string | null>(null)
  const [expandedPrograms, setExpandedPrograms] = useState<Record<string, boolean>>({})
  const [selectedRewardId, setSelectedRewardId] = useState<string | null>(null)
  const [isRewardDetailOpen, setIsRewardDetailOpen] = useState(false)
  const [agentRewardsWithCustomers, setAgentRewardsWithCustomers] = useState<(Reward & { customerName?: string })[]>([])
  const [loadingAgentRewards, setLoadingAgentRewards] = useState(true)
  const hasFetchedAgentRewards = useRef(false)

  useEffect(() => {
    const fetchRewards = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        const rewardsRef = collection(db, 'merchants', user.uid, 'rewards')
        const q = query(rewardsRef, orderBy('createdAt', 'desc'))
        const querySnapshot = await getDocs(q)
        
        const rewardsData: any[] = []
        
        // First pass to get basic reward data
        querySnapshot.forEach(doc => {
          try {
            const data = doc.data()
            
            let createdAt, updatedAt, lastRedeemed;
            try {
              createdAt = safelyGetDate(data.createdAt);
              updatedAt = safelyGetDate(data.updatedAt || data.createdAt);
              lastRedeemed = data.lastRedeemed ? safelyGetDate(data.lastRedeemed) : null;
            } catch (dateError) {
              createdAt = new Date();
              updatedAt = new Date();
              lastRedeemed = null;
            }
            
            rewardsData.push({
              ...data,
              id: doc.id,
              createdAt,
              updatedAt,
              lastRedeemed,
              isActive: !!data.isActive,
              impressions: data.impressions || 0,
              redeemableCustomers: 0 // Initialize with 0
            });
          } catch (err) {
            console.error("Error processing document:", err, "Document ID:", doc.id);
          }
        });
        
        // Set initial data
        setRewards(rewardsData);
        setLoading(false);
        
        // Then fetch redeemable counts in background
        const updateRedeemableCounts = async () => {
          console.log("Fetching redeemable counts for all rewards");
          const updatedRewardsData = [...rewardsData];
          
          // Process in batches to avoid overwhelming Firestore
          const batchSize = 5;
          for (let i = 0; i < updatedRewardsData.length; i += batchSize) {
            const batch = updatedRewardsData.slice(i, i + batchSize);
            await Promise.all(
              batch.map(async (reward, index) => {
                const redeemableCount = await fetchRedeemableCount(reward.id, user.uid);
                updatedRewardsData[i + index].redeemableCustomers = redeemableCount;
              })
            );
            // Update state after each batch
            setRewards([...updatedRewardsData]);
            console.log(`Processed batch ${i / batchSize + 1}/${Math.ceil(updatedRewardsData.length / batchSize)}`);
          }
        };
        
        updateRedeemableCounts();
        
      } catch (error) {
        console.error("Error fetching rewards:", error);
        toast({
          title: "Error",
          description: "Failed to load rewards. Please try again.",
          variant: "destructive"
        });
        setLoading(false);
      }
    }
    
    fetchRewards()
  }, [user])

  useEffect(() => {
    const checkIntroReward = async () => {
      if (!user?.uid) return
      
      try {
        const merchantRef = doc(db, 'merchants', user.uid)
        const merchantDoc = await getDoc(merchantRef)
        const merchantData = merchantDoc.data()
        
        setHasIntroReward(!!merchantData?.hasIntroductoryReward)
      } catch (error) {
        console.error("Error checking introductory reward status:", error)
      }
    }
    
    checkIntroReward()
  }, [user?.uid])

  // Replace the agent rewards useEffect with this version
  useEffect(() => {
    const fetchAgentRewardsWithCustomers = async () => {
      if (!user?.uid || !rewards.length) return;
      if (hasFetchedAgentRewards.current) return;
      
      try {
        setLoadingAgentRewards(true);
        hasFetchedAgentRewards.current = true;
        
        // Filter agent rewards
        const agentRewards = rewards.filter(reward => reward.programtype === "agent");
        
        // Fetch customer data for each agent reward
        const rewardsWithCustomers = await Promise.all(
          agentRewards.map(async (reward) => {
            // If there's a customerId in the reward
            if (reward.customerIds && reward.customerIds.length > 0) {
              try {
                const customerId = reward.customerIds[0]; // Take the first customer ID
                const customerDoc = await getDoc(doc(db, 'customers', customerId));
                
                if (customerDoc.exists()) {
                  const customerData = customerDoc.data();
                  return {
                    ...reward,
                    customerName: customerData.firstName || customerData.name || 'Unknown'
                  };
                }
              } catch (error) {
                console.error("Error fetching customer data:", error);
              }
            }
            
            return {
              ...reward,
              customerName: 'No customer found'
            };
          })
        );
        
        setAgentRewardsWithCustomers(rewardsWithCustomers);
      } catch (error) {
        console.error("Error fetching agent rewards with customers:", error);
      } finally {
        setLoadingAgentRewards(false);
      }
    };
    
    if (rewardCategory === "agent" && !hasFetchedAgentRewards.current) {
      fetchAgentRewardsWithCustomers();
    }
  }, [rewards, user?.uid, rewardCategory]);

  // Add handleSort function before getFilteredRewards
  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortDirection(prev => prev === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("asc")
    }
  }

  // Move the applyFilters function before getFilteredRewards
  const handleStatusFilterChange = (status: string, checked: boolean) => {
    setStatusFilters(prev => ({
      ...prev,
      [status.toLowerCase()]: checked
    }))
  }

  const handleTypeFilterChange = (type: string, checked: boolean) => {
    setTypeFilters(prev => ({
      ...prev,
      [type.toLowerCase()]: checked
    }))
  }

  const applyFilters = (data: Reward[]) => {
    return data.filter(reward => {
      // Apply status filter
      const isActive = reward.isActive
      if ((isActive && !statusFilters.active) || (!isActive && !statusFilters.inactive)) {
        return false
      }

      // Apply type filter
      const type = reward.type?.toLowerCase() || 'other'
      if (!typeFilters[type as keyof typeof typeFilters] && !typeFilters.other) {
        return false
      }

      // Apply points cost filter
      if (reward.pointsCost < pointsCostRange[0] || reward.pointsCost > pointsCostRange[1]) {
        return false
      }

      // Apply date filter
      if (dateFilter !== "all") {
        const dateObj = reward.createdAt
        
        if (!dateObj) return false
        
        if (dateFilter === "custom") {
          // Handle custom date range
          if (customDateRange.start && !customDateRange.end) {
            return dateObj >= customDateRange.start
          } else if (!customDateRange.start && customDateRange.end) {
            const endOfDay = new Date(customDateRange.end)
            endOfDay.setHours(23, 59, 59, 999)
            return dateObj <= endOfDay
          } else if (customDateRange.start && customDateRange.end) {
            const endOfDay = new Date(customDateRange.end)
            endOfDay.setHours(23, 59, 59, 999)
            return dateObj >= customDateRange.start && dateObj <= endOfDay
          }
          return true
        } else {
          const now = new Date()
          const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
          const yesterday = new Date(today)
          yesterday.setDate(yesterday.getDate() - 1)
          const thisWeekStart = new Date(today)
          thisWeekStart.setDate(today.getDate() - today.getDay())
          const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1)
          
          switch (dateFilter) {
            case "today":
              return dateObj >= today
            case "yesterday":
              return dateObj >= yesterday && dateObj < today
            case "thisWeek":
              return dateObj >= thisWeekStart
            case "thisMonth":
              return dateObj >= thisMonthStart
            default:
              return true
          }
        }
      }

      return true
    })
  }

  // Fix the missing closing parenthesis in getFilteredRewards
  const getFilteredRewards = () => {
    let filtered = rewards.filter(reward => {
      // Apply category filter
      if (rewardCategory !== "all" && reward.category !== rewardCategory) {
        return false
      }
      
      // Apply search filter
      if (searchQuery && !reward.rewardName.toLowerCase().includes(searchQuery.toLowerCase())) {
        return false
      }
      
      return true
    })
    
    // Apply additional filters
    filtered = applyFilters(filtered)
    
    // Apply sorting
    return filtered.sort((a, b) => {
      // Sort by selected field
      let comparison = 0;
      
      switch (sortField) {
        case "rewardName":
          comparison = (a.rewardName || "").localeCompare(b.rewardName || "");
          break;
        case "type":
          comparison = (a.type || "").localeCompare(b.type || "");
          break;
        case "pointsCost":
          comparison = (a.pointsCost || 0) - (b.pointsCost || 0);
          break;
        case "redemptionCount":
          comparison = (a.redemptionCount || 0) - (b.redemptionCount || 0);
          break;
        case "redeemableCustomers":
          comparison = (a.redeemableCustomers || 0) - (b.redeemableCustomers || 0);
          break;
        case "impressions":
          comparison = (a.impressions || 0) - (b.impressions || 0);
          break;
        case "createdAt":
          const aTime = a.createdAt ? a.createdAt.getTime() : 0;
          const bTime = b.createdAt ? b.createdAt.getTime() : 0;
          comparison = aTime - bTime;
          break;
        case "lastRedeemed":
          const aRedeemed = a.lastRedeemed ? a.lastRedeemed.getTime() : 0;
          const bRedeemed = b.lastRedeemed ? b.lastRedeemed.getTime() : 0;
          comparison = aRedeemed - bRedeemed;
          break;
        case "isActive":
          comparison = (a.isActive ? 1 : 0) - (b.isActive ? 1 : 0);
          break;
        default:
          comparison = 0;
      }
      
      return sortDirection === "asc" ? comparison : -comparison;
    });
  };

  // Add a helper function to toggle program expansion
  const toggleProgramExpansion = (programType: string) => {
    setExpandedPrograms(prev => ({
      ...prev,
      [programType]: !prev[programType]
    }));
  };

  // Then update the filteredRewards calculation in each tab
  // For the "all" tab, we use the existing filteredRewards variable

  // For the category tabs, we need to filter by category
  {["individual", "customer-specific", "programs"].map((category) => {
    // Filter rewards by category
    const categoryFilteredRewards = rewards
      .filter(reward => {
        return reward.category === category;
      });

    return (
      <TabsContent value={category} className="mt-0">
        <Card className="rounded-lg overflow-hidden">
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[300px]">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("rewardName")}
                      className="flex items-center gap-1 px-0 font-medium"
                    >
                      Reward Name
                      {sortField === "rewardName" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("type")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Type
                      {sortField === "type" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("pointsCost")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Points
                      {sortField === "pointsCost" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("redemptionCount")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Redemptions
                      {sortField === "redemptionCount" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("redeemableCustomers")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Redeemable
                      {sortField === "redeemableCustomers" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                      <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("impressions")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Impressions
                      {sortField === "impressions" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                      <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("createdAt")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Created
                      {sortField === "createdAt" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("lastRedeemed")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Last Redeemed
                      {sortField === "lastRedeemed" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="text-center">
                    <Button 
                      variant="ghost" 
                      onClick={() => handleSort("isActive")}
                      className="flex items-center gap-1 px-0 font-medium mx-auto"
                    >
                      Status
                      {sortField === "isActive" && (
                        sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </TableHead>
                  <TableHead className="w-[50px]"></TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={8} className="h-24 text-center">
                      <div className="flex justify-center">
                        <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                      </div>
                    </TableCell>
                  </TableRow>
                ) : categoryFilteredRewards.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={8} className="h-24 text-center">
                      <div className="flex flex-col items-center justify-center">
                        <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                          <Gift className="h-6 w-6 text-muted-foreground" />
                        </div>
                        <h3 className="mt-4 text-lg font-medium">No rewards found</h3>
                        <p className="text-sm text-muted-foreground mt-1">
                          {searchQuery ? "Try adjusting your search query" : "Create your first reward to get started"}
                        </p>
                        {!searchQuery && (
                          <Button 
                            className="mt-4 h-9 gap-2 rounded-md"
                            onClick={() => router.push('/create')}
                          >
                            <Plus className="h-4 w-4" />
                            Create Reward
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ) : (
                  categoryFilteredRewards.map((reward) => (
                    <TableRow 
                      key={reward.id}
                      className="cursor-pointer hover:bg-gray-50"
                      onClick={() => handleViewReward(reward.id)}
                    >
                      <TableCell className="font-medium">
                        <div className="flex items-center gap-2">
                          <div className="h-9 w-9 min-w-[36px] rounded-md bg-muted flex items-center justify-center">
                            {reward.category === "program" 
                              ? <Award className="h-5 w-5 text-amber-600" />
                              : getRewardTypeIcon(reward.type)}
                          </div>
                          <div className="min-w-0">
                            <div className="truncate flex items-center gap-1">
                              {reward.rewardName}
                              {Array.isArray(reward.conditions) && 
                                reward.conditions.find(c => c.type === 'maximumTransactions')?.value === 0 && (
                                <Badge variant="outline" className="ml-1 py-0 h-4 text-[10px] px-1.5 bg-teal-50 text-teal-700 border-teal-200">
                                  New Customers
                                </Badge>
                              )}
                            </div>
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <div className="text-xs text-muted-foreground line-clamp-1 cursor-help">
                                    {reward.description}
                                  </div>
                                </TooltipTrigger>
                                <TooltipContent side="top">
                                  <p className="text-xs">
                                    {reward.programtype === "points" && "Customers redeem their points for this reward"}
                                    {reward.programtype === "coffee" && "Part of a buy-X-get-one-free program"}
                                    {reward.programtype === "voucher" && "A monetary voucher customers can redeem"}
                                    {reward.programtype === "discount" && "A percentage discount on purchases"}
                                    {!reward.programtype || reward.programtype === "individual" && "Standard individual reward"}
                                    {reward.programName && <span className="block mt-1 font-medium">{reward.programName}</span>}
                                  </p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell className="text-center">
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              {reward.programtype === "agent" ? (
                                <div className="font-medium">
                                  <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500">
                                    Agent
                                  </span>
                                </div>
                              ) : (
                                <div className={cn(
                                  "font-medium",
                                  reward.programtype === "voucher" && "text-purple-700",
                                  reward.programtype === "points" && "text-blue-700",
                                  reward.programtype === "coffee" && "text-amber-700",
                                  reward.programtype === "discount" && "text-emerald-700",
                                  !reward.programtype && "text-gray-700"
                                )}>
                                  {reward.programtype 
                                    ? reward.programtype.charAt(0).toUpperCase() + reward.programtype.slice(1)
                                    : "Individual Reward"}
                                </div>
                              )}
                            </TooltipTrigger>
                            <TooltipContent side="top">
                              <p className="text-xs">
                                {reward.programtype === "points" && "Customers redeem their points for this reward"}
                                {reward.programtype === "coffee" && "Part of a buy-X-get-one-free program"}
                                {reward.programtype === "voucher" && "A monetary voucher customers can redeem"}
                                {reward.programtype === "discount" && "A percentage discount on purchases"}
                                {reward.programtype === "agent" && "Created by AI marketing agent"}
                                {!reward.programtype || reward.programtype === "individual" && "Standard individual reward"}
                                {reward.programName && <span className="block mt-1 font-medium">{reward.programName}</span>}
                              </p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </TableCell>
                      <TableCell className="text-center">
                        <div className="font-medium text-blue-700">
                          {reward.pointsCost}
                        </div>
                      </TableCell>
                      <TableCell className="text-center">
                        <div className="font-medium text-green-700">
                          {reward.redemptionCount || 0}
                        </div>
                      </TableCell>
                      <TableCell className="text-center">
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <div className="font-medium text-blue-700">
                                {reward.redeemableCustomers || 0}
                              </div>
                            </TooltipTrigger>
                            <TooltipContent side="top">
                              <p className="text-xs">Number of customers who can redeem this reward</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </TableCell>
                      <TableCell className="text-center">
                        <div className="font-medium text-purple-700">
                          {reward.impressions || 0}
                        </div>
                      </TableCell>
                      <TableCell className="text-center">
                        {reward.createdAt ? formatDistanceToNow(reward.createdAt, { addSuffix: true }) : "Unknown"}
                      </TableCell>
                      <TableCell className="text-center">
                        {reward.lastRedeemed 
                          ? formatDistanceToNow(reward.lastRedeemed, { addSuffix: true })
                          : "Never"}
                      </TableCell>
                      <TableCell className="text-center">
                        <div className={cn(
                          "font-medium",
                          reward.isActive ? "text-green-700" : "text-red-700"
                        )}>
                          {reward.isActive ? "Live" : "Inactive"}
                        </div>
                      </TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button 
                              variant="ghost" 
                              className="h-8 w-8 p-0"
                              onClick={(e) => e.stopPropagation()}
                            >
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent 
                            align="end"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <DropdownMenuItem onClick={() => handleViewReward(reward.id)}>
                              <Eye className="h-4 w-4 mr-2" />
                              View
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => router.push(`/store/${reward.id}/edit`)}>
                              <Edit className="h-4 w-4 mr-2" />
                              Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => toggleRewardStatus(reward.id, reward.isActive)}>
                              {reward.isActive ? (
                                <>
                                  <Clock className="h-4 w-4 mr-2" />
                                  Deactivate
                                </>
                              ) : (
                                <>
                                  <Zap className="h-4 w-4 mr-2" />
                                  Activate
                                </>
                              )}
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem 
                              className="text-red-600"
                              onClick={() => deleteReward(reward.id)}
                            >
                              <Trash className="h-4 w-4 mr-2" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </TabsContent>
    );
  })}

  // Add other required functions
  const toggleRewardStatus = async (rewardId: string, currentStatus: boolean) => {
    if (!user?.uid) return;
    
    try {
      const rewardRef = doc(db, 'merchants', user.uid, 'rewards', rewardId);
      
      // Only update the isActive field
      await updateDoc(rewardRef, { 
        isActive: !currentStatus,
        updatedAt: new Date()
      });
      
      // Update the local state
      setRewards(rewards.map(reward => 
        reward.id === rewardId 
          ? { ...reward, isActive: !currentStatus } 
          : reward
      ));
      
      toast({
        title: !currentStatus ? "Reward activated" : "Reward deactivated",
        description: `The reward has been ${!currentStatus ? "activated" : "deactivated"} successfully.`
      });
    } catch (error) {
      console.error("Error toggling reward status:", error);
      toast({
        title: "Error",
        description: "Failed to update reward status. Please try again.",
        variant: "destructive"
      });
    }
  };

  const deleteReward = (id: string) => {
    // Instead of immediately confirming, set the reward to delete
    setRewardToDelete(id)
  }

  const confirmDelete = async () => {
    if (!rewardToDelete || !user) return
    
    try {
      const rewardRef = doc(db, 'merchants', user.uid, 'rewards', rewardToDelete)
      await deleteDoc(rewardRef)
      
      // Update local state
      setRewards(prev => prev.filter(reward => reward.id !== rewardToDelete))
      
      toast({
        title: "Success",
        description: "Reward deleted successfully",
      })
    } catch (error) {
      console.error("Error deleting reward:", error)
      toast({
        title: "Error",
        description: "Failed to delete reward. Please try again.",
        variant: "destructive"
      })
    } finally {
      // Clear the reward to delete
      setRewardToDelete(null)
    }
  }

  // Add RewardPreview component back
  const RewardPreview = ({ reward, onClose }: { reward: any, onClose: () => void }) => {
    const [showConditions, setShowConditions] = useState(false);
    const [showLimitations, setShowLimitations] = useState(false);
    
    // Format the reward data for display
    const formattedReward = {
      ...reward,
      // Ensure conditions is an array
      conditions: Array.isArray(reward.conditions) 
        ? reward.conditions 
        : Object.entries(reward.conditions || {})
            .filter(([key, value]) => value && !key.startsWith('use'))
            .map(([key, value]) => ({ type: key, value })),
      
      // Ensure limitations is an array
      limitations: Array.isArray(reward.limitations)
        ? reward.limitations
        : Object.entries(reward.limitations || {})
            .filter(([key, value]) => value && !key.startsWith('use'))
            .map(([key, value]) => ({ type: key, value }))
    };
    
    // Helper function to format condition display text
    const formatCondition = (condition: any) => {
      switch (condition.type) {
        case 'minimumSpend':
          return `Minimum spend: $${condition.amount || condition.value}`;
        case 'minimumLifetimeSpend':
          return `Minimum lifetime spend: $${condition.amount || condition.value}`;
        case 'minimumTransactions':
          return `Minimum transactions: ${condition.amount || condition.value}`;
        case 'maximumTransactions':
          return `Maximum transactions: ${condition.amount || condition.value}`;
        case 'daysSinceJoined':
          return `Days since joined: ${condition.amount || condition.value}`;
        case 'daysSinceLastVisit':
          return `Days since last visit: ${condition.amount || condition.value}`;
        case 'minimumPointsBalance':
          return `Minimum points balance: ${condition.amount || condition.value}`;
        case 'membershipLevel':
          return `Membership level: ${condition.amount || condition.value}`;
        default:
          return `${condition.type}: ${condition.amount || condition.value}`;
      }
    };
    
    // Helper function to format limitation display text
    const formatLimitation = (limitation: any) => {
      switch (limitation.type) {
        case 'customerLimit':
          return `Limit per customer: ${limitation.value}`;
        case 'totalRedemptionLimit':
          return `Total redemption limit: ${limitation.value}`;
        case 'daysOfWeek':
          return `Available on: ${Array.isArray(limitation.value) ? limitation.value.join(', ') : limitation.value}`;
        case 'timeOfDay':
          if (typeof limitation.value === 'object') {
            return `Available from ${limitation.value.startTime || '00:00'} to ${limitation.value.endTime || '23:59'}`;
          }
          return `Time restricted: ${limitation.value}`;
        case 'activePeriod':
          if (typeof limitation.value === 'object') {
            const start = limitation.value.startDate ? new Date(limitation.value.startDate).toLocaleDateString() : 'anytime';
            const end = limitation.value.endDate ? new Date(limitation.value.endDate).toLocaleDateString() : 'no end date';
            return `Active from ${start} to ${end}`;
          }
          return `Active period: ${limitation.value}`;
        default:
          return `${limitation.type}: ${typeof limitation.value === 'object' ? JSON.stringify(limitation.value) : limitation.value}`;
      }
    };
    
    return (
      <div className="fixed top-24 right-8 z-50 w-96 shadow-xl animate-fadeIn">
        <ShadcnCard className="rounded-lg overflow-hidden border-2 border-[#007AFF]">
          <div className="bg-[#007AFF] text-white p-3 flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Gift className="h-5 w-5" />
              <h3 className="font-medium">New Reward Created</h3>
            </div>
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 w-8 p-0 text-white hover:bg-blue-600"
              onClick={onClose}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="p-6">
            <div className="flex justify-between items-start mb-3">
              <Badge variant="outline" className={cn(
                "rounded-md",
                "bg-green-50 text-green-700 border-green-200"
              )}>
                {reward.type || "standard"}
              </Badge>
              
              <Badge variant="outline" className={cn(
                "rounded-md",
                reward.isActive ? "bg-green-50 text-green-700 border-green-200" : "bg-red-50 text-red-700 border-red-200"
              )}>
                {reward.isActive ? "Live" : "Inactive"}
              </Badge>
            </div>
            
            <h4 className="text-lg font-medium mb-1">{reward.rewardName}</h4>
            <p className="text-sm text-muted-foreground mb-4">
              {reward.description}
            </p>
            
            <div className="flex justify-between items-center mb-4">
              <div>
                <p className="text-sm text-muted-foreground">Points Cost</p>
                <div className="flex items-center mt-1">
                  <Zap className="h-4 w-4 text-blue-600 mr-1" />
                  <span className="font-medium">{reward.pointsCost}</span>
                </div>
              </div>
              
              <div className="text-right">
                <p className="text-sm text-muted-foreground">Visibility</p>
                <p className="font-medium mt-1">{reward.rewardVisibility || "global"}</p>
              </div>
            </div>
            
            {/* Conditions Dropdown */}
            <div className="mb-3 border rounded-md overflow-hidden">
              <button 
                onClick={() => setShowConditions(!showConditions)}
                className="w-full p-2 flex items-center justify-between bg-gray-50 hover:bg-gray-100 transition-colors"
              >
                <span className="font-medium text-sm">Conditions</span>
                {showConditions ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
              </button>
              
              {showConditions && (
                <div className="p-3 text-sm">
                  {formattedReward.conditions.length > 0 ? (
                    <ul className="space-y-2">
                      {formattedReward.conditions.map((condition: any, index: number) => (
                        <li key={index} className="flex items-start gap-2">
                          <div className="h-4 w-4 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                            <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                          </div>
                          <span>{formatCondition(condition)}</span>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p className="text-gray-500">No conditions specified</p>
                  )}
                </div>
              )}
            </div>
            
            {/* Limitations Dropdown */}
            <div className="mb-4 border rounded-md overflow-hidden">
              <button 
                onClick={() => setShowLimitations(!showLimitations)}
                className="w-full p-2 flex items-center justify-between bg-gray-50 hover:bg-gray-100 transition-colors"
              >
                <span className="font-medium text-sm">Limitations</span>
                {showLimitations ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
              </button>
              
              {showLimitations && (
                <div className="p-3 text-sm">
                  {formattedReward.limitations.length > 0 ? (
                    <ul className="space-y-2">
                      {formattedReward.limitations.map((limitation: any, index: number) => (
                        <li key={index} className="flex items-start gap-2">
                          <div className="h-4 w-4 rounded-full bg-red-100 flex items-center justify-center mt-0.5">
                            <div className="h-2 w-2 rounded-full bg-red-500"></div>
                          </div>
                          <span>{formatLimitation(limitation)}</span>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p className="text-gray-500">No limitations specified</p>
                  )}
                </div>
              )}
            </div>
            
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                className="h-9 rounded-md flex-1"
                onClick={onClose}
              >
                Dismiss
              </Button>
              <Button 
                className="h-9 rounded-md flex-1 bg-[#0066ff] hover:bg-[#0052cc] text-white"
                onClick={() => {
                  onClose();
                  setCreateRewardDialogOpen(true);
                }}
              >
                Create Reward
              </Button>
            </div>
          </div>
        </ShadcnCard>
      </div>
    );
  };

  ////// Add export PDF functionality
  const handleExportPDF = async () => {
    try {
      // Dynamically import the necessary modules
      const jspdfModule = await import('jspdf');
      const autoTableModule = await import('jspdf-autotable');
      
      // Create a new document
      const doc = new jspdfModule.default();
      
      // Manually add the plugin to the document
      const autoTable = autoTableModule.default;
      
      // Add title
      doc.setFontSize(18);
      doc.text('Rewards Report', 14, 22);
      
      // Add date generated
      doc.setFontSize(11);
      doc.text(`Generated: ${format(new Date(), 'MMM d, yyyy h:mm a')}`, 14, 30);
      
      // Prepare data for export
      const dataToExport = getFilteredRewards().map(reward => [
        reward.rewardName,
        reward.description || '',
        reward.pointsCost || 0,
        reward.isActive ? 'Active' : 'Inactive',
        reward.type || '',
        reward.redemptionCount || 0,
        reward.createdAt ? format(reward.createdAt, 'MMM d, yyyy') : ''
      ]);
      
      // Add the table
      autoTable(doc, {
        head: [['Name', 'Description', 'Points Cost', 'Status', 'Type', 'Redemptions', 'Created Date']],
        body: dataToExport,
        startY: 40,
        styles: { fontSize: 10, cellPadding: 3 },
        headStyles: { fillColor: [0, 102, 255], textColor: 255 }
      });
      
      // Save the PDF
      doc.save('rewards-report.pdf');
      
      toast({
        title: "Export Successful",
        description: "Your rewards report has been downloaded.",
      });
    } catch (error) {
      console.error('Error exporting PDF:', error);
      toast({
        title: "Export Failed",
        description: "Failed to generate the PDF report.",
        variant: "destructive"
      });
    }
  };

  // Modify the handleViewReward function 
  const handleViewReward = (rewardId: string) => {
    setSelectedRewardId(rewardId);
    setIsRewardDetailOpen(true);
  };

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Rewards"
        >
          <div className="flex items-center gap-2">
            <Button 
              size="sm"
              variant="default" 
              className="h-8 gap-2 rounded-md"
              onClick={() => router.push('/create')}
            >
              <Plus className="h-4 w-4" />
              Create Reward
            </Button>
            <Button 
              size="sm"
              variant="outline" 
              className="h-8 gap-2 rounded-md"
              onClick={handleExportPDF}
            >
              <Download className="h-4 w-4" />
              Export
            </Button>
          </div>
        </PageHeader>

        <Tabs defaultValue="all" onValueChange={(value) => setRewardCategory(value as RewardCategory)}>
          <div className="flex items-center justify-between mb-4">
            <TabsList className="h-9 rounded-md">
              <TabsTrigger value="all" className="flex items-center gap-2">
                <Package className="h-4 w-4" />
                All Rewards
              </TabsTrigger>
              <TabsTrigger value="individual" className="flex items-center gap-2">
                <Gift className="h-4 w-4" />
                Individual
              </TabsTrigger>
              <TabsTrigger value="customer-specific" className="flex items-center gap-2">
                <Users className="h-4 w-4" />
                Customer-Specific
              </TabsTrigger>
              <TabsTrigger value="programs" className="flex items-center gap-2">
                <Award className="h-4 w-4" />
                Programs
              </TabsTrigger>
              <TabsTrigger value="agent" className="flex items-center gap-2">
                <Sparkles className="h-4 w-4 text-blue-500" />
                <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500 font-medium">
                  Agent
                </span>
              </TabsTrigger>
            </TabsList>
            
            <div className="flex items-center gap-2">
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input 
                  type="search" 
                  placeholder="Search rewards..." 
                  className="w-[250px] pl-9 h-9 rounded-md"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              
              <Popover open={showFilters} onOpenChange={setShowFilters}>
                <PopoverTrigger asChild>
                  <Button 
                    variant="outline" 
                    className="h-9 gap-2 rounded-md"
                    onClick={() => setShowFilters(true)}
                  >
                    <Filter className="h-4 w-4" />
                    Filter
                    {(Object.values(statusFilters).some(v => !v) || 
                      Object.values(typeFilters).some(v => !v) || 
                      dateFilter !== "all") && (
                      <Badge className="ml-1 bg-primary h-5 w-5 p-0 flex items-center justify-center">
                        <span className="text-xs">!</span>
                      </Badge>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-96 p-4" align="end">
                  <div className="space-y-4">
                    <h4 className="font-medium">Filter Rewards</h4>
                    
                    <div className="space-y-2">
                      <Label>Status</Label>
                      <div className="flex flex-col gap-2">
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="status-active" 
                            checked={statusFilters.active}
                            onCheckedChange={(checked) => 
                              handleStatusFilterChange('active', checked as boolean)}
                          />
                          <Label htmlFor="status-active" className="cursor-pointer">Active</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="status-inactive" 
                            checked={statusFilters.inactive}
                            onCheckedChange={(checked) => 
                              handleStatusFilterChange('inactive', checked as boolean)}
                          />
                          <Label htmlFor="status-inactive" className="cursor-pointer">Inactive</Label>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Type</Label>
                      <div className="flex flex-col gap-2">
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="type-coffee" 
                            checked={typeFilters.coffee}
                            onCheckedChange={(checked) => 
                              handleTypeFilterChange('coffee', checked as boolean)}
                          />
                          <Label htmlFor="type-coffee" className="cursor-pointer">Coffee</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="type-discount" 
                            checked={typeFilters.discount}
                            onCheckedChange={(checked) => 
                              handleTypeFilterChange('discount', checked as boolean)}
                          />
                          <Label htmlFor="type-discount" className="cursor-pointer">Discount</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="type-gift" 
                            checked={typeFilters.gift}
                            onCheckedChange={(checked) => 
                              handleTypeFilterChange('gift', checked as boolean)}
                          />
                          <Label htmlFor="type-gift" className="cursor-pointer">Gift</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="type-ticket" 
                            checked={typeFilters.ticket}
                            onCheckedChange={(checked) => 
                              handleTypeFilterChange('ticket', checked as boolean)}
                          />
                          <Label htmlFor="type-ticket" className="cursor-pointer">Ticket</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="type-other" 
                            checked={typeFilters.other}
                            onCheckedChange={(checked) => 
                              handleTypeFilterChange('other', checked as boolean)}
                          />
                          <Label htmlFor="type-other" className="cursor-pointer">Other</Label>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <Label>Points Cost Range</Label>
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="min-points" className="text-xs">Min</Label>
                          <Input
                            id="min-points"
                            type="number"
                            min={0}
                            max={500}
                            value={pointsCostRange[0]}
                            onChange={(e) => setPointsCostRange([Number(e.target.value), pointsCostRange[1]])}
                          />
                        </div>
                        <div>
                          <Label htmlFor="max-points" className="text-xs">Max</Label>
                          <Input
                            id="max-points"
                            type="number"
                            min={0}
                            max={500}
                            value={pointsCostRange[1]}
                            onChange={(e) => setPointsCostRange([pointsCostRange[0], Number(e.target.value)])}
                          />
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex justify-between pt-2">
                      <Button 
                        variant="outline" 
                        onClick={() => {
                          setStatusFilters({ active: true, inactive: true })
                          setTypeFilters({ 
                            coffee: true, 
                            discount: true, 
                            gift: true, 
                            ticket: true, 
                            other: true 
                          })
                          setPointsCostRange([0, 500])
                          setDateFilter("all")
                          setCustomDateRange({ start: undefined, end: undefined })
                          setShowCustomDateRange(false)
                        }}
                      >
                        Reset Filters
                      </Button>
                      <Button onClick={() => setShowFilters(false)}>Apply Filters</Button>
                    </div>
                  </div>
                </PopoverContent>
              </Popover>
            </div>
          </div>
          
          <TabsContent value="all" className="mt-0">
            <Card className="rounded-lg overflow-hidden">
              <CardContent className="p-0">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[300px]">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("rewardName")}
                          className="flex items-center gap-1 px-0 font-medium"
                        >
                          Reward Name
                          {sortField === "rewardName" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("type")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Type
                          {sortField === "type" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("pointsCost")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Points
                          {sortField === "pointsCost" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("redemptionCount")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Redemptions
                          {sortField === "redemptionCount" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("redeemableCustomers")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Redeemable
                          {sortField === "redeemableCustomers" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                          <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("impressions")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Impressions
                          {sortField === "impressions" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                          <HelpCircle className="h-3 w-3 text-muted-foreground ml-1" />
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("createdAt")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Created
                          {sortField === "createdAt" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("lastRedeemed")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Last Redeemed
                          {sortField === "lastRedeemed" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("isActive")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Status
                          {sortField === "isActive" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="w-[50px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={8} className="h-24 text-center">
                          <div className="flex justify-center">
                            <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : getFilteredRewards().length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={8} className="h-24 text-center">
                          <div className="flex flex-col items-center justify-center">
                            <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                              <Gift className="h-6 w-6 text-muted-foreground" />
                            </div>
                            <h3 className="mt-4 text-lg font-medium">No rewards found</h3>
                            <p className="text-sm text-muted-foreground mt-1">
                              {searchQuery ? "Try adjusting your search query" : "Create your first reward to get started"}
                            </p>
                            {!searchQuery && (
                              <Button 
                                className="mt-4 h-9 gap-2 rounded-md"
                                onClick={() => router.push('/create')}
                              >
                                <Plus className="h-4 w-4" />
                                Create Reward
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : (
                      getFilteredRewards().map((reward) => (
                        <TableRow 
                          key={reward.id}
                          className="cursor-pointer hover:bg-gray-50"
                          onClick={() => handleViewReward(reward.id)}
                        >
                          <TableCell className="font-medium">
                            <div className="flex items-center gap-2">
                              <div className="h-9 w-9 min-w-[36px] rounded-md bg-muted flex items-center justify-center">
                                {reward.category === "program" 
                                  ? <Award className="h-5 w-5 text-amber-600" />
                                  : getRewardTypeIcon(reward.type)}
                              </div>
                              <div className="min-w-0">
                                <div className="truncate flex items-center gap-1">
                                  {reward.rewardName}
                                  {Array.isArray(reward.conditions) && 
                                    reward.conditions.find(c => c.type === 'maximumTransactions')?.value === 0 && (
                                    <Badge variant="outline" className="ml-1 py-0 h-4 text-[10px] px-1.5 bg-teal-50 text-teal-700 border-teal-200">
                                      New Customers
                                    </Badge>
                                  )}
                                </div>
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <div className="text-xs text-muted-foreground line-clamp-1 cursor-help">
                                        {reward.description}
                                      </div>
                                    </TooltipTrigger>
                                    <TooltipContent side="top">
                                      <p className="text-xs">
                                        {reward.programtype === "points" && "Customers redeem their points for this reward"}
                                        {reward.programtype === "coffee" && "Part of a buy-X-get-one-free program"}
                                        {reward.programtype === "voucher" && "A monetary voucher customers can redeem"}
                                        {reward.programtype === "discount" && "A percentage discount on purchases"}
                                        {!reward.programtype || reward.programtype === "individual" && "Standard individual reward"}
                                        {reward.programName && <span className="block mt-1 font-medium">{reward.programName}</span>}
                                      </p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  {reward.programtype === "agent" ? (
                                    <div className="font-medium">
                                      <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500">
                                        Agent
                                      </span>
                                    </div>
                                  ) : (
                                    <div className={cn(
                                      "font-medium",
                                      reward.programtype === "voucher" && "text-purple-700",
                                      reward.programtype === "points" && "text-blue-700",
                                      reward.programtype === "coffee" && "text-amber-700",
                                      reward.programtype === "discount" && "text-emerald-700",
                                      !reward.programtype && "text-gray-700"
                                    )}>
                                      {reward.programtype 
                                        ? reward.programtype.charAt(0).toUpperCase() + reward.programtype.slice(1)
                                        : "Individual Reward"}
                                    </div>
                                  )}
                                </TooltipTrigger>
                                <TooltipContent side="top">
                                  <p className="text-xs">
                                    {reward.programtype === "points" && "Customers redeem their points for this reward"}
                                    {reward.programtype === "coffee" && "Part of a buy-X-get-one-free program"}
                                    {reward.programtype === "voucher" && "A monetary voucher customers can redeem"}
                                    {reward.programtype === "discount" && "A percentage discount on purchases"}
                                    {reward.programtype === "agent" && "Created by AI marketing agent"}
                                    {!reward.programtype || reward.programtype === "individual" && "Standard individual reward"}
                                    {reward.programName && <span className="block mt-1 font-medium">{reward.programName}</span>}
                                  </p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="font-medium text-blue-700">
                              {reward.pointsCost}
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="font-medium text-green-700">
                              {reward.redemptionCount || 0}
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <div className="font-medium text-blue-700">
                                    {reward.redeemableCustomers || 0}
                                  </div>
                                </TooltipTrigger>
                                <TooltipContent side="top">
                                  <p className="text-xs">Number of customers who can redeem this reward</p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="font-medium text-purple-700">
                              {reward.impressions || 0}
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            {reward.createdAt ? formatDistanceToNow(reward.createdAt, { addSuffix: true }) : "Unknown"}
                          </TableCell>
                          <TableCell className="text-center">
                            {reward.lastRedeemed 
                              ? formatDistanceToNow(reward.lastRedeemed, { addSuffix: true })
                              : "Never"}
                          </TableCell>
                          <TableCell className="text-center">
                            <div className={cn(
                              "font-medium",
                              reward.isActive ? "text-green-700" : "text-red-700"
                            )}>
                              {reward.isActive ? "Live" : "Inactive"}
                            </div>
                          </TableCell>
                          <TableCell>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button 
                                  variant="ghost" 
                                  className="h-8 w-8 p-0"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent 
                                align="end"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <DropdownMenuItem onClick={() => handleViewReward(reward.id)}>
                                  <Eye className="h-4 w-4 mr-2" />
                                  View
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => router.push(`/store/${reward.id}/edit`)}>
                                  <Edit className="h-4 w-4 mr-2" />
                                  Edit
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => toggleRewardStatus(reward.id, reward.isActive)}>
                                  {reward.isActive ? (
                                    <>
                                      <Clock className="h-4 w-4 mr-2" />
                                      Deactivate
                                    </>
                                  ) : (
                                    <>
                                      <Zap className="h-4 w-4 mr-2" />
                                      Activate
                                    </>
                                  )}
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem 
                                  className="text-red-600"
                                  onClick={() => deleteReward(reward.id)}
                                >
                                  <Trash className="h-4 w-4 mr-2" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* In the TabsContent for programs - look for "programs" tab and replace the entire content */}
          <TabsContent value="programs" className="mt-0">
            {loading ? (
              <CardSkeleton />
            ) : (
              <>
                {/* First check if there are any program rewards at all */}
                {rewards.filter(reward => !!reward.programtype && reward.programtype !== "points").length === 0 ? (
                  <Card>
                    <CardContent className="p-8 flex flex-col items-center justify-center text-center">
                      <div className="rounded-full bg-blue-50 p-3 mb-4">
                        <Award className="h-8 w-8 text-blue-500" />
                      </div>
                      <h3 className="text-lg font-semibold mb-2">No Program Rewards Created</h3>
                      <p className="text-muted-foreground mb-4 max-w-md">
                        Program rewards help you create structured loyalty programs like coffee cards, transaction-based rewards, and recurring vouchers.
                      </p>
                      <Button 
                        onClick={() => router.push('/store/rewards/create')}
                        className="bg-[#007AFF] hover:bg-[#0063CC] text-white"
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Create Program Reward
                      </Button>
                    </CardContent>
                  </Card>
                ) : (
                  <>
                    {/* Program types grid layout */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {Array.from(new Set(rewards.filter(r => !!r.programtype && r.programtype !== "points").map(r => r.programtype))).map(programType => {
                        if (!programType) return null;
                        
                        // Get all rewards of this program type
                        const programRewards = rewards.filter(r => r.programtype === programType);
                        if (programRewards.length === 0) return null;
                        
                        // Count metrics
                        const totalRedemptions = programRewards.reduce((sum, r) => sum + (r.redemptionCount || 0), 0);
                        const totalRedeemableCustomers = programRewards.reduce((sum, r) => sum + (r.redeemableCustomers || 0), 0);
                        
                        return (
                          <Card key={programType} className="overflow-hidden flex flex-col h-full">
                            <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100 border-b pb-4">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-3">
                                  <div className="h-12 w-12 rounded-full bg-white flex items-center justify-center shadow-sm">
                                    {programType === 'coffee' ? (
                                      <Coffee className="h-6 w-6 text-amber-600" />
                                    ) : programType === 'dollar_voucher' ? (
                                      <DollarSign className="h-6 w-6 text-green-600" />
                                    ) : programType === 'recurring_reward' ? (
                                      <Zap className="h-6 w-6 text-purple-600" />
                                    ) : (
                                      <Award className="h-6 w-6 text-blue-600" />
                                    )}
                                  </div>
                                  <div>
                                    <CardTitle className="text-lg">
                                      {programType === 'coffee' ? "Coffee Program" : 
                                       programType === 'dollar_voucher' ? "Recurring Voucher Program" : 
                                       programType === 'recurring_reward' ? "Recurring Transaction Program" : 
                                       "Loyalty Program"}
                                    </CardTitle>
                                    <CardDescription>
                                      {programType === 'coffee' ? "Buy X get one free coffee program." : 
                                       programType === 'dollar_voucher' ? "Recurring monetary vouchers for loyal customers." : 
                                       programType === 'recurring_reward' ? "Transaction frequency program." : 
                                       "Loyalty program rewards."}
                                    </CardDescription>
                                  </div>
                                </div>
                                <DropdownMenu>
                                  <DropdownMenuTrigger asChild>
                                    <Button variant="ghost" className="h-8 w-8 p-0">
                                      <MoreHorizontal className="h-4 w-4" />
                                    </Button>
                                  </DropdownMenuTrigger>
                                  <DropdownMenuContent align="end">
                                    <DropdownMenuItem
                                      className="text-destructive focus:text-destructive"
                                      onClick={() => {
                                        setProgramToDelete(programType);
                                        setIsConfirmDeleteProgramOpen(true);
                                      }}
                                    >
                                      <Trash className="mr-2 h-4 w-4" />
                                      Delete Program
                                    </DropdownMenuItem>
                                  </DropdownMenuContent>
                                </DropdownMenu>
                              </div>
                            </CardHeader>
                            <CardContent className="pt-4 flex-grow">
                              <div className="grid grid-cols-2 gap-4">
                                <div className="bg-blue-50 rounded-md p-3 text-center">
                                  <p className="text-xs text-blue-600 font-medium mb-1">Rewards</p>
                                  <p className="text-2xl font-semibold text-blue-700">{programRewards.length}</p>
                                </div>
                                <div className="bg-green-50 rounded-md p-3 text-center">
                                  <p className="text-xs text-green-600 font-medium mb-1">Redemptions</p>
                                  <p className="text-2xl font-semibold text-green-700">{totalRedemptions}</p>
                                </div>
                              </div>
                              
                              {programRewards.length > 0 && (
                                <div className="mt-4 flex justify-between items-center">
                                  <p className="text-sm text-gray-500">
                                    {programRewards.length} rewards in this program
                                  </p>
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => toggleProgramExpansion(programType)}
                                    className="flex items-center gap-1"
                                  >
                                    {expandedPrograms[programType] ? (
                                      <>
                                        <ChevronUp className="h-4 w-4" />
                                        Hide Rewards
                                      </>
                                    ) : (
                                      <>
                                        <ChevronDown className="h-4 w-4" />
                                        Show Rewards
                                      </>
                                    )}
                                  </Button>
                                </div>
                              )}
                            </CardContent>
                            
                            {/* Expandable rewards section */}
                            {expandedPrograms[programType] && (
                              <div className="border-t">
                                <div className="max-h-60 overflow-y-auto">
                                  {programRewards.map(reward => (
                                    <div 
                                      key={reward.id} 
                                      className="p-3 border-b last:border-b-0 hover:bg-gray-50 cursor-pointer flex items-center justify-between"
                                      onClick={() => handleViewReward(reward.id)}
                                    >
                                      <div className="flex items-center gap-3">
                                        <div className="h-8 w-8 min-w-[32px] rounded-md bg-muted flex items-center justify-center">
                                          {getRewardTypeIcon(reward.type)}
                                        </div>
                                        <div>
                                          <div className="font-medium text-sm">{reward.rewardName}</div>
                                          <div className="text-xs text-gray-500 max-w-xs truncate">{reward.description}</div>
                                        </div>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200 text-xs">
                                          {reward.pointsCost} points
                                        </Badge>
                                        <Badge 
                                          variant="outline"
                                          className={cn(
                                            "text-xs",
                                            reward.isActive ? "bg-green-50 text-green-700 border-green-200" : "bg-red-50 text-red-700 border-red-200"
                                          )}
                                        >
                                          {reward.isActive ? "Active" : "Inactive"}
                                        </Badge>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                                <div className="p-3 bg-gray-50 flex justify-center">
                                  <Button 
                                    variant="outline"
                                    size="sm"
                                    onClick={() => router.push('/store/rewards/create')}
                                    className="w-full"
                                  >
                                    <Plus className="h-3 w-3 mr-1" />
                                    Add New Reward to Program
                                  </Button>
                                </div>
                              </div>
                            )}
                          </Card>
                        );
                      })}
                    </div>
                  </>
                )}

                {/* Confirmation dialog for deleting a program */}
                <Dialog open={isConfirmDeleteProgramOpen} onOpenChange={setIsConfirmDeleteProgramOpen}>
                  <DialogContent className="sm:max-w-md">
                    <DialogHeader>
                      <DialogTitle>Delete Program</DialogTitle>
                      <DialogDescription>
                        Are you sure you want to delete all rewards in the {programToDelete === 'coffee' ? "Coffee Program" : 
                          programToDelete === 'dollar_voucher' ? "Recurring Voucher Program" : 
                          programToDelete === 'recurring_reward' ? "Recurring Transaction Program" : 
                          "program"}? This action cannot be undone.
                      </DialogDescription>
                    </DialogHeader>
                    <div className="flex justify-end gap-2">
                      <Button 
                        variant="outline" 
                        onClick={() => setIsConfirmDeleteProgramOpen(false)}
                      >
                        Cancel
                      </Button>
                      <Button 
                        variant="destructive"
                        onClick={async () => {
                          if (!programToDelete || !user?.uid) return;
                          
                          try {
                            // Find all rewards with this program type
                            const rewardsToDelete = rewards.filter(reward => 
                              reward.programtype === programToDelete && reward.programtype !== "points"
                            );
                            
                            // Delete each reward
                            const deletePromises = rewardsToDelete.map(reward => {
                              const rewardRef = doc(db, 'merchants', user.uid, 'rewards', reward.id);
                              return deleteDoc(rewardRef);
                            });
                            
                            await Promise.all(deletePromises);
                            
                            // Update local state
                            setRewards(prev => prev.filter(reward => reward.programtype !== programToDelete));
                            
                            toast({
                              title: "Success",
                              description: "Program rewards deleted successfully",
                            });
                          } catch (error) {
                            console.error("Error deleting program rewards:", error);
                            toast({
                              title: "Error",
                              description: "Failed to delete program rewards. Please try again.",
                              variant: "destructive"
                            });
                          } finally {
                            setIsConfirmDeleteProgramOpen(false);
                            setProgramToDelete(null);
                          }
                        }}
                      >
                        Delete Program
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              </>
            )}
          </TabsContent>
          
          {/* Add the new Agent tab content */}
          <TabsContent value="agent" className="mt-0">
            <Card className="rounded-lg overflow-hidden">
              <CardContent className="p-0">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[300px]">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("rewardName")}
                          className="flex items-center gap-1 px-0 font-medium"
                        >
                          Reward Name
                          {sortField === "rewardName" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Type
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Customer
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("pointsCost")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Points
                          {sortField === "pointsCost" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("redemptionCount")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Redemptions
                          {sortField === "redemptionCount" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("createdAt")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Created
                          {sortField === "createdAt" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="text-center">
                        <Button 
                          variant="ghost" 
                          onClick={() => handleSort("isActive")}
                          className="flex items-center gap-1 px-0 font-medium mx-auto"
                        >
                          Status
                          {sortField === "isActive" && (
                            sortDirection === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />
                          )}
                        </Button>
                      </TableHead>
                      <TableHead className="w-[50px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading || loadingAgentRewards ? (
                      <TableRow>
                        <TableCell colSpan={8} className="h-24 text-center">
                          <div className="flex justify-center">
                            <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : agentRewardsWithCustomers.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={8} className="h-24 text-center">
                          <div className="flex flex-col items-center justify-center">
                            <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                              <Sparkles className="h-6 w-6 text-muted-foreground" />
                            </div>
                            <h3 className="mt-4 text-lg font-medium">No agent rewards found</h3>
                            <p className="text-sm text-muted-foreground mt-1">
                              Agent rewards are created by our AI marketing agent
                            </p>
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : (
                      agentRewardsWithCustomers.map((reward) => (
                        <TableRow 
                          key={reward.id}
                          className="cursor-pointer hover:bg-gray-50"
                          onClick={() => handleViewReward(reward.id)}
                        >
                          <TableCell className="font-medium">
                            <div className="flex items-center gap-2">
                              <div className="h-9 w-9 min-w-[36px] rounded-md bg-muted flex items-center justify-center">
                                <Sparkles className="h-5 w-5 text-blue-600" />
                              </div>
                              <div className="min-w-0">
                                <div className="truncate flex items-center gap-1">
                                  {reward.rewardName}
                                </div>
                                <div className="text-xs text-muted-foreground line-clamp-1">
                                  {reward.description}
                                </div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <div className="font-medium">
                                    <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-orange-500">
                                      Agent
                                    </span>
                                  </div>
                                </TooltipTrigger>
                                <TooltipContent side="top">
                                  <p className="text-xs">
                                    Created by AI marketing agent
                                    {reward.programName && <span className="block mt-1 font-medium">{reward.programName}</span>}
                                  </p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="flex items-center justify-center gap-2">
                              <div className="h-6 w-6 rounded-full bg-gray-100 flex items-center justify-center">
                                <User className="h-3 w-3 text-gray-500" />
                              </div>
                              <span>{reward.customerName}</span>
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="font-medium text-blue-700">
                              {reward.pointsCost}
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="font-medium text-green-700">
                              {reward.redemptionCount || 0}
                            </div>
                          </TableCell>
                          <TableCell className="text-center">
                            {reward.createdAt ? formatDistanceToNow(reward.createdAt, { addSuffix: true }) : "Unknown"}
                          </TableCell>
                          <TableCell className="text-center">
                            <div className={cn(
                              "font-medium",
                              reward.isActive ? "text-green-700" : "text-red-700"
                            )}>
                              {reward.isActive ? "Live" : "Inactive"}
                            </div>
                          </TableCell>
                          <TableCell>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button 
                                  variant="ghost" 
                                  className="h-8 w-8 p-0"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent 
                                align="end"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <DropdownMenuItem onClick={() => handleViewReward(reward.id)}>
                                  <Eye className="h-4 w-4 mr-2" />
                                  View
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => router.push(`/store/${reward.id}/edit`)}>
                                  <Edit className="h-4 w-4 mr-2" />
                                  Edit
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => toggleRewardStatus(reward.id, reward.isActive)}>
                                  {reward.isActive ? (
                                    <>
                                      <Clock className="h-4 w-4 mr-2" />
                                      Deactivate
                                    </>
                                  ) : (
                                    <>
                                      <Zap className="h-4 w-4 mr-2" />
                                      Activate
                                    </>
                                  )}
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem 
                                  className="text-red-600"
                                  onClick={() => deleteReward(reward.id)}
                                >
                                  <Trash className="h-4 w-4 mr-2" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
      
      {/* Reward preview card */}
      {previewReward && (
        <RewardPreview 
          reward={previewReward} 
          onClose={() => setPreviewReward(null)} 
        />
      )}
      
      {/* Create Reward Dialog */}
      <CreateRewardDialog
        open={createRewardDialogOpen}
        onOpenChange={setCreateRewardDialogOpen}
        defaultValues={createRewardData}
      />
      
      {/* Delete Confirmation Dialog */}
      <Dialog open={!!rewardToDelete} onOpenChange={() => setRewardToDelete(null)}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-xl">Delete Reward</DialogTitle>
            <DialogDescription className="text-red-500">
              Are you sure you want to delete this reward? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2 mt-5">
            <Button variant="outline" onClick={() => setRewardToDelete(null)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmDelete}>
              Delete
            </Button>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* Introductory Reward Dialog */}
      <IntroductoryRewardDialog 
        open={isIntroRewardDialogOpen} 
        onOpenChange={setIsIntroRewardDialogOpen} 
      />
      
      {/* Reward Detail Sheet */}
      {selectedRewardId && (
        <RewardDetailSheet
          open={isRewardDetailOpen}
          onOpenChange={setIsRewardDetailOpen}
          rewardId={selectedRewardId}
        />
      )}
    </PageTransition>
  )
} import { redirect } from 'next/navigation'

export default function BannersRedirect() {
  redirect('/store/banner')
} "use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"
import { 
  Search, 
  Filter, 
  Plus, 
  MoreHorizontal, 
  Zap,
  ShoppingCart,
  Calendar,
  Clock,
  Edit,
  Trash,
  Eye,
  ArrowUpDown,
  ChevronDown,
  ChevronUp,
  Tag,
  DollarSign,
  Users,
  ListFilter,
  Check
} from "lucide-react"
import { useRouter } from "next/navigation"
import { cn } from "@/lib/utils"
import { format } from "date-fns"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, getDocs, query, doc, updateDoc, deleteDoc } from "firebase/firestore"
import { CreatePointsRuleSheet } from "@/components/create-points-rule-sheet"
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { Separator } from "@/components/ui/separator"
import { PageHeader } from "@/components/page-header"

// Types
type RuleCategory = "all" | "active" | "inactive"
type SortField = "name" | "pointsmultiplier" | "usageCount" | "createdAt"
type SortDirection = "asc" | "desc"

interface PointsRule {
  id: string
  name: string
  description?: string
  pointsmultiplier: number
  usageCount: number
  active: boolean
  createdAt: Date
  conditions?: Array<{
    type: string
    startTime?: any
    endTime?: any
    days?: string[]
    amount?: number
    number?: number
  }>
}

export default function PointsRulesPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [rules, setRules] = useState<PointsRule[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [ruleCategory, setRuleCategory] = useState<RuleCategory>("all")
  const [sortField, setSortField] = useState<SortField>("name")
  const [sortDirection, setSortDirection] = useState<SortDirection>("asc")
  const [loading, setLoading] = useState(true)
  const [createDialogOpen, setCreateDialogOpen] = useState(false)
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [ruleToDelete, setRuleToDelete] = useState<string | null>(null)
  const [selectedRules, setSelectedRules] = useState<string[]>([])
  const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false)
  const [selectionMode, setSelectionMode] = useState(false)

  useEffect(() => {
    const fetchRules = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        const rulesRef = collection(db, 'merchants', user.uid, 'pointsRules')
        const q = query(rulesRef)
        const querySnapshot = await getDocs(q)
        
        console.log(`Found ${querySnapshot.size} points rules`)
        
        const fetchedRules: PointsRule[] = []
        querySnapshot.forEach((doc) => {
          const data = doc.data()
          
          // Handle different date formats safely
          const getDateSafely = (dateField: any): Date => {
            if (!dateField) return new Date();
            
            // If it's a Firestore timestamp with toDate method
            if (dateField && typeof dateField.toDate === 'function') {
              return dateField.toDate();
            }
            
            // If it's a string or number timestamp
            if (typeof dateField === 'string' || typeof dateField === 'number') {
              const date = new Date(dateField);
              return isNaN(date.getTime()) ? new Date() : date;
            }
            
            // If it's a seconds-based Firestore timestamp
            if (dateField.seconds) {
              return new Date(dateField.seconds * 1000);
            }
            
            return new Date();
          };
          
          fetchedRules.push({
            id: doc.id,
            name: data.name || 'Unnamed Rule',
            description: data.description || '',
            pointsmultiplier: data.pointsmultiplier || 0,
            usageCount: data.usageCount || 0,
            active: data.active === undefined ? true : data.active,
            createdAt: getDateSafely(data.createdAt),
            conditions: data.conditions || []
          })
        })
        
        setRules(fetchedRules)
        
        // If no rules found, add some mock data for testing
        if (fetchedRules.length === 0) {
          console.log("No points rules found, adding mock data")
          setRules([
            {
              id: "mock1",
              name: "Purchase Points",
              description: "Earn points for every purchase",
              pointsmultiplier: 10,
              usageCount: 156,
              active: true,
              createdAt: new Date(),
              conditions: [{ type: "purchase" }]
            },
            {
              id: "mock2",
              name: "Referral Bonus",
              description: "Earn points when you refer a friend",
              pointsmultiplier: 50,
              usageCount: 23,
              active: true,
              createdAt: new Date(),
              conditions: [{ type: "referral" }]
            },
            {
              id: "mock3",
              name: "Birthday Bonus",
              description: "Earn extra points on your birthday",
              pointsmultiplier: 100,
              usageCount: 42,
              active: true,
              createdAt: new Date(),
              conditions: [{ type: "engagement" }]
            }
          ])
        }
      } catch (error) {
        console.error("Error fetching points rules:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchRules()
  }, [user])

  // Clear selections when exiting selection mode
  useEffect(() => {
    if (!selectionMode) {
      setSelectedRules([])
    }
  }, [selectionMode])

  // Filter and sort rules
  const filteredRules = rules.filter(rule => {
    // Filter by search query
    const matchesSearch = 
      rule.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      rule.description?.toLowerCase().includes(searchQuery.toLowerCase())
    
    // Filter by category
    const matchesCategory = 
      ruleCategory === "all" || 
      (ruleCategory === "active" && rule.active) ||
      (ruleCategory === "inactive" && !rule.active)
    
    return matchesSearch && matchesCategory
  }).sort((a, b) => {
    // Sort by selected field
    let comparison = 0
    
    switch (sortField) {
      case "name":
        comparison = a.name.localeCompare(b.name)
        break
      case "pointsmultiplier":
        comparison = a.pointsmultiplier - b.pointsmultiplier
        break
      case "usageCount":
        comparison = a.usageCount - b.usageCount
        break
      case "createdAt":
        comparison = a.createdAt.getTime() - b.createdAt.getTime()
        break
      default:
        comparison = 0
    }
    
    // Apply sort direction
    return sortDirection === "asc" ? comparison : -comparison
  })

  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortDirection(prev => prev === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("asc")
    }
  }

  const toggleRuleStatus = async (id: string, currentStatus: boolean) => {
    if (!user?.uid) return
    
    try {
      const newStatus = !currentStatus
      const ruleRef = doc(db, 'merchants', user.uid, 'pointsRules', id)
      await updateDoc(ruleRef, { 
        active: newStatus,
        updatedAt: new Date()
      })
      
      // Update local state
      setRules(prev => prev.map(rule => 
        rule.id === id ? { ...rule, active: newStatus, updatedAt: new Date() } : rule
      ))
    } catch (error) {
      console.error("Error updating rule status:", error)
    }
  }

  const confirmDeleteRule = (id: string) => {
    setRuleToDelete(id)
    setDeleteDialogOpen(true)
  }

  const handleDeleteRule = async () => {
    if (!user?.uid || !ruleToDelete) return
    
    try {
      const ruleRef = doc(db, 'merchants', user.uid, 'pointsRules', ruleToDelete)
      await deleteDoc(ruleRef)
      
      // Update local state
      setRules(prev => prev.filter(rule => rule.id !== ruleToDelete))
    } catch (error) {
      console.error("Error deleting points rule:", error)
    } finally {
      setRuleToDelete(null)
      setDeleteDialogOpen(false)
    }
  }

  const formatDate = (date: Date) => {
    return format(date, "MMM d, yyyy")
  }

  const getRuleTypeIcon = (type: string) => {
    switch (type) {
      case "purchase":
        return <ShoppingCart className="h-4 w-4" />
      case "referral":
        return <Users className="h-4 w-4" />
      case "engagement":
        return <Calendar className="h-4 w-4" />
      default:
        return <Zap className="h-4 w-4" />
    }
  }

  const getRuleTypeLabel = (type: string) => {
    switch (type) {
      case "purchase":
        return "Purchase"
      case "referral":
        return "Referral"
      case "engagement":
        return "Engagement"
      default:
        return "Other"
    }
  }

  const SortButton = ({ field, children }: { field: SortField, children: React.ReactNode }) => (
    <button
      onClick={() => handleSort(field)}
      className="flex items-center gap-1 hover:text-foreground"
    >
      {children}
      {sortField === field && (
        sortDirection === "desc" ? 
          <ChevronDown className="h-4 w-4" /> : 
          <ChevronUp className="h-4 w-4" />
      )}
    </button>
  )

  const handleSelectRule = (id: string, isChecked: boolean) => {
    if (isChecked) {
      setSelectedRules(prev => [...prev, id])
    } else {
      setSelectedRules(prev => prev.filter(ruleId => ruleId !== id))
    }
  }

  const handleSelectAll = (isChecked: boolean) => {
    if (isChecked) {
      setSelectedRules(filteredRules.map(rule => rule.id))
    } else {
      setSelectedRules([])
    }
  }

  const confirmBulkDelete = () => {
    if (selectedRules.length > 0) {
      setBulkDeleteDialogOpen(true)
    }
  }

  const handleBulkDelete = async () => {
    if (!user?.uid || selectedRules.length === 0) return
    
    try {
      // Delete each selected rule
      for (const ruleId of selectedRules) {
        const ruleRef = doc(db, 'merchants', user.uid, 'pointsRules', ruleId)
        await deleteDoc(ruleRef)
      }
      
      // Update local state
      setRules(prev => prev.filter(rule => !selectedRules.includes(rule.id)))
      setSelectedRules([]) // Clear selection
    } catch (error) {
      console.error("Error deleting points rules:", error)
    } finally {
      setBulkDeleteDialogOpen(false)
    }
  }

  // Toggle selection mode
  const toggleSelectionMode = () => {
    setSelectionMode(prev => !prev)
  }

  // Calculate the total number of columns based on selection mode
  const totalColumns = selectionMode ? 8 : 7;

  const formatTimeRange = (startTime: any, endTime: any) => {
    try {
      const formatTime = (time: any) => {
        if (!time) return "?";
        
        let date: Date;
        
        if (time && typeof time.toDate === 'function') {
          date = time.toDate();
        } else if (time.seconds) {
          date = new Date(time.seconds * 1000);
        } else if (time instanceof Date) {
          date = time;
        } else {
          return "?";
        }
        
        const hours = date.getHours();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const hour = hours % 12 || 12;
        return `${hour}${ampm}`;
      };
      
      return `${formatTime(startTime)}-${formatTime(endTime)}`;
    } catch (error) {
      return "Invalid time";
    }
  };

  const formatDays = (days: string[] | undefined) => {
    if (!days || days.length === 0) return "None";
    
    if (days.length === 7) return "All days";
    
    if (days.length <= 2) {
      return days.map(day => day.charAt(0).toUpperCase() + day.slice(1, 3)).join(", ");
    }
    
    return `${days.length} days`;
  };

  // Helper function to determine the primary rule type from conditions
  const getRuleType = (rule: PointsRule): string => {
    if (!rule.conditions || rule.conditions.length === 0) return "other";
    
    // Check for specific condition types
    if (rule.conditions.some(c => c.type === "minimumSpend")) return "purchase";
    if (rule.conditions.some(c => c.type === "firstPurchase")) return "purchase";
    if (rule.conditions.some(c => c.type === "visitNumber")) return "engagement";
    if (rule.conditions.some(c => c.type === "daysOfWeek")) return "engagement";
    if (rule.conditions.some(c => c.type === "timeOfDay")) return "engagement";
    
    // Default to the first condition type
    return rule.conditions[0].type;
  };

  return (
    <div className="p-6 py-4">
      <div>
        <PageHeader
          title="Points Rules"
          subtitle="Manage how customers earn and redeem points"
        >
          <Button 
            className="h-9 gap-2 rounded-lg"
            onClick={() => setCreateDialogOpen(true)}
          >
            <Plus className="h-4 w-4" />
            Create Rule
          </Button>
        </PageHeader>
        
        <Tabs defaultValue="all" onValueChange={(value) => setRuleCategory(value as RuleCategory)}>
          <div className="flex items-center justify-between mb-4">
            <TabsList className="h-9 rounded-lg">
              <TabsTrigger value="all" className="flex items-center gap-1.5">
                <ListFilter className="h-4 w-4" />
                All Rules
              </TabsTrigger>
              <TabsTrigger value="active" className="flex items-center gap-1.5">
                <Zap className="h-4 w-4" />
                Active
              </TabsTrigger>
              <TabsTrigger value="inactive" className="flex items-center gap-1.5">
                <Clock className="h-4 w-4" />
                Inactive
              </TabsTrigger>
            </TabsList>
            
            <div className="flex items-center gap-2">
              {selectionMode ? (
                <>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={toggleSelectionMode}
                    className="h-9 rounded-lg"
                  >
                    Cancel
                  </Button>
                  
                  {selectedRules.length > 0 && (
                    <Button 
                      variant="destructive" 
                      size="sm" 
                      onClick={confirmBulkDelete}
                      className="h-9 rounded-lg"
                    >
                      <Trash className="h-4 w-4 mr-2" />
                      Delete Selected ({selectedRules.length})
                    </Button>
                  )}
                </>
              ) : (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={toggleSelectionMode}
                  className="h-9 rounded-lg"
                >
                  <Check className="h-4 w-4 mr-2" />
                  Select
                </Button>
              )}
              
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input 
                  type="search" 
                  placeholder="Search rules..." 
                  className="w-[250px] pl-9 h-9 rounded-lg"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
          </div>
          
          <TabsContent value="all" className="mt-0">
            <Card className="rounded-lg overflow-hidden">
              <CardContent className="p-0">
                <Table>
                  <TableHeader>
                    <TableRow>
                      {selectionMode && (
                        <TableHead className="w-[40px]">
                          <Checkbox 
                            checked={
                              selectedRules.length > 0 && 
                              selectedRules.length === filteredRules.length
                            }
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedRules(filteredRules.map(rule => rule.id))
                              } else {
                                setSelectedRules([])
                              }
                            }}
                          />
                        </TableHead>
                      )}
                      <TableHead>
                        <SortButton field="name">Rule Name</SortButton>
                      </TableHead>
                      <TableHead>
                        <SortButton field="pointsmultiplier">Multiplier</SortButton>
                      </TableHead>
                      <TableHead>Conditions</TableHead>
                      <TableHead>
                        <SortButton field="usageCount">Usage Count</SortButton>
                      </TableHead>
                      <TableHead>
                        <span>Status</span>
                      </TableHead>
                      <TableHead>
                        <SortButton field="createdAt">Created</SortButton>
                      </TableHead>
                      <TableHead className="w-[50px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={totalColumns} className="h-24 text-center">
                          <div className="flex justify-center">
                            <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : filteredRules.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={totalColumns} className="h-24 text-center">
                          <div className="flex flex-col items-center justify-center">
                            <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                              <Zap className="h-6 w-6 text-muted-foreground" />
                            </div>
                            <h3 className="mt-4 text-lg font-medium">No points rules found</h3>
                            <p className="text-sm text-muted-foreground mt-1">
                              {searchQuery ? "Try adjusting your search query" : "Create your first points rule to get started"}
                            </p>
                            {!searchQuery && (
                              <Button 
                                className="mt-4 h-9 gap-2 rounded-lg"
                                onClick={() => setCreateDialogOpen(true)}
                              >
                                <Plus className="h-4 w-4" />
                                Create Rule
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredRules.map((rule) => (
                        <TableRow 
                          key={rule.id}
                          className="cursor-pointer hover:bg-muted/50"
                          onClick={() => router.push(`/store/rules/${rule.id}`)}
                        >
                          {selectionMode && (
                            <TableCell onClick={(e) => e.stopPropagation()}>
                              <Checkbox 
                                checked={selectedRules.includes(rule.id)}
                                onCheckedChange={(checked) => {
                                  if (checked) {
                                    setSelectedRules([...selectedRules, rule.id])
                                  } else {
                                    setSelectedRules(selectedRules.filter(id => id !== rule.id))
                                  }
                                }}
                              />
                            </TableCell>
                          )}
                          <TableCell>
                            <div className="font-medium">{rule.name}</div>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-1">
                              <Zap className="h-4 w-4 text-blue-600" />
                              <span>{rule.pointsmultiplier}x</span>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex flex-wrap gap-1">
                              {rule.conditions?.map((condition, index) => {
                                if (condition.type === "timeOfDay") {
                                  return (
                                    <Badge key={index} variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                                      Time: {formatTimeRange(condition.startTime, condition.endTime)}
                                    </Badge>
                                  );
                                } else if (condition.type === "daysOfWeek") {
                                  return (
                                    <Badge key={index} variant="outline" className="bg-green-50 text-green-700 border-green-200">
                                      Days: {formatDays(condition.days)}
                                    </Badge>
                                  );
                                } else if (condition.type === "minimumSpend") {
                                  return (
                                    <Badge key={index} variant="outline" className="bg-amber-50 text-amber-700 border-amber-200">
                                      Min: ${condition.amount}
                                    </Badge>
                                  );
                                } else if (condition.type === "firstPurchase") {
                                  return (
                                    <Badge key={index} variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
                                      First Purchase
                                    </Badge>
                                  );
                                } else if (condition.type === "visitNumber") {
                                  return (
                                    <Badge key={index} variant="outline" className="bg-indigo-50 text-indigo-700 border-indigo-200">
                                      Visit #{condition.number}
                                    </Badge>
                                  );
                                }
                                return null;
                              })}
                              {(!rule.conditions || rule.conditions.length === 0) && (
                                <span className="text-sm text-muted-foreground">None</span>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>
                            {rule.usageCount}
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline" className={cn(
                              "rounded-lg",
                              rule.active ? "bg-green-50 text-green-700 border-green-200" : "bg-gray-50 text-gray-700 border-gray-200"
                            )}>
                              {rule.active ? "Active" : "Inactive"}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-muted-foreground text-sm">
                            {formatDate(rule.createdAt)}
                          </TableCell>
                          <TableCell className="text-center" onClick={(e) => e.stopPropagation()}>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={() => router.push(`/store/rules/${rule.id}`)}>
                                  <Eye className="mr-2 h-4 w-4" />
                                  View
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => router.push(`/store/rules/${rule.id}/edit`)}>
                                  <Edit className="mr-2 h-4 w-4" />
                                  Edit
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem 
                                  className="text-red-600"
                                  onClick={() => {
                                    setRuleToDelete(rule.id)
                                    setDeleteDialogOpen(true)
                                  }}
                                >
                                  <Trash className="mr-2 h-4 w-4" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Individual tabs for each rule category */}
          {["purchase", "referral", "engagement"].map((category) => (
            <TabsContent key={category} value={category} className="mt-0">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {loading ? (
                  <div className="col-span-full h-40 flex items-center justify-center">
                    <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                  </div>
                ) : filteredRules.length === 0 ? (
                  <div className="col-span-full h-40 flex flex-col items-center justify-center">
                    <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                      {category === "purchase" ? (
                        <ShoppingCart className="h-6 w-6 text-muted-foreground" />
                      ) : category === "referral" ? (
                        <Users className="h-6 w-6 text-muted-foreground" />
                      ) : (
                        <Calendar className="h-6 w-6 text-muted-foreground" />
                      )}
                    </div>
                    <h3 className="mt-4 text-lg font-medium">
                      No {category} rules found
                    </h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      {searchQuery ? "Try adjusting your search query" : `Create your first ${category} rule`}
                    </p>
                    {!searchQuery && (
                      <Button 
                        className="mt-4 h-9 gap-2 rounded-lg"
                        onClick={() => setCreateDialogOpen(true)}
                      >
                        <Plus className="h-4 w-4" />
                        Create {category.charAt(0).toUpperCase() + category.slice(1)} Rule
                      </Button>
                    )}
                  </div>
                ) : (
                  filteredRules.map((rule) => (
                    <Card key={rule.id} className="rounded-lg overflow-hidden">
                      <CardHeader className="p-4 pb-0">
                        <div className="flex justify-between items-start">
                          <Badge variant="outline" className={cn(
                            "rounded-lg mb-2",
                            getRuleType(rule) === "purchase" && "bg-green-50 text-green-700 border-green-200",
                            getRuleType(rule) === "referral" && "bg-blue-50 text-blue-700 border-blue-200",
                            getRuleType(rule) === "engagement" && "bg-purple-50 text-purple-700 border-purple-200"
                          )}>
                            <div className="flex items-center gap-1">
                              {getRuleTypeIcon(getRuleType(rule))}
                              <span>{getRuleTypeLabel(getRuleType(rule))}</span>
                            </div>
                          </Badge>
                          
                          <Badge variant="outline" className={cn(
                            "rounded-lg",
                            rule.active ? "bg-green-50 text-green-700 border-green-200" : "bg-gray-50 text-gray-700 border-gray-200"
                          )}>
                            {rule.active ? "Active" : "Inactive"}
                          </Badge>
                        </div>
                        <CardTitle className="text-lg">{rule.name}</CardTitle>
                        <CardDescription className="line-clamp-2 mt-1">
                          {rule.description}
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="p-4 pt-3">
                        <div className="flex justify-between items-center">
                          <div>
                            <p className="text-sm text-muted-foreground">Points Awarded</p>
                            <div className="flex items-center mt-1">
                              <div className="flex items-center gap-1">
                                <Zap className="h-4 w-4 text-blue-600" />
                                <span className="font-medium">{rule.pointsmultiplier}x</span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="text-right">
                            <p className="text-sm text-muted-foreground">Usage Count</p>
                            <p className="font-medium mt-1">{rule.usageCount}</p>
                          </div>
                        </div>
                        
                        {/* Check if there's a condition with minPurchase property */}
                        {rule.conditions && rule.conditions.some(c => c.type === 'minimumSpend') && (
                          <div className="mt-3">
                            <p className="text-sm text-muted-foreground mb-1">
                              Min. Purchase: ${rule.conditions.find(c => c.type === 'minimumSpend')?.amount || 0}
                            </p>
                          </div>
                        )}
                        
                        {/* Check if there's a condition with a frequency-related type */}
                        {rule.conditions && rule.conditions.some(c => c.type === 'visitNumber' || c.type === 'daysOfWeek') && (
                          <div className="mt-3">
                            <p className="text-sm text-muted-foreground mb-1">
                              Frequency: {rule.conditions.find(c => c.type === 'visitNumber')?.number || 
                                         rule.conditions.find(c => c.type === 'daysOfWeek')?.days?.length + ' days/week' || 
                                         'Custom'}
                            </p>
                          </div>
                        )}
                      </CardContent>
                      <CardFooter className="p-4 pt-0 flex justify-between">
                        <Button 
                          variant="outline" 
                          className="h-9 rounded-lg"
                          onClick={() => window.location.href = `/store/rules/${rule.id}`}
                        >
                          View Details
                        </Button>
                        
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-9 w-9 p-0 rounded-lg">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end" className="rounded-lg">
                            <DropdownMenuItem onClick={() => window.location.href = `/store/rules/${rule.id}/edit`}>
                              <Edit className="h-4 w-4 mr-2" />
                              Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => toggleRuleStatus(rule.id, rule.active)}>
                              {rule.active ? (
                                <>
                                  <Clock className="h-4 w-4 mr-2" />
                                  Deactivate
                                </>
                              ) : (
                                <>
                                  <Zap className="h-4 w-4 mr-2" />
                                  Activate
                                </>
                              )}
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem 
                              className="text-red-600"
                              onClick={() => confirmDeleteRule(rule.id)}
                            >
                              <Trash className="h-4 w-4 mr-2" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </CardFooter>
                    </Card>
                  ))
                )}
              </div>
            </TabsContent>
          ))}
        </Tabs>
      </div>
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent className="rounded-lg">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Points Rule</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this points rule? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel className="rounded-lg">Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleDeleteRule}
              className="bg-red-600 hover:bg-red-700 rounded-lg"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <AlertDialog open={bulkDeleteDialogOpen} onOpenChange={setBulkDeleteDialogOpen}>
        <AlertDialogContent className="rounded-lg">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Multiple Points Rules</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete {selectedRules.length} selected points rules? 
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel className="rounded-lg">Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleBulkDelete}
              className="bg-red-600 hover:bg-red-700 rounded-lg"
            >
              Delete {selectedRules.length} Rules
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <CreatePointsRuleSheet 
        open={createDialogOpen} 
        onOpenChange={setCreateDialogOpen} 
      />
    </div>
  )
} "use client"

import { useState, useEffect, useMemo } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { 
  Package, 
  Search, 
  Filter, 
  MoreHorizontal, 
  RefreshCw, 
  Download,
  Tag,
  Plus,
  Loader2,
  AlertCircle,
  ChevronRight,
  Zap,
  Trash2
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, getDoc, collection, updateDoc, arrayUnion, setDoc } from "firebase/firestore"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { 
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetClose
} from "@/components/ui/sheet"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import React from "react"

// Define types for Square Catalog objects
interface SquareCatalogObject {
  type: string
  id: string
  updated_at: string
  version: number
  is_deleted: boolean
  present_at_all_locations: boolean
  category_data?: {
    name: string
  }
  item_data?: {
    name: string
    description?: string
    category_id?: string
    variations?: SquareCatalogObject[]
  }
  item_variation_data?: {
    item_id: string
    name: string
    price_money?: {
      amount: number
      currency: string
    }
    sku?: string
    ordinal?: number
    pricing_type?: string
    available?: boolean
  }
  tax_data?: {
    name: string
    calculation_phase?: string
    inclusion_type?: string
    percentage?: string
    enabled?: boolean
  }
}

interface SquareCatalogResponse {
  objects: SquareCatalogObject[]
  cursor?: string
}

// Add a new interface for selected item
interface SelectedItem {
  item: SquareCatalogObject;
  categoryName: string;
}

// Add interface for inventory count
interface InventoryCount {
  catalogObjectId: string;
  quantity: string;
  state: string;
  locationId: string;
  updatedAt: string;
}

// Add interface for tap agent item
interface TapAgentItem extends SquareCatalogObject {
  costOfGoods?: number;
  selected?: boolean;
}

// Add interface for POS inventory item to be saved to Firestore
interface POSInventoryItem {
  id: string;
  name: string;
  retailPrice?: number;
  costOfGoods: number;
  type: string;
}

// Add a gradient text component for Tap Agent branding
const GradientText = ({ children }: { children: React.ReactNode }) => {
  return (
    <span className="bg-gradient-to-r from-blue-500 to-orange-500 bg-clip-text text-transparent font-semibold">
      {children}
    </span>
  );
};

export default function InventoryPage() {
  const router = useRouter()
  const { user } = useAuth()
  const { toast } = useToast()
  const [inventoryItems, setInventoryItems] = useState<SquareCatalogObject[]>([])
  const [categories, setCategories] = useState<Record<string, string>>({})
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [isSquareConnected, setIsSquareConnected] = useState(false)
  const [refreshing, setRefreshing] = useState(false)
  // Add state for the selected item and sheet visibility
  const [selectedItem, setSelectedItem] = useState<SelectedItem | null>(null)
  const [isSheetOpen, setIsSheetOpen] = useState(false)
  // Add state for inventory counts
  const [inventoryCounts, setInventoryCounts] = useState<Record<string, InventoryCount>>({})
  const [loadingInventory, setLoadingInventory] = useState(false)
  
  // Add state for tap agent items
  const [tapAgentItems, setTapAgentItems] = useState<TapAgentItem[]>([])
  const [isTapAgentSheetOpen, setIsTapAgentSheetOpen] = useState(false)
  // Add state for tap agent activation
  const [isTapAgentActivated, setIsTapAgentActivated] = useState(false)
  const [checkingTapAgent, setCheckingTapAgent] = useState(false)
  // Add state for existing tap agent inventory
  const [existingTapAgentItems, setExistingTapAgentItems] = useState<POSInventoryItem[]>([])
  const [loadingExistingItems, setLoadingExistingItems] = useState(false)
  // Add state for all items sheet
  const [isAllItemsSheetOpen, setIsAllItemsSheetOpen] = useState(false)

  // Fetch inventory data from Square
  useEffect(() => {
    const fetchInventory = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        setError(null)
        
        // First, check if Square integration exists
        const squareIntegrationRef = doc(db, 'merchants', user.uid, 'integrations', 'square')
        const squareIntegrationDoc = await getDoc(squareIntegrationRef)
        
        if (!squareIntegrationDoc.exists() || !squareIntegrationDoc.data().connected) {
          setIsSquareConnected(false)
          setLoading(false)
          return
        }
        
        setIsSquareConnected(true)
        
        // Call our API endpoint that will fetch data from Square
        const response = await fetch(`/api/square/catalog?merchantId=${user.uid}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })
        
        if (!response.ok) {
          throw new Error(`Failed to fetch inventory: ${response.statusText}`)
        }
        
        const data: SquareCatalogResponse = await response.json()
        
        // Process categories
        const categoryMap: Record<string, string> = {}
        data.objects.forEach(obj => {
          if (obj.type === 'CATEGORY' && obj.category_data) {
            categoryMap[obj.id] = obj.category_data.name
          }
        })
        
        setCategories(categoryMap)
        
        // Filter to only show items and item variations
        const items = data.objects.filter(obj => 
          obj.type === 'ITEM' || 
          obj.type === 'ITEM_VARIATION' || 
          obj.type === 'CATEGORY'
        )
        
        setInventoryItems(items)
        
        // Collect item IDs for inventory count lookup
        const itemIds = items
          .filter(item => item.type === 'ITEM_VARIATION')
          .map(item => item.id)
        
        // Fetch inventory counts
        await fetchInventoryCounts(itemIds)
      } catch (error) {
        console.error("Error fetching inventory:", error)
        setError(error instanceof Error ? error.message : "Failed to fetch inventory")
        toast({
          title: "Error",
          description: "Failed to load inventory data. Please try again.",
          variant: "destructive"
        })
      } finally {
        setLoading(false)
      }
    }
    
    fetchInventory()
  }, [user, toast])
  
  // Refresh inventory data
  const handleRefresh = async () => {
    if (!user?.uid) return
    
    try {
      setRefreshing(true)
      
      // Call our API endpoint that will fetch data from Square
      const response = await fetch(`/api/square/catalog?merchantId=${user.uid}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store'
      })
      
      if (!response.ok) {
        throw new Error(`Failed to fetch inventory: ${response.statusText}`)
      }
      
      const data: SquareCatalogResponse = await response.json()
      
      // Process categories
      const categoryMap: Record<string, string> = {}
      data.objects.forEach(obj => {
        if (obj.type === 'CATEGORY' && obj.category_data) {
          categoryMap[obj.id] = obj.category_data.name
        }
      })
      
      setCategories(categoryMap)
      
      // Filter to only show items and item variations
      const items = data.objects.filter(obj => 
        obj.type === 'ITEM' || 
        obj.type === 'ITEM_VARIATION' || 
        obj.type === 'CATEGORY'
      )
      
      setInventoryItems(items)
      
      // Collect item IDs for inventory count lookup
      const itemIds = items
        .filter(item => item.type === 'ITEM_VARIATION')
        .map(item => item.id)
      
      // Fetch inventory counts
      await fetchInventoryCounts(itemIds)
      
      toast({
        title: "Inventory Refreshed",
        description: "Your inventory data has been updated.",
      })
    } catch (error) {
      console.error("Error refreshing inventory:", error)
      toast({
        title: "Error",
        description: "Failed to refresh inventory data. Please try again.",
        variant: "destructive"
      })
    } finally {
      setRefreshing(false)
    }
  }

  // Filter inventory items based on search query
  const filteredItems = useMemo(() => {
    if (!searchQuery.trim()) {
      return inventoryItems.filter(item => 
        item.type === 'ITEM' || item.type === 'ITEM_VARIATION'
      );
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    return inventoryItems.filter(item => {
      if (item.type === 'ITEM' && item.item_data) {
        return (
          (item.item_data.name?.toLowerCase().includes(query)) ||
          (item.item_data.description?.toLowerCase().includes(query))
        );
      }
      
      if (item.type === 'ITEM_VARIATION' && item.item_variation_data) {
        return (
          (item.item_variation_data.name?.toLowerCase().includes(query)) ||
          (item.item_variation_data.sku?.toLowerCase().includes(query))
        );
      }
      
      return false;
    });
  }, [inventoryItems, searchQuery]);

  // Format price from cents to dollars
  const formatPrice = (amount: number | undefined, currency: string = 'USD') => {
    if (amount === undefined) return 'N/A'
    
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount / 100)
  }

  // Get category name from category ID
  const getCategoryName = (categoryId: string | undefined) => {
    if (!categoryId) return 'Uncategorized'
    return categories[categoryId] || 'Unknown Category'
  }

  // Add function to handle item click
  const handleItemClick = (item: SquareCatalogObject) => {
    let categoryName = 'Uncategorized';
    
    // For items, get the category name
    if (item.type === 'ITEM' && item.item_data?.category_id) {
      categoryName = getCategoryName(item.item_data.category_id);
    }
    
    // For variations, try to find the parent item to get the category
    if (item.type === 'ITEM_VARIATION' && item.item_variation_data?.item_id) {
      const parentItem = inventoryItems.find(i => 
        i.type === 'ITEM' && i.id === item.item_variation_data?.item_id
      );
      
      if (parentItem?.item_data?.category_id) {
        categoryName = getCategoryName(parentItem.item_data.category_id);
      }
    }
    
    setSelectedItem({ item, categoryName });
    setIsSheetOpen(true);
  };

  // Add function to fetch inventory counts
  const fetchInventoryCounts = async (itemIds: string[]) => {
    if (!user?.uid || itemIds.length === 0) return
    
    try {
      setLoadingInventory(true)
      
      // Call our API endpoint to get inventory counts
      const response = await fetch(`/api/square/inventory?merchantId=${user.uid}&catalogItemIds=${itemIds.join(',')}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      
      if (!response.ok) {
        throw new Error(`Failed to fetch inventory counts: ${response.statusText}`)
      }
      
      const data = await response.json()
      
      // Process inventory counts
      const countsMap: Record<string, InventoryCount> = {}
      
      if (data.counts && Array.isArray(data.counts)) {
        data.counts.forEach((count: any) => {
          if (count.catalog_object_id && count.quantity) {
            countsMap[count.catalog_object_id] = {
              catalogObjectId: count.catalog_object_id,
              quantity: count.quantity,
              state: count.state || 'IN_STOCK',
              locationId: count.location_id || '',
              updatedAt: count.calculated_at || ''
            }
          }
        })
      }
      
      setInventoryCounts(countsMap)
    } catch (error) {
      console.error("Error fetching inventory counts:", error)
      // We don't want to show an error toast for this, as it's not critical
    } finally {
      setLoadingInventory(false)
    }
  }

  // Update getStockQuantity function to use inventory counts
  const getStockQuantity = (item: SquareCatalogObject): string => {
    if (item.type === 'ITEM_VARIATION') {
      const count = inventoryCounts[item.id]
      if (count) {
        return count.quantity
      }
    }
    
    // For items with variations, check if any variations have inventory
    if (item.type === 'ITEM' && item.item_data?.variations && item.item_data.variations.length > 0) {
      let totalStock = 0
      let hasStock = false
      
      item.item_data.variations.forEach(variation => {
        const count = inventoryCounts[variation.id]
        if (count) {
          hasStock = true
          totalStock += parseFloat(count.quantity)
        }
      })
      
      if (hasStock) {
        return totalStock.toString()
      }
    }
    
    return "N/A"
  }

  // Add function to render item details in the side panel
  const renderItemDetails = () => {
    if (!selectedItem) return null;
    
    const { item, categoryName } = selectedItem;
    
    if (item.type === 'ITEM' && item.item_data) {
      return (
        <div className="space-y-6">
          <div>
            <h3 className="text-lg font-medium">Item Details</h3>
            <p className="text-sm text-muted-foreground">View detailed information about this item.</p>
          </div>
          
          <div className="grid gap-4">
            <div>
              <h4 className="text-sm font-medium mb-1">Name</h4>
              <p className="text-sm">{item.item_data.name}</p>
            </div>
            
            {item.item_data.description && (
              <div>
                <h4 className="text-sm font-medium mb-1">Description</h4>
                <p className="text-sm">{item.item_data.description}</p>
              </div>
            )}
            
            <div>
              <h4 className="text-sm font-medium mb-1">Category</h4>
              <p className="text-sm">{categoryName}</p>
            </div>
            
            <div>
              <h4 className="text-sm font-medium mb-1">ID</h4>
              <p className="text-sm font-mono text-xs bg-gray-50 p-1 rounded">{item.id}</p>
            </div>
            
            {item.item_data.variations && item.item_data.variations.length > 0 && (
              <div>
                <h4 className="text-sm font-medium mb-2">Variations</h4>
                <div className="space-y-2">
                  {item.item_data.variations.map(variation => {
                    const inventoryCount = inventoryCounts[variation.id]
                    
                    return (
                      <div key={variation.id} className="bg-gray-50 p-3 rounded-md">
                        <p className="font-medium text-sm">{variation.item_variation_data?.name}</p>
                        {variation.item_variation_data?.sku && (
                          <p className="text-xs text-muted-foreground mt-1">SKU: {variation.item_variation_data.sku}</p>
                        )}
                        {variation.item_variation_data?.price_money && (
                          <p className="text-xs text-muted-foreground mt-1">
                            Price: {formatPrice(variation.item_variation_data.price_money.amount, variation.item_variation_data.price_money.currency)}
                          </p>
                        )}
                        {inventoryCount && (
                          <p className="text-xs text-muted-foreground mt-1">
                            Stock: {inventoryCount.quantity}
                          </p>
                        )}
                      </div>
                    )
                  })}
                </div>
              </div>
            )}
            
            <div>
              <h4 className="text-sm font-medium mb-1">Last Updated</h4>
              <p className="text-sm">{new Date(item.updated_at).toLocaleString()}</p>
            </div>
          </div>
          
          <div className="pt-4">
            <Button variant="outline" className="w-full" onClick={() => setIsSheetOpen(false)}>
              Close
            </Button>
          </div>
        </div>
      );
    }
    
    if (item.type === 'ITEM_VARIATION' && item.item_variation_data) {
      // Find parent item
      const parentItem = inventoryItems.find(i => 
        i.type === 'ITEM' && i.id === item.item_variation_data?.item_id
      );
      
      const inventoryCount = inventoryCounts[item.id]
      
      return (
        <div className="space-y-6">
          <div>
            <h3 className="text-lg font-medium">Variation Details</h3>
            <p className="text-sm text-muted-foreground">View detailed information about this variation.</p>
          </div>
          
          <div className="grid gap-4">
            <div>
              <h4 className="text-sm font-medium mb-1">Name</h4>
              <p className="text-sm">{item.item_variation_data.name}</p>
            </div>
            
            {parentItem?.item_data?.name && (
              <div>
                <h4 className="text-sm font-medium mb-1">Parent Item</h4>
                <p className="text-sm">{parentItem.item_data.name}</p>
              </div>
            )}
            
            <div>
              <h4 className="text-sm font-medium mb-1">Category</h4>
              <p className="text-sm">{categoryName}</p>
            </div>
            
            {item.item_variation_data.sku && (
              <div>
                <h4 className="text-sm font-medium mb-1">SKU</h4>
                <p className="text-sm">{item.item_variation_data.sku}</p>
              </div>
            )}
            
            {item.item_variation_data.price_money && (
              <div>
                <h4 className="text-sm font-medium mb-1">Price</h4>
                <p className="text-sm">{formatPrice(item.item_variation_data.price_money.amount, item.item_variation_data.price_money.currency)}</p>
              </div>
            )}
            
            {inventoryCount && (
              <div>
                <h4 className="text-sm font-medium mb-1">Stock Quantity</h4>
                <p className="text-sm">{inventoryCount.quantity}</p>
                <p className="text-xs text-muted-foreground mt-1">
                  Last updated: {new Date(inventoryCount.updatedAt).toLocaleString()}
                </p>
              </div>
            )}
            
            <div>
              <h4 className="text-sm font-medium mb-1">ID</h4>
              <p className="text-sm font-mono text-xs bg-gray-50 p-1 rounded">{item.id}</p>
            </div>
            
            <div>
              <h4 className="text-sm font-medium mb-1">Last Updated</h4>
              <p className="text-sm">{new Date(item.updated_at).toLocaleString()}</p>
            </div>
          </div>
          
          <div className="pt-4">
            <Button variant="outline" className="w-full" onClick={() => setIsSheetOpen(false)}>
              Close
            </Button>
          </div>
        </div>
      );
    }
    
    return null;
  };

  // Add function to check if Tap Agent is activated
  const checkTapAgentActivation = async () => {
    if (!user?.uid) return false;
    
    try {
      setCheckingTapAgent(true);
      
      // Check if the merchant has a document in the agents collection
      const agentDocRef = doc(db, 'agents', user.uid);
      const agentDoc = await getDoc(agentDocRef);
      
      // If the agent document exists, also fetch the existing inventory items
      if (agentDoc.exists()) {
        const data = agentDoc.data();
        if (data.posInventory && Array.isArray(data.posInventory)) {
          setExistingTapAgentItems(data.posInventory);
        } else {
          setExistingTapAgentItems([]);
        }
      } else {
        setExistingTapAgentItems([]);
      }
      
      setIsTapAgentActivated(agentDoc.exists());
      return agentDoc.exists();
    } catch (error) {
      console.error("Error checking Tap Agent activation:", error);
      return false;
    } finally {
      setCheckingTapAgent(false);
    }
  };

  // Add function to handle opening tap agent sheet
  const handleOpenTapAgentSheet = async () => {
    // First check if Tap Agent is activated
    setLoadingExistingItems(true);
    const isActivated = await checkTapAgentActivation();
    
    if (!isActivated) {
      setIsTapAgentSheetOpen(true);
      setLoadingExistingItems(false);
      return;
    }
    
    // Convert inventory items to tap agent items
    const items = inventoryItems
      .filter(item => item.type === 'ITEM' || item.type === 'ITEM_VARIATION')
      .map(item => {
        // Check if this item already exists in the Tap Agent inventory
        const existingItem = existingTapAgentItems.find(existing => existing.id === item.id);
        
        return {
          ...item,
          costOfGoods: existingItem?.costOfGoods || 0,
          selected: false
        };
      });
    
    setTapAgentItems(items);
    setIsTapAgentSheetOpen(true);
    setLoadingExistingItems(false);
  };

  // Add function to navigate to Tap Agent activation
  const handleGoToTapAgent = () => {
    router.push('/tap-agent');
    setIsTapAgentSheetOpen(false);
  };

  // Add function to handle selecting all items
  const handleSelectAll = () => {
    setTapAgentItems(prevItems => 
      prevItems.map(item => ({
        ...item,
        selected: true
      }))
    );
  };

  // Add function to handle unselecting all items
  const handleUnselectAll = () => {
    setTapAgentItems(prevItems => 
      prevItems.map(item => ({
        ...item,
        selected: false
      }))
    );
  };

  // Add function to handle selecting a single item
  const handleSelectItem = (id: string) => {
    setTapAgentItems(prevItems => 
      prevItems.map(item => 
        item.id === id ? { ...item, selected: !item.selected } : item
      )
    );
  };

  // Add function to handle cost of goods change
  const handleCostOfGoodsChange = (id: string, value: string) => {
    const numValue = parseFloat(value) || 0;
    
    setTapAgentItems(prevItems => 
      prevItems.map(item => 
        item.id === id ? { ...item, costOfGoods: numValue } : item
      )
    );
  };

  // Add function to handle submit
  const handleSubmitToTapAgent = async () => {
    if (!user?.uid) return;
    
    const selectedItems = tapAgentItems.filter(item => item.selected);
    
    // Check if all selected items have a cost of goods
    const missingCosts = selectedItems.filter(item => !item.costOfGoods || item.costOfGoods <= 0);
    
    if (missingCosts.length > 0) {
      toast({
        title: "Missing Cost Information",
        description: "Please enter cost of goods for all selected items.",
        variant: "destructive"
      });
      return;
    }
    
    try {
      setIsTapAgentSheetOpen(false);
      
      // Show loading toast
      toast({
        title: "Saving Items",
        description: "Adding inventory items to Tap Agent...",
      });
      
      // Format items for Firestore
      const posInventoryItems: POSInventoryItem[] = selectedItems.map(item => {
        let name = '';
        let retailPrice: number | null = null;
        let type = item.type;
        
        if (item.type === 'ITEM' && item.item_data) {
          name = item.item_data.name;
        } else if (item.type === 'ITEM_VARIATION' && item.item_variation_data) {
          name = item.item_variation_data.name;
          
          if (item.item_variation_data.price_money) {
            retailPrice = item.item_variation_data.price_money.amount / 100; // Convert cents to dollars
          }
        }
        
        // Create the item object, ensuring no undefined values
        return {
          id: item.id,
          name,
          // Only include retailPrice if it's not null
          ...(retailPrice !== null && { retailPrice }),
          costOfGoods: item.costOfGoods || 0,
          type
        };
      });
      
      // Reference to the agent document
      const agentDocRef = doc(db, 'agents', user.uid);
      
      // Get the current document to check if it exists
      const agentDoc = await getDoc(agentDocRef);
      
      if (agentDoc.exists()) {
        // Document exists, but we need to handle the posInventory array differently
        // to avoid the arrayUnion with undefined values error
        
        // Get current posInventory or initialize as empty array
        const currentData = agentDoc.data();
        const currentInventory = currentData.posInventory || [];
        
        // Merge the arrays without using arrayUnion
        const updatedInventory = [...currentInventory, ...posInventoryItems];
        
        // Update with the combined array
        await updateDoc(agentDocRef, {
          posInventory: updatedInventory
        });
      } else {
        // Document doesn't exist, create it with the posInventory array
        await setDoc(agentDocRef, {
          posInventory: posInventoryItems
        });
      }
      
      // Success toast
      toast({
        title: "Items Added Successfully",
        description: `${selectedItems.length} items have been added to Tap Agent.`,
        variant: "default"
      });
      
    } catch (error) {
      console.error("Error saving items to Tap Agent:", error);
      
      // Error toast
      toast({
        title: "Error",
        description: "Failed to add items to Tap Agent. Please try again.",
        variant: "destructive"
      });
    }
  };

  // Add function to remove an item from Tap Agent inventory
  const handleRemoveFromTapAgent = async (itemId: string) => {
    if (!user?.uid) return;
    
    try {
      // Show loading toast
      toast({
        title: "Removing Item",
        description: "Removing item from Tap Agent...",
      });
      
      // Reference to the agent document
      const agentDocRef = doc(db, 'agents', user.uid);
      
      // Get the current document
      const agentDoc = await getDoc(agentDocRef);
      
      if (agentDoc.exists()) {
        const data = agentDoc.data();
        
        if (data.posInventory && Array.isArray(data.posInventory)) {
          // Filter out the item to be removed
          const updatedInventory = data.posInventory.filter((item: POSInventoryItem) => item.id !== itemId);
          
          // Update the document with the filtered array
          await updateDoc(agentDocRef, {
            posInventory: updatedInventory
          });
          
          // Update local state
          setExistingTapAgentItems(updatedInventory);
          
          // Success toast
          toast({
            title: "Item Removed",
            description: "Item has been removed from Tap Agent.",
            variant: "default"
          });
        }
      }
    } catch (error) {
      console.error("Error removing item from Tap Agent:", error);
      
      // Error toast
      toast({
        title: "Error",
        description: "Failed to remove item from Tap Agent. Please try again.",
        variant: "destructive"
      });
    }
  };

  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Inventory"
        >
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              className="h-8"
              onClick={handleRefresh}
              disabled={refreshing || loading}
            >
              {refreshing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Refreshing...
                </>
              ) : (
                <>
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Refresh
                </>
              )}
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="h-8"
              disabled={!isSquareConnected}
            >
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Button 
              variant="default" 
              size="sm" 
              className="h-8"
              disabled={!isSquareConnected || loading}
              onClick={handleOpenTapAgentSheet}
            >
              <Zap className="h-4 w-4 mr-2" />
              Add to Tap Agent
            </Button>
          </div>
        </PageHeader>

        {!isSquareConnected && !loading && (
          <div className="bg-muted p-6 rounded-lg text-center">
            <h3 className="text-lg font-medium mb-2">Square Integration Required</h3>
            <p className="text-muted-foreground mb-4">
              To view and manage your inventory, you need to connect your Square account.
            </p>
            <Button onClick={() => router.push('/integrations')}>
              Go to Integrations
            </Button>
          </div>
        )}

        {loading ? (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <span className="ml-2 text-lg">Loading inventory...</span>
          </div>
        ) : error ? (
          <div className="bg-destructive/10 p-6 rounded-lg text-center">
            <h3 className="text-lg font-medium mb-2 text-destructive">Error Loading Inventory</h3>
            <p className="text-muted-foreground mb-4">{error}</p>
            <Button variant="outline" onClick={handleRefresh}>
              Try Again
            </Button>
          </div>
        ) : isSquareConnected && (
          <>
            <div className="flex justify-between items-center mb-6">
              <div className="relative w-full max-w-sm">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search inventory..."
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              
              {loadingInventory && (
                <div className="flex items-center text-sm text-muted-foreground">
                  <Loader2 className="h-3 w-3 animate-spin mr-2" />
                  Updating inventory counts...
                </div>
              )}
            </div>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Inventory Items</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[250px]">Name</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Category</TableHead>
                      <TableHead>SKU</TableHead>
                      <TableHead className="text-right">Price</TableHead>
                      <TableHead>Stock</TableHead>
                      <TableHead className="w-[50px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredItems.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={7} className="h-24 text-center">
                          {searchQuery ? "No items found matching your search." : "No inventory items found."}
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredItems.map((item) => {
                        // Skip rendering categories in the table
                        if (item.type === 'CATEGORY') return null
                        
                        // For items
                        if (item.type === 'ITEM' && item.item_data) {
                          return (
                            <TableRow 
                              key={item.id} 
                              className="cursor-pointer hover:bg-gray-50"
                              onClick={() => handleItemClick(item)}
                            >
                              <TableCell className="font-medium">
                                {item.item_data.name}
                                {item.item_data.description && (
                                  <p className="text-xs text-muted-foreground truncate max-w-xs">
                                    {item.item_data.description}
                                  </p>
                                )}
                              </TableCell>
                              <TableCell>
                                <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                                  Item
                                </Badge>
                              </TableCell>
                              <TableCell>
                                {getCategoryName(item.item_data.category_id)}
                              </TableCell>
                              <TableCell>
                                N/A
                              </TableCell>
                              <TableCell className="text-right">
                                {item.item_data.variations && item.item_data.variations.length > 0 ? (
                                  <span>Various</span>
                                ) : (
                                  <span>N/A</span>
                                )}
                              </TableCell>
                              <TableCell>
                                {loadingInventory ? (
                                  <span className="flex justify-end">
                                    <Loader2 className="h-4 w-4 animate-spin" />
                                  </span>
                                ) : (
                                  <span className={`${getStockQuantity(item) === "0" ? "text-destructive" : getStockQuantity(item) === "N/A" ? "text-muted-foreground" : ""}`}>
                                    {getStockQuantity(item)}
                                  </span>
                                )}
                              </TableCell>
                              <TableCell>
                                <Button variant="ghost" size="icon" className="h-8 w-8">
                                  <ChevronRight className="h-4 w-4" />
                                </Button>
                              </TableCell>
                            </TableRow>
                          )
                        }
                        
                        // For item variations
                        if (item.type === 'ITEM_VARIATION' && item.item_variation_data) {
                          return (
                            <TableRow 
                              key={item.id} 
                              className="cursor-pointer hover:bg-gray-50"
                              onClick={() => handleItemClick(item)}
                            >
                              <TableCell className="font-medium">
                                {item.item_variation_data.name}
                              </TableCell>
                              <TableCell>
                                <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
                                  Variation
                                </Badge>
                              </TableCell>
                              <TableCell>
                                N/A
                              </TableCell>
                              <TableCell>
                                {item.item_variation_data.sku || 'N/A'}
                              </TableCell>
                              <TableCell className="text-right">
                                {item.item_variation_data.price_money ? 
                                  formatPrice(item.item_variation_data.price_money.amount, item.item_variation_data.price_money.currency) : 
                                  'N/A'
                                }
                              </TableCell>
                              <TableCell>
                                {loadingInventory ? (
                                  <span className="flex justify-end">
                                    <Loader2 className="h-4 w-4 animate-spin" />
                                  </span>
                                ) : (
                                  <span className={`${getStockQuantity(item) === "0" ? "text-destructive" : getStockQuantity(item) === "N/A" ? "text-muted-foreground" : ""}`}>
                                    {getStockQuantity(item)}
                                  </span>
                                )}
                              </TableCell>
                              <TableCell>
                                <Button variant="ghost" size="icon" className="h-8 w-8">
                                  <ChevronRight className="h-4 w-4" />
                                </Button>
                              </TableCell>
                            </TableRow>
                          )
                        }
                        
                        return null
                      })
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </>
        )}
        
        {/* Add global style to prevent double backdrop when both sheets are open */}
        {isAllItemsSheetOpen && isTapAgentSheetOpen && (
          <style jsx global>{`
            body > div[role="presentation"] + div[role="presentation"] {
              display: none;
            }
          `}</style>
        )}

        {/* Side panel for item details */}
        <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
          <SheetContent className="w-full sm:max-w-md overflow-y-auto">
            <SheetHeader className="pb-4">
              <SheetTitle>
                {selectedItem?.item.type === 'ITEM' 
                  ? selectedItem.item.item_data?.name 
                  : selectedItem?.item.item_variation_data?.name || 'Item Details'}
              </SheetTitle>
              <SheetDescription>
                {selectedItem?.item.type === 'ITEM' 
                  ? 'Product information' 
                  : 'Variation information'}
              </SheetDescription>
            </SheetHeader>
            <Separator />
            <ScrollArea className="h-[calc(100vh-8rem)] py-4">
              {renderItemDetails()}
            </ScrollArea>
          </SheetContent>
        </Sheet>
        
        {/* Side panel for adding items to Tap Agent */}
        <Sheet open={isTapAgentSheetOpen} onOpenChange={setIsTapAgentSheetOpen}>
          <SheetContent className="w-full sm:max-w-md overflow-y-auto flex flex-col">
            {!isTapAgentActivated ? (
              <div className="flex flex-col items-center justify-center h-full">
                <div className="text-center space-y-4 p-6">
                  <Zap className="h-12 w-12 mx-auto text-orange-500" />
                  <h3 className="text-xl font-semibold">
                    Activate <GradientText>Tap Agent</GradientText> First
                  </h3>
                  <p className="text-muted-foreground">
                    You need to activate Tap Agent before adding inventory items.
                  </p>
                  <Button onClick={handleGoToTapAgent} className="mt-4">
                    Go to Tap Agent Setup
                  </Button>
                </div>
              </div>
            ) : loadingExistingItems ? (
              <div className="flex flex-col items-center justify-center h-full">
                <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                <p>Loading inventory items...</p>
              </div>
            ) : (
              <>
                {/* Header section */}
                <div className="flex-none">
                  <SheetHeader className="pb-4">
                    <SheetTitle>
                      Add Items to <GradientText>Tap Agent</GradientText>
                    </SheetTitle>
                    <SheetDescription>
                      Select items to create a catalog for automatic customer rewards
                    </SheetDescription>
                  </SheetHeader>
                  
                  {/* Existing Tap Agent Items Section - Simplified to a single summary row */}
                  {existingTapAgentItems.length > 0 && (
                    <div className="mb-3">
                      <div className="flex items-center justify-between">
                        <div className="bg-blue-50 rounded-md py-2 px-3 flex-1 flex items-center mr-2">
                          <div className="mr-2 text-blue-600">
                            <Zap className="h-4 w-4" />
                          </div>
                          <div className="flex-1 min-w-0 flex items-center">
                            <div className="truncate">
                              <span className="text-sm font-medium text-blue-800">
                                {existingTapAgentItems.length === 1 ? (
                                  existingTapAgentItems[0].name
                                ) : (
                                  `${existingTapAgentItems[0].name}${existingTapAgentItems.length > 1 ? "..." : ""}`
                                )}
                              </span>
                            </div>
                            {existingTapAgentItems.length > 1 && (
                              <span className="text-sm text-blue-600 font-medium whitespace-nowrap ml-1">
                                +{existingTapAgentItems.length - 1} items
                              </span>
                            )}
                          </div>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-7 text-sm text-blue-600 hover:text-blue-700 hover:bg-blue-100 px-2 py-0 whitespace-nowrap ml-2 flex-shrink-0"
                            onClick={() => setIsAllItemsSheetOpen(true)}
                          >
                            View all
                          </Button>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div className="flex items-center justify-between py-2">
                    <div className="space-x-2">
                      <Button variant="outline" size="sm" onClick={handleSelectAll}>
                        Select All
                      </Button>
                      <Button variant="outline" size="sm" onClick={handleUnselectAll}>
                        Unselect All
                      </Button>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {tapAgentItems.filter(item => item.selected).length} items selected
                    </div>
                  </div>
                  <div className="text-xs text-muted-foreground mt-1 mb-2">
                    * Cost of goods is required for all selected items
                  </div>
                  <Separator className="my-2" />
                </div>
                
                {/* Scrollable content - Fix the height calculation */}
                <div className="flex-grow overflow-hidden">
                  <ScrollArea className="h-[calc(100vh-22rem)] pr-2">
                    <div className="space-y-1 pb-16">
                      {tapAgentItems
                        // Filter out items that already exist in Tap Agent
                        .filter(item => !existingTapAgentItems.some(existing => existing.id === item.id))
                        .map(item => {
                          const itemName = 
                            item.type === 'ITEM' && item.item_data
                              ? item.item_data.name
                              : item.type === 'ITEM_VARIATION' && item.item_variation_data
                                ? item.item_variation_data.name
                                : 'Unknown Item';
                          
                          const itemPrice = 
                            item.type === 'ITEM_VARIATION' && item.item_variation_data?.price_money
                              ? formatPrice(item.item_variation_data.price_money.amount, item.item_variation_data.price_money.currency)
                              : 'N/A';
                          
                          // Check if this item is selected and missing cost
                          const isMissingCost = item.selected && (!item.costOfGoods || item.costOfGoods <= 0);
                          
                          return (
                            <div key={item.id} className="flex items-center border-b border-gray-100 py-2">
                              <Checkbox 
                                id={`item-${item.id}`} 
                                checked={item.selected} 
                                onCheckedChange={() => handleSelectItem(item.id)}
                                className="mr-2"
                              />
                              <div className="flex-1 min-w-0 mr-3">
                                <div className="flex items-center justify-between">
                                  <Label 
                                    htmlFor={`item-${item.id}`}
                                    className="font-medium cursor-pointer truncate text-sm"
                                  >
                                    {itemName}
                                  </Label>
                                  <span className="text-xs text-muted-foreground whitespace-nowrap">
                                    {itemPrice}
                                  </span>
                                </div>
                              </div>
                              <div className="w-24 flex-shrink-0">
                                <Input
                                  id={`cog-${item.id}`}
                                  type="number"
                                  min="0.01"
                                  step="0.01"
                                  placeholder="Cost ($)"
                                  value={item.costOfGoods || ''}
                                  onChange={(e) => handleCostOfGoodsChange(item.id, e.target.value)}
                                  className={`h-7 text-xs w-full ${isMissingCost ? 'border-red-500' : ''}`}
                                  aria-label="Cost of Goods"
                                  required={item.selected}
                                />
                              </div>
                            </div>
                          );
                        })}
                    </div>
                  </ScrollArea>
                </div>
                
                {/* Sticky footer with submit button */}
                <div className="flex-none pt-4 mt-2 border-t bg-background sticky bottom-0 z-10">
                  <Button 
                    className="w-full" 
                    onClick={handleSubmitToTapAgent}
                    disabled={tapAgentItems.filter(item => item.selected).length === 0}
                  >
                    Submit to Tap Agent
                  </Button>
                </div>
              </>
            )}
          </SheetContent>
        </Sheet>

        {/* Secondary sheet for displaying all Tap Agent items */}
        <Sheet open={isAllItemsSheetOpen} onOpenChange={setIsAllItemsSheetOpen}>
          <SheetContent className="w-full sm:max-w-md overflow-y-auto flex flex-col">
            <SheetHeader className="pb-4">
              <SheetTitle>
                All <GradientText>Tap Agent</GradientText> Items
              </SheetTitle>
              <SheetDescription>
                {existingTapAgentItems.length} items in your Tap Agent catalog
              </SheetDescription>
            </SheetHeader>
            <Separator className="mb-4" />
            
            <ScrollArea className="flex-grow pr-2 h-[calc(100vh-8rem)]">
              <div className="space-y-1">
                {existingTapAgentItems.map(item => (
                  <div key={`all-items-${item.id}`} className="flex items-center justify-between border-b border-gray-200 py-3 last:border-0">
                    <div className="flex-1 min-w-0">
                      <p className="font-medium text-sm">{item.name}</p>
                      <div className="flex items-center text-xs text-muted-foreground mt-1">
                        <span className="mr-2">Cost: ${item.costOfGoods.toFixed(2)}</span>
                        {item.retailPrice && (
                          <span>Price: ${item.retailPrice.toFixed(2)}</span>
                        )}
                        <span className="ml-2 px-1.5 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full">
                          {item.type === 'ITEM' ? 'Item' : 'Variation'}
                        </span>
                      </div>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      className="h-8 w-8 text-destructive hover:text-destructive hover:bg-destructive/10"
                      onClick={() => handleRemoveFromTapAgent(item.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </ScrollArea>
            
            <div className="flex-none pt-4 mt-2 border-t">
              <Button 
                variant="outline" 
                className="w-full" 
                onClick={() => setIsAllItemsSheetOpen(false)}
              >
                Close
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </PageTransition>
  )
} "use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/contexts/auth-context"
import { 
  PlusCircle, 
  Edit2, 
  Trash2, 
  Users, 
  DollarSign, 
  ShoppingBag,
  AlertCircle,
  Info,
  Award,
  Loader2,
  Calendar,
  ShoppingCart,
  Gift,
  Server
} from "lucide-react"
import { db } from "@/lib/firebase"
import { 
  collection, 
  doc, 
  getDoc, 
  getDocs, 
  setDoc, 
  deleteDoc, 
  query, 
  where, 
  arrayUnion, 
  onSnapshot,
  updateDoc,
  serverTimestamp,
  orderBy,
  writeBatch
} from "firebase/firestore"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { toast } from "@/components/ui/use-toast"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { CreateRewardDialog } from "@/components/create-reward-dialog"
import { PageHeader } from "@/components/page-header"

// Types for the membership conditions
interface Condition {
  enabled: boolean;
  value: number;
}

interface ConditionsObject {
  lifetimeTransactions: Condition;
  lifetimeSpend: Condition;
  numberOfRedemptions: Condition;
  averageTransactionsPerWeek: Condition;
  daysSinceJoined: Condition;
  daysSinceLastVisit: Condition;
  [key: string]: Condition;
}

interface Membership {
  id: string;
  name: string;
  description: string;
  order: number;
  conditions: ConditionsObject;
  createdAt: any;
  updatedAt: any;
  isActive: boolean;
  customerCount?: number;
}

interface Customer {
  customerId: string;
  merchantId: string;
  fullName: string;
  membershipTier: string;
  pointsBalance: number;
  lifetimeTransactionCount: number;
  totalLifetimeSpend: number;
  redemptionCount: number | null;
  lastTransactionDate: any;
  firstTransactionDate: any;
  daysSinceFirstPurchase: number;
  daysSinceLastVisit: number;
}

export default function MembershipsPage() {
  const { user } = useAuth()
  const router = useRouter()
  const [memberships, setMemberships] = useState<Membership[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [selectedMembership, setSelectedMembership] = useState<Membership | null>(null)
  const [selectedTierCustomers, setSelectedTierCustomers] = useState<Customer[]>([])
  const [isCustomerListOpen, setIsCustomerListOpen] = useState(false)
  const [loadingCustomers, setLoadingCustomers] = useState(false)
  const [expandedTiers, setExpandedTiers] = useState<{[key: string]: boolean}>({})
  const [tierCustomers, setTierCustomers] = useState<{[key: string]: Customer[]}>({})
  const [loadingTierCustomers, setLoadingTierCustomers] = useState<{[key: string]: boolean}>({})
  
  // Create/Edit form state
  const [formData, setFormData] = useState<Omit<Membership, 'id' | 'createdAt' | 'updatedAt' | 'customerCount'>>({
    name: "",
    description: "",
    order: 0,
    isActive: true,
    conditions: {
      lifetimeTransactions: { enabled: false, value: 0 },
      lifetimeSpend: { enabled: false, value: 0 },
      numberOfRedemptions: { enabled: false, value: 0 },
      averageTransactionsPerWeek: { enabled: false, value: 0 },
      daysSinceJoined: { enabled: false, value: 0 },
      daysSinceLastVisit: { enabled: false, value: 0 }
    }
  })
  
  // Condition form state (separate from the actual saved conditions)
  const [conditionSettings, setConditionSettings] = useState({
    lifetimeTransactions: {
      enabled: false,
      value: 0
    },
    lifetimeSpend: {
      enabled: false,
      value: 0
    },
    numberOfRedemptions: {
      enabled: false,
      value: 0
    }
  })
  
  // Add a new state for all customers
  const [allCustomers, setAllCustomers] = useState<Customer[]>([])
  const [loadingAllCustomers, setLoadingAllCustomers] = useState(false)
  const [showAllCustomers, setShowAllCustomers] = useState(false)
  
  // Add new state for CreateRewardDialog
  const [isCreateRewardOpen, setIsCreateRewardOpen] = useState(false)
  const [selectedTierForReward, setSelectedTierForReward] = useState<string>("")
  
  // Set up listener for memberships
  useEffect(() => {
    if (!user?.uid) return
    
    setIsLoading(true)
    
    const membershipRef = collection(db, 'merchants', user.uid, 'memberships')
    const membershipQuery = query(membershipRef, orderBy('order', 'asc'))
    
    const unsubscribe = onSnapshot(membershipQuery, async (snapshot) => {
      const membershipsData: Membership[] = []
      
      // First, get all customers to count membership tiers
      const customersRef = collection(db, 'merchants', user.uid, 'customers')
      const customersSnapshot = await getDocs(customersRef)
      
      // Create a map to count customers by tier
      const tierCounts: {[key: string]: number} = {}
      
      customersSnapshot.forEach(doc => {
        const data = doc.data()
        const tier = (data.membershipTier || 'bronze').toLowerCase()
        tierCounts[tier] = (tierCounts[tier] || 0) + 1
      })
      
      console.log("Customer tier counts:", tierCounts)
      
      for (const doc of snapshot.docs) {
        const data = doc.data() as Membership
        const tierName = data.name.toLowerCase()
        
        const membership = {
          id: doc.id,
          name: data.name || "",
          description: data.description || "",
          order: data.order || 0,
          conditions: data.conditions || {
            lifetimeTransactions: { enabled: false, value: 0 },
            lifetimeSpend: { enabled: false, value: 0 },
            numberOfRedemptions: { enabled: false, value: 0 },
            averageTransactionsPerWeek: { enabled: false, value: 0 },
            daysSinceJoined: { enabled: false, value: 0 },
            daysSinceLastVisit: { enabled: false, value: 0 }
          },
          createdAt: data.createdAt,
          updatedAt: data.updatedAt,
          isActive: data.isActive !== false, // Default to true if not specified
          customerCount: tierCounts[tierName] || 0
        }
        
        membershipsData.push(membership)
      }
      
      setMemberships(membershipsData)
      setIsLoading(false)
      
      // Check if default tiers exist and create them if they don't
      await checkAndCreateDefaultTiers(membershipsData)
    })
    
    // Create/ensure default tiers (Bronze, Silver, Gold)
    const checkAndCreateDefaultTiers = async (existingMemberships: Membership[] = []) => {
      try {
        const defaultTiers = [
          {
            name: "Bronze",
            description: "Default tier for all new customers",
            order: 1,
            isActive: true,
            conditions: {
              lifetimeTransactions: { enabled: false, value: 0 }
            }
          },
          {
            name: "Silver",
            description: "Mid-tier membership benefits",
            order: 2,
            isActive: true,
            conditions: {
              lifetimeTransactions: { enabled: true, value: 10 }
            }
          },
          {
            name: "Gold",
            description: "Premium membership benefits",
            order: 3,
            isActive: true,
            conditions: {
              lifetimeTransactions: { enabled: true, value: 25 }
            }
          }
        ]
        
        // Check which tiers need to be created
        const missingTiers = []
        
        const existingTierNames = existingMemberships.map(m => m.name.toLowerCase())
        
        for (const tier of defaultTiers) {
          if (!existingTierNames.includes(tier.name.toLowerCase())) {
            missingTiers.push(tier)
          }
        }
        
        // Create missing tiers if any
        if (missingTiers.length > 0) {
          const batch = writeBatch(db)
          
          for (const tier of missingTiers) {
            const newDocRef = doc(membershipRef)
            batch.set(newDocRef, {
              ...tier,
              createdAt: serverTimestamp(),
              updatedAt: serverTimestamp()
            })
          }
          
          await batch.commit()
        }
      } catch (error) {
        console.error("Error creating default tiers:", error)
      }
    }
    
    // Initial check for existing membership tiers
    const initialCheck = async () => {
      const snapshot = await getDocs(membershipRef)
      if (snapshot.empty) {
        await checkAndCreateDefaultTiers()
      }
    }
    
    initialCheck()
    
    // Load all customers
    loadAllCustomers()
    
    return unsubscribe
  }, [user])
  
  // Reset form data
  const resetFormData = () => {
    setFormData({
      name: "",
      description: "",
      order: memberships.length + 1,
      isActive: true,
      conditions: {
        lifetimeTransactions: { enabled: false, value: 0 },
        lifetimeSpend: { enabled: false, value: 0 },
        numberOfRedemptions: { enabled: false, value: 0 },
        averageTransactionsPerWeek: { enabled: false, value: 0 },
        daysSinceJoined: { enabled: false, value: 0 },
        daysSinceLastVisit: { enabled: false, value: 0 }
      }
    })
    
    setConditionSettings({
      lifetimeTransactions: {
        enabled: false,
        value: 0
      },
      lifetimeSpend: {
        enabled: false,
        value: 0
      },
      numberOfRedemptions: {
        enabled: false,
        value: 0
      }
    })
  }
  
  // Open edit dialog
  const handleEditMembership = (membership: Membership) => {
    // Don't allow editing Bronze tier
    if (membership.name.toLowerCase() === 'bronze') {
      toast({
        title: "Cannot Edit Bronze Tier",
        description: "Bronze is the default membership tier for all customers and cannot be modified.",
        variant: "default"
      })
      return
    }
    
    setSelectedMembership(membership)
    
    // Set form data
    setFormData({
      name: membership.name,
      description: membership.description,
      order: membership.order,
      isActive: membership.isActive,
      conditions: membership.conditions
    })
    
    // Set condition settings based on existing conditions
    setConditionSettings({
      lifetimeTransactions: {
        enabled: membership.conditions.lifetimeTransactions.enabled,
        value: membership.conditions.lifetimeTransactions.value
      },
      lifetimeSpend: {
        enabled: membership.conditions.lifetimeSpend.enabled,
        value: membership.conditions.lifetimeSpend.value
      },
      numberOfRedemptions: {
        enabled: membership.conditions.numberOfRedemptions.enabled,
        value: membership.conditions.numberOfRedemptions.value
      }
    })
    
    setIsEditDialogOpen(true)
  }
  
  // Open create dialog
  const handleCreateMembership = () => {
    resetFormData()
    setSelectedMembership(null)
    setIsEditDialogOpen(true)
  }
  
  // Open delete dialog
  const handleDeleteClick = (membership: Membership) => {
    // Don't allow deleting default tiers
    if (['bronze', 'silver', 'gold'].includes(membership.name.toLowerCase())) {
      toast({
        title: `Cannot Delete ${membership.name} Tier`,
        description: "Default membership tiers (Bronze, Silver, Gold) cannot be deleted.",
        variant: "default"
      })
      return
    }
    
    setSelectedMembership(membership)
    setIsDeleteDialogOpen(true)
  }
  
  // Handle save membership
  const handleSaveMembership = async () => {
    if (!user?.uid) return
    
    try {
      if (!formData.name) {
        toast({
          title: "Error",
          description: "Membership name is required",
          variant: "destructive"
        })
        return
      }
      
      // Create conditions object with the correct structure
      const conditions = {
        lifetimeTransactions: { 
          enabled: conditionSettings.lifetimeTransactions.enabled, 
          value: conditionSettings.lifetimeTransactions.value 
        },
        lifetimeSpend: { 
          enabled: conditionSettings.lifetimeSpend.enabled, 
          value: conditionSettings.lifetimeSpend.value 
        },
        numberOfRedemptions: { 
          enabled: conditionSettings.numberOfRedemptions.enabled, 
          value: conditionSettings.numberOfRedemptions.value 
        },
        // Include other condition types with default values
        averageTransactionsPerWeek: { enabled: false, value: 0 },
        daysSinceJoined: { enabled: false, value: 0 },
        daysSinceLastVisit: { enabled: false, value: 0 }
      }
      
      // Check if any conditions are enabled
      const hasEnabledConditions = 
        conditionSettings.lifetimeTransactions.enabled || 
        conditionSettings.lifetimeSpend.enabled || 
        conditionSettings.numberOfRedemptions.enabled;
      
      // If there are no conditions, make the tier inactive
      const updatedIsActive = hasEnabledConditions ? formData.isActive : false;
      
      if (!hasEnabledConditions && formData.isActive) {
        toast({
          title: "Warning",
          description: "Tier has been set to inactive because it has no conditions",
          variant: "default"
        })
      }
      
      const membershipData = {
        ...formData,
        isActive: updatedIsActive,
        conditions, // Use the new conditions object format
        updatedAt: serverTimestamp()
      }
      
      // Check for Gold active + Silver inactive scenario
      if (formData.name.toLowerCase() === 'gold' && updatedIsActive) {
        // Find Silver tier
        const silverTier = memberships.find(m => m.name.toLowerCase() === 'silver')
        if (silverTier && !silverTier.isActive) {
          toast({
            title: "Error",
            description: "Gold tier cannot be active while Silver tier is inactive",
            variant: "destructive"
          })
          return
        }
      }
      
      if (selectedMembership) {
        // Update existing membership
        await updateDoc(
          doc(db, 'merchants', user.uid, 'memberships', selectedMembership.id),
          membershipData
        )
        
        toast({
          title: "Success",
          description: "Membership updated successfully"
        })
      } else {
        // Create new membership
        const newDocRef = doc(collection(db, 'merchants', user.uid, 'memberships'))
        await setDoc(newDocRef, {
          ...membershipData,
          createdAt: serverTimestamp()
        })
        
        toast({
          title: "Success",
          description: "Membership created successfully"
        })
      }
      
      setIsEditDialogOpen(false)
    } catch (error) {
      console.error("Error saving membership:", error)
      toast({
        title: "Error",
        description: "Failed to save membership",
        variant: "destructive"
      })
    }
  }
  
  // Delete membership
  const handleDeleteMembership = async () => {
    if (!user?.uid || !selectedMembership) return
    
    try {
      // Check if there are customers in this tier
      if (selectedMembership.customerCount && selectedMembership.customerCount > 0) {
        toast({
          title: "Cannot Delete",
          description: `There are ${selectedMembership.customerCount} customers with this membership. Reassign them before deleting.`,
          variant: "destructive"
        })
        setIsDeleteDialogOpen(false)
        return
      }
      
      await deleteDoc(doc(db, 'merchants', user.uid, 'memberships', selectedMembership.id))
      
      toast({
        title: "Success",
        description: "Membership deleted successfully"
      })
      
      setIsDeleteDialogOpen(false)
    } catch (error) {
      console.error("Error deleting membership:", error)
      toast({
        title: "Error",
        description: "Failed to delete membership",
        variant: "destructive"
      })
    }
  }
  
  // Handle condition setting changes
  const handleConditionSettingChange = (type: 'lifetimeTransactions' | 'lifetimeSpend' | 'numberOfRedemptions', field: 'enabled' | 'value', value: boolean | number) => {
    setConditionSettings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        [field]: value
      }
    }))
    
    // If a condition is being disabled, check if all conditions will be disabled
    if (field === 'enabled' && value === false) {
      const updatedSettings = {
        ...conditionSettings,
        [type]: {
          ...conditionSettings[type],
          enabled: false
        }
      }
      
      // Check if all conditions will be disabled
      const willAllBeDisabled = 
        !updatedSettings.lifetimeTransactions.enabled && 
        !updatedSettings.lifetimeSpend.enabled && 
        !updatedSettings.numberOfRedemptions.enabled;
      
      // If all conditions will be disabled, automatically set the tier to inactive
      if (willAllBeDisabled) {
        setFormData(prev => ({
          ...prev,
          isActive: false
        }))
        
        // Show toast notification explaining the change
        toast({
          title: "Tier Set to Inactive",
          description: "Tier has been automatically set to inactive because all conditions are disabled.",
          variant: "default"
        })
      }
    }
  }
  
  // Get membership tier icon and badge
  const getMembershipIcon = (name: string) => {
    switch (name.toLowerCase()) {
      case 'bronze':
        return <Award className="h-5 w-5 text-blue-700" />
      case 'silver':
        return <Award className="h-5 w-5 text-gray-400" />
      case 'gold':
        return <Award className="h-5 w-5 text-blue-500" />
      default:
        return <Award className="h-5 w-5 text-purple-500" />
    }
  }
  
  // Check if a membership is a default tier
  const isDefaultTier = (membership: Membership) => {
    return ['bronze', 'silver', 'gold'].includes(membership.name.toLowerCase())
  }
  
  // Check if a membership is Bronze tier
  const isBronzeTier = (membership: Membership) => {
    return membership.name.toLowerCase() === 'bronze'
  }
  
  // Ensure conditions is always properly formatted
  const ensureConditionsFormat = (membership: Membership) => {
    if (!membership.conditions || typeof membership.conditions !== 'object') {
      membership.conditions = {
        lifetimeTransactions: { enabled: false, value: 0 },
        lifetimeSpend: { enabled: false, value: 0 },
        numberOfRedemptions: { enabled: false, value: 0 },
        averageTransactionsPerWeek: { enabled: false, value: 0 },
        daysSinceJoined: { enabled: false, value: 0 },
        daysSinceLastVisit: { enabled: false, value: 0 }
      };
    }
    return membership;
  }
  
  // Toggle tier expansion to show/hide customers
  const toggleTierExpansion = async (membership: Membership) => {
    const memberId = membership.id
    const isCurrentlyExpanded = expandedTiers[memberId] || false
    
    // Update expanded state
    setExpandedTiers(prev => ({
      ...prev,
      [memberId]: !isCurrentlyExpanded
    }))
    
    // If expanding and we don't have customers loaded yet, load them
    if (!isCurrentlyExpanded && (!tierCustomers[memberId] || tierCustomers[memberId].length === 0)) {
      await loadCustomersForTier(membership)
    }
  }
  
  // Load customers for a specific tier
  const loadCustomersForTier = async (membership: Membership) => {
    if (!user?.uid) return
    
    const memberId = membership.id
    
    // Set loading state for this specific tier
    setLoadingTierCustomers(prev => ({
      ...prev,
      [memberId]: true
    }))
    
    try {
      // Updated query to use the correct subcollection path under merchants
      const customersQuery = query(
        collection(db, 'merchants', user.uid, 'customers'),
        where('membershipTier', '==', membership.name.toLowerCase())
      )
      
      console.log(`Fetching customers for ${membership.name} tier from merchants/${user.uid}/customers`)
      
      const snapshot = await getDocs(customersQuery)
      const customers: Customer[] = []
      
      console.log(`Found ${snapshot.size} customers for ${membership.name} tier`)
      
      snapshot.forEach(doc => {
        const data = doc.data()
        customers.push({
          customerId: doc.id,
          merchantId: user.uid,
          fullName: data.fullName || 'Unknown Customer',
          membershipTier: data.membershipTier || 'bronze',
          pointsBalance: data.pointsBalance || 0,
          lifetimeTransactionCount: data.lifetimeTransactionCount || 0,
          totalLifetimeSpend: data.totalLifetimeSpend || 0,
          redemptionCount: data.redemptionCount || null,
          lastTransactionDate: data.lastTransactionDate,
          firstTransactionDate: data.firstTransactionDate,
          daysSinceFirstPurchase: data.daysSinceFirstPurchase || 0,
          daysSinceLastVisit: data.daysSinceLastVisit || 0
        })
      })
      
      // If no customers were found but we know the count should be > 0, try to create a sample customer
      if (customers.length === 0 && (membership.customerCount || 0) > 0) {
        console.log(`No customers found in Firestore, but count is ${membership.customerCount}. Adding sample customer.`)
        
        // Add a sample customer for demo purposes
        customers.push({
          customerId: "sample-customer-1",
          merchantId: user.uid,
          fullName: "Tom Lidgett",
          membershipTier: membership.name.toLowerCase(),
          pointsBalance: 780,
          lifetimeTransactionCount: 7,
          totalLifetimeSpend: 7,
          redemptionCount: null,
          lastTransactionDate: { seconds: Date.now() / 1000 },
          firstTransactionDate: { seconds: (Date.now() - 86400000) / 1000 },
          daysSinceFirstPurchase: 0,
          daysSinceLastVisit: 0
        })
      }
      
      console.log(`Setting ${customers.length} customers for ${membership.name} tier`, customers)
      
      // Update customers for this specific tier
      setTierCustomers(prev => ({
        ...prev,
        [memberId]: customers
      }))
    } catch (error) {
      console.error("Error loading customers:", error)
      toast({
        title: "Error",
        description: "Failed to load customer data",
        variant: "destructive"
      })
    } finally {
      // Clear loading state for this specific tier
      setLoadingTierCustomers(prev => ({
        ...prev,
        [memberId]: false
      }))
    }
  }
  
  // Add a function to load all customers
  const loadAllCustomers = async () => {
    if (!user?.uid) return
    
    setLoadingAllCustomers(true)
    
    try {
      const customersQuery = query(
        collection(db, 'merchants', user.uid, 'customers')
      )
      
      const snapshot = await getDocs(customersQuery)
      const customers: Customer[] = []
      
      snapshot.forEach(doc => {
        const data = doc.data()
        customers.push({
          customerId: doc.id,
          merchantId: user.uid,
          fullName: data.fullName || 'Unknown Customer',
          membershipTier: data.membershipTier || 'bronze',
          pointsBalance: data.pointsBalance || 0,
          lifetimeTransactionCount: data.lifetimeTransactionCount || 0,
          totalLifetimeSpend: data.totalLifetimeSpend || 0,
          redemptionCount: data.redemptionCount || null,
          lastTransactionDate: data.lastTransactionDate,
          firstTransactionDate: data.firstTransactionDate,
          daysSinceFirstPurchase: data.daysSinceFirstPurchase || 0,
          daysSinceLastVisit: data.daysSinceLastVisit || 0
        })
      })
      
      // If no customers were found, add a sample customer for demo purposes
      if (customers.length === 0) {
        customers.push({
          customerId: "ZU6nlhrzNNgyR3E3OvBOlMXgXur2",
          merchantId: user.uid,
          fullName: "Tom Lidgett",
          membershipTier: "silver",
          pointsBalance: 780,
          lifetimeTransactionCount: 7,
          totalLifetimeSpend: 7,
          redemptionCount: null,
          lastTransactionDate: { seconds: Date.now() / 1000 },
          firstTransactionDate: { seconds: (Date.now() - 86400000) / 1000 },
          daysSinceFirstPurchase: 0,
          daysSinceLastVisit: 0
        })
      }
      
      setAllCustomers(customers)
    } catch (error) {
      console.error("Error loading all customers:", error)
      toast({
        title: "Error",
        description: "Failed to load customer data",
        variant: "destructive"
      })
    } finally {
      setLoadingAllCustomers(false)
    }
  }
  
  // Add this to the existing useEffect to load customers when the component mounts
  useEffect(() => {
    if (!user?.uid) return
    
    // ... existing code ...
    
    // Load all customers
    loadAllCustomers()
    
    // ... existing code ...
  }, [user])
  
  // Add this right before the return statement in the component
  const toggleAllCustomers = () => {
    setShowAllCustomers(prev => !prev)
    if (!showAllCustomers && allCustomers.length === 0) {
      loadAllCustomers()
    }
  }
  
  return (
    <div className="membership-page">
      <div className="container px-6 py-4">
        <PageHeader
          title="Membership Tiers"
          subtitle="Create and manage membership tiers for your customers"
        >
          <Button 
            onClick={handleCreateMembership}
            className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
          >
            <PlusCircle className="h-4 w-4 mr-2" />
            Create Tier
          </Button>
        </PageHeader>
        
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        ) : memberships.length === 0 ? (
          <div className="bg-muted/50 border rounded-md shadow-sm p-8 text-center">
            <Award className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
            <h3 className="text-lg font-medium mb-2">No Membership Tiers</h3>
            <p className="text-muted-foreground mb-4 max-w-md mx-auto">
              Create membership tiers to segment your customers and offer targeted rewards.
            </p>
            <Button 
              onClick={handleCreateMembership}
              className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
            >
              <PlusCircle className="h-4 w-4 mr-2" />
              Create Your First Tier
            </Button>
          </div>
        ) : (
          <>
            <Alert className="mb-6 bg-blue-50 text-blue-800 border-blue-200 rounded-md">
              <Info className="h-4 w-4 text-blue-500" />
              <AlertTitle className="text-blue-800 font-medium">About Membership Tiers</AlertTitle>
              <AlertDescription className="text-blue-700">
                <p>All customers automatically start at the Bronze tier. As they meet the conditions for higher tiers, they will be automatically upgraded.</p>
                <p className="mt-1">The Bronze tier cannot be modified as it is the default starting point for all customers.</p>
              </AlertDescription>
            </Alert>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {memberships.map(membership => {
                const safeMemb = ensureConditionsFormat(membership);
                const isExpanded = expandedTiers[safeMemb.id] || false;
                const customers = tierCustomers[safeMemb.id] || [];
                const isLoading = loadingTierCustomers[safeMemb.id] || false;
                
                return (
                  <div key={safeMemb.id} className="flex flex-col space-y-4">
                    <Card 
                      className={`overflow-hidden rounded-md ${isBronzeTier(safeMemb) ? 'border-blue-200 bg-blue-50/30' : 'border border-gray-200'} flex flex-col h-full shadow-sm`}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            {getMembershipIcon(safeMemb.name)}
                            <div className="flex items-center">
                              <CardTitle>{safeMemb.name}</CardTitle>
                              {isBronzeTier(safeMemb) && (
                                <Badge className="ml-2 bg-blue-100 text-blue-800 border-blue-200 text-xs">
                                  Default
                                </Badge>
                              )}
                            </div>
                          </div>
                          {safeMemb.isActive ? (
                            <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                              Active
                            </Badge>
                          ) : (
                            <Badge variant="outline" className="bg-gray-100 text-gray-700 border-gray-200">
                              Inactive
                            </Badge>
                          )}
                        </div>
                        <CardDescription>{safeMemb.description}</CardDescription>
                      </CardHeader>
                      
                      <CardContent className="flex-grow">
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium">Customers:</span>
                            <div className="flex items-center">
                              <Users className="h-4 w-4 mr-1 text-muted-foreground" />
                              <span>{safeMemb.customerCount || 0}</span>
                            </div>
                          </div>
                          
                          <Separator />
                          
                          <div className="space-y-1">
                            <h4 className="text-sm font-medium mb-2">Requirements:</h4>
                            
                            {safeMemb.conditions && Object.entries(safeMemb.conditions).map(([type, condition]) => {
                              // Only show enabled conditions
                              if (!condition.enabled) return null;
                              
                              return (
                                <div 
                                  key={type} 
                                  className="flex items-center justify-between py-1"
                                >
                                  <div className="flex items-center">
                                    {type === "lifetimeTransactions" ? (
                                      <ShoppingBag className="h-4 w-4 mr-2 text-muted-foreground" />
                                    ) : type === "lifetimeSpend" ? (
                                      <DollarSign className="h-4 w-4 mr-2 text-muted-foreground" />
                                    ) : type === "numberOfRedemptions" ? (
                                      <Award className="h-4 w-4 mr-2 text-muted-foreground" />
                                    ) : (
                                      <Info className="h-4 w-4 mr-2 text-muted-foreground" />
                                    )}
                                    
                                    <span className="text-sm">
                                      {type === "lifetimeTransactions" 
                                        ? "Lifetime Transactions" 
                                        : type === "lifetimeSpend"
                                        ? "Lifetime Spend"
                                        : type === "numberOfRedemptions"
                                        ? "Number of Redemptions"
                                        : type === "daysSinceJoined"
                                        ? "Days Since Joined"
                                        : type === "daysSinceLastVisit"
                                        ? "Days Since Last Visit"
                                        : type === "averageTransactionsPerWeek"
                                        ? "Avg. Transactions Per Week"
                                        : type}
                                    </span>
                                  </div>
                                  
                                  <span className="font-medium">
                                    {type === "lifetimeSpend"
                                      ? `$${condition.value.toFixed(2)}`
                                      : condition.value}
                                  </span>
                                </div>
                              );
                            })}
                            
                            {(!safeMemb.conditions || Object.entries(safeMemb.conditions).filter(([_, c]) => c.enabled).length === 0) && (
                              <div className="text-sm text-muted-foreground py-1">
                                No active conditions
                              </div>
                            )}
                          </div>
                        </div>
                      </CardContent>
                      
                      <CardFooter className="mt-auto pt-2">
                        <div className="flex justify-end items-center gap-2 w-full">
                          {!isDefaultTier(safeMemb) && (
                            <Button 
                              variant="outline" 
                              size="sm" 
                              onClick={() => handleDeleteClick(safeMemb)}
                              className="rounded-md shadow-sm border-0 ring-1 ring-gray-200 hover:bg-gray-50 h-9"
                            >
                              <Trash2 className="h-4 w-4 mr-1" />
                              Delete
                            </Button>
                          )}
                          {!isBronzeTier(safeMemb) && (
                            <>
                              {!safeMemb.isActive && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleEditMembership(safeMemb)}
                                  className="bg-blue-100 hover:bg-blue-200 text-blue-800 border-blue-200 rounded-md shadow-sm h-9 border-0 ring-1 ring-blue-200"
                                >
                                  <PlusCircle className="h-4 w-4 mr-1" />
                                  Set Up Now
                                </Button>
                              )}
                              <Button 
                                variant="default" 
                                size="sm" 
                                onClick={() => handleEditMembership(safeMemb)}
                                className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
                              >
                                <Edit2 className="h-4 w-4 mr-1" />
                                Edit
                              </Button>
                            </>
                          )}
                          {isBronzeTier(safeMemb) && (
                            <div className="text-xs text-blue-600 italic">Default tier – cannot be modified</div>
                          )}
                        </div>
                      </CardFooter>
                    </Card>
                    
                    {/* Customer Table for this tier */}
                    {isExpanded && (
                      <div className="border rounded-md overflow-hidden bg-white col-span-1 shadow-sm">
                        <div className="p-4 bg-slate-50 border-b">
                          <h3 className="text-sm font-medium">{safeMemb.name} Tier Customers</h3>
                        </div>
                        
                        {isLoading ? (
                          <div className="flex items-center justify-center h-40">
                            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                          </div>
                        ) : customers.length === 0 ? (
                          <div className="text-center py-8">
                            <Users className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                            <h3 className="text-lg font-medium mb-2">No Customers</h3>
                            <p className="text-muted-foreground">
                              There are no customers in this membership tier yet.
                            </p>
                          </div>
                        ) : (
                          <div className="overflow-x-auto">
                            <table className="w-full border-collapse rounded-md overflow-hidden">
                              <thead>
                                <tr className="border-b bg-slate-50">
                                  <th className="text-left p-3 text-sm font-medium text-slate-700 first:rounded-tl-md last:rounded-tr-md">Customer</th>
                                  <th className="text-right p-3 text-sm font-medium text-slate-700">Points</th>
                                  <th className="text-right p-3 text-sm font-medium text-slate-700">Transactions</th>
                                  <th className="text-right p-3 text-sm font-medium text-slate-700">Spend</th>
                                  <th className="text-right p-3 text-sm font-medium text-slate-700">Redemptions</th>
                                </tr>
                              </thead>
                              <tbody>
                                {customers.map(customer => (
                                  <tr key={customer.customerId} className="border-b hover:bg-slate-50">
                                    <td className="p-3 text-sm font-medium">{customer.fullName}</td>
                                    <td className="p-3 text-sm text-right">{customer.pointsBalance}</td>
                                    <td className="p-3 text-sm text-right">{customer.lifetimeTransactionCount}</td>
                                    <td className="p-3 text-sm text-right">${customer.totalLifetimeSpend.toFixed(2)}</td>
                                    <td className="p-3 text-sm text-right">{customer.redemptionCount ?? 'None'}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            
            {/* Add this after the membership grid and before the All Customers section */}
            <div className="mt-12">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* Bronze Tier Table */}
                <Card className="overflow-hidden rounded-md border border-gray-200 shadow-sm">
                  <CardHeader className="pb-3 bg-slate-50 border-b">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        {getMembershipIcon('bronze')}
                        <CardTitle className="ml-2">Bronze Customers</CardTitle>
                      </div>
                      <Button 
                        size="sm" 
                        onClick={() => {
                          setSelectedTierForReward("bronze")
                          setIsCreateRewardOpen(true)
                        }}
                        className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
                      >
                        <PlusCircle className="h-4 w-4 mr-1" />
                        Create Reward
                      </Button>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="p-0">
                    {loadingAllCustomers ? (
                      <div className="flex items-center justify-center h-40">
                        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse rounded-md overflow-hidden">
                          <thead>
                            <tr className="border-b bg-slate-50">
                              <th className="text-center p-3 text-sm font-medium text-slate-700 first:rounded-tl-md last:rounded-tr-md">Customer</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Transactions</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Spend</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Redemptions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {allCustomers
                              .filter(customer => customer.membershipTier.toLowerCase() === 'bronze')
                              .slice(0, 5)
                              .map(customer => (
                                <tr key={customer.customerId} className="border-b hover:bg-slate-50">
                                  <td className="p-3 text-sm font-medium text-center">{customer.fullName}</td>
                                  <td className="p-3 text-sm text-center">{customer.lifetimeTransactionCount}</td>
                                  <td className="p-3 text-sm text-center">${customer.totalLifetimeSpend.toFixed(2)}</td>
                                  <td className="p-3 text-sm text-center">{customer.redemptionCount ?? 0}</td>
                                </tr>
                              ))}
                            {allCustomers.filter(customer => customer.membershipTier.toLowerCase() === 'bronze').length === 0 && (
                              <tr>
                                <td colSpan={4} className="p-3 text-sm text-center text-muted-foreground">
                                  No customers in Bronze tier
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </CardContent>
                </Card>
                
                {/* Silver Tier Table */}
                <Card className="overflow-hidden rounded-md border border-gray-200 shadow-sm">
                  <CardHeader className="pb-3 bg-slate-50 border-b">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        {getMembershipIcon('silver')}
                        <CardTitle className="ml-2">Silver Customers</CardTitle>
                      </div>
                      <Button 
                        size="sm" 
                        onClick={() => {
                          setSelectedTierForReward("silver")
                          setIsCreateRewardOpen(true)
                        }}
                        className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
                      >
                        <PlusCircle className="h-4 w-4 mr-1" />
                        Create Reward
                      </Button>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="p-0">
                    {loadingAllCustomers ? (
                      <div className="flex items-center justify-center h-40">
                        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse rounded-md overflow-hidden">
                          <thead>
                            <tr className="border-b bg-slate-50">
                              <th className="text-center p-3 text-sm font-medium text-slate-700 first:rounded-tl-md last:rounded-tr-md">Customer</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Transactions</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Spend</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Redemptions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {allCustomers
                              .filter(customer => customer.membershipTier.toLowerCase() === 'silver')
                              .slice(0, 5)
                              .map(customer => (
                                <tr key={customer.customerId} className="border-b hover:bg-slate-50">
                                  <td className="p-3 text-sm font-medium text-center">{customer.fullName}</td>
                                  <td className="p-3 text-sm text-center">{customer.lifetimeTransactionCount}</td>
                                  <td className="p-3 text-sm text-center">${customer.totalLifetimeSpend.toFixed(2)}</td>
                                  <td className="p-3 text-sm text-center">{customer.redemptionCount ?? 0}</td>
                                </tr>
                              ))}
                            {allCustomers.filter(customer => customer.membershipTier.toLowerCase() === 'silver').length === 0 && (
                              <tr>
                                <td colSpan={4} className="p-3 text-sm text-center text-muted-foreground">
                                  No customers in Silver tier
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </CardContent>
                </Card>
                
                {/* Gold Tier Table */}
                <Card className="overflow-hidden rounded-md border border-gray-200 shadow-sm">
                  <CardHeader className="pb-3 bg-slate-50 border-b">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        {getMembershipIcon('gold')}
                        <CardTitle className="ml-2">Gold Customers</CardTitle>
                      </div>
                      <Button 
                        size="sm" 
                        onClick={() => {
                          setSelectedTierForReward("gold")
                          setIsCreateRewardOpen(true)
                        }}
                        className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
                      >
                        <PlusCircle className="h-4 w-4 mr-1" />
                        Create Reward
                      </Button>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="p-0">
                    {loadingAllCustomers ? (
                      <div className="flex items-center justify-center h-40">
                        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse rounded-md overflow-hidden">
                          <thead>
                            <tr className="border-b bg-slate-50">
                              <th className="text-center p-3 text-sm font-medium text-slate-700 first:rounded-tl-md last:rounded-tr-md">Customer</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Transactions</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Spend</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Redemptions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {allCustomers
                              .filter(customer => customer.membershipTier.toLowerCase() === 'gold')
                              .slice(0, 5)
                              .map(customer => (
                                <tr key={customer.customerId} className="border-b hover:bg-slate-50">
                                  <td className="p-3 text-sm font-medium text-center">{customer.fullName}</td>
                                  <td className="p-3 text-sm text-center">{customer.lifetimeTransactionCount}</td>
                                  <td className="p-3 text-sm text-center">${customer.totalLifetimeSpend.toFixed(2)}</td>
                                  <td className="p-3 text-sm text-center">{customer.redemptionCount ?? 0}</td>
                                </tr>
                              ))}
                            {allCustomers.filter(customer => customer.membershipTier.toLowerCase() === 'gold').length === 0 && (
                              <tr>
                                <td colSpan={4} className="p-3 text-sm text-center text-muted-foreground">
                                  No customers in Gold tier
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
            
            {/* All Customers Table */}
            <div className="mt-12">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold">All Customers</h2>
                <Button 
                  variant="outline" 
                  onClick={toggleAllCustomers}
                  className="text-blue-600 border-blue-200 hover:bg-blue-50 rounded-md shadow-sm h-9 border-0 ring-1 ring-blue-200"
                >
                  <Users className="h-4 w-4 mr-2" />
                  {showAllCustomers ? "Hide" : "Show"} All Customers
                </Button>
              </div>
              
              {showAllCustomers && (
                <Card className="overflow-hidden rounded-md border border-gray-200 shadow-sm">
                  <CardHeader className="pb-3 bg-slate-50 border-b">
                    <CardTitle>Customer List</CardTitle>
                    <CardDescription>
                      All customers registered with your store
                    </CardDescription>
                  </CardHeader>
                  
                  <CardContent className="p-0">
                    {loadingAllCustomers ? (
                      <div className="flex items-center justify-center h-40">
                        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                      </div>
                    ) : allCustomers.length === 0 ? (
                      <div className="text-center py-8">
                        <Users className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                        <h3 className="text-lg font-medium mb-2">No Customers</h3>
                        <p className="text-muted-foreground">
                          You don't have any customers yet.
                        </p>
                      </div>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse rounded-md overflow-hidden">
                          <thead>
                            <tr className="border-b bg-slate-50">
                              <th className="text-center p-3 text-sm font-medium text-slate-700 first:rounded-tl-md last:rounded-tr-md">Customer ID</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Customer Name</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Membership Tier</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Points</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Transactions</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Lifetime Spend</th>
                              <th className="text-center p-3 text-sm font-medium text-slate-700">Redemptions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {allCustomers.map(customer => (
                              <tr key={customer.customerId} className="border-b hover:bg-slate-50">
                                <td className="p-3 text-sm text-center">{customer.customerId}</td>
                                <td className="p-3 text-sm font-medium text-center">{customer.fullName}</td>
                                <td className="p-3 text-sm text-center">
                                  <div className="flex items-center justify-center">
                                    {getMembershipIcon(customer.membershipTier)}
                                    <span className="ml-2 capitalize">{customer.membershipTier}</span>
                                  </div>
                                </td>
                                <td className="p-3 text-sm text-center">{customer.pointsBalance}</td>
                                <td className="p-3 text-sm text-center">{customer.lifetimeTransactionCount}</td>
                                <td className="p-3 text-sm text-center">${customer.totalLifetimeSpend.toFixed(2)}</td>
                                <td className="p-3 text-sm text-center">{customer.redemptionCount ?? 0}</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )}
            </div>
          </>
        )}
        
        {/* Create/Edit Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-md max-h-[97vh] overflow-y-auto rounded-md border-0 shadow-lg">
            <DialogHeader>
              <DialogTitle>
                {selectedMembership ? `Edit ${selectedMembership.name}` : "Create Membership Tier"}
              </DialogTitle>
              <DialogDescription>
                Set the conditions that customers must meet to qualify for this tier
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="name">Tier Name</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="e.g. Gold"
                  className="rounded-md"
                />
                {!!selectedMembership && ['silver', 'gold'].includes(selectedMembership.name.toLowerCase()) && (
                  <p className="text-xs text-muted-foreground mt-1">Default tier names cannot be changed</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Input
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="e.g. Top tier customers"
                  className="rounded-md"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="isActive" className="cursor-pointer">Active Status</Label>
                  {formData.name.toLowerCase() === 'gold' && (
                    <p className="text-xs text-muted-foreground mt-1">Gold cannot be active if Silver is inactive</p>
                  )}
                </div>
                <Switch 
                  id="isActive" 
                  checked={formData.isActive} 
                  onCheckedChange={(checked) => setFormData({...formData, isActive: checked})}
                />
              </div>
              
              <Separator />
              
              <div>
                <h3 className="text-sm font-medium mb-3">Qualification Requirements</h3>
                <div className="space-y-4">
                  {/* Lifetime Transactions */}
                  <div className="space-y-2 border rounded-md p-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <ShoppingBag className="h-4 w-4 mr-2 text-muted-foreground" />
                        <Label htmlFor="lifetimeTransactions">Lifetime Transactions</Label>
                      </div>
                      <Switch 
                        id="lifetimeTransactionsEnabled" 
                        checked={conditionSettings.lifetimeTransactions.enabled} 
                        onCheckedChange={(checked) => handleConditionSettingChange("lifetimeTransactions", "enabled", checked)}
                        className="rounded-full"
                      />
                    </div>
                    
                    {conditionSettings.lifetimeTransactions.enabled && (
                      <div className="pt-2">
                        <Input
                          id="lifetimeTransactions"
                          type="number"
                          min="0"
                          value={conditionSettings.lifetimeTransactions.value}
                          onChange={(e) => handleConditionSettingChange('lifetimeTransactions', 'value', parseInt(e.target.value))}
                          disabled={!conditionSettings.lifetimeTransactions.enabled}
                          className="rounded-md"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Customer qualifies after this many completed transactions
                        </p>
                      </div>
                    )}
                  </div>
                  
                  {/* Lifetime Spend */}
                  <div className="space-y-2 border rounded-md p-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <DollarSign className="h-4 w-4 mr-2 text-muted-foreground" />
                        <Label htmlFor="lifetimeSpend">Lifetime Spend</Label>
                      </div>
                      <Switch 
                        id="lifetimeSpendEnabled" 
                        checked={conditionSettings.lifetimeSpend.enabled} 
                        onCheckedChange={(checked) => handleConditionSettingChange("lifetimeSpend", "enabled", checked)}
                        className="rounded-full"
                      />
                    </div>
                    
                    {conditionSettings.lifetimeSpend.enabled && (
                      <div className="pt-2">
                        <Input
                          id="lifetimeSpend"
                          type="number"
                          min="0"
                          value={conditionSettings.lifetimeSpend.value}
                          onChange={(e) => handleConditionSettingChange('lifetimeSpend', 'value', parseInt(e.target.value))}
                          disabled={!conditionSettings.lifetimeSpend.enabled}
                          className="rounded-md"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Customer qualifies after spending this amount
                        </p>
                      </div>
                    )}
                  </div>
                  
                  {/* Number of Redemptions */}
                  <div className="space-y-2 border rounded-md p-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Award className="h-4 w-4 mr-2 text-muted-foreground" />
                        <Label htmlFor="numberOfRedemptions">Number of Redemptions</Label>
                      </div>
                      <Switch 
                        id="numberOfRedemptionsEnabled" 
                        checked={conditionSettings.numberOfRedemptions.enabled} 
                        onCheckedChange={(checked) => handleConditionSettingChange("numberOfRedemptions", "enabled", checked)}
                        className="rounded-full"
                      />
                    </div>
                    
                    {conditionSettings.numberOfRedemptions.enabled && (
                      <div className="pt-2">
                        <Input
                          id="numberOfRedemptions"
                          type="number"
                          min="0"
                          value={conditionSettings.numberOfRedemptions.value}
                          onChange={(e) => handleConditionSettingChange('numberOfRedemptions', 'value', parseInt(e.target.value))}
                          disabled={!conditionSettings.numberOfRedemptions.enabled}
                          className="rounded-md"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Customer qualifies after redeeming this many rewards
                        </p>
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="mt-3 text-xs text-muted-foreground">
                  <div className="flex items-center">
                    <Info className="h-3 w-3 mr-1" />
                    <span>Customers only need to meet ONE of the enabled conditions to qualify</span>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter>
              <Button 
                variant="outline" 
                onClick={() => setIsEditDialogOpen(false)}
                className="rounded-md shadow-sm border-0 ring-1 ring-gray-200 hover:bg-gray-50 h-9"
              >
                Cancel
              </Button>
              <Button 
                type="submit" 
                onClick={handleSaveMembership}
                className="bg-[#007AFF] hover:bg-[#0071e3] text-white rounded-md shadow-sm h-9"
              >
                {selectedMembership ? "Save Changes" : "Create Tier"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
        
        {/* Delete Confirmation Dialog */}
        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
          <DialogContent className="sm:max-w-md max-h-[97vh] overflow-y-auto rounded-md border-0 shadow-lg">
            <DialogHeader>
              <DialogTitle>Delete Membership Tier</DialogTitle>
              <DialogDescription>
                Are you sure you want to delete the {selectedMembership?.name} membership tier?
                This action cannot be undone.
              </DialogDescription>
            </DialogHeader>
            
            {selectedMembership?.customerCount && selectedMembership.customerCount > 0 ? (
              <Alert variant="destructive" className="rounded-md">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Cannot Delete</AlertTitle>
                <AlertDescription>
                  This membership tier has {selectedMembership.customerCount} customers assigned to it.
                  You need to update these customers to a different tier first.
                </AlertDescription>
              </Alert>
            ) : (
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}
                  className="rounded-md shadow-sm border-0 ring-1 ring-gray-200 hover:bg-gray-50 h-9"
                >
                  Cancel
                </Button>
                <Button 
                  variant="destructive" 
                  onClick={handleDeleteMembership}
                  className="rounded-md shadow-sm h-9"
                >
                  Delete
                </Button>
              </DialogFooter>
            )}
          </DialogContent>
        </Dialog>
        
        {/* CreateRewardDialog */}
        <CreateRewardDialog
          open={isCreateRewardOpen}
          onOpenChange={setIsCreateRewardOpen}
          defaultValues={{
            rewardName: "",
            description: "",
            pointsCost: "100",
            isActive: true,
            type: "discount",
            rewardVisibility: "all",
            conditions: {
              useMembershipRequirements: true,
              membershipLevel: selectedTierForReward
            },
            specificCustomerIds: [],
            specificCustomerNames: []
          }}
        />
      </div>
    </div>
  )
} "use client"

import { useState, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import { db } from "@/lib/firebase"
import { doc, getDoc, collection, getDocs, query, where, updateDoc } from "firebase/firestore"
import { useAuth } from "@/contexts/auth-context"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Calendar, Clock, Zap, Users, Tag, DollarSign, User, Hash, Edit } from "lucide-react"
import { formatDate } from "@/lib/date-utils"
import { cn } from "@/lib/utils"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { Switch } from "@/components/ui/switch"

interface PointsRuleDetails {
  id: string
  name: string
  active: boolean
  pointsmultiplier: number
  usageCount: number
  createdAt: any
  conditions: Array<{
    type: string
    startTime?: any
    endTime?: any
    days?: string[]
    amount?: number
  }>
}

interface PointsTransaction {
  id: string
  amount: number
  createdAt: Date
  customerId: string
  day: string
  firstPurchase: boolean
  fullName: string
  pointsBalance: number
  pointsEarned: number
  transactionId: string
}

export default function PointsRuleDetailsPage() {
  const router = useRouter()
  const { id } = useParams()
  const { user } = useAuth()
  const [rule, setRule] = useState<PointsRuleDetails | null>(null)
  const [loading, setLoading] = useState(true)
  const [transactions, setTransactions] = useState<PointsTransaction[]>([])
  const [transactionsLoading, setTransactionsLoading] = useState(true)

  // Move getDateSafely outside of useEffect so it can be used throughout the component
  const getDateSafely = (dateField: any): Date => {
    if (!dateField) return new Date();
    
    // If it's a Firestore timestamp with toDate method
    if (dateField && typeof dateField.toDate === 'function') {
      return dateField.toDate();
    }
    
    // If it's a string or number timestamp
    if (typeof dateField === 'string' || typeof dateField === 'number') {
      const date = new Date(dateField);
      return isNaN(date.getTime()) ? new Date() : date;
    }
    
    // If it's a seconds-based Firestore timestamp
    if (dateField.seconds) {
      return new Date(dateField.seconds * 1000);
    }
    
    return new Date();
  };

  useEffect(() => {
    const fetchRuleDetails = async () => {
      if (!user?.uid || !id) return
      
      try {
        setLoading(true)
        const ruleRef = doc(db, 'merchants', user.uid, 'pointsRules', id as string)
        const ruleDoc = await getDoc(ruleRef)
        
        if (ruleDoc.exists()) {
          const data = ruleDoc.data()
          
          setRule({
            id: ruleDoc.id,
            name: data.name || 'Unnamed Rule',
            active: data.active || false,
            pointsmultiplier: data.pointsmultiplier || 1,
            usageCount: data.usageCount || 0,
            createdAt: getDateSafely(data.createdAt),
            conditions: data.conditions || []
          })
        } else {
          console.error("Rule not found")
        }
      } catch (error) {
        console.error("Error fetching rule details:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchRuleDetails()
  }, [user?.uid, id])

  useEffect(() => {
    const fetchTransactions = async () => {
      if (!user?.uid || !id) return
      
      try {
        setTransactionsLoading(true)
        
        // Use the correct collection path
        const transactionsRef = collection(db, 'merchants', user.uid, 'pointsRules', id as string, 'transactions')
        const q = query(transactionsRef)
        const querySnapshot = await getDocs(q)
        
        const fetchedTransactions: PointsTransaction[] = []
        
        querySnapshot.forEach((doc) => {
          const data = doc.data()
          
          fetchedTransactions.push({
            id: doc.id,
            amount: data.amount || 0,
            createdAt: getDateSafely(data.createdAt),
            customerId: data.customerId || '',
            day: data.day || '',
            firstPurchase: data.firstPurchase || false,
            fullName: data.fullName || 'Unknown Customer',
            pointsBalance: data.pointsBalance || 0,
            pointsEarned: data.pointsEarned || rule?.pointsmultiplier || 0,
            transactionId: data.transactionId || ''
          })
        })
        
        // Keep the mock data for testing
        if (fetchedTransactions.length === 0 && rule) {
          console.log("No transactions found, adding mock data")
          
          // Add mock transactions
          fetchedTransactions.push({
            id: "mock1",
            amount: 1,
            createdAt: new Date(2025, 2, 25, 13, 23, 50),
            customerId: "UcBXS4424XZrFmIdPQ8OTiv04uw1",
            day: "tuesday",
            firstPurchase: false,
            fullName: "Tom Lidgett",
            pointsBalance: 4055,
            pointsEarned: 150,
            transactionId: "SPALGsH09FiMwQQAabyc"
          })
          
          // Add more mock transactions
          fetchedTransactions.push({
            id: "mock2",
            amount: 25.99,
            createdAt: new Date(2025, 2, 20),
            customerId: "customer123",
            day: "monday",
            firstPurchase: true,
            fullName: "Jane Smith",
            pointsBalance: 260,
            pointsEarned: rule.pointsmultiplier,
            transactionId: "TX123456789"
          })
          
          fetchedTransactions.push({
            id: "mock3",
            amount: 42.50,
            createdAt: new Date(2025, 2, 15),
            customerId: "customer456",
            day: "friday",
            firstPurchase: false,
            fullName: "John Doe",
            pointsBalance: 875,
            pointsEarned: rule.pointsmultiplier,
            transactionId: "TX987654321"
          })
        }
        
        setTransactions(fetchedTransactions)
      } catch (error) {
        console.error("Error fetching transactions:", error)
      } finally {
        setTransactionsLoading(false)
      }
    }
    
    fetchTransactions()
  }, [user?.uid, id, rule])

  const toggleActive = async () => {
    if (!user?.uid || !id || !rule) return
    
    try {
      const ruleRef = doc(db, 'merchants', user.uid, 'pointsRules', id as string)
      await updateDoc(ruleRef, {
        active: !rule.active
      })
      
      // Update local state
      setRule({
        ...rule,
        active: !rule.active
      })
      
    } catch (error) {
      console.error("Error updating rule status:", error)
    }
  }

  // Update the safeFormatDate function to handle time-only formatting
  const safeFormatDate = (dateValue: any, showTime: boolean = false, timeOnly: boolean = false): string => {
    try {
      // If null or undefined, return placeholder
      if (!dateValue) return 'Not set';
      
      // Get a valid Date object
      let date: Date;
      
      // Handle Firestore timestamp
      if (dateValue && typeof dateValue.toDate === 'function') {
        date = dateValue.toDate();
      }
      // Handle seconds-based timestamp
      else if (dateValue.seconds) {
        date = new Date(dateValue.seconds * 1000);
      }
      // Handle Date object
      else if (dateValue instanceof Date) {
        date = dateValue;
      }
      // Handle string or number
      else if (typeof dateValue === 'string' || typeof dateValue === 'number') {
        date = new Date(dateValue);
        if (isNaN(date.getTime())) {
          return 'Invalid date';
        }
      }
      // If we couldn't parse it, return placeholder
      else {
        return 'Invalid date format';
      }
      
      // For time-only format (e.g., "7 AM" or "3 PM")
      if (timeOnly) {
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const hour = hours % 12 || 12; // Convert to 12-hour format
        return `${hour}:${minutes.toString().padStart(2, '0')} ${ampm}`;
      }
      
      // Format the date
      const options: Intl.DateTimeFormatOptions = {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      };
      
      if (showTime) {
        options.hour = 'numeric';
        options.minute = 'numeric';
        options.hour12 = true;
      }
      
      return new Intl.DateTimeFormat('en-US', options).format(date);
    } catch (error) {
      console.error('Error formatting date:', error);
      return 'Invalid date';
    }
  };

  if (loading) {
    return <div className="p-8 text-center">Loading rule details...</div>
  }
  
  if (!rule) {
    return <div className="p-8 text-center">Rule not found</div>
  }

  return (
    <div className="min-h-screen bg-gray-50/50">
      {/* Top Navigation */}
      <div className="sticky top-0 z-10 bg-white border-b">
        <div className="container max-w-6xl py-4">
          <div className="flex items-center justify-between">
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => router.push('/store/points-rules')}
              className="gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              Back
            </Button>

            <div className="flex items-center gap-2">
              <Badge 
                variant="outline" 
                className={cn(
                  "rounded-md h-8 px-3 flex items-center",
                  rule.active ? 
                    "bg-green-50 text-green-700 border-green-200" : 
                    "bg-gray-100 text-gray-700 border-gray-200"
                )}
              >
                {rule.active ? "Active" : "Inactive"}
              </Badge>
              <Button 
                size="sm" 
                variant="outline"
                className="gap-2" 
                onClick={toggleActive}
              >
                <Clock className="h-4 w-4" />
                {rule.active ? "Deactivate" : "Activate"}
              </Button>
              <Button 
                size="sm" 
                className="gap-2" 
                onClick={() => router.push(`/store/rules/${id}/edit`)}
              >
                <Edit className="h-4 w-4" />
                Edit
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container max-w-6xl py-8 space-y-6">
        {/* Hero Section */}
        <div className="bg-white rounded-md border shadow-sm p-6">
          <div className="flex items-start justify-between">
            <div className="space-y-1">
              <h1 className="text-2xl font-semibold">{rule.name}</h1>
              <p className="text-gray-500">Created: {safeFormatDate(rule.createdAt)}</p>
            </div>
            <div className="px-6 py-3 rounded-md text-center">
              <div className="text-2xl font-bold text-[#007AFF]">{rule.pointsmultiplier}x</div>
              <div className="text-sm text-gray-500">multiplier</div>
            </div>
          </div>
        </div>

        {/* Rest of the content */}
        <div className="grid gap-6 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Rule Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground">Points Multiplier</p>
                  <div className="flex items-center mt-1">
                    <Zap className="h-4 w-4 text-blue-600 mr-1" />
                    <span className="font-medium">{rule.pointsmultiplier}x</span>
                  </div>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Usage Count</p>
                  <p className="font-medium mt-1">{rule.usageCount}</p>
                </div>
              </div>
              
              <Separator />
              
              <div>
                <p className="text-sm text-muted-foreground">Status</p>
                <div className="flex items-center mt-1">
                  <Badge 
                    variant="outline" 
                    className={cn(
                      "rounded-md",
                      rule.active ? "bg-green-50 text-green-700 border-green-200" : "bg-gray-50 text-gray-700 border-gray-200"
                    )}
                  >
                    {rule.active ? "Active" : "Inactive"}
                  </Badge>
                </div>
              </div>
              
              <Separator />
              
              <div>
                <p className="text-sm text-muted-foreground">Created</p>
                <div className="flex items-center mt-1">
                  <Calendar className="h-4 w-4 mr-1" />
                  <span>{safeFormatDate(rule.createdAt)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Conditions</CardTitle>
              <CardDescription>Requirements for this points rule</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {rule.conditions && rule.conditions.length > 0 ? (
                <>
                  {rule.conditions.map((condition, index) => (
                    <div key={index} className="p-3 border rounded-md">
                      {condition.type === "timeOfDay" && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium">Time Restriction</p>
                          <div className="grid grid-cols-2 gap-2">
                            <div>
                              <p className="text-xs text-muted-foreground">Start Time</p>
                              <p className="text-sm">{safeFormatDate(condition.startTime, false, true)}</p>
                            </div>
                            <div>
                              <p className="text-xs text-muted-foreground">End Time</p>
                              <p className="text-sm">{safeFormatDate(condition.endTime, false, true)}</p>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {condition.type === "minimumSpend" && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium">Minimum Spend</p>
                          <p className="text-sm">${condition.amount}</p>
                        </div>
                      )}
                      
                      {condition.type === "daysOfWeek" && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium">Day Restrictions</p>
                          <div className="flex flex-wrap gap-1">
                            {condition.days?.map((day, i) => (
                              <Badge key={i} variant="outline" className="capitalize">
                                {day}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {condition.type === "firstPurchase" && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium">First Purchase Only</p>
                          <p className="text-sm text-muted-foreground">This rule applies only to a customer's first purchase</p>
                        </div>
                      )}
                      
                      {condition.type === "visitNumber" && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium">Visit Number</p>
                          <p className="text-sm">Applies on visit #{condition.number}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </>
              ) : (
                <p className="text-muted-foreground">No conditions set for this rule</p>
              )}
            </CardContent>
          </Card>
        </div>
        
        <div className="mt-8">
          <h2 className="text-xl font-semibold mb-4">Transactions</h2>
          <Card>
            <CardHeader>
              <CardTitle>Rule Usage History</CardTitle>
              <CardDescription>
                Transactions where this points rule was applied
              </CardDescription>
            </CardHeader>
            <CardContent>
              {transactionsLoading ? (
                <div className="h-24 flex items-center justify-center">
                  <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent"></div>
                </div>
              ) : transactions.length === 0 ? (
                <div className="text-center py-8">
                  <div className="mx-auto h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                    <Calendar className="h-6 w-6 text-muted-foreground" />
                  </div>
                  <h3 className="mt-4 text-lg font-medium">No transactions found</h3>
                  <p className="text-sm text-muted-foreground mt-1">
                    This rule hasn't been used in any transactions yet.
                  </p>
                </div>
              ) : (
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Customer</TableHead>
                        <TableHead>Transaction ID</TableHead>
                        <TableHead className="text-right">Amount</TableHead>
                        <TableHead className="text-right">Points Earned</TableHead>
                        <TableHead className="text-right">Points Balance</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {transactions.map((transaction) => (
                        <TableRow key={transaction.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4 text-muted-foreground" />
                              <span>{safeFormatDate(transaction.createdAt)}</span>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-muted-foreground" />
                              <span>{transaction.fullName}</span>
                              {transaction.firstPurchase && (
                                <Badge variant="outline" className="ml-2 bg-blue-50 text-blue-700 border-blue-200">
                                  First Purchase
                                </Badge>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Hash className="h-4 w-4 text-muted-foreground" />
                              <span className="font-mono text-xs">{transaction.transactionId.substring(0, 12)}...</span>
                            </div>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex items-center justify-end gap-1">
                              <DollarSign className="h-4 w-4 text-muted-foreground" />
                              <span>{transaction.amount.toFixed(2)}</span>
                            </div>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex items-center justify-end gap-1">
                              <Zap className="h-4 w-4 text-blue-600" />
                              <span>{transaction.pointsEarned}</span>
                            </div>
                          </TableCell>
                          <TableCell className="text-right font-medium">
                            {transaction.pointsBalance}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
} "use client"

import { useState, useEffect, useMemo } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, query, getDocs, orderBy, limit, where, doc, getDoc } from "firebase/firestore"
import { format, formatDistanceToNow } from "date-fns"
import Link from "next/link"

// UI Components
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"

// Icons
import { 
  BarChart, 
  Gift, 
  Users, 
  PlusCircle,
  ShoppingBag,
  Clock,
  Settings,
  Sparkles,
  Image,
  MessageSquare,
  Zap,
  BellRing,
  Package,
  MoreVertical,
  Eye,
  CheckCircle,
  XCircle,
  RefreshCw,
  ArrowRight,
  ExternalLink,
  Calendar,
  ChevronRight,
  DollarSign,
  Activity,
  Search,
  Loader2,
  Tag,
  Download
} from "lucide-react"

// Component interfaces
interface Reward {
  id: string;
  rewardName?: string;
  name?: string;
  description: string;
  pointsCost: number;
  status: string;
  createdAt: any;
  expiryDate?: any;
  redemptionCount?: number;
  viewCount?: number;
  isAgentGenerated?: boolean;
  programtype?: string;
}

interface Banner {
  id: string;
  title: string;
  description?: string;
  imageUrl: string;
  status: string;
  createdAt: any;
  expiryDate?: any;
  clickCount?: number;
  viewCount?: number;
  isAgentGenerated?: boolean;
}

interface PointsRule {
  id: string;
  name: string;
  description?: string;
  pointsAmount: number;
  condition: string;
  status: string;
  createdAt: any;
  triggeredCount?: number;
}

interface Message {
  id: string;
  title: string;
  content: string;
  sent: boolean;
  sentAt?: any;
  recipients: number;
  openRate?: number;
}

interface Notification {
  id: string;
  title: string;
  body: string;
  sent: boolean;
  sentAt?: any;
  recipients: number;
  clickRate?: number;
}

interface InventorySync {
  lastSynced: any;
  source: string;
  totalItems: number;
  status: string;
}

// Add Square catalog object interface
interface SquareCatalogObject {
  type: string
  id: string
  updated_at: string
  version: number
  is_deleted: boolean
  present_at_all_locations: boolean
  category_data?: {
    name: string
  }
  item_data?: {
    name: string
    description?: string
    category_id?: string
    variations?: SquareCatalogObject[]
  }
  item_variation_data?: {
    item_id: string
    name: string
    price_money?: {
      amount: number
      currency: string
    }
    sku?: string
    ordinal?: number
    pricing_type?: string
    available?: boolean
  }
}

// Add interface for inventory count
interface InventoryCount {
  catalogObjectId: string;
  quantity: string;
  state: string;
  locationId: string;
  updatedAt: string;
}

// Add a gradient text component for Tap Agent branding
const GradientText = ({ children }: { children: React.ReactNode }) => {
  return (
    <span className="bg-gradient-to-r from-blue-500 to-orange-500 bg-clip-text text-transparent font-semibold">
      {children}
    </span>
  );
};

export default function StoreOverviewPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [loading, setLoading] = useState(true)
  
  // State for different data sections
  const [rewards, setRewards] = useState<Reward[]>([])
  const [banners, setBanners] = useState<Banner[]>([])
  const [pointsRules, setPointsRules] = useState<PointsRule[]>([])
  const [messages, setMessages] = useState<Message[]>([])
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [inventorySync, setInventorySync] = useState<InventorySync | null>(null)
  
  // Add state for inventory data
  const [inventoryItems, setInventoryItems] = useState<SquareCatalogObject[]>([])
  const [categories, setCategories] = useState<Record<string, string>>({})
  const [inventoryCounts, setInventoryCounts] = useState<Record<string, InventoryCount>>({})
  const [inventorySearchQuery, setInventorySearchQuery] = useState("")
  const [isSquareConnected, setIsSquareConnected] = useState(false)
  const [refreshingInventory, setRefreshingInventory] = useState(false)
  const [loadingInventory, setLoadingInventory] = useState(true)
  
  // Fetch data on component mount
  useEffect(() => {
    if (user?.uid) {
      Promise.all([
        fetchRewards(),
        fetchBanners(),
        fetchPointsRules(),
        fetchMessages(),
        fetchNotifications(),
        fetchInventoryStatus(),
        fetchInventoryItems()
      ]).finally(() => {
        setLoading(false)
      })
    }
  }, [user])
  
  // Data fetching functions
  const fetchRewards = async () => {
    if (!user?.uid) return
    
    try {
      const rewardsRef = collection(db, 'merchants', user.uid, 'rewards')
      const rewardsQuery = query(rewardsRef, orderBy('createdAt', 'desc'))
      const rewardsSnapshot = await getDocs(rewardsQuery)
      
      const fetchedRewards = rewardsSnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          id: doc.id,
          rewardName: data.rewardName || data.name || 'Unnamed Reward',
          description: data.description || '',
          pointsCost: data.pointsCost || 0,
          status: data.status || 'active',
          createdAt: data.createdAt,
          expiryDate: data.expiryDate,
          redemptionCount: data.redemptionCount || 0,
          viewCount: data.viewCount || 0,
          isAgentGenerated: data.isAgentGenerated || false,
          programtype: data.programtype || ''
        }
      })
      
      setRewards(fetchedRewards)
    } catch (error) {
      console.error("Error fetching rewards:", error)
    }
  }
  
  const fetchBanners = async () => {
    if (!user?.uid) return
    
    try {
      const bannersRef = collection(db, 'merchants', user.uid, 'banners')
      const bannersQuery = query(bannersRef, orderBy('createdAt', 'desc'))
      const bannersSnapshot = await getDocs(bannersQuery)
      
      const fetchedBanners = bannersSnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          id: doc.id,
          title: data.title || 'Unnamed Banner',
          description: data.description || '',
          imageUrl: data.imageUrl || '',
          status: data.status || 'active',
          createdAt: data.createdAt,
          expiryDate: data.expiryDate,
          clickCount: data.clickCount || 0,
          viewCount: data.viewCount || 0,
          isAgentGenerated: data.isAgentGenerated || false
        }
      })
      
      setBanners(fetchedBanners)
    } catch (error) {
      console.error("Error fetching banners:", error)
    }
  }
  
  const fetchPointsRules = async () => {
    if (!user?.uid) return
    
    try {
      const rulesRef = collection(db, 'merchants', user.uid, 'pointsRules')
      const rulesQuery = query(rulesRef, orderBy('createdAt', 'desc'))
      const rulesSnapshot = await getDocs(rulesQuery)
      
      const fetchedRules = rulesSnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          id: doc.id,
          name: data.name || 'Unnamed Rule',
          description: data.description || '',
          pointsAmount: data.pointsAmount || 0,
          condition: data.condition || '',
          status: data.status || 'active',
          createdAt: data.createdAt,
          triggeredCount: data.triggeredCount || 0
        }
      })
      
      setPointsRules(fetchedRules)
    } catch (error) {
      console.error("Error fetching points rules:", error)
    }
  }
  
  const fetchMessages = async () => {
    if (!user?.uid) return
    
    try {
      const messagesRef = collection(db, 'merchants', user.uid, 'messages')
      const messagesQuery = query(messagesRef, orderBy('createdAt', 'desc'), limit(5))
      const messagesSnapshot = await getDocs(messagesQuery)
      
      const fetchedMessages = messagesSnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          id: doc.id,
          title: data.title || 'Unnamed Message',
          content: data.content || '',
          sent: data.sent || false,
          sentAt: data.sentAt,
          recipients: data.recipients || 0,
          openRate: data.openRate || 0
        }
      })
      
      setMessages(fetchedMessages)
    } catch (error) {
      console.error("Error fetching messages:", error)
    }
  }
  
  const fetchNotifications = async () => {
    if (!user?.uid) return
    
    try {
      const notificationsRef = collection(db, 'merchants', user.uid, 'notifications')
      const notificationsQuery = query(notificationsRef, orderBy('createdAt', 'desc'), limit(5))
      const notificationsSnapshot = await getDocs(notificationsQuery)
      
      const fetchedNotifications = notificationsSnapshot.docs.map(doc => {
        const data = doc.data()
        return {
          id: doc.id,
          title: data.title || 'Unnamed Notification',
          body: data.body || '',
          sent: data.sent || false,
          sentAt: data.sentAt,
          recipients: data.recipients || 0,
          clickRate: data.clickRate || 0
        }
      })
      
      setNotifications(fetchedNotifications)
    } catch (error) {
      console.error("Error fetching notifications:", error)
    }
  }
  
  const fetchInventoryStatus = async () => {
    if (!user?.uid) return
    
    try {
      const inventoryStatusRef = doc(db, 'merchants', user.uid, 'settings', 'inventory')
      const inventoryStatusSnapshot = await getDoc(inventoryStatusRef)
      
      if (inventoryStatusSnapshot.exists()) {
        const data = inventoryStatusSnapshot.data()
        setInventorySync({
          lastSynced: data.lastSynced,
          source: data.source || 'manual',
          totalItems: data.totalItems || 0,
          status: data.status || 'idle'
        })
      }
    } catch (error) {
      console.error("Error fetching inventory status:", error)
    }
  }
  
  // Add function to fetch inventory items from Square
  const fetchInventoryItems = async () => {
    if (!user?.uid) return
    
    // Set loading state
    if (refreshingInventory) {
      // If already refreshing, don't start another refresh
      return
    } else {
      setRefreshingInventory(true)
    }
    
    try {
      // Fetch Square integration status first
      const squareIntegrationRef = doc(db, 'merchants', user.uid, 'integrations', 'square')
      const squareIntegrationDoc = await getDoc(squareIntegrationRef)
      
      // Check if integration exists and is connected
      const isConnected = squareIntegrationDoc.exists() && squareIntegrationDoc.data().connected === true
      
      console.log('Square integration status:', { 
        exists: squareIntegrationDoc.exists(), 
        connected: squareIntegrationDoc.exists() ? squareIntegrationDoc.data().connected : false,
        isConnected
      })
      
      setIsSquareConnected(isConnected)
      
      if (!isConnected) {
        setLoadingInventory(false)
        setRefreshingInventory(false)
        return
      }
      
      // Fetch inventory items from Square API
      const response = await fetch(`/api/square/catalog?merchantId=${user.uid}`)
      const data = await response.json()
      
      // Log the structure of the response to help debugging
      console.log('Square API response structure:', {
        hasObjects: !!data?.objects,
        objectsCount: data?.objects?.length || 0,
        firstObjectType: data?.objects?.[0]?.type || 'none',
        keys: Object.keys(data || {})
      })
      
      // Check if we have data and objects array 
      if (data && data.objects) {
        // Process and organize the catalog data
        const items = data.objects || []
        const categoryObjects = items.filter((item: SquareCatalogObject) => item.type === 'CATEGORY')
        
        // Create a map of category IDs to names
        const categoryMap: Record<string, string> = {}
        
        categoryObjects.forEach((category: SquareCatalogObject) => {
          if (category.category_data?.name) {
            categoryMap[category.id] = category.category_data.name
          }
        })
        
        // Store categories and items
        setCategories(categoryMap)
        setInventoryItems(items)
        
        // Fetch inventory counts for all ITEM_VARIATION items
        const variationIds = items
          .filter((item: SquareCatalogObject) => item.type === 'ITEM_VARIATION')
          .map((item: SquareCatalogObject) => item.id)
        
        if (variationIds.length > 0) {
          await fetchInventoryCounts(variationIds)
        }
      } else {
        // Log the response structure to help debug
        console.error("Failed to fetch inventory items or no objects returned:", data)
      }
    } catch (error) {
      console.error("Error fetching inventory:", error)
    } finally {
      setLoadingInventory(false)
      setRefreshingInventory(false)
    }
  }
  
  // Add function to fetch inventory counts
  const fetchInventoryCounts = async (itemIds: string[]) => {
    if (!user?.uid || itemIds.length === 0) return
    
    try {
      // Call our API endpoint to get inventory counts
      const response = await fetch(`/api/square/inventory?merchantId=${user.uid}&catalogItemIds=${itemIds.join(',')}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      
      if (!response.ok) {
        throw new Error(`Failed to fetch inventory counts: ${response.statusText}`)
      }
      
      const data = await response.json()
      
      // Process inventory counts
      const countsMap: Record<string, InventoryCount> = {}
      
      if (data.counts && Array.isArray(data.counts)) {
        data.counts.forEach((count: any) => {
          if (count.catalog_object_id && count.quantity) {
            countsMap[count.catalog_object_id] = {
              catalogObjectId: count.catalog_object_id,
              quantity: count.quantity,
              state: count.state || 'IN_STOCK',
              locationId: count.location_id || '',
              updatedAt: count.calculated_at || ''
            }
          }
        })
      }
      
      setInventoryCounts(countsMap)
    } catch (error) {
      console.error("Error fetching inventory counts:", error)
    }
  }
  
  // Format price from cents to dollars
  const formatPrice = (amount: number | undefined, currency: string = 'USD') => {
    if (amount === undefined) return 'N/A'
    
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount / 100)
  }
  
  // Get category name from category ID
  const getCategoryName = (categoryId: string | undefined) => {
    if (!categoryId) return 'Uncategorized'
    return categories[categoryId] || 'Unknown Category'
  }
  
  // Function to get stock quantity for an item
  const getStockQuantity = (item: SquareCatalogObject): string => {
    if (item.type === 'ITEM_VARIATION') {
      const count = inventoryCounts[item.id]
      if (count) {
        return count.quantity
      }
    }
    
    // For items with variations, check if any variations have inventory
    if (item.type === 'ITEM' && item.item_data?.variations && item.item_data.variations.length > 0) {
      let totalStock = 0
      let hasStock = false
      
      item.item_data.variations.forEach(variation => {
        const count = inventoryCounts[variation.id]
        if (count) {
          hasStock = true
          totalStock += parseFloat(count.quantity)
        }
      })
      
      if (hasStock) {
        return totalStock.toString()
      }
    }
    
    return "N/A"
  }
  
  // Filter inventory items based on search query
  const filteredInventoryItems = useMemo(() => {
    // Debug inventory counts
    console.log(`Inventory items count: ${inventoryItems.length}, Square connected: ${isSquareConnected}`);
    
    if (!inventorySearchQuery.trim()) {
      const filtered = inventoryItems.filter(item => 
        item.type === 'ITEM' || item.type === 'ITEM_VARIATION'
      );
      console.log(`Filtered inventory items (no search): ${filtered.length}`);
      return filtered;
    }
    
    const query = inventorySearchQuery.toLowerCase().trim();
    
    const filtered = inventoryItems.filter(item => {
      if (item.type === 'ITEM' && item.item_data) {
        return (
          (item.item_data.name?.toLowerCase().includes(query)) ||
          (item.item_data.description?.toLowerCase().includes(query))
        );
      }
      
      if (item.type === 'ITEM_VARIATION' && item.item_variation_data) {
        return (
          (item.item_variation_data.name?.toLowerCase().includes(query)) ||
          (item.item_variation_data.sku?.toLowerCase().includes(query))
        );
      }
      
      return false;
    });
    
    console.log(`Filtered inventory items (with search "${query}"): ${filtered.length}`);
    return filtered;
  }, [inventoryItems, inventorySearchQuery, isSquareConnected]);
  
  // Helper function to format dates
  const formatDate = (date: any) => {
    if (!date) return 'N/A'
    
    try {
      if (date.toDate) {
        return format(date.toDate(), 'MMM d, yyyy')
      } else if (date.seconds) {
        return format(new Date(date.seconds * 1000), 'MMM d, yyyy')
      } else {
        return format(new Date(date), 'MMM d, yyyy')
      }
    } catch (error) {
      return 'Invalid date'
    }
  }
  
  // Helper function to get time ago
  const getTimeAgo = (date: any) => {
    if (!date) return 'N/A'
    
    try {
      if (date.toDate) {
        return formatDistanceToNow(date.toDate(), { addSuffix: true })
      } else if (date.seconds) {
        return formatDistanceToNow(new Date(date.seconds * 1000), { addSuffix: true })
      } else {
        return formatDistanceToNow(new Date(date), { addSuffix: true })
      }
    } catch (error) {
      return 'Unknown'
    }
  }
  
  // Helper function to get status badge
  const getStatusBadge = (status: string) => {
    if (status === 'active') {
      return <Badge className="bg-green-100 text-green-800 hover:bg-green-100 rounded-md font-normal">Active</Badge>
    } else if (status === 'inactive' || status === 'disabled') {
      return <Badge variant="outline" className="text-gray-500 rounded-md font-normal">Inactive</Badge>
    } else if (status === 'scheduled') {
      return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100 rounded-md font-normal">Scheduled</Badge>
    } else if (status === 'expired') {
      return <Badge variant="outline" className="text-red-500 rounded-md font-normal">Expired</Badge>
    } else {
      return <Badge variant="outline" className="rounded-md font-normal">{status}</Badge>
    }
  }

  // Helper function to check if there are any AI-generated rewards
  const hasAiRewards = useMemo(() => {
    return rewards.some(reward => reward.isAgentGenerated === true);
  }, [rewards]);

  // Helper function to check if there are any AI-generated banners
  const hasAiBanners = useMemo(() => {
    return banners.some(banner => banner.isAgentGenerated === true);
  }, [banners]);
  
  return (
    <PageTransition>
      <div className="p-6 py-4">
        <PageHeader
          title="Store Overview"
        >
          <Button 
            size="sm"
            className="h-8 gap-2 rounded-md"
            onClick={() => router.push('/create')}
          >
            <PlusCircle className="h-4 w-4" />
            Create New
          </Button>
        </PageHeader>
        
        <Tabs defaultValue="rewards" className="mt-6">
          <TabsList className="mb-4">
            <TabsTrigger value="rewards" className="flex items-center gap-2">
              <Gift className="h-4 w-4" />
              Rewards
            </TabsTrigger>
            <TabsTrigger value="marketing" className="flex items-center gap-2">
              <Image className="h-4 w-4" />
              Marketing
            </TabsTrigger>
            <TabsTrigger value="customers" className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              Customers
            </TabsTrigger>
            <TabsTrigger value="inventory" className="flex items-center gap-2">
              <Package className="h-4 w-4" />
              Inventory
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="rewards">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Active Rewards Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Gift className="h-5 w-5 mr-2 text-gray-600" />
                      Active Rewards
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/rewards">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>All active rewards available to customers</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : rewards.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Gift className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No rewards found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/create">Create Reward</Link>
                      </Button>
                    </div>
                  ) : (
                    <div>
                      <Tabs defaultValue="all" className="w-full">
                        <TabsList className="mb-4 w-full grid grid-cols-2">
                          <TabsTrigger value="all">All Rewards</TabsTrigger>
                          <TabsTrigger value="agent">
                            <div className="flex items-center gap-1">
                              <Sparkles className="h-3.5 w-3.5" />
                              <span>Agent Rewards</span>
                            </div>
                          </TabsTrigger>
                        </TabsList>

                        <TabsContent value="all">
                          <ScrollArea className="h-64">
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Reward</TableHead>
                                  <TableHead>Points</TableHead>
                                  <TableHead>Status</TableHead>
                                  <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {rewards.slice(0, 5).map((reward) => (
                                  <TableRow key={reward.id}>
                                    <TableCell className="font-medium">
                                      <div className="flex flex-col">
                                        {reward.programtype === "agent" ? (
                                          <GradientText>{reward.rewardName}</GradientText>
                                        ) : (
                                          <span className="truncate max-w-[120px]">{reward.rewardName}</span>
                                        )}
                                        {reward.programtype === "agent" && (
                                          <Badge variant="outline" className="mt-1 w-fit text-xs bg-gray-100 text-gray-800">
                                            <Sparkles className="h-3 w-3 mr-1" />
                                            AI Generated
                                          </Badge>
                                        )}
                                      </div>
                                    </TableCell>
                                    <TableCell>{reward.pointsCost}</TableCell>
                                    <TableCell>{getStatusBadge(reward.status)}</TableCell>
                                    <TableCell className="text-right">
                                      <Button variant="ghost" size="icon" className="h-7 w-7" asChild>
                                        <Link href={`/rewards/${reward.id}`}>
                                          <Eye className="h-4 w-4" />
                                        </Link>
                                      </Button>
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </ScrollArea>
                        </TabsContent>

                        <TabsContent value="agent">
                          <ScrollArea className="h-64">
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Reward</TableHead>
                                  <TableHead>Points</TableHead>
                                  <TableHead>Status</TableHead>
                                  <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {rewards.filter(r => r.programtype === "agent").length === 0 ? (
                                  <TableRow>
                                    <TableCell colSpan={4} className="h-24 text-center">
                                      <div className="flex flex-col items-center justify-center">
                                        <Sparkles className="h-8 w-8 mb-2 text-muted-foreground" />
                                        <p className="text-muted-foreground">No agent rewards found</p>
                                        <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                                          <Link href="/tap-agent/setup">Generate Agent Rewards</Link>
                                        </Button>
                                      </div>
                                    </TableCell>
                                  </TableRow>
                                ) : (
                                  rewards.filter(r => r.programtype === "agent").map((reward) => (
                                    <TableRow key={reward.id}>
                                      <TableCell className="font-medium">
                                        <div className="flex flex-col">
                                          <GradientText>{reward.rewardName}</GradientText>
                                          <Badge variant="outline" className="mt-1 w-fit text-xs bg-gray-100 text-gray-800">
                                            <Sparkles className="h-3 w-3 mr-1" />
                                            AI Generated
                                          </Badge>
                                        </div>
                                      </TableCell>
                                      <TableCell>{reward.pointsCost}</TableCell>
                                      <TableCell>{getStatusBadge(reward.status)}</TableCell>
                                      <TableCell className="text-right">
                                        <Button variant="ghost" size="icon" className="h-7 w-7" asChild>
                                          <Link href={`/rewards/${reward.id}`}>
                                            <Eye className="h-4 w-4" />
                                          </Link>
                                        </Button>
                                      </TableCell>
                                    </TableRow>
                                  ))
                                )}
                              </TableBody>
                            </Table>
                          </ScrollArea>
                        </TabsContent>
                      </Tabs>
                    </div>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    Total: {rewards.filter(r => r.status === 'active').length} active rewards
                    {rewards.filter(r => r.programtype === "agent" && r.status === 'active').length > 0 && (
                      <span className="ml-2">
                        ({rewards.filter(r => r.programtype === "agent" && r.status === 'active').length} agent)
                      </span>
                    )}
                  </div>
                  {rewards.length > 0 && (
                    <Button variant="link" size="sm" className="px-0" asChild>
                      <Link href="/store/rewards">View all rewards</Link>
                    </Button>
                  )}
                </CardFooter>
              </Card>
              
              {/* Active Banners Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Image className="h-5 w-5 mr-2 text-gray-600" />
                      Banners
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/banners">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Marketing banners displayed to customers</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : banners.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Image className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No banners found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/banners">Create Banner</Link>
                      </Button>
                    </div>
                  ) : (
                    <ScrollArea className="h-64">
                      <div className="grid grid-cols-1 gap-4">
                        {banners.slice(0, 3).map((banner) => (
                          <Card key={banner.id} className="overflow-hidden rounded-md shadow-sm">
                            <div className="relative h-24 bg-gray-100">
                              {banner.imageUrl ? (
                                <div 
                                  className="w-full h-full bg-cover bg-center"
                                  style={{ backgroundImage: `url(${banner.imageUrl})` }}
                                />
                              ) : (
                                <div className="flex items-center justify-center h-full">
                                  <Image className="h-8 w-8 text-gray-400" />
                                </div>
                              )}
                              <div className="absolute top-2 right-2">
                                {getStatusBadge(banner.status)}
                              </div>
                              {banner.isAgentGenerated && (
                                <Badge variant="outline" className="absolute bottom-2 left-2 bg-gray-100 text-gray-800 text-xs">
                                  <Sparkles className="h-3 w-3 mr-1" />
                                  AI Generated
                                </Badge>
                              )}
                            </div>
                            <CardContent className="p-3">
                              <div className="flex justify-between items-start">
                                <div>
                                  <h3 className="font-medium text-sm truncate max-w-[160px]">{banner.title}</h3>
                                  <div className="flex items-center gap-3 text-xs text-muted-foreground mt-1">
                                    <div className="flex items-center">
                                      <Eye className="h-3 w-3 mr-1" />
                                      {banner.viewCount || 0}
                                    </div>
                                    <div className="flex items-center">
                                      <Calendar className="h-3 w-3 mr-1" />
                                      {formatDate(banner.expiryDate)}
                                    </div>
                                  </div>
                                </div>
                                <Button variant="ghost" size="icon" className="h-7 w-7" asChild>
                                  <Link href={`/store/banners/${banner.id}`}>
                                    <Eye className="h-4 w-4" />
                                  </Link>
                                </Button>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    </ScrollArea>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    Total: {banners.filter(b => b.status === 'active').length} active banners
                  </div>
                  {banners.length > 0 && (
                    <Button variant="link" size="sm" className="px-0" asChild>
                      <Link href="/store/banners">View all banners</Link>
                    </Button>
                  )}
                </CardFooter>
              </Card>
              
              {/* Points Rules Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Zap className="h-5 w-5 mr-2 text-gray-600" />
                      Points Rules
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/points-rules">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Rules for customers to earn points</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : pointsRules.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Zap className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No points rules found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/points-rules">Create Points Rule</Link>
                      </Button>
                    </div>
                  ) : (
                    <ScrollArea className="h-64">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Rule</TableHead>
                            <TableHead>Points</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {pointsRules.slice(0, 5).map((rule) => (
                            <TableRow key={rule.id}>
                              <TableCell className="font-medium">
                                <span className="truncate max-w-[120px] block">{rule.name}</span>
                              </TableCell>
                              <TableCell>{rule.pointsAmount}</TableCell>
                              <TableCell>{getStatusBadge(rule.status)}</TableCell>
                              <TableCell className="text-right">
                                <Button variant="ghost" size="icon" className="h-7 w-7" asChild>
                                  <Link href={`/store/points-rules/${rule.id}`}>
                                    <Eye className="h-4 w-4" />
                                  </Link>
                                </Button>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </ScrollArea>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    Total: {pointsRules.filter(r => r.status === 'active').length} active rules
                  </div>
                  {pointsRules.length > 0 && (
                    <Button variant="link" size="sm" className="px-0" asChild>
                      <Link href="/store/points-rules">View all rules</Link>
                    </Button>
                  )}
                </CardFooter>
              </Card>
              
              {/* Recent Messages Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <MessageSquare className="h-5 w-5 mr-2 text-gray-600" />
                      Recent Messages
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/messages">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Messages sent to customers</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : messages.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <MessageSquare className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No messages found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/messages">Create Message</Link>
                      </Button>
                    </div>
                  ) : (
                    <ScrollArea className="h-64">
                      <div className="space-y-4">
                        {messages.map((message) => (
                          <div key={message.id} className="flex items-start space-x-3 pb-4 border-b border-gray-100 last:border-0">
                            <div className="bg-gray-100 rounded-full p-2 flex-shrink-0">
                              <MessageSquare className="h-4 w-4 text-gray-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex justify-between items-start">
                                <h3 className="font-medium truncate max-w-[160px]">{message.title}</h3>
                                <Badge 
                                  variant={message.sent ? "default" : "outline"} 
                                  className={message.sent ? "bg-green-500 rounded-md" : "text-gray-500 rounded-md"}
                                >
                                  {message.sent ? "Sent" : "Draft"}
                                </Badge>
                              </div>
                              <p className="text-sm text-muted-foreground line-clamp-2 mt-1">{message.content}</p>
                              <div className="flex items-center gap-3 text-xs text-muted-foreground mt-2">
                                {message.sent && (
                                  <>
                                    <div className="flex items-center">
                                      <Users className="h-3 w-3 mr-1" />
                                      {message.recipients || 0} recipients
                                    </div>
                                    <div className="flex items-center">
                                      <Eye className="h-3 w-3 mr-1" />
                                      {message.openRate || 0}% open rate
                                    </div>
                                  </>
                                )}
                                {message.sentAt && (
                                  <div className="flex items-center">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {getTimeAgo(message.sentAt)}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    {messages.filter(m => m.sent).length} messages sent
                  </div>
                  <Button variant="link" size="sm" className="px-0" asChild>
                    <Link href="/store/messages">View all messages</Link>
                  </Button>
                </CardFooter>
              </Card>
              
              {/* Push Notifications Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <BellRing className="h-5 w-5 mr-2 text-gray-600" />
                      Push Notifications
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/notifications">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Notifications sent to customer devices</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : notifications.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <BellRing className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No notifications found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/notifications">Create Notification</Link>
                      </Button>
                    </div>
                  ) : (
                    <ScrollArea className="h-64">
                      <div className="space-y-4">
                        {notifications.map((notification) => (
                          <div key={notification.id} className="flex items-start space-x-3 pb-4 border-b border-gray-100 last:border-0">
                            <div className="bg-gray-100 rounded-full p-2 flex-shrink-0">
                              <BellRing className="h-4 w-4 text-gray-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex justify-between items-start">
                                <h3 className="font-medium truncate max-w-[160px]">{notification.title}</h3>
                                <Badge 
                                  variant={notification.sent ? "default" : "outline"} 
                                  className={notification.sent ? "bg-green-500 rounded-md" : "text-gray-500 rounded-md"}
                                >
                                  {notification.sent ? "Sent" : "Draft"}
                                </Badge>
                              </div>
                              <p className="text-sm text-muted-foreground line-clamp-2 mt-1">{notification.body}</p>
                              <div className="flex items-center gap-3 text-xs text-muted-foreground mt-2">
                                {notification.sent && (
                                  <>
                                    <div className="flex items-center">
                                      <Users className="h-3 w-3 mr-1" />
                                      {notification.recipients || 0} recipients
                                    </div>
                                    <div className="flex items-center">
                                      <ArrowRight className="h-3 w-3 mr-1" />
                                      {notification.clickRate || 0}% click rate
                                    </div>
                                  </>
                                )}
                                {notification.sentAt && (
                                  <div className="flex items-center">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {getTimeAgo(notification.sentAt)}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    {notifications.filter(n => n.sent).length} notifications sent
                  </div>
                  <Button variant="link" size="sm" className="px-0" asChild>
                    <Link href="/store/notifications">View all notifications</Link>
                  </Button>
                </CardFooter>
              </Card>
              
              {/* Inventory Sync Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Package className="h-5 w-5 mr-2 text-gray-600" />
                      Inventory Status
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/inventory">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Product inventory synchronization</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : !inventorySync ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Package className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No inventory data found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/inventory">Set Up Inventory</Link>
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-6 pt-4">
                      <div className="flex flex-col space-y-1.5">
                        <div className="flex justify-between items-center">
                          <h3 className="text-sm font-medium">Last Synchronized</h3>
                          <Badge 
                            variant={inventorySync.status === 'synced' ? "default" : "outline"}
                            className={inventorySync.status === 'synced' ? "bg-green-500 rounded-md" : inventorySync.status === 'syncing' ? "bg-blue-500 rounded-md" : "text-gray-500 rounded-md"}
                          >
                            {inventorySync.status === 'synced' ? 'Synced' : 
                             inventorySync.status === 'syncing' ? 'Syncing' : 
                             inventorySync.status === 'error' ? 'Error' : 'Idle'}
                          </Badge>
                        </div>
                        {inventorySync.lastSynced ? (
                          <div className="flex items-center text-xl font-semibold">
                            {getTimeAgo(inventorySync.lastSynced)}
                          </div>
                        ) : (
                          <div className="text-xl font-semibold text-muted-foreground">Never</div>
                        )}
                      </div>
                      
                      <Separator />
                      
                      <div className="grid grid-cols-2 gap-6">
                        <div className="flex flex-col space-y-1.5">
                          <h3 className="text-sm font-medium">Total Items</h3>
                          <div className="flex items-center text-xl font-semibold">
                            {inventorySync.totalItems.toLocaleString()}
                          </div>
                        </div>
                        
                        <div className="flex flex-col space-y-1.5">
                          <h3 className="text-sm font-medium">Source</h3>
                          <div className="flex items-center text-xl font-semibold">
                            {inventorySync.source === 'square' ? 'Square' : 
                             inventorySync.source === 'shopify' ? 'Shopify' : 
                             inventorySync.source === 'lightspeed' ? 'Lightspeed' : 
                             'Manual'}
                          </div>
                        </div>
                      </div>
                      
                      <Button className="w-full" variant="outline" asChild>
                        <Link href="/store/inventory">
                          <RefreshCw className="h-4 w-4 mr-2" />
                          Sync Inventory
                        </Link>
                      </Button>
                    </div>
                  )}
                </CardContent>
                {inventorySync && (
                  <CardFooter className="flex justify-between pt-2">
                    <div className="text-xs text-muted-foreground">
                      Source: {inventorySync.source === 'square' ? 'Square' : 
                              inventorySync.source === 'shopify' ? 'Shopify' : 
                              inventorySync.source === 'lightspeed' ? 'Lightspeed' : 
                              'Manual'}
                    </div>
                    <Button variant="link" size="sm" className="px-0" asChild>
                      <Link href="/integrations">Manage Integration</Link>
                    </Button>
                  </CardFooter>
                )}
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="marketing">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Existing marketing content */}
            </div>
          </TabsContent>
          
          <TabsContent value="customers">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Existing customers content */}
            </div>
          </TabsContent>
          
          <TabsContent value="inventory">
            <div className="grid grid-cols-1 gap-6">
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <Package className="h-5 w-5 mr-2 text-gray-600" />
                      Inventory Items
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="h-8 gap-1"
                        onClick={fetchInventoryItems}
                        disabled={refreshingInventory || loadingInventory}
                      >
                        {refreshingInventory ? (
                          <>
                            <Loader2 className="h-3.5 w-3.5 animate-spin" />
                            <span className="text-xs">Refreshing...</span>
                          </>
                        ) : (
                          <>
                            <RefreshCw className="h-3.5 w-3.5" />
                            <span className="text-xs">Refresh</span>
                          </>
                        )}
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="h-8 gap-1"
                        disabled={!isSquareConnected}
                      >
                        <Download className="h-3.5 w-3.5" />
                        <span className="text-xs">Export</span>
                      </Button>
                      <Button 
                        variant="default" 
                        size="sm" 
                        className="h-8 gap-1"
                        disabled={!isSquareConnected || loadingInventory}
                        onClick={() => router.push('/tap-agent/setup')}
                      >
                        <Zap className="h-3.5 w-3.5" />
                        <span className="text-xs">Add to Tap Agent</span>
                      </Button>
                    </div>
                  </div>
                  <CardDescription>Products in your Square inventory</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading || loadingInventory ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : !isSquareConnected ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Package className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground mb-2">Square integration required</p>
                      <Button variant="outline" size="sm" className="mt-2 rounded-md" asChild>
                        <Link href="/integrations">Connect Square</Link>
                      </Button>
                    </div>
                  ) : inventoryItems.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Package className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No inventory items found</p>
                      <p className="text-xs text-muted-foreground mt-1 mb-3">
                        {isSquareConnected ? 
                          "Square is connected but no items were returned. Try refreshing." : 
                          "Please connect Square to view inventory."}
                      </p>
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="rounded-md"
                          onClick={fetchInventoryItems}
                          disabled={refreshingInventory}
                        >
                          {refreshingInventory ? (
                            <>
                              <Loader2 className="h-3.5 w-3.5 mr-2 animate-spin" />
                              Refreshing...
                            </>
                          ) : (
                            <>
                              <RefreshCw className="h-3.5 w-3.5 mr-2" />
                              Refresh Inventory
                            </>
                          )}
                        </Button>
                        <Button variant="outline" size="sm" className="rounded-md" asChild>
                          <Link href="/store/inventory">Go to Inventory</Link>
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <>
                      <div className="flex items-center justify-between mb-4">
                        <div className="relative w-full max-w-sm">
                          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                          <Input
                            type="search"
                            placeholder="Search inventory..."
                            className="pl-8 h-9"
                            value={inventorySearchQuery}
                            onChange={(e) => setInventorySearchQuery(e.target.value)}
                          />
                        </div>
                      </div>
                    
                      <ScrollArea className="h-[400px]">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead className="w-[250px]">Name</TableHead>
                              <TableHead>Type</TableHead>
                              <TableHead>Category</TableHead>
                              <TableHead>SKU</TableHead>
                              <TableHead className="text-right">Price</TableHead>
                              <TableHead>Stock</TableHead>
                              <TableHead className="text-right w-[50px]">Details</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {filteredInventoryItems.length === 0 ? (
                              <TableRow>
                                <TableCell colSpan={7} className="h-24 text-center">
                                  {inventorySearchQuery ? "No items found matching your search." : "No inventory items found."}
                                </TableCell>
                              </TableRow>
                            ) : (
                              filteredInventoryItems.map((item) => {
                                // Skip rendering categories in the table
                                if (item.type === 'CATEGORY') return null;
                                
                                // Item name to display
                                const itemName = item.type === 'ITEM' && item.item_data
                                  ? item.item_data.name
                                  : item.type === 'ITEM_VARIATION' && item.item_variation_data
                                    ? item.item_variation_data.name
                                    : 'Unknown Item';
                                
                                // Category name
                                const category = item.type === 'ITEM' && item.item_data?.category_id
                                  ? getCategoryName(item.item_data.category_id)
                                  : 'Uncategorized';
                                
                                // SKU
                                const sku = item.type === 'ITEM_VARIATION' && item.item_variation_data?.sku
                                  ? item.item_variation_data.sku
                                  : 'N/A';
                                
                                // Price
                                const price = item.type === 'ITEM_VARIATION' && item.item_variation_data?.price_money
                                  ? formatPrice(item.item_variation_data.price_money.amount, item.item_variation_data.price_money.currency)
                                  : item.type === 'ITEM' && item.item_data?.variations?.length
                                    ? 'Various'
                                    : 'N/A';
                                
                                // Description (for items with descriptions)
                                const description = item.type === 'ITEM' && item.item_data?.description;
                                
                                return (
                                  <TableRow key={item.id} className="hover:bg-gray-50 cursor-pointer" onClick={() => router.push('/store/inventory')}>
                                    <TableCell className="font-medium">
                                      {itemName}
                                      {description && (
                                        <p className="text-xs text-muted-foreground truncate max-w-xs">
                                          {description}
                                        </p>
                                      )}
                                    </TableCell>
                                    <TableCell>
                                      <Badge variant="outline" className={item.type === 'ITEM' 
                                        ? "bg-blue-50 text-blue-700 border-blue-200" 
                                        : "bg-purple-50 text-purple-700 border-purple-200"}>
                                        {item.type === 'ITEM' ? 'Item' : 'Variation'}
                                      </Badge>
                                    </TableCell>
                                    <TableCell>{category}</TableCell>
                                    <TableCell>{sku}</TableCell>
                                    <TableCell className="text-right">{price}</TableCell>
                                    <TableCell>
                                      <span className={`${getStockQuantity(item) === "0" ? "text-destructive" : getStockQuantity(item) === "N/A" ? "text-muted-foreground" : ""}`}>
                                        {getStockQuantity(item)}
                                      </span>
                                    </TableCell>
                                    <TableCell className="text-right">
                                      <Button variant="ghost" size="icon" className="h-7 w-7" asChild>
                                        <Link href="/store/inventory">
                                          <Eye className="h-4 w-4" />
                                        </Link>
                                      </Button>
                                    </TableCell>
                                  </TableRow>
                                );
                              })
                            )}
                          </TableBody>
                        </Table>
                      </ScrollArea>
                    </>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between pt-2">
                  <div className="text-xs text-muted-foreground">
                    {isSquareConnected 
                      ? `Total: ${inventoryItems.filter(item => item.type === 'ITEM' || item.type === 'ITEM_VARIATION').length} items`
                      : 'Square integration required'}
                  </div>
                  <Button variant="link" size="sm" className="px-0" asChild>
                    <Link href="/store/inventory">View full inventory</Link>
                  </Button>
                </CardFooter>
              </Card>
              
              {/* Inventory Sync Card */}
              <Card className="rounded-md shadow-sm">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium flex items-center">
                      <RefreshCw className="h-5 w-5 mr-2 text-gray-600" />
                      Inventory Status
                    </CardTitle>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" asChild>
                      <Link href="/store/inventory">
                        <ChevronRight className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                  <CardDescription>Product inventory synchronization</CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center h-48">
                      <RefreshCw className="h-5 w-5 animate-spin text-muted-foreground" />
                    </div>
                  ) : !inventorySync ? (
                    <div className="flex flex-col items-center justify-center h-48 text-center">
                      <Package className="h-8 w-8 mb-2 text-muted-foreground" />
                      <p className="text-muted-foreground">No inventory data found</p>
                      <Button variant="outline" size="sm" className="mt-4 rounded-md" asChild>
                        <Link href="/store/inventory">Set Up Inventory</Link>
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-6 pt-4">
                      <div className="flex flex-col space-y-1.5">
                        <div className="flex justify-between items-center">
                          <h3 className="text-sm font-medium">Last Synchronized</h3>
                          <Badge 
                            variant={inventorySync.status === 'synced' ? "default" : "outline"}
                            className={inventorySync.status === 'synced' ? "bg-green-500 rounded-md" : inventorySync.status === 'syncing' ? "bg-blue-500 rounded-md" : "text-gray-500 rounded-md"}
                          >
                            {inventorySync.status === 'synced' ? 'Synced' : 
                             inventorySync.status === 'syncing' ? 'Syncing' : 
                             inventorySync.status === 'error' ? 'Error' : 'Idle'}
                          </Badge>
                        </div>
                        {inventorySync.lastSynced ? (
                          <div className="flex items-center text-xl font-semibold">
                            {getTimeAgo(inventorySync.lastSynced)}
                          </div>
                        ) : (
                          <div className="text-xl font-semibold text-muted-foreground">Never</div>
                        )}
                      </div>
                      
                      <Separator />
                      
                      <div className="grid grid-cols-2 gap-6">
                        <div className="flex flex-col space-y-1.5">
                          <h3 className="text-sm font-medium">Total Items</h3>
                          <div className="flex items-center text-xl font-semibold">
                            {inventorySync.totalItems.toLocaleString()}
                          </div>
                        </div>
                        
                        <div className="flex flex-col space-y-1.5">
                          <h3 className="text-sm font-medium">Source</h3>
                          <div className="flex items-center text-xl font-semibold">
                            {inventorySync.source === 'square' ? 'Square' : 
                             inventorySync.source === 'shopify' ? 'Shopify' : 
                             inventorySync.source === 'lightspeed' ? 'Lightspeed' : 
                             'Manual'}
                          </div>
                        </div>
                      </div>
                      
                      <Button className="w-full" variant="outline" asChild>
                        <Link href="/store/inventory">
                          <RefreshCw className="h-4 w-4 mr-2" />
                          Sync Inventory
                        </Link>
                      </Button>
                    </div>
                  )}
                </CardContent>
                {inventorySync && (
                  <CardFooter className="flex justify-between pt-2">
                    <div className="text-xs text-muted-foreground">
                      Source: {inventorySync.source === 'square' ? 'Square' : 
                              inventorySync.source === 'shopify' ? 'Shopify' : 
                              inventorySync.source === 'lightspeed' ? 'Lightspeed' : 
                              'Manual'}
                    </div>
                    <Button variant="link" size="sm" className="px-0" asChild>
                      <Link href="/integrations">Manage Integration</Link>
                    </Button>
                  </CardFooter>
                )}
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </PageTransition>
  )
} "use client"

import { RewardDetailsPage } from "./RewardDetailsPage"

export default function Page({ params }: { params: { id: string } }) {
  console.log("Page component rendering with params:", params)
  return <RewardDetailsPage />
} "use client"

import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"
import { 
  Search, 
  Plus, 
  Filter, 
  MoreVertical, 
  Gift, 
  Zap, 
  ArrowUpDown,
  ChevronDown,
  ArrowRight, 
  ArrowUp, 
  ArrowDown, 
  Users, 
  ShoppingCart, 
  Calendar,
  PlusCircle,
  Coffee,
  DollarSign,
  Clock,
  Star,
  ChevronRight
} from "lucide-react"
import { useRouter } from "next/navigation"
import { useState, useEffect, useMemo } from "react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, getDocs, query, orderBy, limit } from "firebase/firestore"
import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { format, formatDistanceToNow } from "date-fns"
import Link from "next/link"
import { toast } from "@/components/ui/use-toast"
import { PageTransition } from "@/components/page-transition"
import { PageHeader } from "@/components/page-header"
import { RewardDetailSheet } from "@/components/reward-detail-sheet"

interface StoreItem {
  id: string
  type: 'reward' | 'rule'
  name?: string
  rewardName?: string
  description?: string
  pointsCost?: number
  points?: number
  status?: string
  category?: string
  createdAt?: any
}

export default function StorePage() {
  const router = useRouter()
  const { user } = useAuth()
  const [items, setItems] = useState<StoreItem[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const [itemType, setItemType] = useState<'all' | 'reward' | 'rule'>('all')
  const [sortBy, setSortBy] = useState<'newest' | 'oldest' | 'name'>('newest')
  const [transactions, setTransactions] = useState([])
  const [selectedRewardId, setSelectedRewardId] = useState<string | null>(null)
  const [isRewardDetailOpen, setIsRewardDetailOpen] = useState(false)

  useEffect(() => {
    async function fetchItems() {
      if (!user) return
      
      try {
        setLoading(true)
        let fetchedItems: StoreItem[] = []
        
        // Always fetch both rewards and rules, then filter by type in the UI
        const rewardsRef = collection(db, 'merchants', user.uid, 'rewards')
        const rewardsSnapshot = await getDocs(rewardsRef)
        const fetchedRewards = rewardsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          type: 'reward' as const
        }))
        
        const rulesRef = collection(db, 'merchants', user.uid, 'pointsRules')
        const rulesSnapshot = await getDocs(rulesRef)
        const fetchedRules = rulesSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          type: 'rule' as const
        }))
        
        fetchedItems = [...fetchedRewards, ...fetchedRules]
        setItems(fetchedItems)
      } catch (error) {
        console.error("Error fetching items:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchItems()
  }, [user, itemType])

  useEffect(() => {
    const fetchRecentTransactions = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        const transactionsRef = collection(db, 'merchants', user.uid, 'transactions')
        const q = query(transactionsRef, orderBy('createdAt', 'desc'), limit(5))
        const querySnapshot = await getDocs(q)
        
        const transactionsData = []
        querySnapshot.forEach((doc) => {
          transactionsData.push({
            id: doc.id,
            ...doc.data()
          })
        })
        
        setTransactions(transactionsData)
      } catch (error) {
        console.error("Error fetching transactions:", error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchRecentTransactions()
  }, [user])

  const filteredItems = useMemo(() => {
    return items.filter(item => {
      const nameField = item.type === 'reward' ? (item.rewardName || item.name) : (item.name || '')
      const searchMatch = nameField?.toLowerCase().includes(searchQuery.toLowerCase())
      const typeMatch = itemType === 'all' || item.type === itemType
      return searchMatch && typeMatch
    }).sort((a, b) => {
      const nameA = a.type === 'reward' ? (a.rewardName || a.name) : (a.name || '')
      const nameB = b.type === 'reward' ? (b.rewardName || b.name) : (b.name || '')
      
      if (sortBy === 'newest') {
        return (b.createdAt?.toDate?.() || 0) - (a.createdAt?.toDate?.() || 0)
      } else if (sortBy === 'oldest') {
        return (a.createdAt?.toDate?.() || 0) - (b.createdAt?.toDate?.() || 0)
      } else {
        return (nameA || '').localeCompare(nameB || '')
      }
    })
  }, [items, searchQuery, itemType, sortBy])

  const getIcon = (type: string) => {
    return type === 'reward' ? Gift : Zap
  }

  const handleViewItem = (item: StoreItem) => {
    if (item.type === 'reward') {
      setSelectedRewardId(item.id)
      setIsRewardDetailOpen(true)
    } else {
      router.push(`/store/points-rules/${item.id}`)
    }
  }

  const getItemName = (item: StoreItem) => {
    return item.type === 'reward' ? (item.rewardName || item.name || 'Unnamed Reward') : (item.name || 'Unnamed Rule')
  }

  return (
    <PageTransition>
      <div className="p-6">
        <PageHeader
          title="My Store"
          subtitle="Manage your loyalty program and customer experience"
        >
          <Button 
            className="h-9 gap-2 rounded-md"
            onClick={() => router.push('/create')}
          >
            <Plus className="h-4 w-4" />
            Create Reward
          </Button>
        </PageHeader>
        
        <div className="space-y-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-2xl font-semibold tracking-tight">Store</h1>
              <p className="text-sm text-muted-foreground mt-1">
                Manage your rewards and points rules
              </p>
            </div>
            
            <div className="flex items-center gap-2">
              <Button 
                onClick={() => router.push('/create')}
                className="h-9 gap-2 rounded-md"
              >
                <Plus className="h-4 w-4" />
                Create
              </Button>
            </div>
          </div>
          
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search..."
                  className="pl-8 h-9 rounded-md w-full"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              
              <div className="flex items-center gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="h-9 gap-2 rounded-md">
                      <Filter className="h-4 w-4" />
                      <span>Filter</span>
                      <ChevronDown className="h-4 w-4 ml-1" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48 rounded-md">
                    <DropdownMenuItem onClick={() => setItemType('all')}>
                      All Items
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setItemType('reward')}>
                      Rewards Only
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setItemType('rule')}>
                      Rules Only
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="h-9 gap-2 rounded-md">
                      <ArrowUpDown className="h-4 w-4" />
                      <span>Sort</span>
                      <ChevronDown className="h-4 w-4 ml-1" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48 rounded-md">
                    <DropdownMenuItem onClick={() => setSortBy('newest')}>
                      Newest First
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setSortBy('oldest')}>
                      Oldest First
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setSortBy('name')}>
                      Name (A-Z)
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
            
            <Tabs defaultValue="grid" className="w-full">
              <div className="flex items-center justify-between">
                <TabsList className="h-9 rounded-md">
                  <TabsTrigger value="grid" className="rounded-sm">Grid</TabsTrigger>
                  <TabsTrigger value="list" className="rounded-sm">List</TabsTrigger>
                </TabsList>
                
                <div className="text-sm text-muted-foreground">
                  {filteredItems.length} {filteredItems.length === 1 ? 'item' : 'items'}
                </div>
              </div>
              
              <div className="mt-4">
                {loading ? (
                  <div className="flex items-center justify-center h-64">
                    <div className="text-center">
                      <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                      <p className="mt-2 text-sm text-muted-foreground">Loading items...</p>
                    </div>
                  </div>
                ) : (
                  <>
                    {filteredItems.length === 0 ? (
                      <div className="flex flex-col items-center justify-center h-64 border border-dashed rounded-lg">
                        <div className="text-center">
                          <p className="text-muted-foreground mb-4">No items found</p>
                          <Button 
                            onClick={() => router.push('/create')}
                            className="h-9 gap-2 rounded-md"
                          >
                            <Plus className="h-4 w-4" />
                            Create Item
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <TabsContent value="grid" className="mt-0">
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {filteredItems.map((item) => {
                              const Icon = getIcon(item.type);
                              return (
                                <Card 
                                  key={item.id}
                                  className="overflow-hidden border hover:border-primary/30 hover:shadow-sm transition-all cursor-pointer rounded-lg"
                                  onClick={() => handleViewItem(item)}
                                >
                                  <div className="p-4 flex items-center gap-4">
                                    <div className={cn(
                                      "h-10 w-10 rounded-md flex items-center justify-center flex-shrink-0",
                                      item.type === 'reward' ? "bg-purple-50" : "bg-blue-50"
                                    )}>
                                      <Icon className={cn(
                                        "h-5 w-5",
                                        item.type === 'reward' ? "text-purple-500" : "text-blue-500"
                                      )} />
                                    </div>
                                    
                                    <div className="flex-1 min-w-0">
                                      <div className="flex items-center justify-between">
                                        <h3 className="font-medium truncate">
                                          {getItemName(item)}
                                        </h3>
                                        <Badge 
                                          variant="outline" 
                                          className={cn(
                                            "ml-2 rounded-md",
                                            item.status === 'active' 
                                              ? "bg-green-50 text-green-700 border-green-200" 
                                              : "bg-gray-50 text-gray-700 border-gray-200"
                                          )}
                                        >
                                          {item.status || 'Draft'}
                                        </Badge>
                                      </div>
                                      <p className="text-sm text-muted-foreground truncate mt-1">
                                        {item.description || 'No description'}
                                      </p>
                                      <div className="flex items-center mt-2 text-xs text-muted-foreground">
                                        <span>
                                          {item.type === 'reward' 
                                            ? `${item.pointsCost || 0} points` 
                                            : `${item.points || 0} points`}
                                        </span>
                                        <span className="mx-2">•</span>
                                        <span>{item.category || 'Uncategorized'}</span>
                                      </div>
                                    </div>
                                  </div>
                                </Card>
                              );
                            })}
                          </div>
                        </TabsContent>
                        
                        <TabsContent value="list" className="mt-0">
                          <div className="border rounded-lg overflow-hidden">
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead className="w-[40px]"></TableHead>
                                  <TableHead>Name</TableHead>
                                  <TableHead>Type</TableHead>
                                  <TableHead>Points</TableHead>
                                  <TableHead>Status</TableHead>
                                  <TableHead>Category</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {filteredItems.map((item) => {
                                  const Icon = getIcon(item.type);
                                  return (
                                    <TableRow 
                                      key={item.id}
                                      className="cursor-pointer hover:bg-muted/50"
                                      onClick={() => handleViewItem(item)}
                                    >
                                      <TableCell>
                                        <div className={cn(
                                          "h-8 w-8 rounded-md flex items-center justify-center",
                                          item.type === 'reward' ? "bg-purple-50" : "bg-blue-50"
                                        )}>
                                          <Icon className={cn(
                                            "h-4 w-4",
                                            item.type === 'reward' ? "text-purple-500" : "text-blue-500"
                                          )} />
                                        </div>
                                      </TableCell>
                                      <TableCell className="font-medium">
                                        {getItemName(item)}
                                      </TableCell>
                                      <TableCell>
                                        {item.type === 'reward' ? 'Reward' : 'Rule'}
                                      </TableCell>
                                      <TableCell>
                                        {item.type === 'reward' 
                                          ? `${item.pointsCost || 0} points` 
                                          : `${item.points || 0} points`}
                                      </TableCell>
                                      <TableCell>
                                        <Badge 
                                          variant="outline" 
                                          className={cn(
                                            "rounded-md",
                                            item.status === 'active' 
                                              ? "bg-green-50 text-green-700 border-green-200" 
                                              : "bg-gray-50 text-gray-700 border-gray-200"
                                          )}
                                        >
                                          {item.status || 'Draft'}
                                        </Badge>
                                      </TableCell>
                                      <TableCell>
                                        {item.category || 'Uncategorized'}
                                      </TableCell>
                                    </TableRow>
                                  );
                                })}
                              </TableBody>
                            </Table>
                          </div>
                        </TabsContent>
                      </>
                    )}
                  </>
                )}
              </div>
            </Tabs>
          </div>
        </div>
      </div>
      
      {selectedRewardId && (
        <RewardDetailSheet
          open={isRewardDetailOpen}
          onOpenChange={setIsRewardDetailOpen}
          rewardId={selectedRewardId}
        />
      )}
    </PageTransition>
  );
} "use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  Table, 
  TableHeader, 
  TableRow, 
  TableHead, 
  TableBody, 
  TableCell
} from "@/components/ui/table"
import { 
  Popover,
  PopoverTrigger,
  PopoverContent
} from "@/components/ui/popover"
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectValue,
  SelectItem
} from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Calendar, Clock, Store, Gift, Sparkles, Users, UserPlus, ChevronLeft, ChevronRight, AlertCircle, CheckCircle, XCircle, BarChart, PieChart, Activity, Bell, Library, Plus, Search, Edit, Image as ImageIcon, Trash2 } from "lucide-react"
import { Filter, Download, MoreHorizontal, Eye } from "lucide-react"
import { cn } from "@/lib/utils"
import { format } from "date-fns"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { collection, query, getDocs, orderBy, Timestamp, where, doc, getDoc, deleteDoc, updateDoc, Firestore } from "firebase/firestore"
import { TapAiButton } from "@/components/tap-ai-button"
import { toast } from "@/components/ui/use-toast"
import { BannerPreview, BannerStyle, BannerVisibility } from "@/components/banner-preview"
import { BannerScheduler } from "@/components/banner-scheduler"
import { DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { PageHeader } from "@/components/page-header"

/** 
 * Replace this interface with your actual banner data fields.
 * For demonstration, we assume a "Banner" has an id, title, status, etc.
 */
interface Banner {
  id: string
  title: string
  imageUrl: string
  status: string  // "active", "draft", "expired"
  createdAt: Timestamp | string
  expiresAt?: Timestamp | string
  link?: string
  description?: string
  color?: string
  cssColor?: string
  isActive: boolean
  scheduleStartMinutes?: number
  scheduleEndMinutes?: number
  scheduleStartHour?: number
  scheduleEndHour?: number
  scheduled?: boolean
  buttonText?: string
  style?: string
  merchantName?: string
  visibilityType?: string
  endsNextDay?: boolean
  impressions?: number
  impressioncustomercount?: number
  bannerAction?: string
}

export default function BannerPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [banners, setBanners] = useState<Banner[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [showFilters, setShowFilters] = useState(false)
  const [statusFilters, setStatusFilters] = useState({
    active: true,
    draft: true,
    expired: true
  })
  const [dateFilter, setDateFilter] = useState("all")
  const [loading, setLoading] = useState(true)
  const [bannerToDelete, setBannerToDelete] = useState<string | null>(null)

  // Fetch banners from Firestore
  useEffect(() => {
    const fetchBanners = async () => {
      if (!user?.uid) return
      
      try {
        setLoading(true)
        
        const bannersRef = collection(db, 'merchants', user.uid, 'banners')
        const bannersQuery = query(bannersRef, orderBy('createdAt', 'desc'))
        const bannersSnapshot = await getDocs(bannersQuery)
        
        const bannersData: Banner[] = []
        bannersSnapshot.forEach((doc) => {
          const data = doc.data();
          console.log("Banner data:", data);
          console.log("Status:", data.status);
          console.log("isActive field:", data.isActive);
          
          bannersData.push({
            id: doc.id,
            ...data as Omit<Banner, 'id'>,
            // Use the actual isActive field if it exists, otherwise derive from status
            isActive: data.isActive !== undefined ? data.isActive : data.status === "active"
          })
        })
        
        setBanners(bannersData)
      } catch (error) {
        console.error("Error fetching banners:", error)
        toast({
          title: "Error",
          description: "Failed to load banners. Please try again.",
          variant: "destructive"
        })
      } finally {
        setLoading(false)
      }
    }
    
    fetchBanners()
  }, [user])

  /**
   * Filtering function: 
   * - matches search by title
   * - applies status filters
   * - date filter is mocked for demonstration
   */
  const filteredBanners = banners.filter(banner => {
    const matchesSearch = !searchQuery
      ? true
      : banner.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (banner.description && banner.description.toLowerCase().includes(searchQuery.toLowerCase()))

    // Handle undefined or null status values
    const status = banner.status?.toLowerCase() || 'unknown';
    const matchesStatus = statusFilters[status as keyof typeof statusFilters] || 
                          (status === 'unknown' && statusFilters.draft); // Default unknown status to draft filter

    // For demonstration only (no custom start/end date range here)
    if (dateFilter === "all") {
      return matchesSearch && matchesStatus
    }

    // Example: filter only today's banners
    if (dateFilter === "today") {
      const bannerDate = banner.createdAt ? 
        (typeof banner.createdAt === 'object' && 'seconds' in banner.createdAt) ? 
          new Date(banner.createdAt.seconds * 1000) : 
          new Date(banner.createdAt) : 
        new Date();
        
      const now = new Date()
      const isToday =
        bannerDate.getDate() === now.getDate() &&
        bannerDate.getMonth() === now.getMonth() &&
        bannerDate.getFullYear() === now.getFullYear()
      return matchesSearch && matchesStatus && isToday
    }

    return matchesSearch && matchesStatus
  })

  // Format date for display - handle both string dates and Firestore timestamps
  const formatDate = (dateValue: Timestamp | string | undefined) => {
    if (!dateValue) return "N/A"
    
    try {
      // Handle Firestore Timestamp
      if (typeof dateValue === 'object' && 'seconds' in dateValue) {
        const date = new Date(dateValue.seconds * 1000)
        return format(date, 'MMM d, yyyy h:mm a')
      }
      
      // Handle string date
      if (typeof dateValue === 'string') {
        const date = new Date(dateValue)
        return format(date, 'MMM d, yyyy h:mm a')
      }
      
      return "Invalid date"
    } catch (e) {
      console.error("Error formatting date:", e)
      return "Invalid date"
    }
  }

  // Mock PDF export
  const handleExportPDF = () => {
    alert("Exporting banners to PDF (mock). Implement PDF logic here.")
  }

  const handleViewDetails = (bannerId: string) => {
    // Replace with valid path or routing logic for your store
    router.push(`/store/banner/${bannerId}`)
  }

  const handleStatusFilterChange = (status: string, checked: boolean) => {
    setStatusFilters(prev => ({
      ...prev,
      [status.toLowerCase()]: checked
    }))
  }

  // Update handleToggleActive to set isActive to false when activating

  const handleToggleActive = async (bannerId: string, newActiveState: boolean) => {
    try {
      if (!user?.uid) return;
      
      // If activating, check for schedule conflicts and auto-resolve if needed
      if (newActiveState) {
        const bannerToActivate = banners.find(b => b.id === bannerId);
        
        if (!bannerToActivate) {
          throw new Error("Banner not found");
        }
        
        // Get the start and end minutes for the banner being activated
        let startMinutes = bannerToActivate.scheduleStartMinutes !== undefined 
          ? bannerToActivate.scheduleStartMinutes 
          : (bannerToActivate.scheduleStartHour !== undefined ? bannerToActivate.scheduleStartHour * 60 : 0);
        
        let endMinutes = bannerToActivate.scheduleEndMinutes !== undefined 
          ? bannerToActivate.scheduleEndMinutes 
          : (bannerToActivate.scheduleEndHour !== undefined ? bannerToActivate.scheduleEndHour * 60 : 24 * 60);
        
        // Check for conflicts with other active and scheduled banners
        const activeScheduledBanners = banners.filter(banner => 
          banner.id !== bannerId && 
          banner.isActive && 
          banner.scheduled
        );
        
        // If there are conflicts, find a free time slot
        const hasConflict = activeScheduledBanners.some(banner => 
          startMinutes < (banner.scheduleEndMinutes || banner.scheduleEndHour * 60 || 24 * 60) && 
          endMinutes > (banner.scheduleStartMinutes || banner.scheduleStartHour * 60 || 0)
        );
        
        if (hasConflict) {
          // Find a free time slot (minimum 2 hours)
          const minSlotSize = 120; // 2 hours in minutes
          const freeSlot = findFreeTimeSlot(activeScheduledBanners, minSlotSize);
          
          if (freeSlot) {
            // Use the free slot
            startMinutes = freeSlot.start;
            endMinutes = freeSlot.end;
            
            // Show toast about automatic scheduling
            toast({
              title: "Schedule Adjusted",
              description: `Banner schedule was automatically adjusted to ${formatTime(startMinutes)} - ${formatTime(endMinutes)} to avoid conflicts.`,
            });
          } else {
            // No free slot found
            toast({
              title: "Schedule Conflict",
              description: "No available time slot found. Please deactivate another banner or manually adjust schedules.",
              variant: "destructive"
            });
            return; // Exit without activating
          }
        }
        
        const bannerRef = doc(db, 'merchants', user.uid, 'banners', bannerId);
        
        // Store time values as strings in 24-hour format (HH:MM)
        const startTimeString = `${Math.floor(startMinutes / 60).toString().padStart(2, '0')}:${(startMinutes % 60).toString().padStart(2, '0')}`;
        const endTimeString = `${Math.floor(endMinutes / 60).toString().padStart(2, '0')}:${(endMinutes % 60).toString().padStart(2, '0')}`;
        
        // Update with new schedule if it was adjusted
        await updateDoc(bannerRef, {
          isActive: false, // Set to false when activating, as requested
          scheduled: true,
          scheduleStartMinutes: startMinutes,
          scheduleEndMinutes: endMinutes,
          scheduleStartHour: Math.floor(startMinutes / 60),
          scheduleEndHour: Math.ceil(endMinutes / 60),
          startTime: startTimeString,
          endTime: endTimeString,
          updatedAt: new Date()
        });
        
        // Update local state
        setBanners(prev => prev.map(banner => 
          banner.id === bannerId 
            ? {
                ...banner, 
                isActive: false, // Set to false when activating, as requested
                scheduled: true,
                scheduleStartMinutes: startMinutes,
                scheduleEndMinutes: endMinutes,
                scheduleStartHour: Math.floor(startMinutes / 60),
                scheduleEndHour: Math.ceil(endMinutes / 60),
                startTime: startTimeString,
                endTime: endTimeString
              } 
            : banner
        ));
      } else {
        // If deactivating, just update isActive
        const bannerRef = doc(db, 'merchants', user.uid, 'banners', bannerId);
        await updateDoc(bannerRef, {
          isActive: false, // Keep as false when deactivating
          updatedAt: new Date()
        });
        
        // Update local state
        setBanners(prev => prev.map(banner => 
          banner.id === bannerId 
            ? {...banner, isActive: false} // Keep as false when deactivating
            : banner
        ));
      }
      
      toast({
        title: newActiveState ? "Banner activated" : "Banner deactivated",
        description: `The banner has been ${newActiveState ? "activated" : "deactivated"} successfully.`,
      });
    } catch (error) {
      console.error("Error toggling banner active state:", error);
      toast({
        title: "Error",
        description: "Failed to update banner. Please try again.",
        variant: "destructive"
      });
    }
  };

  // Helper function to find a free time slot
  const findFreeTimeSlot = (activeScheduledBanners: any[], minSlotSize: number) => {
    // If no active banners, return the whole day
    if (activeScheduledBanners.length === 0) {
      return { start: 0, end: 24 * 60 };
    }
    
    // Get all occupied time slots
    const occupiedSlots = activeScheduledBanners.map(banner => ({
      start: banner.scheduleStartMinutes !== undefined 
        ? banner.scheduleStartMinutes 
        : (banner.scheduleStartHour !== undefined ? banner.scheduleStartHour * 60 : 0),
      end: banner.scheduleEndMinutes !== undefined 
        ? banner.scheduleEndMinutes 
        : (banner.scheduleEndHour !== undefined ? banner.scheduleEndHour * 60 : 24 * 60)
    })).sort((a, b) => a.start - b.start);
    
    // Find gaps between occupied slots
    let previousEnd = 0;
    
    for (const slot of occupiedSlots) {
      const gapSize = slot.start - previousEnd;
      
      // If gap is big enough, use it
      if (gapSize >= minSlotSize) {
        return { start: previousEnd, end: slot.start };
      }
      
      previousEnd = Math.max(previousEnd, slot.end);
    }
    
    // Check if there's space after the last banner
    if (24 * 60 - previousEnd >= minSlotSize) {
      return { start: previousEnd, end: 24 * 60 };
    }
    
    // No suitable gap found
    return null;
  };

  const handleBannerScheduleUpdate = async (bannerId: string, updates: any) => {
    try {
      if (!user?.uid) return;
      
      const bannerRef = doc(db, 'merchants', user.uid, 'banners', bannerId);
      
      // If we're setting scheduled to false, also set isActive to false
      if (updates.scheduled === false) {
        updates.isActive = false;
      }
      
      // Handle banners extending past midnight
      if (updates.extendedOverMidnight) {
        // For UI display, we'll use scheduleEndMinutes > 24*60
        // But for time string representation, we'll wrap to next day
        const startMinutes = updates.scheduleStartMinutes ?? 
          banners.find(b => b.id === bannerId)?.scheduleStartMinutes ?? 0;
        
        const endMinutes = updates.scheduleEndMinutes ?? 
          banners.find(b => b.id === bannerId)?.scheduleEndMinutes ?? 0;
        
        // Store time values as strings in 24-hour format (HH:MM)
        updates.startTime = `${Math.floor(startMinutes / 60).toString().padStart(2, '0')}:${(startMinutes % 60).toString().padStart(2, '0')}`;
        
        // For end time, wrap to next day format if needed
        const adjustedEndMinutes = endMinutes % (24 * 60);
        updates.endTime = `${Math.floor(adjustedEndMinutes / 60).toString().padStart(2, '0')}:${(adjustedEndMinutes % 60).toString().padStart(2, '0')}`;
        updates.endsNextDay = true;
      }
      // Regular schedule time updates
      else if (updates.scheduleStartMinutes !== undefined || updates.scheduleEndMinutes !== undefined) {
        const banner = banners.find(b => b.id === bannerId);
        if (!banner) return;
        
        const startMinutes = updates.scheduleStartMinutes ?? banner.scheduleStartMinutes ?? 0;
        const endMinutes = updates.scheduleEndMinutes ?? banner.scheduleEndMinutes ?? 24 * 60;
        
        // Store time values as strings in 24-hour format (HH:MM)
        updates.startTime = `${Math.floor(startMinutes / 60).toString().padStart(2, '0')}:${(startMinutes % 60).toString().padStart(2, '0')}`;
        updates.endTime = `${Math.floor(endMinutes / 60).toString().padStart(2, '0')}:${(endMinutes % 60).toString().padStart(2, '0')}`;
        updates.endsNextDay = false;
      }
      
      await updateDoc(bannerRef, {
        ...updates,
        updatedAt: new Date()
      });
      
      // Update local state
      setBanners(prev => prev.map(banner => 
        banner.id === bannerId 
          ? {...banner, ...updates} 
          : banner
      ));
      
      toast({
        title: updates.extendedOverMidnight 
          ? "Banner extended past midnight successfully."
          : "Banner schedule has been updated successfully."
      });
    } catch (error) {
      console.error("Error updating banner:", error);
      toast({
        title: "Error",
        description: "Failed to update banner. Please try again.",
        variant: "destructive"
      });
    }
  };

  const formatTime = (minutes: number): string => {
    const hours = Math.floor(minutes / 60)
    const mins = minutes % 60
    
    const period = hours < 12 ? 'AM' : 'PM'
    const displayHours = hours === 0 || hours === 12 ? 12 : hours % 12
    
    return `${displayHours}:${mins.toString().padStart(2, '0')} ${period}`
  }

  // Add a delete function to handle banner deletion
  const handleDeleteBanner = (bannerId: string) => {
    // Set the banner ID to delete, which will open the confirmation dialog
    setBannerToDelete(bannerId);
  };

  // Add a function to handle the actual deletion when confirmed
  const confirmDeleteBanner = async () => {
    if (!bannerToDelete || !user?.uid) {
      setBannerToDelete(null);
      return;
    }
    
    try {
      // Reference to the banner document
      const bannerRef = doc(db, 'merchants', user.uid, 'banners', bannerToDelete);
      
      // Delete the banner
      await deleteDoc(bannerRef);
      
      // Update the UI by removing the deleted banner
      setBanners(prev => prev.filter(banner => banner.id !== bannerToDelete));
      
      toast({
        title: "Banner deleted",
        description: "The banner has been successfully deleted.",
        variant: "default"
      });
    } catch (error) {
      console.error("Error deleting banner:", error);
      toast({
        title: "Error",
        description: "Failed to delete banner. Please try again.",
        variant: "destructive"
      });
    } finally {
      // Clear the banner to delete state
      setBannerToDelete(null);
    }
  };

  // Update the function to schedule for 4 hours when no banners are active
  const findNonConflictingTimeSlot = (banners: Banner[]): { startMinutes: number, endMinutes: number } => {
    // If no banners are scheduled, return a 4-hour slot starting now
    const scheduledBanners = banners.filter(b => b.scheduled && b.isActive);
    if (scheduledBanners.length === 0) {
      // Get current time rounded to the nearest hour
      const now = new Date();
      const currentHour = now.getHours();
      const startMinutes = currentHour * 60;
      
      // Schedule for 4 hours
      const endMinutes = startMinutes + 240;
      
      // If end time would be after midnight, cap at midnight
      return {
        startMinutes,
        endMinutes: Math.min(endMinutes, 24 * 60)
      };
    }
    
    // Sort banners by start time
    const sortedBanners = [...scheduledBanners].sort((a, b) => {
      const aStart = a.scheduleStartMinutes || 0;
      const bStart = b.scheduleStartMinutes || 0;
      return aStart - bStart;
    });
    
    // Find gaps between scheduled banners
    let previousEndTime = 0;
    
    for (const banner of sortedBanners) {
      const startTime = banner.scheduleStartMinutes || 0;
      
      // If there's a gap of at least 240 minutes (4 hours), use it
      if (startTime - previousEndTime >= 240) {
        return {
          startMinutes: previousEndTime,
          endMinutes: Math.min(previousEndTime + 240, startTime) // Use 4 hours or up to the next banner
        };
      }
      
      previousEndTime = banner.scheduleEndMinutes || 24 * 60;
    }
    
    // Check if there's space after the last banner
    if (previousEndTime < 24 * 60 - 240) {
      return {
        startMinutes: previousEndTime,
        endMinutes: previousEndTime + 240 // Schedule for 4 hours
      };
    }
    
    // If no suitable gap found, return a default 4-hour slot at the beginning of the day
    return {
      startMinutes: 0,
      endMinutes: 240
    };
  };

  // Update the scheduling function to use the non-conflicting time slot finder
  const handleScheduleBanner = (bannerId: string) => {
    // Check if there are already 4 scheduled banners
    const scheduledCount = banners.filter((b: Banner) => b.scheduled).length
    if (scheduledCount >= 4) {
      toast({
        title: "Maximum Scheduled Banners Reached",
        description: "Only 4 banners can be scheduled at once. Please remove one before adding another.",
        variant: "destructive"
      })
      return
    }

    const timeSlot = findNonConflictingTimeSlot(banners)
    
    handleBannerScheduleUpdate(bannerId, {
      scheduled: true,
      scheduleStartMinutes: timeSlot.startMinutes,
      scheduleEndMinutes: timeSlot.endMinutes
    })

    // Show a toast notification
    toast({
      title: "Banner Scheduled",
      description: `Banner scheduled from ${formatTime(timeSlot.startMinutes)} to ${formatTime(timeSlot.endMinutes)}.`,
      variant: "default"
    })
  };

  return (
    <div className="p-6 py-4">

      <PageHeader
        title="Banners"
        subtitle="Create and manage your store banners"
      >
        <div className="flex items-center gap-2">
          <Button 
            onClick={() => router.push('/store/banner/create')}
            className="flex items-center gap-1"
          >
            <Plus className="h-4 w-4" />
            Create Banner
          </Button>
          <Button 
            variant="outline" 
            className="h-9 gap-2 rounded-lg"
            onClick={handleExportPDF}
          >
            <Download className="h-4 w-4" />
            Export
          </Button>
        </div>
      </PageHeader>

      <Tabs defaultValue="all" className="w-full">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
          <TabsList className="whitespace-nowrap">
            <TabsTrigger value="all" className="flex items-center gap-2">
              <ImageIcon className="h-4 w-4" />
              All Banners
            </TabsTrigger>
              <TabsTrigger value="active" className="flex items-center gap-2">
              <Eye className="h-4 w-4" />
                Active
              </TabsTrigger>
              <TabsTrigger value="inactive" className="flex items-center gap-2">
                <Eye className="h-4 w-4 opacity-50" />
                Inactive
            </TabsTrigger>
          </TabsList>
            
            {/* Vertical divider */}
            <div className="h-8 w-px bg-gray-200 mx-2"></div>
            
            <TabsList className="whitespace-nowrap">
              <TabsTrigger value="schedule" className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                Schedule
              </TabsTrigger>
            </TabsList>
          </div>

          <div className="flex items-center gap-2">
            <div className="relative w-[250px]">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search banners..."
                className="pl-8"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>

            <Popover open={showFilters} onOpenChange={setShowFilters}>
              <PopoverTrigger asChild>
                <Button variant="outline" className="gap-1">
                  <Filter className="h-4 w-4" />
                  Filters
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-72 p-4" align="end">
                <div className="space-y-4">
                  <h4 className="font-medium">Filter Banners</h4>

                  <div className="space-y-2">
                    <Label>Date Range</Label>
                    <Select 
                      value={dateFilter} 
                      onValueChange={(value) => setDateFilter(value)}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Select date range" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Time</SelectItem>
                        <SelectItem value="today">Today</SelectItem>
                        <SelectItem value="thisWeek">This Week</SelectItem>
                        <SelectItem value="thisMonth">This Month</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Status</Label>
                    <div className="flex flex-col gap-2">
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="status-active" 
                          checked={statusFilters.active}
                          onCheckedChange={(checked) => handleStatusFilterChange("active", !!checked)}
                        />
                        <Label htmlFor="status-active" className="cursor-pointer">Active</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="status-draft" 
                          checked={statusFilters.draft}
                          onCheckedChange={(checked) => handleStatusFilterChange("draft", !!checked)}
                        />
                        <Label htmlFor="status-draft" className="cursor-pointer">Draft</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="status-expired" 
                          checked={statusFilters.expired}
                          onCheckedChange={(checked) => handleStatusFilterChange("expired", !!checked)}
                        />
                        <Label htmlFor="status-expired" className="cursor-pointer">Expired</Label>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-between pt-2">
                    <Button 
                      variant="outline" 
                      onClick={() => {
                        setDateFilter("all")
                        setStatusFilters({ active: true, draft: true, expired: true })
                      }}
                    >
                      Reset
                    </Button>
                    <Button onClick={() => setShowFilters(false)}>
                      Apply
                    </Button>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>
        
        <TabsContent value="all">
          {loading ? (
            <div className="h-24 flex items-center justify-center">
              <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent" />
            </div>
          ) : filteredBanners.length === 0 ? (
            <div className="h-24 flex flex-col items-center justify-center space-y-2">
              <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                <Bell className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium">No banners found</h3>
              <p className="text-sm text-muted-foreground">
                {searchQuery
                  ? "Try adjusting your search query"
                  : "Create your first banner to get started"}
              </p>
              <Button
                variant="default"
                className="mt-2 gap-2"
                onClick={() => router.push("/store/banner/create")}
              >
                <Plus className="h-4 w-4" />
                Create Banner
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredBanners.map((banner) => (
                <div key={banner.id} className="flex flex-col bg-gray-50 rounded-lg overflow-hidden">
                  {/* Banner Preview with status badges */}
                  <div className="relative">
                    {/* Status Badge */}
                    <div className="absolute top-2 right-2 z-10 flex space-x-2">
                      {banner.isActive && (
                        <div className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                          <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-1 animate-pulse"></span>
                          Live
                        </div>
                      )}
                      {banner.scheduled && (
                        <div className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full flex items-center">
                          <Clock className="h-3 w-3 mr-1" />
                          Scheduled
                        </div>
                      )}
                    </div>
                    
                    {/* Banner preview */}
                    <div className="rounded-t-lg overflow-hidden shadow-sm">
                      <BannerPreview
                        title={banner.title}
                        description={banner.description}
                        buttonText={banner.buttonText}
                        color={banner.color ?? "#0ea5e9"}
                        styleType={
                          banner.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                          banner.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                          banner.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                          BannerStyle.LIGHT
                        }
                        merchantName={banner.merchantName ?? "My Store"}
                        visibilityType={BannerVisibility.ALL}
                        isActive={banner.isActive}
                      />
                    </div>
                  </div>
                  
                  {/* Content section - all in the same gray background */}
                  <div className="p-4">
                    {/* Banner title and description */}
                    <h4 className="font-medium text-sm mb-1">{banner.title}</h4>
                    <p className="text-xs text-gray-500 mb-2 line-clamp-2">{banner.description}</p>
                    
                    {/* Stats in a row format */}
                    <div className="flex flex-wrap gap-x-4 gap-y-2 mb-3">
                      <div className="flex items-center text-xs text-gray-600">
                        <BarChart className="h-3 w-3 mr-1 text-gray-400" />
                        <span className="font-medium">{banner.impressions || 0}</span>
                        <span className="text-gray-400 ml-1">views</span>
                      </div>
                      <div className="flex items-center text-xs text-gray-600">
                        <Users className="h-3 w-3 mr-1 text-gray-400" />
                        <span className="font-medium">{banner.impressioncustomercount || 0}</span>
                        <span className="text-gray-400 ml-1">customers</span>
                      </div>
                    </div>
                    
                    {/* Schedule information - show for all banners */}
                    <div className="flex items-center gap-1 mb-3 text-xs">
                      <Clock className="h-3.5 w-3.5 text-gray-400" />
                      {banner.scheduled ? (
                        <span className="text-blue-600">
                          {banner.scheduleStartMinutes !== undefined && banner.scheduleEndMinutes !== undefined ? (
                            <>
                              {banner.isActive ? "Showing: " : "Scheduled: "}
                              {formatTime(banner.scheduleStartMinutes)} - {formatTime(banner.scheduleEndMinutes % (24 * 60))}
                              {banner.endsNextDay && <span className="ml-1 text-xs bg-blue-100 px-1 py-0.5 rounded">Next day</span>}
                            </>
                          ) : (
                            banner.isActive ? "Showing all day" : "Scheduled all day"
                          )}
                        </span>
                      ) : (
                        <span className="text-amber-600 font-medium">Not currently scheduled</span>
                      )}
                    </div>
                    
                    {/* Action buttons */}
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="flex-1"
                        onClick={() => router.push(`/store/banner/${banner.id}/edit`)}
                      >
                        <Edit className="h-3.5 w-3.5 mr-1.5" />
                        Edit
                      </Button>
                      
                      {banner.scheduled ? (
                        <Button 
                          variant="outline"
                          size="sm" 
                          className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                          onClick={() => {
                            handleBannerScheduleUpdate(banner.id, {
                              scheduled: false
                            })
                          }}
                        >
                          <Clock className="h-3.5 w-3.5 mr-1.5" />
                          Remove
                        </Button>
                      ) : (
                        <Button 
                          variant="outline"
                          size="sm"
                          className="flex-1"
                          onClick={() => handleScheduleBanner(banner.id)}
                        >
                          <Plus className="h-3.5 w-3.5 mr-1.5" />
                          Schedule
                        </Button>
                      )}
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                        onClick={() => handleDeleteBanner(banner.id)}
                      >
                        <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                        Delete
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="active">
          {loading ? (
            <div className="h-24 flex items-center justify-center">
              <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent" />
            </div>
          ) : filteredBanners.filter(banner => banner.scheduled).length === 0 ? (
            <div className="h-24 flex flex-col items-center justify-center space-y-2">
              <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                <Bell className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium">No active banners found</h3>
              <p className="text-sm text-muted-foreground">
                {searchQuery
                  ? "Try adjusting your search query"
                  : "Schedule banners to make them active"}
              </p>
              <Button
                variant="default"
                className="mt-2 gap-2"
                onClick={() => router.push("/store/banner/create")}
              >
                <Plus className="h-4 w-4" />
                Create Banner
              </Button>
            </div>
          ) : (
            <div className="space-y-8">
              {/* Currently Live section */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center">
                  <Eye className="h-5 w-5 mr-2 text-green-500" />
                  Currently Live
                  <Badge variant="outline" className="ml-2">
                    {filteredBanners.filter(banner => banner.scheduled && banner.isActive).length}
                  </Badge>
                </h3>
                <p className="text-sm text-muted-foreground mb-4">
                  These banners are currently visible to customers based on their schedule.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredBanners
                    .filter(banner => banner.scheduled && banner.isActive)
                    .map((banner) => (
                      <div key={banner.id} className="flex flex-col bg-gray-50 rounded-lg overflow-hidden">
                        {/* Banner Preview with status badges */}
                        <div className="relative">
                          {/* Status Badge */}
                          <div className="absolute top-2 right-2 z-10 flex space-x-2">
                            <div className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                              <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-1 animate-pulse"></span>
                              Live
                            </div>
                          </div>
                          
                          {/* Banner preview */}
                          <div className="rounded-t-lg overflow-hidden shadow-sm">
                            <BannerPreview
                              title={banner.title}
                              description={banner.description}
                              buttonText={banner.buttonText}
                              color={banner.color ?? "#0ea5e9"}
                              styleType={
                                banner.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                                banner.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                                banner.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                                BannerStyle.LIGHT
                              }
                              merchantName={banner.merchantName ?? "My Store"}
                              visibilityType={BannerVisibility.ALL}
                              isActive={banner.isActive}
                            />
                          </div>
                        </div>
                        
                        {/* Content section - all in the same gray background */}
                        <div className="p-4">
                          {/* Banner title and description */}
                          <h4 className="font-medium text-sm mb-1">{banner.title}</h4>
                          <p className="text-xs text-gray-500 mb-2 line-clamp-2">{banner.description}</p>
                          
                          {/* Stats in a row format */}
                          <div className="flex flex-wrap gap-x-4 gap-y-2 mb-3">
                            <div className="flex items-center text-xs text-gray-600">
                              <BarChart className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressions || 0}</span>
                              <span className="text-gray-400 ml-1">views</span>
                            </div>
                            <div className="flex items-center text-xs text-gray-600">
                              <Users className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressioncustomercount || 0}</span>
                              <span className="text-gray-400 ml-1">customers</span>
                            </div>
                          </div>
                          
                          {/* Schedule information */}
                          <div className="flex items-center gap-1 mb-3 text-xs">
                            <Clock className="h-3.5 w-3.5 text-gray-400" />
                            {banner.scheduled ? (
                              <span className="text-blue-600">
                                {banner.scheduleStartMinutes !== undefined && banner.scheduleEndMinutes !== undefined ? (
                                  <>
                                    {banner.isActive ? "Showing: " : "Scheduled: "}
                                    {formatTime(banner.scheduleStartMinutes)} - {formatTime(banner.scheduleEndMinutes % (24 * 60))}
                                    {banner.endsNextDay && <span className="ml-1 text-xs bg-blue-100 px-1 py-0.5 rounded">Next day</span>}
                                  </>
                                ) : (
                                  banner.isActive ? "Showing all day" : "Scheduled all day"
                                )}
                              </span>
                            ) : (
                              <span className="text-amber-600 font-medium">Not currently scheduled</span>
                            )}
                          </div>
                          
                          {/* Action buttons */}
                          <div className="flex gap-2">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1"
                              onClick={() => router.push(`/store/banner/${banner.id}/edit`)}
                            >
                              <Edit className="h-3.5 w-3.5 mr-1.5" />
                              Edit
                            </Button>
                            
                            <Button 
                              variant="outline"
                              size="sm" 
                              className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                              onClick={() => {
                                handleBannerScheduleUpdate(banner.id, {
                                  scheduled: false
                                })
                              }}
                            >
                              <Clock className="h-3.5 w-3.5 mr-1.5" />
                              Remove
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                              onClick={() => handleDeleteBanner(banner.id)}
                            >
                              <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                              Delete
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
              
              {/* Scheduled for Later section */}
              <div className="mt-8">
                <h3 className="text-lg font-medium mb-4 flex items-center">
                  <Clock className="h-5 w-5 mr-2 text-blue-500" />
                  Scheduled for Later
                  <Badge variant="outline" className="ml-2">
                    {filteredBanners.filter(banner => banner.scheduled && !banner.isActive).length}
                  </Badge>
                </h3>
                <p className="text-sm text-muted-foreground mb-4">
                  These banners are scheduled but not currently active.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredBanners
                    .filter(banner => banner.scheduled && !banner.isActive)
                    .map((banner) => (
                      <div key={banner.id} className="flex flex-col bg-gray-50 rounded-lg overflow-hidden">
                        {/* Banner Preview with status badges */}
                        <div className="relative">
                          {/* Status Badge */}
                          <div className="absolute top-2 right-2 z-10">
                            <div className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full flex items-center">
                              <Clock className="h-3 w-3 mr-1" />
                              Scheduled
                            </div>
                          </div>
                          
                          {/* Banner preview */}
                          <div className="rounded-t-lg overflow-hidden shadow-sm">
                            <BannerPreview
                              title={banner.title}
                              description={banner.description}
                              buttonText={banner.buttonText}
                              color={banner.color ?? "#0ea5e9"}
                              styleType={
                                banner.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                                banner.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                                banner.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                                BannerStyle.LIGHT
                              }
                              merchantName={banner.merchantName ?? "My Store"}
                              visibilityType={BannerVisibility.ALL}
                              isActive={banner.isActive}
                            />
                          </div>
                        </div>
                        
                        {/* Content section - all in the same gray background */}
                        <div className="p-4">
                          {/* Banner title and description */}
                          <h4 className="font-medium text-sm mb-1">{banner.title}</h4>
                          <p className="text-xs text-gray-500 mb-2 line-clamp-2">{banner.description}</p>
                          
                          {/* Stats in a row format */}
                          <div className="flex flex-wrap gap-x-4 gap-y-2 mb-3">
                            <div className="flex items-center text-xs text-gray-600">
                              <BarChart className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressions || 0}</span>
                              <span className="text-gray-400 ml-1">views</span>
                            </div>
                            <div className="flex items-center text-xs text-gray-600">
                              <Users className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressioncustomercount || 0}</span>
                              <span className="text-gray-400 ml-1">customers</span>
                            </div>
                          </div>
                          
                          {/* Schedule information */}
                          <div className="flex items-center gap-1 mb-3 text-xs">
                            <Clock className="h-3.5 w-3.5 text-gray-400" />
                            {banner.scheduled ? (
                              <span className="text-blue-600">
                                {banner.scheduleStartMinutes !== undefined && banner.scheduleEndMinutes !== undefined ? (
                                  <>
                                    {banner.isActive ? "Showing: " : "Scheduled: "}
                                    {formatTime(banner.scheduleStartMinutes)} - {formatTime(banner.scheduleEndMinutes % (24 * 60))}
                                    {banner.endsNextDay && <span className="ml-1 text-xs bg-blue-100 px-1 py-0.5 rounded">Next day</span>}
                                  </>
                                ) : (
                                  banner.isActive ? "Showing all day" : "Scheduled all day"
                                )}
                              </span>
                            ) : (
                              <span className="text-amber-600 font-medium">Not currently scheduled</span>
                            )}
                          </div>
                          
                          {/* Action buttons */}
                          <div className="flex gap-2">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1"
                              onClick={() => router.push(`/store/banner/${banner.id}/edit`)}
                            >
                              <Edit className="h-3.5 w-3.5 mr-1.5" />
                              Edit
                            </Button>
                            
                            <Button 
                              variant="outline"
                              size="sm" 
                              className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                              onClick={() => {
                                handleBannerScheduleUpdate(banner.id, {
                                  scheduled: false
                                })
                              }}
                            >
                              <Clock className="h-3.5 w-3.5 mr-1.5" />
                              Remove
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                              onClick={() => handleDeleteBanner(banner.id)}
                            >
                              <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                              Delete
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          )}
        </TabsContent>

        <TabsContent value="inactive">
          {loading ? (
            <div className="h-24 flex items-center justify-center">
              <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent" />
            </div>
          ) : filteredBanners.filter(banner => !banner.scheduled).length === 0 ? (
            <div className="h-24 flex flex-col items-center justify-center space-y-2">
              <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                <Bell className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium">No inactive banners</h3>
              <p className="text-sm text-muted-foreground">
                {searchQuery
                  ? "Try adjusting your search query"
                  : "All your banners are currently scheduled"}
              </p>
              <Button
                variant="default"
                className="mt-2 gap-2"
                onClick={() => router.push("/store/banner/create")}
              >
                <Plus className="h-4 w-4" />
                Create Banner
              </Button>
            </div>
          ) : (
            <div className="space-y-8">
              {/* Unscheduled Banners */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center">
                  <XCircle className="h-5 w-5 mr-2 text-gray-500" />
                  Unscheduled Banners
                  <Badge variant="outline" className="ml-2">
                    {filteredBanners.filter(banner => !banner.scheduled).length}
                  </Badge>
                </h3>
                <p className="text-sm text-muted-foreground mb-4">
                  These banners are not scheduled. Schedule them to make them available for display.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredBanners
                    .filter(banner => !banner.scheduled)
                    .map((banner) => (
                      <div key={banner.id} className="flex flex-col bg-gray-50 rounded-lg overflow-hidden">
                        {/* Banner Preview with status badges */}
                        <div className="relative">
                          {/* Status Badge */}
                          <div className="absolute top-2 right-2 z-10">
                            <div className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full flex items-center">
                              <XCircle className="h-3 w-3 mr-1" />
                              Unscheduled
                            </div>
                          </div>
                          
                          {/* Banner preview */}
                          <div className="rounded-t-lg overflow-hidden shadow-sm">
                            <BannerPreview
                              title={banner.title}
                              description={banner.description}
                              buttonText={banner.buttonText}
                              color={banner.color ?? "#0ea5e9"}
                              styleType={
                                banner.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                                banner.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                                banner.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                                BannerStyle.LIGHT
                              }
                              merchantName={banner.merchantName ?? "My Store"}
                              visibilityType={BannerVisibility.ALL}
                              isActive={banner.isActive}
                            />
                          </div>
                        </div>
                        
                        {/* Content section - all in the same gray background */}
                        <div className="p-4">
                          {/* Banner title and description */}
                          <h4 className="font-medium text-sm mb-1">{banner.title}</h4>
                          <p className="text-xs text-gray-500 mb-2 line-clamp-2">{banner.description}</p>
                          
                          {/* Stats in a row format */}
                          <div className="flex flex-wrap gap-x-4 gap-y-2 mb-3">
                            <div className="flex items-center text-xs text-gray-600">
                              <BarChart className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressions || 0}</span>
                              <span className="text-gray-400 ml-1">views</span>
                            </div>
                            <div className="flex items-center text-xs text-gray-600">
                              <Users className="h-3 w-3 mr-1 text-gray-400" />
                              <span className="font-medium">{banner.impressioncustomercount || 0}</span>
                              <span className="text-gray-400 ml-1">customers</span>
                            </div>
                          </div>
                          
                          {/* Schedule information */}
                          <div className="flex items-center gap-1 mb-3 text-xs">
                            <Clock className="h-3.5 w-3.5 text-gray-400" />
                            {banner.scheduled ? (
                              <span className="text-blue-600">
                                {banner.scheduleStartMinutes !== undefined && banner.scheduleEndMinutes !== undefined ? (
                                  <>
                                    {banner.isActive ? "Showing: " : "Scheduled: "}
                                    {formatTime(banner.scheduleStartMinutes)} - {formatTime(banner.scheduleEndMinutes % (24 * 60))}
                                    {banner.endsNextDay && <span className="ml-1 text-xs bg-blue-100 px-1 py-0.5 rounded">Next day</span>}
                                  </>
                                ) : (
                                  banner.isActive ? "Showing all day" : "Scheduled all day"
                                )}
                              </span>
                            ) : (
                              <span className="text-amber-600 font-medium">Not currently scheduled</span>
                            )}
                          </div>
                          
                          {/* Action buttons */}
                          <div className="flex gap-2">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1"
                              onClick={() => router.push(`/store/banner/${banner.id}/edit`)}
                            >
                              <Edit className="h-3.5 w-3.5 mr-1.5" />
                              Edit
                            </Button>
                            
                            <Button 
                              variant="outline"
                              size="sm"
                              className="flex-1"
                              onClick={() => handleScheduleBanner(banner.id)}
                            >
                              <Plus className="h-3.5 w-3.5 mr-1.5" />
                              Schedule
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                              onClick={() => handleDeleteBanner(banner.id)}
                            >
                              <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                              Delete
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          )}
        </TabsContent>

        <TabsContent value="schedule">
          <div className="space-y-8">
            {/* Activation Notice - More subtle styling */}
            <div className="bg-blue-50/50 border border-blue-100/70 rounded-lg p-3 flex items-start">
              <AlertCircle className="h-4 w-4 text-blue-400 mt-0.5 mr-2 flex-shrink-0" />
              <div>
                <h4 className="font-medium text-blue-600 text-sm mb-0.5">Banner Activation Notice</h4>
                <p className="text-xs text-blue-500">
                  Scheduled banners may take up to 5 minutes to activate and appear on the customer app.
                </p>
              </div>
            </div>
            
            {/* Banner Scheduler Component */}
            <BannerScheduler 
              banners={banners} 
              onBannerUpdate={handleBannerScheduleUpdate} 
            />
            
            {/* Banner Library Section - Sleeker design */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex justify-between items-center mb-5">
                <h3 className="text-lg font-medium flex items-center">
                  <Library className="h-5 w-5 mr-2 text-gray-500" />
                  Banner Library
                </h3>
                
                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search banners..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 max-w-xs"
                  />
                </div>
              </div>
              
              {loading ? (
                <div className="h-24 flex items-center justify-center">
                  <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent" />
                </div>
              ) : filteredBanners.length === 0 ? (
                <div className="h-24 flex flex-col items-center justify-center space-y-2">
                  <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                    <Bell className="h-6 w-6 text-muted-foreground" />
                  </div>
                  <h3 className="text-lg font-medium">No banners found</h3>
                  <p className="text-sm text-muted-foreground">
                    {searchQuery
                      ? "Try adjusting your search query"
                      : "Create your first banner to get started"}
                  </p>
                  <Button
                    variant="default"
                    className="mt-2 gap-2"
                    onClick={() => router.push("/store/banner/create")}
                  >
                    <Plus className="h-4 w-4" />
                    Create Banner
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredBanners.map((banner) => (
                    <div key={banner.id} className="flex flex-col bg-gray-50 rounded-lg overflow-hidden">
                      {/* Banner Preview with status badges */}
                      <div className="relative">
                        {/* Status Badge */}
                        <div className="absolute top-2 right-2 z-10">
                          <div className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full flex items-center">
                            <Clock className="h-3 w-3 mr-1" />
                            Scheduled
                          </div>
                        </div>
                        
                        {/* Banner preview */}
                        <div className="rounded-t-lg overflow-hidden shadow-sm">
                          <BannerPreview
                            title={banner.title}
                            description={banner.description}
                            buttonText={banner.buttonText}
                            color={banner.color ?? "#0ea5e9"}
                            styleType={
                              banner.style?.toLowerCase() === "light" ? BannerStyle.LIGHT :
                              banner.style?.toLowerCase() === "glass" ? BannerStyle.GLASS :
                              banner.style?.toLowerCase() === "dark" ? BannerStyle.DARK :
                              BannerStyle.LIGHT
                            }
                            merchantName={banner.merchantName ?? "My Store"}
                            visibilityType={BannerVisibility.ALL}
                            isActive={banner.isActive}
                          />
                        </div>
                      </div>
                      
                      {/* Content section - all in the same gray background */}
                      <div className="p-4">
                        {/* Banner title and description */}
                        <h4 className="font-medium text-sm mb-1">{banner.title}</h4>
                        <p className="text-xs text-gray-500 mb-3 line-clamp-2">{banner.description}</p>
                        
                        {/* Stats in a row format */}
                        <div className="flex flex-wrap gap-x-4 gap-y-2 mb-3">
                          <div className="flex items-center text-xs text-gray-600">
                            <BarChart className="h-3 w-3 mr-1 text-gray-400" />
                            <span className="font-medium">{banner.impressions || 0}</span>
                            <span className="text-gray-400 ml-1">views</span>
                          </div>
                          <div className="flex items-center text-xs text-gray-600">
                            <Users className="h-3 w-3 mr-1 text-gray-400" />
                            <span className="font-medium">{banner.impressioncustomercount || 0}</span>
                            <span className="text-gray-400 ml-1">customers</span>
                          </div>
                        </div>
                        
                        {/* Schedule information */}
                        <div className="flex items-center gap-1 mb-3 text-xs">
                          <Clock className="h-3.5 w-3.5 text-gray-400" />
                          {banner.scheduled ? (
                            <span className="text-blue-600">
                              {banner.scheduleStartMinutes !== undefined && banner.scheduleEndMinutes !== undefined ? (
                                <>
                                  {banner.isActive ? "Showing: " : "Scheduled: "}
                                  {formatTime(banner.scheduleStartMinutes)} - {formatTime(banner.scheduleEndMinutes % (24 * 60))}
                                  {banner.endsNextDay && <span className="ml-1 text-xs bg-blue-100 px-1 py-0.5 rounded">Next day</span>}
                                </>
                              ) : (
                                banner.isActive ? "Showing all day" : "Scheduled all day"
                              )}
                            </span>
                          ) : (
                            <span className="text-amber-600 font-medium">Not currently scheduled</span>
                          )}
                        </div>
                        
                        {/* Action button */}
                        {banner.scheduled ? (
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="text-red-600 hover:bg-red-50 border-red-200"
                            onClick={() => handleBannerScheduleUpdate(banner.id, {
                              scheduled: false
                            })}
                          >
                            <Clock className="h-3.5 w-3.5 mr-1.5" />
                            Remove from Schedule
                          </Button>
                        ) : (
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => handleScheduleBanner(banner.id)}
                          >
                            <Plus className="h-3.5 w-3.5 mr-1.5" />
                            Add to Schedule
                          </Button>
                        )}
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="flex-1 text-red-600 hover:bg-red-50 border-red-200"
                          onClick={() => handleDeleteBanner(banner.id)}
                        >
                          <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                          Delete
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </TabsContent>
      </Tabs>

      {/* Delete Confirmation Dialog */}
      <Dialog open={!!bannerToDelete} onOpenChange={() => setBannerToDelete(null)}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-xl">Delete Banner</DialogTitle>
            <DialogDescription className="text-red-500">
              Are you sure you want to delete this banner? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2 mt-5">
            <Button variant="outline" onClick={() => setBannerToDelete(null)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmDeleteBanner}>
              Delete
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
} 