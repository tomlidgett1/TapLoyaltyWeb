"use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/contexts/auth-context"
import { db } from "@/lib/firebase"
import { doc, getDoc, setDoc, serverTimestamp } from "firebase/firestore"
import { AgentConfig } from "@/types/agent-config"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { toast } from "@/components/ui/use-toast"
import { ScrollArea } from "@/components/ui/scroll-area"
import { BusinessBrandForm } from "./components/business-brand-form"
import { AgentTasksForm } from "./components/agent-tasks-form"
import { BusinessHoursForm } from "./components/business-hours-form"
import { ObjectivesForm } from "./components/objectives-form"
import { ProductPricingForm } from "./components/product-pricing-form"
import { FinancialGuardrailsForm } from "./components/financial-guardrails-form"
import { CustomerSegmentsForm } from "./components/customer-segments-form"
import { CustomerCohortsForm } from "./components/customer-cohorts-form"
import { RewardConstraintsForm } from "./components/reward-constraints-form"
import { MessagingConstraintsForm } from "./components/messaging-constraints-form"
import { EmailSetupForm } from "./components/email-setup-form"
import { CustomersList } from "./components/customers-view"
import { PageHeader } from "@/components/page-header"
import { 
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
  SheetClose
} from "@/components/ui/sheet"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { 
  Building2, 
  CheckCircle, 
  Clock, 
  Target, 
  TagsIcon, 
  LineChart, 
  Users, 
  UsersRound, 
  Gift, 
  MessageSquare,
  Maximize2,
  Minimize2,
  Mail,
  Bot,
  Award,
  Mic,
  BookOpen,
  PlusCircle,
  ArrowLeft,
  BookText,
  Store,
  Clock3,
  DollarSign,
  Goal,
  Layers,
  Check,
  X
} from "lucide-react"
import Link from "next/link"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"

// Define the structure for the business knowledge data
interface BusinessKnowledge {
  generalInfo: string;
  manualEntries: Array<{
    id: string;
    content: string;
    timestamp: number;
    source: 'manual' | 'voice';
  }>;
  lastUpdated: number;
}

// Default agent configuration
const defaultAgentConfig: AgentConfig = {
  businessBrand: {
    businessName: "",
    businessContext: "",
    primaryColor: "#007AFF",
    secondaryColor: "#FFFFFF",
    brandVoice: []
  },
  agentTasks: {
    rewardsGeneration: false,
    reEngagement: false,
    bannerCreation: false,
    emailMarketing: false,
    customerMessaging: false,
    performanceAnalysis: false
  },
  businessHours: {
    monday: { open: true, start: "09:00", end: "17:00" },
    tuesday: { open: true, start: "09:00", end: "17:00" },
    wednesday: { open: true, start: "09:00", end: "17:00" },
    thursday: { open: true, start: "09:00", end: "17:00" },
    friday: { open: true, start: "09:00", end: "17:00" },
    saturday: { open: true, start: "09:00", end: "17:00" },
    sunday: { open: false, start: "09:00", end: "17:00" }
  },
  objectives: {
    businessObjectives: [
      { id: "increase_revenue", label: "Increase overall revenue", priority: 10 }
    ],
    customerValuePriorities: {
      personalization: 5,
      valueForMoney: 5,
      convenience: 5,
      quality: 5,
      exclusivity: 5,
      novelty: 5
    },
    seasonalCampaigns: []
  },
  productPricing: {
    averageBasketSize: 0,
    products: [],
    heroProducts: [],
    lowVelocityProducts: []
  },
  financialGuardrails: {
    rewardBudgetType: "fixed",
    monthlyBudget: 1000,
    targetGrossMargin: 30,
    maxCostPerAcquisition: 25,
    minRewardValue: 5,
    maxRewardValue: 50
  },
  customerSegments: {
    loyaltyTiers: [
      {
        name: "Bronze",
        lifetimeTransactions: 0,
        lifetimeSpend: 0,
        redemptions: 0
      }
    ],
    visitSpendingThresholds: {
      frequentVisitor: { visits: 4, perDays: 30 },
      highSpender: { amount: 100, perDays: 30 }
    }
  },
  customerCohorts: {
    new: {
      firstVisitWithinDays: 30,
      maxLifetimeVisits: 2
    },
    active: {
      lastVisitWithinDays: 30
    },
    dormant: {
      lastVisitBetween: [30, 90]
    },
    churned: {
      lastVisitMoreThanDays: 180
    },
    resurrected: {
      wasDormantOrChurned: true,
      recentVisitWithinDays: 60
    }
  },
  rewardConstraints: {
    allowedTypes: {
      freeItem: true,
      percentageDiscount: true,
      fixedAmount: true,
      buyXGetY: true,
      mysteryGift: false
    },
    concurrencyCeiling: 4
  },
  messagingConstraints: {
    restrictedKeywords: []
  },
  emailSettings: {
    isConnected: false,
    connectedEmail: "",
    automaticResponses: false,
    analyzeEmailTone: false,
    emailTone: "professional",
    customTone: [],
    excludedEmails: [],
    notifyBeforeSend: true
  },
  businessKnowledge: {
    generalInfo: "",
    manualEntries: [],
    lastUpdated: Date.now()
  }
}

export default function AgentSetup() {
  const { user } = useAuth()
  const [agentConfig, setAgentConfig] = useState<AgentConfig>({
    ...defaultAgentConfig,
    // Ensure emailSettings is properly initialized
    emailSettings: {
      ...defaultAgentConfig.emailSettings
    },
    // Ensure businessKnowledge is properly initialized
    businessKnowledge: {
      ...defaultAgentConfig.businessKnowledge
    }
  })
  const [rewardActiveTab, setRewardActiveTab] = useState("brand")
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [mainTab, setMainTab] = useState("setup")
  const [isExpanded, setIsExpanded] = useState(false)
  const [agentType, setAgentType] = useState("reward")
  const [customerServiceSheetOpen, setCustomerServiceSheetOpen] = useState(false)
  const [showBusinessContext, setShowBusinessContext] = useState(false)
  const [businessInsights, setBusinessInsights] = useState<{
    businessName: string;
    businessHours: Record<string, any>;
    products: any[];
    objectives: string[];
    customerSegments: any[];
    brandVoice: string[];
  }>({
    businessName: "",
    businessHours: {},
    products: [],
    objectives: [],
    customerSegments: [],
    brandVoice: []
  })
  const [isRecording, setIsRecording] = useState(false)
  const [showManualInput, setShowManualInput] = useState(false)
  const [manualInput, setManualInput] = useState("")

  useEffect(() => {
    async function fetchAgentConfig() {
      if (!user?.uid) {
        setLoading(false)
        return
      }
      
      try {
        // Fetch agent config from the agents collection
        const agentDocRef = doc(db, 'agents', user.uid)
        const agentDoc = await getDoc(agentDocRef)
        
        // Also fetch business knowledge from the new collection path
        const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions')
        const instructionsDoc = await getDoc(instructionsDocRef)
        
        // Initialize with default business knowledge
        let businessKnowledgeData = {
          ...defaultAgentConfig.businessKnowledge
        }
        
        // If instructions document exists, use its business knowledge data
        if (instructionsDoc.exists()) {
          const instructionsData = instructionsDoc.data()
          if (instructionsData.businessKnowledge) {
            businessKnowledgeData = instructionsData.businessKnowledge
          }
        }
        
        if (agentDoc.exists()) {
          const data = agentDoc.data() as Partial<AgentConfig>
          
          // Create a merged config ensuring all properties exist
          const mergedConfig: AgentConfig = {
            ...defaultAgentConfig,
            ...data,
            // Explicitly handle nested objects that might be missing
            emailSettings: {
              ...defaultAgentConfig.emailSettings,
              ...(data.emailSettings || {})
            },
            businessBrand: {
              ...defaultAgentConfig.businessBrand,
              ...(data.businessBrand || {})
            },
            // Use business knowledge from the instructions document
            businessKnowledge: businessKnowledgeData,
            agentTasks: {
              ...defaultAgentConfig.agentTasks,
              ...(data.agentTasks || {})
            },
            businessHours: {
              ...defaultAgentConfig.businessHours,
              ...(data.businessHours || {})
            },
            objectives: {
              ...defaultAgentConfig.objectives,
              ...(data.objectives || {})
            },
            productPricing: {
              ...defaultAgentConfig.productPricing,
              ...(data.productPricing || {})
            },
            financialGuardrails: {
              ...defaultAgentConfig.financialGuardrails,
              ...(data.financialGuardrails || {})
            },
            customerSegments: {
              ...defaultAgentConfig.customerSegments,
              ...(data.customerSegments || {})
            },
            customerCohorts: {
              ...defaultAgentConfig.customerCohorts,
              ...(data.customerCohorts || {})
            },
            rewardConstraints: {
              ...defaultAgentConfig.rewardConstraints,
              ...(data.rewardConstraints || {})
            },
            messagingConstraints: {
              ...defaultAgentConfig.messagingConstraints,
              ...(data.messagingConstraints || {})
            }
          }
          
          setAgentConfig(mergedConfig)
        } else {
          // If no agent config exists, still use any business knowledge that might exist
          setAgentConfig(prev => ({
            ...prev,
            businessKnowledge: businessKnowledgeData
          }))
          console.log("No agent configuration found, using defaults")
        }
      } catch (error) {
        console.error("Error fetching agent configuration:", error)
        toast({
          title: "Error",
          description: "Failed to load your agent configuration.",
          variant: "destructive"
        })
      } finally {
        setLoading(false)
      }
    }
    
    fetchAgentConfig()
  }, [user])

  const saveAgentConfig = async (config?: AgentConfig) => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to save your agent configuration.",
        variant: "destructive",
      })
      return
    }

    setSaving(true)
    const configToSave = config || agentConfig

    try {
      // Extract business knowledge to save separately
      const { businessKnowledge, ...agentConfigWithoutBusinessKnowledge } = configToSave

      // Save agent config to agents collection
      await setDoc(doc(db, 'agents', user.uid), {
        ...agentConfigWithoutBusinessKnowledge,
        updatedAt: serverTimestamp(),
      }, { merge: true })

      // Save business knowledge to the new collection path
      await setDoc(doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions'), {
        businessKnowledge,
        updatedAt: serverTimestamp(),
      }, { merge: true })

      toast({
        title: "Success",
        description: "Your agent configuration has been saved.",
      })
    } catch (error) {
      console.error("Error saving agent configuration:", error)
      toast({
        title: "Error",
        description: "Failed to save your agent configuration.",
        variant: "destructive",
      })
    } finally {
      setSaving(false)
    }
  }

  const handleRewardTabChange = (tab: string) => {
    setRewardActiveTab(tab)
  }
  
  const handleMainTabChange = (tab: string) => {
    setMainTab(tab)
  }

  const handleAgentTypeChange = (type: string) => {
    setAgentType(type);
    
    // Extract business insights when switching to customer service tab
    if (type === "customer-service") {
      extractBusinessInsights();
    }
  }

  const updateSection = <K extends keyof AgentConfig>(
    section: K, 
    data: AgentConfig[K]
  ) => {
    setAgentConfig(prev => ({
      ...prev,
      [section]: data
    }))
  }

  const toggleExpand = () => {
    setIsExpanded(!isExpanded)
  }

  const addManualContextEntry = async (content: string) => {
    if (!content.trim()) return;
    
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "Your context was added but not saved to the server.",
        variant: "destructive"
      });
      return;
    }
    
    // Update local state
    const newEntry = {
      id: crypto.randomUUID(),
      content,
      timestamp: Date.now(),
      source: 'manual' as const
    };
    
    const updatedBusinessKnowledge = {
      ...agentConfig.businessKnowledge,
      manualEntries: [
        ...agentConfig.businessKnowledge.manualEntries,
        newEntry
      ],
      lastUpdated: Date.now()
    };
    
    // Update state first for immediate UI feedback
    updateSection('businessKnowledge', updatedBusinessKnowledge);
    
    // Save to Firestore in the new collection path
    try {
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        updatedAt: serverTimestamp()
      }, { merge: true });
      
      toast({
        title: "Success",
        description: "Your business context was added and saved.",
      });
    } catch (error) {
      console.error("Error saving business context:", error);
      toast({
        title: "Error",
        description: "Your context was added but could not be saved to the server.",
        variant: "destructive"
      });
    }
    
    setShowManualInput(false);
    setManualInput('');
  };
  
  const addVoiceContextEntry = async (content: string) => {
    if (!content.trim()) return;
    
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "Your voice input was added but not saved to the server.",
        variant: "destructive"
      });
      return;
    }
    
    // Update local state
    const newEntry = {
      id: crypto.randomUUID(),
      content,
      timestamp: Date.now(),
      source: 'voice' as const
    };
    
    const updatedBusinessKnowledge = {
      ...agentConfig.businessKnowledge,
      manualEntries: [
        ...agentConfig.businessKnowledge.manualEntries,
        newEntry
      ],
      lastUpdated: Date.now()
    };
    
    // Update state first for immediate UI feedback
    updateSection('businessKnowledge', updatedBusinessKnowledge);
    
    // Save to Firestore in the new collection path
    try {
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        updatedAt: serverTimestamp()
      }, { merge: true });
      
      toast({
        title: "Success",
        description: "Your voice input was added and saved.",
      });
    } catch (error) {
      console.error("Error saving voice input:", error);
      toast({
        title: "Error",
        description: "Your voice input was added but could not be saved to the server.",
        variant: "destructive"
      });
    }
  };

  // Function to extract business insights from agent config
  const extractBusinessInsights = () => {
    const insights = {
      businessName: agentConfig.businessBrand.businessName || "Your Business",
      businessHours: agentConfig.businessHours || {},
      products: agentConfig.productPricing.products || [],
      objectives: agentConfig.objectives.businessObjectives.map(obj => obj.label) || [],
      customerSegments: agentConfig.customerSegments.loyaltyTiers || [],
      brandVoice: agentConfig.businessBrand.brandVoice || []
    }
    
    setBusinessInsights(insights)
  }

  // Call extractBusinessInsights when agentConfig changes
  useEffect(() => {
    if (!loading) {
      extractBusinessInsights();
    }
  }, [agentConfig.businessBrand, agentConfig.businessHours, agentConfig.productPricing, agentConfig.objectives, agentConfig.customerSegments, loading]);

  // Handle simulated voice recording for demo
  const handleVoiceRecord = () => {
    if (isRecording) {
      // Stop "recording"
      setIsRecording(false);
      // Simulate a transcription result
      const transcriptions = [
        "We offer 30-day returns on all products purchased online or in-store with a valid receipt.",
        "Our business hours are Monday to Friday from 9 AM to 6 PM, and Saturday from 10 AM to 4 PM. We're closed on Sundays.",
        "Our customer service team can be reached at support@example.com or by phone at (555) 123-4567.",
        "We offer free shipping on all orders over $75 within Australia. International shipping rates vary by location.",
        "All our products come with a 12-month manufacturer warranty that covers defects in materials and workmanship.",
      ];
      const randomTranscription = transcriptions[Math.floor(Math.random() * transcriptions.length)];
      
      // Small delay to simulate processing
      setTimeout(() => {
        addVoiceContextEntry(randomTranscription);
      }, 1000);
      
      toast({
        title: "Voice processed",
        description: "Your voice input has been transcribed and is being added.",
      });
    } else {
      // Start "recording"
      setIsRecording(true);
      
      // Simulate automatic stop after 5 seconds
      setTimeout(() => {
        if (isRecording) {
          handleVoiceRecord();
        }
      }, 5000);
      
      toast({
        title: "Recording started",
        description: "Recording your voice input (simulated)...",
      });
    }
  };

  // Reset agent config to default values
  const resetToDefault = async () => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to reset your agent configuration.",
        variant: "destructive",
      })
      return
    }

    try {
      // Update email settings in the main agent config
      const emailResetConfig = {
        ...agentConfig,
        emailSettings: { ...defaultAgentConfig.emailSettings },
      }
      setAgentConfig(emailResetConfig)

      // Reset business knowledge separately
      const resetBusinessKnowledge = { ...defaultAgentConfig.businessKnowledge }
      updateSection('businessKnowledge', resetBusinessKnowledge)

      // Save the email settings to the agents collection
      await setDoc(doc(db, 'agents', user.uid), {
        emailSettings: { ...defaultAgentConfig.emailSettings },
        updatedAt: serverTimestamp(),
      }, { merge: true })

      // Reset the business knowledge in the instructions collection
      await setDoc(doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions'), {
        businessKnowledge: resetBusinessKnowledge,
        updatedAt: serverTimestamp(),
      }, { merge: true })

      toast({
        title: "Reset complete",
        description: "Your agent configuration has been reset to default values.",
      })
    } catch (error) {
      console.error("Error resetting configuration:", error)
      toast({
        title: "Error",
        description: "Failed to reset your agent configuration.",
        variant: "destructive",
      })
    }
  }

  const deleteContextEntry = async (id: string) => {
    if (!user?.uid) {
      toast({
        title: "Not logged in",
        description: "You must be logged in to delete a context entry.",
        variant: "destructive"
      });
      return;
    }

    try {
      // Update local state
      const updatedBusinessKnowledge = {
        ...agentConfig.businessKnowledge,
        manualEntries: agentConfig.businessKnowledge.manualEntries.filter((entry) => entry.id !== id)
      };
      updateSection('businessKnowledge', updatedBusinessKnowledge);

      // Save to Firestore
      const instructionsDocRef = doc(db, 'merchants', user.uid, 'customer-service-agent', 'instructions');
      await setDoc(instructionsDocRef, {
        businessKnowledge: updatedBusinessKnowledge,
        updatedAt: serverTimestamp()
      }, { merge: true });

      toast({
        title: "Success",
        description: "The context entry has been deleted.",
      });
    } catch (error) {
      console.error("Error deleting context entry:", error);
      toast({
        title: "Error",
        description: "Failed to delete the context entry.",
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0D6EFD]"></div>
      </div>
    )
  }

  // Render the business context page
  const renderBusinessContextPage = () => {
    return (
      <>
        <div className="flex items-center mb-6">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => setShowBusinessContext(false)}
            className="gap-1 mr-2 p-2"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h2 className="text-xl font-medium">Business Knowledge Base</h2>
            <p className="text-sm text-muted-foreground">
              Information the agent will use when responding to customer inquiries
            </p>
          </div>
        </div>
        
        <div className="space-y-6 mb-6">
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium">Business Context</h3>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleVoiceRecord}
                  className={`gap-2 rounded-md ${isRecording ? 'bg-red-50 text-red-600 border-red-200' : ''}`}
                >
                  <Mic className={`h-4 w-4 ${isRecording ? 'text-red-600 animate-pulse' : ''}`} />
                  {isRecording ? 'Recording...' : 'Add voice input'}
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setShowManualInput(!showManualInput)}
                  className="gap-2 rounded-md"
                >
                  <PlusCircle className="h-4 w-4" />
                  Add manual context
                </Button>
              </div>
            </div>
            
            {showManualInput && (
              <div className="mb-6 border p-4 rounded-md bg-gray-50 space-y-3">
                <Textarea
                  placeholder="Describe your business, products, services, policies, or any other relevant information..."
                  value={manualInput}
                  onChange={(e) => setManualInput(e.target.value)}
                  className="min-h-[100px] rounded-md"
                />
                <div className="flex justify-end gap-2">
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      setManualInput("");
                      setShowManualInput(false);
                    }}
                    className="rounded-md"
                  >
                    Cancel
                  </Button>
                  <Button 
                    size="sm"
                    onClick={() => addManualContextEntry(manualInput)}
                    disabled={!manualInput.trim()}
                    className="rounded-md"
                  >
                    Save Context
                  </Button>
                </div>
              </div>
            )}
          </div>
          
          <Card className="border shadow-sm rounded-md">
            <CardHeader className="pb-2">
              <CardTitle className="text-md flex items-center gap-2">
                <Store className="h-4 w-4 text-blue-600" />
                Business Information
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-sm space-y-4">
                <div>
                  <Label htmlFor="businessName">Business Name</Label>
                  <Input 
                    id="businessName"
                    value={agentConfig.businessBrand.businessName}
                    onChange={(e) => updateSection("businessBrand", {
                      ...agentConfig.businessBrand,
                      businessName: e.target.value
                    })}
                    className="mt-1 rounded-md"
                    placeholder="Enter your business name"
                  />
                </div>
                
                <div>
                  <Label htmlFor="businessContext">Business Description</Label>
                  <Textarea
                    id="businessContext"
                    value={agentConfig.businessBrand.businessContext}
                    onChange={(e) => updateSection("businessBrand", {
                      ...agentConfig.businessBrand,
                      businessContext: e.target.value
                    })}
                    className="mt-1 min-h-[100px] rounded-md"
                    placeholder="Describe what your business does, your products/services, and your value proposition"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="border shadow-sm rounded-md">
              <CardHeader className="pb-2">
                <CardTitle className="text-md flex items-center gap-2">
                  <Clock3 className="h-4 w-4 text-blue-600" />
                  Business Hours
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-sm space-y-3">
                  {Object.entries(agentConfig.businessHours).map(([day, hours]: [string, any]) => (
                    <div key={day} className="flex items-center gap-3">
                      <div className="w-24">
                        <span className="capitalize">{day}</span>
                      </div>
                      <Switch
                        checked={hours.open}
                        onCheckedChange={(checked) => {
                          const updatedHours = {
                            ...agentConfig.businessHours,
                            [day]: {
                              ...hours,
                              open: checked
                            }
                          };
                          updateSection("businessHours", updatedHours);
                        }}
                      />
                      {hours.open && (
                        <div className="flex-1 flex items-center gap-2">
                          <Input
                            type="time"
                            value={hours.start}
                            onChange={(e) => {
                              const updatedHours = {
                                ...agentConfig.businessHours,
                                [day]: {
                                  ...hours,
                                  start: e.target.value
                                }
                              };
                              updateSection("businessHours", updatedHours);
                            }}
                            className="w-28 rounded-md"
                          />
                          <span>to</span>
                          <Input
                            type="time"
                            value={hours.end}
                            onChange={(e) => {
                              const updatedHours = {
                                ...agentConfig.businessHours,
                                [day]: {
                                  ...hours,
                                  end: e.target.value
                                }
                              };
                              updateSection("businessHours", updatedHours);
                            }}
                            className="w-28 rounded-md"
                          />
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
            
            <Card className="border shadow-sm rounded-md">
              <CardHeader className="pb-2">
                <CardTitle className="text-md flex items-center gap-2">
                  <Layers className="h-4 w-4 text-blue-600" />
                  Brand Voice
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-sm">
                  <Label htmlFor="emailTone" className="mb-2 block">Communication Style</Label>
                  <Select 
                    value={agentConfig.emailSettings.emailTone}
                    onValueChange={(value) => {
                      updateSection("emailSettings", {
                        ...agentConfig.emailSettings,
                        emailTone: value
                      })
                    }}
                  >
                    <SelectTrigger id="emailTone" className="rounded-md">
                      <SelectValue placeholder="Select a tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="friendly">Friendly</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="formal">Formal</SelectItem>
                      <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                      <SelectItem value="empathetic">Empathetic</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <div className="mt-4">
                    <div className="flex flex-wrap gap-1">
                      {businessInsights.brandVoice.map((trait, index) => (
                        <Badge key={index} variant="outline" className="bg-gray-50 rounded-md">
                          {trait}
                        </Badge>
                      ))}
                    </div>
                    {businessInsights.brandVoice.length === 0 && (
                      <p className="text-muted-foreground mt-1">Adjust your brand voice in the Business Brand tab.</p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Display manual and voice entries at the bottom */}
          <Card className="border shadow-sm rounded-md mt-8">
            <CardHeader className="pb-2">
              <CardTitle className="text-md flex items-center gap-2">
                <BookText className="h-4 w-4 text-blue-600" />
                Additional Business Context
              </CardTitle>
              <CardDescription>
                Additional context information that will be used by the customer service agent
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0">
              {agentConfig.businessKnowledge?.manualEntries && 
               agentConfig.businessKnowledge.manualEntries.length > 0 ? (
                <div className="space-y-4">
                  {agentConfig.businessKnowledge.manualEntries.map((entry) => (
                    <div key={entry.id} className="p-3 bg-gray-50 rounded-md">
                      <div className="flex items-center justify-between mb-2">
                        <Badge variant={entry.source === 'voice' ? 'secondary' : 'outline'} className="rounded-md">
                          {entry.source === 'voice' ? 'Voice Input' : 'Manual Entry'}
                        </Badge>
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-muted-foreground">
                            {new Date(entry.timestamp).toLocaleString()}
                          </span>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => deleteContextEntry(entry.id)}
                            className="h-6 w-6 rounded-md hover:bg-red-50 hover:text-red-600"
                            title="Delete entry"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      <p className="text-sm">{entry.content}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6 text-muted-foreground">
                  <BookText className="h-12 w-12 mx-auto mb-2 opacity-20" />
                  <p>No business context entries yet.</p>
                  <p className="text-sm">Add context using the buttons above.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </>
    )
  }

  return (
    <div className={`transition-all duration-300 ease-in-out ${isExpanded ? 'fixed inset-0 z-50 bg-white overflow-auto' : 'w-full bg-white'}`}>
      <div className="p-6 py-4">
        <PageHeader
          title={<><span className="bg-gradient-to-r from-[#0D6EFD] to-[#FF8C00] bg-clip-text text-transparent">Tap Agent</span> Setup</>}
          subtitle="Configure your Tap Agent to automate marketing, rewards, and customer engagement."
        >
          <div className="flex items-center gap-2">
            <Tabs 
              defaultValue="setup" 
              value={mainTab} 
              onValueChange={handleMainTabChange} 
              className="mr-2"
            >
              <TabsList className="h-9 bg-gray-100 border border-gray-200 rounded-md p-0.5">
                <TabsTrigger 
                  value="setup" 
                  className="px-3 text-sm data-[state=active]:bg-white data-[state=active]:text-blue-600 data-[state=active]:shadow-sm text-gray-600 transition-all duration-150 ease-in-out rounded-sm"
                >
                  Setup
                </TabsTrigger>
                <TabsTrigger 
                  value="customers" 
                  className="px-3 text-sm data-[state=active]:bg-white data-[state=active]:text-blue-600 data-[state=active]:shadow-sm text-gray-600 transition-all duration-150 ease-in-out rounded-sm"
                >
                  Customers
                </TabsTrigger>
              </TabsList>
            </Tabs>
            <Button 
              variant="outline" 
              size="sm" 
              asChild 
              className="h-9 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md"
            >
              <Link href="/tap-agent/intro">Learn More</Link>
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={toggleExpand}
              className="h-9 gap-2 border-0 ring-1 ring-gray-200 bg-white text-gray-700 shadow-sm rounded-md flex items-center"
            >
              {isExpanded ? (
                <>
                  <Minimize2 className="h-4 w-4" />
                  <span>Minimize</span>
                </>
              ) : (
                <>
                  <Maximize2 className="h-4 w-4" />
                  <span>Expand</span>
                </>
              )}
            </Button>
          </div>
        </PageHeader>
        
        <Tabs defaultValue="setup" value={mainTab} onValueChange={handleMainTabChange} className="w-full">
          <TabsContent value="setup">
            {!isExpanded && (
              <p className="text-sm text-gray-500 mb-2">
                Complete each section to customize how your Tap Agent works for your business.
              </p>
            )}
            
            {/* Agent Type Selection - Redesigned */}
            <div className="w-full mb-6">
              <div className="border-b border-gray-200 mb-6">
                <div className="flex space-x-8">
                  <button
                    onClick={() => handleAgentTypeChange("reward")}
                    className={`flex items-center pb-4 px-1 relative ${
                      agentType === "reward"
                        ? "text-blue-600 font-medium"
                        : "text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    <Award className={`h-5 w-5 mr-2 ${agentType === "reward" ? "text-blue-600" : "text-gray-400"}`} />
                    <span>Reward Agent</span>
                    {agentType === "reward" && (
                      <span className="absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600 rounded-full"></span>
                    )}
                  </button>
                  <button
                    onClick={() => handleAgentTypeChange("customer-service")}
                    className={`flex items-center pb-4 px-1 relative ${
                      agentType === "customer-service"
                        ? "text-blue-600 font-medium"
                        : "text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    <Bot className={`h-5 w-5 mr-2 ${agentType === "customer-service" ? "text-blue-600" : "text-gray-400"}`} />
                    <span>Customer Service Agent</span>
                    {agentType === "customer-service" && (
                      <span className="absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600 rounded-full"></span>
                    )}
                  </button>
                </div>
              </div>
              
              {agentType === "reward" && (
                <div className="w-full bg-white rounded-md border border-[#E2E4E8] p-5">
                  {/* Reward Agent Sub-Tabs - Redesigned */}
                  <div className={`mb-6 ${isExpanded ? 'sticky top-16 z-10' : ''}`}>
                    <div className="flex items-center mb-4">
                      <h2 className="text-lg font-medium">Reward Agent Configuration</h2>
                      <div className="ml-auto">
                        <Select
                          value={rewardActiveTab}
                          onValueChange={handleRewardTabChange}
                        >
                          <SelectTrigger className="w-[180px] bg-white border border-gray-200 rounded-md">
                            <SelectValue placeholder="Select section" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="brand">Business Brand</SelectItem>
                            <SelectItem value="tasks">Agent Tasks</SelectItem>
                            <SelectItem value="hours">Business Hours</SelectItem>
                            <SelectItem value="objectives">Objectives</SelectItem>
                            <SelectItem value="pricing">Pricing</SelectItem>
                            <SelectItem value="financials">Financials</SelectItem>
                            <SelectItem value="cohorts">Cohorts</SelectItem>
                            <SelectItem value="rewards">Rewards</SelectItem>
                            <SelectItem value="messaging">Messages</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="overflow-x-auto pb-2">
                      <div className="inline-flex bg-gray-50 p-1 rounded-md border border-gray-200 min-w-full">
                        <button
                          onClick={() => handleRewardTabChange("brand")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "brand"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <Building2 className="h-4 w-4 mr-2" />
                          Business Brand
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("tasks")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "tasks"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <CheckCircle className="h-4 w-4 mr-2" />
                          Agent Tasks
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("hours")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "hours"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <Clock className="h-4 w-4 mr-2" />
                          Hours
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("objectives")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "objectives"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <Target className="h-4 w-4 mr-2" />
                          Objectives
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("pricing")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "pricing"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <TagsIcon className="h-4 w-4 mr-2" />
                          Pricing
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("financials")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "financials"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <LineChart className="h-4 w-4 mr-2" />
                          Financials
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("cohorts")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "cohorts"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <UsersRound className="h-4 w-4 mr-2" />
                          Cohorts
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("rewards")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "rewards"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <Gift className="h-4 w-4 mr-2" />
                          Rewards
                        </button>
                        <button
                          onClick={() => handleRewardTabChange("messaging")}
                          className={`flex items-center px-3 py-2 text-sm rounded-md transition-all ${
                            rewardActiveTab === "messaging"
                              ? "bg-white text-blue-600 shadow-sm font-medium"
                              : "text-gray-600 hover:bg-gray-100"
                          }`}
                        >
                          <MessageSquare className="h-4 w-4 mr-2" />
                          Messages
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <ScrollArea className={`${isExpanded ? 'max-h-[calc(100vh-350px)]' : 'max-h-[600px]'} scrollable`}>
                    <div className={`${isExpanded ? 'px-0' : 'pr-2'}`}>
                      {rewardActiveTab === "brand" && (
                        <BusinessBrandForm 
                          data={agentConfig.businessBrand} 
                          onChange={(data) => updateSection("businessBrand", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "tasks" && (
                        <AgentTasksForm 
                          data={agentConfig.agentTasks} 
                          onChange={(data) => updateSection("agentTasks", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "hours" && (
                        <BusinessHoursForm 
                          data={agentConfig.businessHours} 
                          onChange={(data) => updateSection("businessHours", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "objectives" && (
                        <ObjectivesForm 
                          data={agentConfig.objectives} 
                          onChange={(data) => updateSection("objectives", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "pricing" && (
                        <ProductPricingForm 
                          data={agentConfig.productPricing} 
                          onChange={(data) => updateSection("productPricing", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "financials" && (
                        <FinancialGuardrailsForm 
                          data={agentConfig.financialGuardrails} 
                          onChange={(data) => updateSection("financialGuardrails", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "cohorts" && (
                        <CustomerCohortsForm 
                          data={agentConfig.customerCohorts} 
                          onChange={(data) => updateSection("customerCohorts", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "rewards" && (
                        <RewardConstraintsForm 
                          data={agentConfig.rewardConstraints} 
                          onChange={(data) => updateSection("rewardConstraints", data)} 
                        />
                      )}
                      
                      {rewardActiveTab === "messaging" && (
                        <MessagingConstraintsForm 
                          data={agentConfig.messagingConstraints} 
                          onChange={(data) => updateSection("messagingConstraints", data)} 
                        />
                      )}
                    </div>
                  </ScrollArea>
                  
                  <div className="flex justify-between mt-6 pt-4 border-t border-[#E2E4E8]">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => {
                        // Reset section to default
                        const sectionKey = rewardActiveTab === "brand" ? "businessBrand" :
                                        rewardActiveTab === "tasks" ? "agentTasks" :
                                        rewardActiveTab === "hours" ? "businessHours" :
                                        rewardActiveTab === "objectives" ? "objectives" :
                                        rewardActiveTab === "pricing" ? "productPricing" :
                                        rewardActiveTab === "financials" ? "financialGuardrails" :
                                        rewardActiveTab === "cohorts" ? "customerCohorts" :
                                        rewardActiveTab === "rewards" ? "rewardConstraints" :
                                        "messagingConstraints";
                      
                        setAgentConfig(prev => ({
                          ...prev,
                          [sectionKey]: defaultAgentConfig[sectionKey as keyof AgentConfig]
                        }));
                      
                        toast({
                          title: "Reset",
                          description: "This section has been reset to default values.",
                        })
                      }}
                      className="h-9 gap-2 border-0 ring-1 ring-gray-200 text-gray-700 hover:bg-gray-50 shadow-sm rounded-md"
                    >
                      Reset Section
                    </Button>
                    
                    <Button 
                      onClick={() => saveAgentConfig()}
                      disabled={saving}
                      size="sm"
                      className="max-w-full border-input rounded-md"
                    >
                      <Check className="mr-1 h-4 w-4" />
                      <span>{saving ? "Saving..." : "Save"}</span>
                    </Button>
                  </div>
                </div>
              )}
              
              {agentType === "customer-service" && (
                <div className="flex flex-col gap-3">
                  <div className="w-full bg-white rounded-md border border-[#E2E4E8] p-8">
                    {agentConfig.businessKnowledge.manualEntries.length > 0 || 
                     agentConfig.businessBrand.businessName || 
                     agentConfig.businessBrand.businessContext ? (
                      <div className="max-w-4xl mx-auto">
                        <div className="flex items-center mb-6">
                          <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                            <Bot className="h-6 w-6 text-blue-600" />
                          </div>
                          <div>
                            <h2 className="text-xl font-medium">Customer Service Agent</h2>
                            <p className="text-sm text-muted-foreground">
                              Your AI assistant is configured to help customers based on your business information
                            </p>
                          </div>
                          <Button 
                            onClick={() => {
                              extractBusinessInsights();
                              setCustomerServiceSheetOpen(true);
                            }}
                            size="sm"
                            variant="outline"
                            className="ml-auto rounded-md"
                          >
                            Edit Settings
                          </Button>
                        </div>
                        
                        <div className="space-y-6">
                          {/* Business Information Summary */}
                          <div className="bg-blue-50 p-4 rounded-md">
                            <h3 className="font-medium mb-2 flex items-center">
                              <Store className="h-4 w-4 text-blue-600 mr-2" />
                              Business Information
                            </h3>
                            {agentConfig.businessBrand.businessName && (
                              <p className="text-sm font-medium mb-1">{agentConfig.businessBrand.businessName}</p>
                            )}
                            {agentConfig.businessBrand.businessContext ? (
                              <p className="text-sm text-muted-foreground">
                                {agentConfig.businessBrand.businessContext}
                              </p>
                            ) : (
                              <p className="text-sm text-muted-foreground italic">
                                No business description provided
                              </p>
                            )}
                          </div>
                          
                          {/* Hours, Tone, Settings */}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            {/* Business Hours */}
                            <div className="border p-4 rounded-md bg-gray-50">
                              <h3 className="font-medium mb-2 flex items-center">
                                <Clock3 className="h-4 w-4 text-blue-600 mr-2" />
                                Business Hours
                              </h3>
                              <ul className="text-sm space-y-1">
                                {Object.entries(agentConfig.businessHours)
                                  .filter(([_, hours]) => hours.open)
                                  .map(([day, hours]) => (
                                    <li key={day} className="flex justify-between">
                                      <span className="capitalize">{day}:</span>
                                      <span>{hours.start} - {hours.end}</span>
                                    </li>
                                  ))}
                              </ul>
                              {Object.values(agentConfig.businessHours).every(h => !h.open) && (
                                <p className="text-sm text-muted-foreground italic">No business hours set</p>
                              )}
                            </div>
                            
                            {/* Tone */}
                            <div className="border p-4 rounded-md bg-gray-50">
                              <h3 className="font-medium mb-2 flex items-center">
                                <Layers className="h-4 w-4 text-blue-600 mr-2" />
                                Communication Style
                              </h3>
                              <div className="text-sm">
                                <Badge className="rounded-md">
                                  {agentConfig.emailSettings.emailTone.charAt(0).toUpperCase() + 
                                   agentConfig.emailSettings.emailTone.slice(1)}
                                </Badge>
                                {businessInsights.brandVoice.length > 0 && (
                                  <div className="mt-2">
                                    <p className="text-xs mb-1">Brand Voice:</p>
                                    <div className="flex flex-wrap gap-1">
                                      {businessInsights.brandVoice.map((trait, index) => (
                                        <Badge key={index} variant="outline" className="text-xs bg-white rounded-md">
                                          {trait}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                            
                            {/* Agent Settings */}
                            <div className="border p-4 rounded-md bg-gray-50">
                              <h3 className="font-medium mb-2 flex items-center">
                                <Bot className="h-4 w-4 text-blue-600 mr-2" />
                                Agent Settings
                              </h3>
                              <div className="text-sm space-y-2">
                                <div className="flex items-center gap-2">
                                  <div className={`h-2 w-2 rounded-full ${agentConfig.emailSettings.automaticResponses ? 'bg-green-500' : 'bg-gray-300'}`} />
                                  <span>Automatic responses: {agentConfig.emailSettings.automaticResponses ? 'Enabled' : 'Disabled'}</span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <div className={`h-2 w-2 rounded-full ${agentConfig.emailSettings.notifyBeforeSend ? 'bg-green-500' : 'bg-gray-300'}`} />
                                  <span>Human review: {agentConfig.emailSettings.notifyBeforeSend ? 'Required' : 'Not required'}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          {/* Business Context Entries */}
                          {agentConfig.businessKnowledge.manualEntries.length > 0 && (
                            <div>
                              <h3 className="font-medium mb-3 flex items-center">
                                <BookText className="h-4 w-4 text-blue-600 mr-2" />
                                Additional Business Context ({agentConfig.businessKnowledge.manualEntries.length})
                              </h3>
                              <div className="max-h-60 overflow-y-auto rounded-md border p-1">
                                <div className="space-y-2 p-2">
                                  {agentConfig.businessKnowledge.manualEntries.map((entry) => (
                                    <div key={entry.id} className="p-3 bg-gray-50 rounded-md text-sm">
                                      <div className="flex items-center justify-between mb-1">
                                        <Badge variant={entry.source === 'voice' ? 'secondary' : 'outline'} className="text-xs rounded-md">
                                          {entry.source === 'voice' ? 'Voice' : 'Manual'}
                                        </Badge>
                                        <span className="text-xs text-muted-foreground">
                                          {new Date(entry.timestamp).toLocaleDateString()}
                                        </span>
                                      </div>
                                      <p className="text-sm">{entry.content}</p>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="max-w-2xl mx-auto text-center">
                        <div className="h-16 w-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
                          <Bot className="h-8 w-8 text-blue-600" />
                        </div>
                        <h2 className="text-2xl font-medium mb-3">Customer Service Agent</h2>
                        <p className="text-gray-600 mb-8">
                          The Customer Service Agent automatically responds to customer emails, handles common inquiries, 
                          and provides timely assistance based on your business rules and preferences.
                        </p>
                        <Button 
                          onClick={() => {
                            // Navigate to detailed setup or open a modal
                            setCustomerServiceSheetOpen(true)
                          }}
                          size="lg"
                          className="bg-[#0D6EFD] hover:bg-[#0B5ED7] text-white gap-2 rounded-md"
                        >
                          <Bot className="h-4 w-4" />
                          Set up customer agent
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="customers">
              <CustomersList />
            </TabsContent>
          </TabsContent>
        </Tabs>
      </div>
      {customerServiceSheetOpen && (
        <Sheet open={customerServiceSheetOpen} onOpenChange={setCustomerServiceSheetOpen}>
          <SheetContent side="right" className="w-full sm:max-w-md md:max-w-lg lg:max-w-xl p-0 flex flex-col rounded-md">
            <div className="flex-1 overflow-y-auto">
              <div className="p-6">
                {!showBusinessContext ? (
                  <>
                    <SheetHeader className="mb-6">
                      <SheetTitle className="text-xl">Customer Service Agent Setup</SheetTitle>
                      <SheetDescription>
                        Configure your AI-powered customer service agent to handle common inquiries.
                      </SheetDescription>
                    </SheetHeader>
                    
                    <div className="space-y-6">
                      <div className="bg-blue-50 p-4 rounded-md">
                        <div className="flex items-center gap-3 mb-2">
                          <div className="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                            <BookText className="h-5 w-5 text-blue-600" />
                          </div>
                          <h3 className="font-medium">Business Knowledge</h3>
                        </div>
                        <p className="text-sm text-muted-foreground mb-4">
                          Add information about your business that the agent will use when responding to customer inquiries.
                        </p>
                        <Button 
                          onClick={() => {
                            extractBusinessInsights();
                            setShowBusinessContext(true);
                          }}
                          className="w-full gap-2 rounded-md"
                        >
                          <BookOpen className="h-4 w-4" />
                          View & Edit Business Context
                        </Button>
                      </div>

                      <div className="bg-blue-50 p-4 rounded-md">
                        <div className="flex items-center gap-3 mb-2">
                          <div className="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                            <LineChart className="h-5 w-5 text-blue-600" />
                          </div>
                          <h3 className="font-medium">Inquiry Analysis</h3>
                        </div>
                        <p className="text-sm text-muted-foreground mb-4">
                          Analyse customer inquiries to identify common patterns and improve automated responses.
                        </p>
                        <Button 
                          onClick={() => {
                            toast({
                              title: "Analysis Started",
                              description: "Analysing customer inquiries. This may take a few minutes.",
                            })
                          }}
                          className="w-full gap-2 rounded-md"
                        >
                          <LineChart className="h-4 w-4" />
                          Analyse customer inquiries
                        </Button>
                      </div>

                      <div className="space-y-4">
                        <h3 className="font-medium">Agent Configuration</h3>
                        <p className="text-sm text-muted-foreground">
                          Configure how your customer service agent responds to inquiries.
                        </p>
                        
                        <div className="space-y-4 border p-4 rounded-md">
                          <div className="flex items-center space-x-2">
                            <Switch 
                              id="enableAgent" 
                              checked={agentConfig.emailSettings.automaticResponses}
                              onCheckedChange={(checked) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  automaticResponses: checked
                                })
                              }}
                            />
                            <Label htmlFor="enableAgent">Enable customer service agent</Label>
                          </div>
                          
                          <div className="flex items-center space-x-2">
                            <Switch 
                              id="humanReview" 
                              checked={agentConfig.emailSettings.notifyBeforeSend}
                              onCheckedChange={(checked) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  notifyBeforeSend: checked
                                })
                              }}
                            />
                            <Label htmlFor="humanReview">Require human review for complex inquiries</Label>
                          </div>
                          
                          <div>
                            <Label htmlFor="agentTone" className="mb-2 block">Agent Communication Style</Label>
                            <Select 
                              value={agentConfig.emailSettings.emailTone}
                              onValueChange={(value) => {
                                updateSection("emailSettings", {
                                  ...agentConfig.emailSettings,
                                  emailTone: value
                                })
                              }}
                            >
                              <SelectTrigger id="agentTone" className="rounded-md">
                                <SelectValue placeholder="Select a tone" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="professional">Professional</SelectItem>
                                <SelectItem value="friendly">Friendly</SelectItem>
                                <SelectItem value="casual">Casual</SelectItem>
                                <SelectItem value="formal">Formal</SelectItem>
                                <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                                <SelectItem value="empathetic">Empathetic</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-muted p-4 rounded-md text-sm space-y-2">
                        <p className="font-medium">About the Customer Service Agent</p>
                        <p className="text-muted-foreground">
                          The Customer Service Agent uses AI to automatically respond to customer inquiries based on your business information and preferences. When "Require human review" is enabled, you'll have a chance to review responses before they're sent.
                        </p>
                      </div>
                    </div>
                  </>
                ) : (
                  renderBusinessContextPage()
                )}
              </div>
            </div>
            
            <div className="border-t border-[#E2E4E8] bg-white p-4">
              <div className="flex justify-between items-center">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => {
                    if (showBusinessContext) {
                      setShowBusinessContext(false);
                    } else {
                      // Use the resetToDefault function
                      resetToDefault();
                    }
                  }}
                  className="h-9 gap-2 border-0 ring-1 ring-gray-200 text-gray-700 hover:bg-gray-50 shadow-sm rounded-md"
                >
                  {showBusinessContext ? "Back to Setup" : "Reset Settings"}
                </Button>
                
                <Button 
                  onClick={() => {
                    if (showBusinessContext) {
                      // Save business context information
                      saveAgentConfig();
                      setShowBusinessContext(false);
                    } else {
                      saveAgentConfig();
                      setCustomerServiceSheetOpen(false);
                    }
                  }}
                  disabled={saving}
                  size="sm"
                  className="h-9 bg-[#0D6EFD] hover:bg-[#0B5ED7] text-white shadow-sm rounded-md"
                >
                  {showBusinessContext ? "Save & Done" : (saving ? "Saving..." : "Save Configuration")}
                </Button>
              </div>
            </div>
          </SheetContent>
        </Sheet>
      )}
    </div>
  )
} 